
dumpSensor_103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0800bad8  0800bad8  0001bad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be78  0800be78  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800be78  0800be78  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be78  0800be78  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be78  0800be78  0001be78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be7c  0800be7c  0001be7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800be80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d0  200000ec  0800bf6c  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  0800bf6c  000208bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017562  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce0  00000000  00000000  00037677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0003b358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  0003c908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fc8  00000000  00000000  0003dd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001799b  00000000  00000000  00057ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094b48  00000000  00000000  0006f683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001041cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d64  00000000  00000000  00104220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000ec 	.word	0x200000ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800babc 	.word	0x0800babc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f0 	.word	0x200000f0
 800014c:	0800babc 	.word	0x0800babc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <ch4Sensor_init>:




void ch4Sensor_init(ADC_HandleTypeDef *hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	//ADC
	ch4Hadc = hadc;
 80010b8:	4a08      	ldr	r2, [pc, #32]	; (80010dc <ch4Sensor_init+0x2c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&ch4Sensor_state, __ch4Sensor_idle);
 80010be:	2100      	movs	r1, #0
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <ch4Sensor_init+0x30>)
 80010c2:	f000 ff35 	bl	8001f30 <fsmManager_init>

	//Flags
	flags_ch4Sensor.dword = 0;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <ch4Sensor_init+0x34>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
	flags_ch4SensorError.dword = 0;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <ch4Sensor_init+0x38>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000108 	.word	0x20000108
 80010e0:	20000124 	.word	0x20000124
 80010e4:	20000130 	.word	0x20000130
 80010e8:	20000134 	.word	0x20000134
 80010ec:	00000000 	.word	0x00000000

080010f0 <ch4Sensor_handler>:

void ch4Sensor_handler(void)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&ch4Sensor_state)) {
 80010f4:	488a      	ldr	r0, [pc, #552]	; (8001320 <ch4Sensor_handler+0x230>)
 80010f6:	f000 ff48 	bl	8001f8a <fsmManager_getState>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <ch4Sensor_handler+0x16>
 8001100:	2b01      	cmp	r3, #1
 8001102:	d029      	beq.n	8001158 <ch4Sensor_handler+0x68>

				flags_ch4Sensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 8001104:	e102      	b.n	800130c <ch4Sensor_handler+0x21c>
			if(fsmManager_isStateIn(&ch4Sensor_state)) {
 8001106:	4886      	ldr	r0, [pc, #536]	; (8001320 <ch4Sensor_handler+0x230>)
 8001108:	f000 ff4a 	bl	8001fa0 <fsmManager_isStateIn>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <ch4Sensor_handler+0x32>
				fsmManager_stateIn(&ch4Sensor_state);
 8001112:	4883      	ldr	r0, [pc, #524]	; (8001320 <ch4Sensor_handler+0x230>)
 8001114:	f000 ff5a 	bl	8001fcc <fsmManager_stateIn>
				flags_ch4Sensor.bits.isMeasuring = 0;
 8001118:	4a82      	ldr	r2, [pc, #520]	; (8001324 <ch4Sensor_handler+0x234>)
 800111a:	7853      	ldrb	r3, [r2, #1]
 800111c:	f36f 03c3 	bfc	r3, #3, #1
 8001120:	7053      	strb	r3, [r2, #1]
			if(flags_ch4Sensor.bits.requestMeasure) {
 8001122:	4b80      	ldr	r3, [pc, #512]	; (8001324 <ch4Sensor_handler+0x234>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d008      	beq.n	8001142 <ch4Sensor_handler+0x52>
				flags_ch4Sensor.bits.isMeasuring = 1;
 8001130:	4a7c      	ldr	r2, [pc, #496]	; (8001324 <ch4Sensor_handler+0x234>)
 8001132:	7853      	ldrb	r3, [r2, #1]
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&ch4Sensor_state,__ch4Sensor_getAmmoniac);
 800113a:	2101      	movs	r1, #1
 800113c:	4878      	ldr	r0, [pc, #480]	; (8001320 <ch4Sensor_handler+0x230>)
 800113e:	f000 ff0d 	bl	8001f5c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&ch4Sensor_state)) {
 8001142:	4877      	ldr	r0, [pc, #476]	; (8001320 <ch4Sensor_handler+0x230>)
 8001144:	f000 ff37 	bl	8001fb6 <fsmManager_isStateOut>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80db 	beq.w	8001306 <ch4Sensor_handler+0x216>
				fsmManager_stateOut(&ch4Sensor_state);
 8001150:	4873      	ldr	r0, [pc, #460]	; (8001320 <ch4Sensor_handler+0x230>)
 8001152:	f000 ff4a 	bl	8001fea <fsmManager_stateOut>
			break;
 8001156:	e0d6      	b.n	8001306 <ch4Sensor_handler+0x216>
			if(fsmManager_isStateIn(&ch4Sensor_state)) {
 8001158:	4871      	ldr	r0, [pc, #452]	; (8001320 <ch4Sensor_handler+0x230>)
 800115a:	f000 ff21 	bl	8001fa0 <fsmManager_isStateIn>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00f      	beq.n	8001184 <ch4Sensor_handler+0x94>
				fsmManager_stateIn(&ch4Sensor_state);
 8001164:	486e      	ldr	r0, [pc, #440]	; (8001320 <ch4Sensor_handler+0x230>)
 8001166:	f000 ff31 	bl	8001fcc <fsmManager_stateIn>
				ch4_adcStart();
 800116a:	f000 f947 	bl	80013fc <ch4_adcStart>
				nAverages = 0;
 800116e:	4b6e      	ldr	r3, [pc, #440]	; (8001328 <ch4Sensor_handler+0x238>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
				ch4SensorPpmAverage = 0;
 8001174:	4b6d      	ldr	r3, [pc, #436]	; (800132c <ch4Sensor_handler+0x23c>)
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
				softTimer_start(&timer, 50);
 800117c:	2132      	movs	r1, #50	; 0x32
 800117e:	486c      	ldr	r0, [pc, #432]	; (8001330 <ch4Sensor_handler+0x240>)
 8001180:	f004 f876 	bl	8005270 <softTimer_start>
			if(nAverages < CH4_SENSOR_N_AVERAGES) {
 8001184:	4b68      	ldr	r3, [pc, #416]	; (8001328 <ch4Sensor_handler+0x238>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b09      	cmp	r3, #9
 800118a:	d827      	bhi.n	80011dc <ch4Sensor_handler+0xec>
				if(softTimer_expired(&timer)) {
 800118c:	4868      	ldr	r0, [pc, #416]	; (8001330 <ch4Sensor_handler+0x240>)
 800118e:	f004 f883 	bl	8005298 <softTimer_expired>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80a5 	beq.w	80012e4 <ch4Sensor_handler+0x1f4>
					softTimer_start(&timer, 50);
 800119a:	2132      	movs	r1, #50	; 0x32
 800119c:	4864      	ldr	r0, [pc, #400]	; (8001330 <ch4Sensor_handler+0x240>)
 800119e:	f004 f867 	bl	8005270 <softTimer_start>
					nAverages++;
 80011a2:	4b61      	ldr	r3, [pc, #388]	; (8001328 <ch4Sensor_handler+0x238>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	4a5f      	ldr	r2, [pc, #380]	; (8001328 <ch4Sensor_handler+0x238>)
 80011aa:	6013      	str	r3, [r2, #0]
					ch4SensorPpmAverage += (float)ch4_adcGetValue()/CH4_SENSOR_N_AVERAGES;
 80011ac:	f000 f93a 	bl	8001424 <ch4_adcGetValue>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fd3e 	bl	8000c34 <__aeabi_ui2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	495e      	ldr	r1, [pc, #376]	; (8001334 <ch4Sensor_handler+0x244>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fe45 	bl	8000e4c <__aeabi_fdiv>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b59      	ldr	r3, [pc, #356]	; (800132c <ch4Sensor_handler+0x23c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f7ff fc81 	bl	8000ad4 <__addsf3>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b55      	ldr	r3, [pc, #340]	; (800132c <ch4Sensor_handler+0x23c>)
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e083      	b.n	80012e4 <ch4Sensor_handler+0x1f4>
				ch4Adc = (float) ch4SensorPpmAverage;							//Gets adc value
 80011dc:	4b53      	ldr	r3, [pc, #332]	; (800132c <ch4Sensor_handler+0x23c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a55      	ldr	r2, [pc, #340]	; (8001338 <ch4Sensor_handler+0x248>)
 80011e2:	6013      	str	r3, [r2, #0]
				ch4Rs = CH4_RL*(4095/ch4Adc-1);									//Gets Rs
 80011e4:	4b54      	ldr	r3, [pc, #336]	; (8001338 <ch4Sensor_handler+0x248>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	4854      	ldr	r0, [pc, #336]	; (800133c <ch4Sensor_handler+0x24c>)
 80011ec:	f7ff fe2e 	bl	8000e4c <__aeabi_fdiv>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fc6a 	bl	8000ad0 <__aeabi_fsub>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4950      	ldr	r1, [pc, #320]	; (8001340 <ch4Sensor_handler+0x250>)
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fd6f 	bl	8000ce4 <__aeabi_fmul>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	4b4e      	ldr	r3, [pc, #312]	; (8001344 <ch4Sensor_handler+0x254>)
 800120c:	601a      	str	r2, [r3, #0]
				ch4Ratio = ch4Rs/CH4_R0;										//Gets Rs/Ro ratio
 800120e:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <ch4Sensor_handler+0x254>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	494d      	ldr	r1, [pc, #308]	; (8001348 <ch4Sensor_handler+0x258>)
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fe19 	bl	8000e4c <__aeabi_fdiv>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b4b      	ldr	r3, [pc, #300]	; (800134c <ch4Sensor_handler+0x25c>)
 8001220:	601a      	str	r2, [r3, #0]
				ch4Slope = log10(CH4_P2_Y/CH4_P1_Y)/log10(CH4_P2_X/CH4_P1_X);	//Gets m
 8001222:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <ch4Sensor_handler+0x260>)
 8001224:	4a4b      	ldr	r2, [pc, #300]	; (8001354 <ch4Sensor_handler+0x264>)
 8001226:	601a      	str	r2, [r3, #0]
				ch4Intersec = log10(CH4_P1_Y)-ch4Slope*log10(CH4_P1_X);			//Gets b
 8001228:	4b49      	ldr	r3, [pc, #292]	; (8001350 <ch4Sensor_handler+0x260>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f8f3 	bl	8000418 <__aeabi_f2d>
 8001232:	a337      	add	r3, pc, #220	; (adr r3, 8001310 <ch4Sensor_handler+0x220>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f946 	bl	80004c8 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	a135      	add	r1, pc, #212	; (adr r1, 8001318 <ch4Sensor_handler+0x228>)
 8001242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001246:	f7fe ff87 	bl	8000158 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fbe9 	bl	8000a28 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	4a3f      	ldr	r2, [pc, #252]	; (8001358 <ch4Sensor_handler+0x268>)
 800125a:	6013      	str	r3, [r2, #0]
				ch4Ppm = pow(10, (log10(ch4Ratio)-ch4Intersec)/ch4Slope);		//Gets ppm
 800125c:	4b3b      	ldr	r3, [pc, #236]	; (800134c <ch4Sensor_handler+0x25c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f8d9 	bl	8000418 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f009 fa25 	bl	800a6bc <log10>
 8001272:	4604      	mov	r4, r0
 8001274:	460d      	mov	r5, r1
 8001276:	4b38      	ldr	r3, [pc, #224]	; (8001358 <ch4Sensor_handler+0x268>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f8cc 	bl	8000418 <__aeabi_f2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	f7fe ff66 	bl	8000158 <__aeabi_dsub>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	461d      	mov	r5, r3
 8001294:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <ch4Sensor_handler+0x260>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f8bd 	bl	8000418 <__aeabi_f2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7ff fa39 	bl	800071c <__aeabi_ddiv>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	f04f 0000 	mov.w	r0, #0
 80012b2:	492a      	ldr	r1, [pc, #168]	; (800135c <ch4Sensor_handler+0x26c>)
 80012b4:	f009 fa3c 	bl	800a730 <pow>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fbb2 	bl	8000a28 <__aeabi_d2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a26      	ldr	r2, [pc, #152]	; (8001360 <ch4Sensor_handler+0x270>)
 80012c8:	6013      	str	r3, [r2, #0]
				if(ch4SensorCallback != NULL) {
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <ch4Sensor_handler+0x274>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d004      	beq.n	80012dc <ch4Sensor_handler+0x1ec>
					ch4SensorCallback(__ch4SensorEvent_okMeasuring, (float *) &ch4Ppm);
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <ch4Sensor_handler+0x274>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4922      	ldr	r1, [pc, #136]	; (8001360 <ch4Sensor_handler+0x270>)
 80012d8:	2000      	movs	r0, #0
 80012da:	4798      	blx	r3
				fsmManager_gotoState(&ch4Sensor_state,__ch4Sensor_idle);
 80012dc:	2100      	movs	r1, #0
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <ch4Sensor_handler+0x230>)
 80012e0:	f000 fe3c 	bl	8001f5c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&ch4Sensor_state)) {
 80012e4:	480e      	ldr	r0, [pc, #56]	; (8001320 <ch4Sensor_handler+0x230>)
 80012e6:	f000 fe66 	bl	8001fb6 <fsmManager_isStateOut>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00c      	beq.n	800130a <ch4Sensor_handler+0x21a>
				fsmManager_stateOut(&ch4Sensor_state);
 80012f0:	480b      	ldr	r0, [pc, #44]	; (8001320 <ch4Sensor_handler+0x230>)
 80012f2:	f000 fe7a 	bl	8001fea <fsmManager_stateOut>
				ch4_adcStop();
 80012f6:	f000 f8a1 	bl	800143c <ch4_adcStop>
				flags_ch4Sensor.bits.requestMeasure = 0;
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <ch4Sensor_handler+0x234>)
 80012fc:	7813      	ldrb	r3, [r2, #0]
 80012fe:	f36f 0300 	bfc	r3, #0, #1
 8001302:	7013      	strb	r3, [r2, #0]
			break;
 8001304:	e001      	b.n	800130a <ch4Sensor_handler+0x21a>
			break;
 8001306:	bf00      	nop
 8001308:	e000      	b.n	800130c <ch4Sensor_handler+0x21c>
			break;
 800130a:	bf00      	nop
}
 800130c:	bf00      	nop
 800130e:	bdb0      	pop	{r4, r5, r7, pc}
 8001310:	6a13ef40 	.word	0x6a13ef40
 8001314:	40026882 	.word	0x40026882
 8001318:	6c8ff17d 	.word	0x6c8ff17d
 800131c:	3fd3f3c6 	.word	0x3fd3f3c6
 8001320:	20000124 	.word	0x20000124
 8001324:	20000130 	.word	0x20000130
 8001328:	2000013c 	.word	0x2000013c
 800132c:	20000138 	.word	0x20000138
 8001330:	20000140 	.word	0x20000140
 8001334:	41200000 	.word	0x41200000
 8001338:	20000110 	.word	0x20000110
 800133c:	457ff000 	.word	0x457ff000
 8001340:	41b00000 	.word	0x41b00000
 8001344:	20000114 	.word	0x20000114
 8001348:	40400000 	.word	0x40400000
 800134c:	20000118 	.word	0x20000118
 8001350:	2000011c 	.word	0x2000011c
 8001354:	be8ca186 	.word	0xbe8ca186
 8001358:	20000120 	.word	0x20000120
 800135c:	40240000 	.word	0x40240000
 8001360:	2000010c 	.word	0x2000010c
 8001364:	2000014c 	.word	0x2000014c

08001368 <ch4Sensor_measure>:

void ch4Sensor_measure(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	flags_ch4Sensor.bits.requestMeasure = 1;
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <ch4Sensor_measure+0x18>)
 800136e:	7813      	ldrb	r3, [r2, #0]
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	7013      	strb	r3, [r2, #0]
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000130 	.word	0x20000130

08001384 <ch4Sensor_setCallback>:
{
	return flags_ch4Sensor.bits.isMeasuring;
}

void ch4Sensor_setCallback(void (*cb)(_ch4Sensor_event, void*))
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	ch4SensorCallback = cb;
 800138c:	4a03      	ldr	r2, [pc, #12]	; (800139c <ch4Sensor_setCallback+0x18>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	2000014c 	.word	0x2000014c

080013a0 <ch4Sensor_powerOn>:

void ch4Sensor_powerOn(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	pinCh4Vdd_write(1);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f000 f855 	bl	8001454 <pinCh4Vdd_write>
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}

080013ae <ch4Sensor_powerOff>:

void ch4Sensor_powerOff(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	af00      	add	r7, sp, #0
	pinCh4Vdd_write(0);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f84e 	bl	8001454 <pinCh4Vdd_write>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <ADC_Select_CHCh4>:



static void ADC_Select_CHCh4(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 80013cc:	2304      	movs	r3, #4
 80013ce:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(ch4Hadc, &sConfig) != HAL_OK) {
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <ADC_Select_CHCh4+0x3c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	1d3a      	adds	r2, r7, #4
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f005 fc5f 	bl	8006ca4 <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <ADC_Select_CHCh4+0x34>
		Error_Handler();
 80013ec:	f003 fca0 	bl	8004d30 <Error_Handler>
	}
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000108 	.word	0x20000108

080013fc <ch4_adcStart>:

static void ch4_adcStart(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	ADC_Select_CHCh4();
 8001400:	f7ff ffdc 	bl	80013bc <ADC_Select_CHCh4>
	HAL_ADC_Start(ch4Hadc);
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <ch4_adcStart+0x24>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f005 fa5f 	bl	80068cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ch4Hadc, 100);
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <ch4_adcStart+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2164      	movs	r1, #100	; 0x64
 8001414:	4618      	mov	r0, r3
 8001416:	f005 fb33 	bl	8006a80 <HAL_ADC_PollForConversion>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000108 	.word	0x20000108

08001424 <ch4_adcGetValue>:

static uint32_t ch4_adcGetValue(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(ch4Hadc);
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <ch4_adcGetValue+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f005 fc2d 	bl	8006c8c <HAL_ADC_GetValue>
 8001432:	4603      	mov	r3, r0
}
 8001434:	4618      	mov	r0, r3
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000108 	.word	0x20000108

0800143c <ch4_adcStop>:

static void ch4_adcStop(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(ch4Hadc);
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <ch4_adcStop+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f005 faef 	bl	8006a28 <HAL_ADC_Stop>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000108 	.word	0x20000108

08001454 <pinCh4Vdd_write>:

static void pinCh4Vdd_write(uint8_t state)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CH4_SENSOR_VDD_PORT, CH4_SENSOR_VDD_PIN, state);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	461a      	mov	r2, r3
 8001462:	2120      	movs	r1, #32
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <pinCh4Vdd_write+0x20>)
 8001466:	f006 f8f3 	bl	8007650 <HAL_GPIO_WritePin>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40010800 	.word	0x40010800

08001478 <usSensorCb>:
static float calculateDistancePercentage(float dist);



void usSensorCb(_usSensor_event evt, void* payload)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <usSensorCb+0x16>
 800148a:	2b01      	cmp	r3, #1
			flags_dumpSensor.bits.usSensor_measureDone = 1;
			break;

		case __usSensorEvent_errorEcho:;

			break;
 800148c:	e009      	b.n	80014a2 <usSensorCb+0x2a>
			distance = *(float*) payload;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a06      	ldr	r2, [pc, #24]	; (80014ac <usSensorCb+0x34>)
 8001494:	6013      	str	r3, [r2, #0]
			flags_dumpSensor.bits.usSensor_measureDone = 1;
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <usSensorCb+0x38>)
 8001498:	7813      	ldrb	r3, [r2, #0]
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	7013      	strb	r3, [r2, #0]
			break;
 80014a0:	bf00      	nop
	}
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	20000154 	.word	0x20000154
 80014b0:	20000790 	.word	0x20000790

080014b4 <nh3SensorCb>:

void nh3SensorCb(_nh3Sensor_event evt, void* payload)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <nh3SensorCb+0x26>
	{
		case __nh3SensorEvent_okMeasuring:;
			nh3Concentration = *(float*) payload;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <nh3SensorCb+0x30>)
 80014cc:	6013      	str	r3, [r2, #0]

			flags_dumpSensor.bits.nh3Sensor_measureDone = 1;
 80014ce:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <nh3SensorCb+0x34>)
 80014d0:	7813      	ldrb	r3, [r2, #0]
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	7013      	strb	r3, [r2, #0]
			break;
 80014d8:	bf00      	nop
	}
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	20000158 	.word	0x20000158
 80014e8:	20000790 	.word	0x20000790

080014ec <ch4SensorCb>:

void ch4SensorCb(_ch4Sensor_event evt, void* payload)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <ch4SensorCb+0x26>
	{
		case __ch4SensorEvent_okMeasuring:;
			ch4Concentration = *(float*) payload;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a06      	ldr	r2, [pc, #24]	; (800151c <ch4SensorCb+0x30>)
 8001504:	6013      	str	r3, [r2, #0]

			flags_dumpSensor.bits.ch4Sensor_measureDone = 1;
 8001506:	4a06      	ldr	r2, [pc, #24]	; (8001520 <ch4SensorCb+0x34>)
 8001508:	7813      	ldrb	r3, [r2, #0]
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	7013      	strb	r3, [r2, #0]
			break;
 8001510:	bf00      	nop
	}
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	2000015c 	.word	0x2000015c
 8001520:	20000790 	.word	0x20000790

08001524 <tempSensorCb>:

void tempSensorCb(_tempSensor_event evt, void* payload)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d113      	bne.n	800155e <tempSensorCb+0x3a>
	{
		case __tempSensorEvent_okMeasuring:;
			temperature = *(float*) payload;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <tempSensorCb+0x44>)
 800153c:	6013      	str	r3, [r2, #0]
			temperature -= 10;	//Subtract addicional temperature of the capsule
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <tempSensorCb+0x44>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	490a      	ldr	r1, [pc, #40]	; (800156c <tempSensorCb+0x48>)
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fac3 	bl	8000ad0 <__aeabi_fsub>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <tempSensorCb+0x44>)
 8001550:	601a      	str	r2, [r3, #0]

			flags_dumpSensor.bits.tempSensor_measureDone = 1;
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <tempSensorCb+0x4c>)
 8001554:	7813      	ldrb	r3, [r2, #0]
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	7013      	strb	r3, [r2, #0]
			break;
 800155c:	bf00      	nop
	}
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000160 	.word	0x20000160
 800156c:	41200000 	.word	0x41200000
 8001570:	20000790 	.word	0x20000790

08001574 <gsmModuleCb>:

void gsmModuleCb(_gsmModule_event evt, void* payload)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d126      	bne.n	80015d4 <gsmModuleCb+0x60>
	{
		case __gsmModuleEvent_okGpsInfo:;
			uint8_t *gspInfo = (uint8_t*) payload;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	617b      	str	r3, [r7, #20]
			uint8_t strOut[10];

			string_split(gspInfo, ',', strOut);
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	461a      	mov	r2, r3
 8001590:	212c      	movs	r1, #44	; 0x2c
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f004 fe67 	bl	8006266 <string_split>
			string_split(gspInfo, ',', strOut);
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	461a      	mov	r2, r3
 800159e:	212c      	movs	r1, #44	; 0x2c
 80015a0:	6978      	ldr	r0, [r7, #20]
 80015a2:	f004 fe60 	bl	8006266 <string_split>
			string_split(gspInfo, ',', gspLon);
 80015a6:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <gsmModuleCb+0x68>)
 80015a8:	212c      	movs	r1, #44	; 0x2c
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f004 fe5b 	bl	8006266 <string_split>
			string_split(gspInfo, ',', strOut);
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	461a      	mov	r2, r3
 80015b6:	212c      	movs	r1, #44	; 0x2c
 80015b8:	6978      	ldr	r0, [r7, #20]
 80015ba:	f004 fe54 	bl	8006266 <string_split>
			string_split(gspInfo, ',', gspLat);
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <gsmModuleCb+0x6c>)
 80015c0:	212c      	movs	r1, #44	; 0x2c
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f004 fe4f 	bl	8006266 <string_split>

			flags_dumpSensor.bits.tempSensor_measureDone = 1;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <gsmModuleCb+0x70>)
 80015ca:	7813      	ldrb	r3, [r2, #0]
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	7013      	strb	r3, [r2, #0]
			break;
 80015d2:	bf00      	nop
	}
}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000168 	.word	0x20000168
 80015e0:	20000178 	.word	0x20000178
 80015e4:	20000790 	.word	0x20000790

080015e8 <dumpSensorManager_init>:


void dumpSensorManager_init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	//Wakes up from sleep
	powerMode_init(&hrtc);
 80015ec:	481b      	ldr	r0, [pc, #108]	; (800165c <dumpSensorManager_init+0x74>)
 80015ee:	f003 fdd1 	bl	8005194 <powerMode_init>

	//Initializes softTimer
	softTimer_init(&htim4);
 80015f2:	481b      	ldr	r0, [pc, #108]	; (8001660 <dumpSensorManager_init+0x78>)
 80015f4:	f003 fe2c 	bl	8005250 <softTimer_init>

	//Initializes ultrasonic Sensor
	usSensor_init(&htim3);
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <dumpSensorManager_init+0x7c>)
 80015fa:	f004 f997 	bl	800592c <usSensor_init>
	usSensor_setCallback(usSensorCb);
 80015fe:	481a      	ldr	r0, [pc, #104]	; (8001668 <dumpSensorManager_init+0x80>)
 8001600:	f004 fc1c 	bl	8005e3c <usSensor_setCallback>
	usSensor_powerOff();
 8001604:	f004 fbe5 	bl	8005dd2 <usSensor_powerOff>

	//Initializes temperature Sensor
	tempSensor_init(&hadc1);
 8001608:	4818      	ldr	r0, [pc, #96]	; (800166c <dumpSensorManager_init+0x84>)
 800160a:	f004 f84f 	bl	80056ac <tempSensor_init>
	tempSensor_setCallback(tempSensorCb);
 800160e:	4818      	ldr	r0, [pc, #96]	; (8001670 <dumpSensorManager_init+0x88>)
 8001610:	f004 f932 	bl	8005878 <tempSensor_setCallback>

	//Initializes NH3 Sensor
	nh3Sensor_init(&hadc1);
 8001614:	4815      	ldr	r0, [pc, #84]	; (800166c <dumpSensorManager_init+0x84>)
 8001616:	f003 fb91 	bl	8004d3c <nh3Sensor_init>
	nh3Sensor_setCallback(nh3SensorCb);
 800161a:	4816      	ldr	r0, [pc, #88]	; (8001674 <dumpSensorManager_init+0x8c>)
 800161c:	f003 fcee 	bl	8004ffc <nh3Sensor_setCallback>
	nh3Sensor_powerOff();
 8001620:	f003 fd01 	bl	8005026 <nh3Sensor_powerOff>

	//Initializes CH4 Sensor
	ch4Sensor_init(&hadc1);
 8001624:	4811      	ldr	r0, [pc, #68]	; (800166c <dumpSensorManager_init+0x84>)
 8001626:	f7ff fd43 	bl	80010b0 <ch4Sensor_init>
	ch4Sensor_setCallback(ch4SensorCb);
 800162a:	4813      	ldr	r0, [pc, #76]	; (8001678 <dumpSensorManager_init+0x90>)
 800162c:	f7ff feaa 	bl	8001384 <ch4Sensor_setCallback>
	ch4Sensor_powerOff();
 8001630:	f7ff febd 	bl	80013ae <ch4Sensor_powerOff>

	//Initializes GSM Module
	gsmModule_init(&huart1);
 8001634:	4811      	ldr	r0, [pc, #68]	; (800167c <dumpSensorManager_init+0x94>)
 8001636:	f000 fce7 	bl	8002008 <gsmModule_init>
	gsmModule_powerOff();
 800163a:	f000 fd58 	bl	80020ee <gsmModule_powerOff>
	gsmModule_setCallback(gsmModuleCb);
 800163e:	4810      	ldr	r0, [pc, #64]	; (8001680 <dumpSensorManager_init+0x98>)
 8001640:	f000 fd40 	bl	80020c4 <gsmModule_setCallback>

	//Initializes NVM managment Module
	nvm_init(&hrtc);
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <dumpSensorManager_init+0x74>)
 8001646:	f003 fd53 	bl	80050f0 <nvm_init>

	//FSM
	fsmManager_init(&dumpSensorFsmState, __dumpSensor_idle);
 800164a:	2100      	movs	r1, #0
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <dumpSensorManager_init+0x9c>)
 800164e:	f000 fc6f 	bl	8001f30 <fsmManager_init>

	//Flags
	flags_dumpSensor.dword = 0;
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <dumpSensorManager_init+0xa0>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000089c 	.word	0x2000089c
 8001660:	20000798 	.word	0x20000798
 8001664:	200007e0 	.word	0x200007e0
 8001668:	08001479 	.word	0x08001479
 800166c:	20000828 	.word	0x20000828
 8001670:	08001525 	.word	0x08001525
 8001674:	080014b5 	.word	0x080014b5
 8001678:	080014ed 	.word	0x080014ed
 800167c:	20000858 	.word	0x20000858
 8001680:	08001575 	.word	0x08001575
 8001684:	20000784 	.word	0x20000784
 8001688:	20000790 	.word	0x20000790

0800168c <dumpSensorManager_handler>:

void dumpSensorManager_handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	usSensor_handler();
 8001690:	f004 f9a4 	bl	80059dc <usSensor_handler>
	tempSensor_handler();
 8001694:	f004 f828 	bl	80056e8 <tempSensor_handler>
	nh3Sensor_handler();
 8001698:	f003 fb6e 	bl	8004d78 <nh3Sensor_handler>
	ch4Sensor_handler();
 800169c:	f7ff fd28 	bl	80010f0 <ch4Sensor_handler>
	gsmModule_handler();
 80016a0:	f000 fe2a 	bl	80022f8 <gsmModule_handler>



	if(flags_dumpSensor.bits.gsmModule_turnOn == 1) {
 80016a4:	4bbf      	ldr	r3, [pc, #764]	; (80019a4 <dumpSensorManager_handler+0x318>)
 80016a6:	785b      	ldrb	r3, [r3, #1]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d106      	bne.n	80016ba <dumpSensorManager_handler+0x2e>
		flags_dumpSensor.bits.gsmModule_turnOn = 0;
 80016ac:	4bbd      	ldr	r3, [pc, #756]	; (80019a4 <dumpSensorManager_handler+0x318>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	705a      	strb	r2, [r3, #1]

		gsmModule_powerOn();
 80016b2:	f000 fd15 	bl	80020e0 <gsmModule_powerOn>
		gsmModule_pwrkeyOn();
 80016b6:	f000 fd21 	bl	80020fc <gsmModule_pwrkeyOn>
	}

	switch(fsmManager_getState(&dumpSensorFsmState))
 80016ba:	48bb      	ldr	r0, [pc, #748]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80016bc:	f000 fc65 	bl	8001f8a <fsmManager_getState>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b0e      	cmp	r3, #14
 80016c4:	f200 839c 	bhi.w	8001e00 <dumpSensorManager_handler+0x774>
 80016c8:	a201      	add	r2, pc, #4	; (adr r2, 80016d0 <dumpSensorManager_handler+0x44>)
 80016ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ce:	bf00      	nop
 80016d0:	0800170d 	.word	0x0800170d
 80016d4:	0800173d 	.word	0x0800173d
 80016d8:	08001785 	.word	0x08001785
 80016dc:	080017d1 	.word	0x080017d1
 80016e0:	08001819 	.word	0x08001819
 80016e4:	08001889 	.word	0x08001889
 80016e8:	080018d7 	.word	0x080018d7
 80016ec:	0800193d 	.word	0x0800193d
 80016f0:	080019c9 	.word	0x080019c9
 80016f4:	08001a5b 	.word	0x08001a5b
 80016f8:	08001ab9 	.word	0x08001ab9
 80016fc:	08001c8f 	.word	0x08001c8f
 8001700:	08001d3f 	.word	0x08001d3f
 8001704:	08001d9f 	.word	0x08001d9f
 8001708:	08001dd3 	.word	0x08001dd3
	{
		case __dumpSensor_idle:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 800170c:	48a6      	ldr	r0, [pc, #664]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800170e:	f000 fc47 	bl	8001fa0 <fsmManager_isStateIn>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <dumpSensorManager_handler+0x92>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001718:	48a3      	ldr	r0, [pc, #652]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800171a:	f000 fc57 	bl	8001fcc <fsmManager_stateIn>
#if defined(STATUS_LED)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
#endif
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_readNvm);
 800171e:	2101      	movs	r1, #1
 8001720:	48a1      	ldr	r0, [pc, #644]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001722:	f000 fc1b 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001726:	48a0      	ldr	r0, [pc, #640]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001728:	f000 fc45 	bl	8001fb6 <fsmManager_isStateOut>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 837d 	beq.w	8001e2e <dumpSensorManager_handler+0x7a2>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001734:	489c      	ldr	r0, [pc, #624]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001736:	f000 fc58 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800173a:	e378      	b.n	8001e2e <dumpSensorManager_handler+0x7a2>



		case __dumpSensor_readNvm:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 800173c:	489a      	ldr	r0, [pc, #616]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800173e:	f000 fc2f 	bl	8001fa0 <fsmManager_isStateIn>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <dumpSensorManager_handler+0xc2>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001748:	4897      	ldr	r0, [pc, #604]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800174a:	f000 fc3f 	bl	8001fcc <fsmManager_stateIn>
			}

			readNvm();
 800174e:	f000 fb93 	bl	8001e78 <readNvm>
			writeNvm();
 8001752:	f000 fbaf 	bl	8001eb4 <writeNvm>

			//Gets product ID
			productId = (((uint32_t) reg[NVM_ID_HIGH].word) << 16) | reg[NVM_ID_LOW].word;
 8001756:	4b95      	ldr	r3, [pc, #596]	; (80019ac <dumpSensorManager_handler+0x320>)
 8001758:	889b      	ldrh	r3, [r3, #4]
 800175a:	041b      	lsls	r3, r3, #16
 800175c:	4a93      	ldr	r2, [pc, #588]	; (80019ac <dumpSensorManager_handler+0x320>)
 800175e:	8852      	ldrh	r2, [r2, #2]
 8001760:	4313      	orrs	r3, r2
 8001762:	4a93      	ldr	r2, [pc, #588]	; (80019b0 <dumpSensorManager_handler+0x324>)
 8001764:	6013      	str	r3, [r2, #0]

			//Gets flags


			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureBattery);
 8001766:	2102      	movs	r1, #2
 8001768:	488f      	ldr	r0, [pc, #572]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800176a:	f000 fbf7 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 800176e:	488e      	ldr	r0, [pc, #568]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001770:	f000 fc21 	bl	8001fb6 <fsmManager_isStateOut>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 835b 	beq.w	8001e32 <dumpSensorManager_handler+0x7a6>
				fsmManager_stateOut(&dumpSensorFsmState);
 800177c:	488a      	ldr	r0, [pc, #552]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800177e:	f000 fc34 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8001782:	e356      	b.n	8001e32 <dumpSensorManager_handler+0x7a6>



		case __dumpSensor_measureBattery:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001784:	4888      	ldr	r0, [pc, #544]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001786:	f000 fc0b 	bl	8001fa0 <fsmManager_isStateIn>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <dumpSensorManager_handler+0x10a>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001790:	4885      	ldr	r0, [pc, #532]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001792:	f000 fc1b 	bl	8001fcc <fsmManager_stateIn>
			}

			//Gets battery level percetange
			battery = 0.75;
 8001796:	4b87      	ldr	r3, [pc, #540]	; (80019b4 <dumpSensorManager_handler+0x328>)
 8001798:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800179c:	601a      	str	r2, [r3, #0]
			batteryPercent = battery*100;
 800179e:	4b85      	ldr	r3, [pc, #532]	; (80019b4 <dumpSensorManager_handler+0x328>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4985      	ldr	r1, [pc, #532]	; (80019b8 <dumpSensorManager_handler+0x32c>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fa9d 	bl	8000ce4 <__aeabi_fmul>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b83      	ldr	r3, [pc, #524]	; (80019bc <dumpSensorManager_handler+0x330>)
 80017b0:	601a      	str	r2, [r3, #0]
			if(batteryPercent < DUMPSTER_BATTERY_PERC_TRIG_NEG || ) {
				flags_dumpSensor.bits.gsmModule_turnOn = 1;
			}
			*/

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureTemperature);
 80017b2:	2103      	movs	r1, #3
 80017b4:	487c      	ldr	r0, [pc, #496]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80017b6:	f000 fbd1 	bl	8001f5c <fsmManager_gotoState>


			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80017ba:	487b      	ldr	r0, [pc, #492]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80017bc:	f000 fbfb 	bl	8001fb6 <fsmManager_isStateOut>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8337 	beq.w	8001e36 <dumpSensorManager_handler+0x7aa>
				fsmManager_stateOut(&dumpSensorFsmState);
 80017c8:	4877      	ldr	r0, [pc, #476]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80017ca:	f000 fc0e 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80017ce:	e332      	b.n	8001e36 <dumpSensorManager_handler+0x7aa>



		case __dumpSensor_measureTemperature:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80017d0:	4875      	ldr	r0, [pc, #468]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80017d2:	f000 fbe5 	bl	8001fa0 <fsmManager_isStateIn>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <dumpSensorManager_handler+0x15a>
				fsmManager_stateIn(&dumpSensorFsmState);
 80017dc:	4872      	ldr	r0, [pc, #456]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80017de:	f000 fbf5 	bl	8001fcc <fsmManager_stateIn>

				tempSensor_measure();
 80017e2:	f004 f83b 	bl	800585c <tempSensor_measure>
			}

			if(flags_dumpSensor.bits.tempSensor_measureDone == 1) {
 80017e6:	4b6f      	ldr	r3, [pc, #444]	; (80019a4 <dumpSensorManager_handler+0x318>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <dumpSensorManager_handler+0x176>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureLevel);
 80017f4:	2104      	movs	r1, #4
 80017f6:	486c      	ldr	r0, [pc, #432]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80017f8:	f000 fbb0 	bl	8001f5c <fsmManager_gotoState>
				flags_dumpSensor.bits.gsmModule_turnOn = 1;
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <dumpSensorManager_handler+0x318>)
 80017fe:	2201      	movs	r2, #1
 8001800:	705a      	strb	r2, [r3, #1]
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001802:	4869      	ldr	r0, [pc, #420]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001804:	f000 fbd7 	bl	8001fb6 <fsmManager_isStateOut>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8315 	beq.w	8001e3a <dumpSensorManager_handler+0x7ae>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001810:	4865      	ldr	r0, [pc, #404]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001812:	f000 fbea 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8001816:	e310      	b.n	8001e3a <dumpSensorManager_handler+0x7ae>



		case __dumpSensor_measureLevel:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001818:	4863      	ldr	r0, [pc, #396]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800181a:	f000 fbc1 	bl	8001fa0 <fsmManager_isStateIn>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00e      	beq.n	8001842 <dumpSensorManager_handler+0x1b6>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001824:	4860      	ldr	r0, [pc, #384]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001826:	f000 fbd1 	bl	8001fcc <fsmManager_stateIn>

				usSensor_powerOn();
 800182a:	f004 facb 	bl	8005dc4 <usSensor_powerOn>
				usSensor_measure(temperature);
 800182e:	4b64      	ldr	r3, [pc, #400]	; (80019c0 <dumpSensorManager_handler+0x334>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f004 fad4 	bl	8005de0 <usSensor_measure>

				softTimer_start(&timer, 10*1000);
 8001838:	f242 7110 	movw	r1, #10000	; 0x2710
 800183c:	4861      	ldr	r0, [pc, #388]	; (80019c4 <dumpSensorManager_handler+0x338>)
 800183e:	f003 fd17 	bl	8005270 <softTimer_start>
			}

			if(flags_dumpSensor.bits.usSensor_measureDone == 1) {
 8001842:	4b58      	ldr	r3, [pc, #352]	; (80019a4 <dumpSensorManager_handler+0x318>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <dumpSensorManager_handler+0x1ce>
#if defined PROJECT_NOLOGIC
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_heatGasSensor);
 8001850:	2105      	movs	r1, #5
 8001852:	4855      	ldr	r0, [pc, #340]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001854:	f000 fb82 	bl	8001f5c <fsmManager_gotoState>
 8001858:	e009      	b.n	800186e <dumpSensorManager_handler+0x1e2>
				else {
					fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
				}
#endif
			}
			else if(softTimer_expired(&timer)) {
 800185a:	485a      	ldr	r0, [pc, #360]	; (80019c4 <dumpSensorManager_handler+0x338>)
 800185c:	f003 fd1c 	bl	8005298 <softTimer_expired>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <dumpSensorManager_handler+0x1e2>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_heatGasSensor);
 8001866:	2105      	movs	r1, #5
 8001868:	484f      	ldr	r0, [pc, #316]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800186a:	f000 fb77 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 800186e:	484e      	ldr	r0, [pc, #312]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001870:	f000 fba1 	bl	8001fb6 <fsmManager_isStateOut>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 82e1 	beq.w	8001e3e <dumpSensorManager_handler+0x7b2>
				fsmManager_stateOut(&dumpSensorFsmState);
 800187c:	484a      	ldr	r0, [pc, #296]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800187e:	f000 fbb4 	bl	8001fea <fsmManager_stateOut>

				usSensor_powerOff();
 8001882:	f004 faa6 	bl	8005dd2 <usSensor_powerOff>
			}
			break;
 8001886:	e2da      	b.n	8001e3e <dumpSensorManager_handler+0x7b2>

		case __dumpSensor_heatGasSensor:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001888:	4847      	ldr	r0, [pc, #284]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800188a:	f000 fb89 	bl	8001fa0 <fsmManager_isStateIn>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00b      	beq.n	80018ac <dumpSensorManager_handler+0x220>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001894:	4844      	ldr	r0, [pc, #272]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001896:	f000 fb99 	bl	8001fcc <fsmManager_stateIn>

				ch4Sensor_powerOn();
 800189a:	f7ff fd81 	bl	80013a0 <ch4Sensor_powerOn>
				nh3Sensor_powerOn();
 800189e:	f003 fbbb 	bl	8005018 <nh3Sensor_powerOn>

				softTimer_start(&timer, 20*1000);
 80018a2:	f644 6120 	movw	r1, #20000	; 0x4e20
 80018a6:	4847      	ldr	r0, [pc, #284]	; (80019c4 <dumpSensorManager_handler+0x338>)
 80018a8:	f003 fce2 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 80018ac:	4845      	ldr	r0, [pc, #276]	; (80019c4 <dumpSensorManager_handler+0x338>)
 80018ae:	f003 fcf3 	bl	8005298 <softTimer_expired>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <dumpSensorManager_handler+0x234>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureNh3);
 80018b8:	2106      	movs	r1, #6
 80018ba:	483b      	ldr	r0, [pc, #236]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80018bc:	f000 fb4e 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80018c0:	4839      	ldr	r0, [pc, #228]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80018c2:	f000 fb78 	bl	8001fb6 <fsmManager_isStateOut>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 82ba 	beq.w	8001e42 <dumpSensorManager_handler+0x7b6>
				fsmManager_stateOut(&dumpSensorFsmState);
 80018ce:	4836      	ldr	r0, [pc, #216]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80018d0:	f000 fb8b 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80018d4:	e2b5      	b.n	8001e42 <dumpSensorManager_handler+0x7b6>

		case __dumpSensor_measureNh3:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80018d6:	4834      	ldr	r0, [pc, #208]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80018d8:	f000 fb62 	bl	8001fa0 <fsmManager_isStateIn>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <dumpSensorManager_handler+0x26a>
				fsmManager_stateIn(&dumpSensorFsmState);
 80018e2:	4831      	ldr	r0, [pc, #196]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 80018e4:	f000 fb72 	bl	8001fcc <fsmManager_stateIn>

				nh3Sensor_measure();
 80018e8:	f003 fb7a 	bl	8004fe0 <nh3Sensor_measure>

				softTimer_start(&timer, 10*1000);
 80018ec:	f242 7110 	movw	r1, #10000	; 0x2710
 80018f0:	4834      	ldr	r0, [pc, #208]	; (80019c4 <dumpSensorManager_handler+0x338>)
 80018f2:	f003 fcbd 	bl	8005270 <softTimer_start>
			}

			if(flags_dumpSensor.bits.nh3Sensor_measureDone == 1) {
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <dumpSensorManager_handler+0x318>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <dumpSensorManager_handler+0x282>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureCh4);
 8001904:	2107      	movs	r1, #7
 8001906:	4828      	ldr	r0, [pc, #160]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001908:	f000 fb28 	bl	8001f5c <fsmManager_gotoState>
 800190c:	e009      	b.n	8001922 <dumpSensorManager_handler+0x296>
			}
			else if(softTimer_expired(&timer)) {
 800190e:	482d      	ldr	r0, [pc, #180]	; (80019c4 <dumpSensorManager_handler+0x338>)
 8001910:	f003 fcc2 	bl	8005298 <softTimer_expired>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <dumpSensorManager_handler+0x296>
				//If there is not a measurement within 500 mseg, stop trying to measure
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureCh4);
 800191a:	2107      	movs	r1, #7
 800191c:	4822      	ldr	r0, [pc, #136]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800191e:	f000 fb1d 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001922:	4821      	ldr	r0, [pc, #132]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001924:	f000 fb47 	bl	8001fb6 <fsmManager_isStateOut>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 828b 	beq.w	8001e46 <dumpSensorManager_handler+0x7ba>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001930:	481d      	ldr	r0, [pc, #116]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001932:	f000 fb5a 	bl	8001fea <fsmManager_stateOut>

				nh3Sensor_powerOff();
 8001936:	f003 fb76 	bl	8005026 <nh3Sensor_powerOff>
			}
			break;
 800193a:	e284      	b.n	8001e46 <dumpSensorManager_handler+0x7ba>



		case __dumpSensor_measureCh4:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 800193c:	481a      	ldr	r0, [pc, #104]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800193e:	f000 fb2f 	bl	8001fa0 <fsmManager_isStateIn>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <dumpSensorManager_handler+0x2d0>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001948:	4817      	ldr	r0, [pc, #92]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800194a:	f000 fb3f 	bl	8001fcc <fsmManager_stateIn>

				ch4Sensor_measure();
 800194e:	f7ff fd0b 	bl	8001368 <ch4Sensor_measure>

				softTimer_start(&timer, 10*1000);
 8001952:	f242 7110 	movw	r1, #10000	; 0x2710
 8001956:	481b      	ldr	r0, [pc, #108]	; (80019c4 <dumpSensorManager_handler+0x338>)
 8001958:	f003 fc8a 	bl	8005270 <softTimer_start>
			}

			if(flags_dumpSensor.bits.ch4Sensor_measureDone == 1) {
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <dumpSensorManager_handler+0x318>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <dumpSensorManager_handler+0x2e8>
				//fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_getGps);
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sendPackage);
 800196a:	210a      	movs	r1, #10
 800196c:	480e      	ldr	r0, [pc, #56]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800196e:	f000 faf5 	bl	8001f5c <fsmManager_gotoState>
 8001972:	e009      	b.n	8001988 <dumpSensorManager_handler+0x2fc>
			}
			else if(softTimer_expired(&timer)) {
 8001974:	4813      	ldr	r0, [pc, #76]	; (80019c4 <dumpSensorManager_handler+0x338>)
 8001976:	f003 fc8f 	bl	8005298 <softTimer_expired>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <dumpSensorManager_handler+0x2fc>
				//If there is not a measurement within 500 mseg, stop trying to measure
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_getGps);
 8001980:	2108      	movs	r1, #8
 8001982:	4809      	ldr	r0, [pc, #36]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001984:	f000 faea 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001988:	4807      	ldr	r0, [pc, #28]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 800198a:	f000 fb14 	bl	8001fb6 <fsmManager_isStateOut>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 825a 	beq.w	8001e4a <dumpSensorManager_handler+0x7be>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001996:	4804      	ldr	r0, [pc, #16]	; (80019a8 <dumpSensorManager_handler+0x31c>)
 8001998:	f000 fb27 	bl	8001fea <fsmManager_stateOut>

				ch4Sensor_powerOff();
 800199c:	f7ff fd07 	bl	80013ae <ch4Sensor_powerOff>
			}
			break;
 80019a0:	e253      	b.n	8001e4a <dumpSensorManager_handler+0x7be>
 80019a2:	bf00      	nop
 80019a4:	20000790 	.word	0x20000790
 80019a8:	20000784 	.word	0x20000784
 80019ac:	20000770 	.word	0x20000770
 80019b0:	20000150 	.word	0x20000150
 80019b4:	20000164 	.word	0x20000164
 80019b8:	42c80000 	.word	0x42c80000
 80019bc:	20000188 	.word	0x20000188
 80019c0:	20000160 	.word	0x20000160
 80019c4:	20000258 	.word	0x20000258



		case __dumpSensor_getGps:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80019c8:	48be      	ldr	r0, [pc, #760]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 80019ca:	f000 fae9 	bl	8001fa0 <fsmManager_isStateIn>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <dumpSensorManager_handler+0x35a>
				fsmManager_stateIn(&dumpSensorFsmState);
 80019d4:	48bb      	ldr	r0, [pc, #748]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 80019d6:	f000 faf9 	bl	8001fcc <fsmManager_stateIn>

				gsmModule_gpsOn();
 80019da:	f000 fbab 	bl	8002134 <gsmModule_gpsOn>
				softTimer_start(&timer, 10*60*1000);
 80019de:	49ba      	ldr	r1, [pc, #744]	; (8001cc8 <dumpSensorManager_handler+0x63c>)
 80019e0:	48ba      	ldr	r0, [pc, #744]	; (8001ccc <dumpSensorManager_handler+0x640>)
 80019e2:	f003 fc45 	bl	8005270 <softTimer_start>
			}

			if(gsmModule_isGpsFixed()) {
 80019e6:	f000 fc33 	bl	8002250 <gsmModule_isGpsFixed>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <dumpSensorManager_handler+0x36e>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGps);
 80019f0:	2109      	movs	r1, #9
 80019f2:	48b4      	ldr	r0, [pc, #720]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 80019f4:	f000 fab2 	bl	8001f5c <fsmManager_gotoState>
 80019f8:	e024      	b.n	8001a44 <dumpSensorManager_handler+0x3b8>
			}
			else if(softTimer_expired(&timer)) {
 80019fa:	48b4      	ldr	r0, [pc, #720]	; (8001ccc <dumpSensorManager_handler+0x640>)
 80019fc:	f003 fc4c 	bl	8005298 <softTimer_expired>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <dumpSensorManager_handler+0x38a>
				gsmModule_gpsInfo(0);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 fba2 	bl	8002150 <gsmModule_gpsInfo>

				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGps);
 8001a0c:	2109      	movs	r1, #9
 8001a0e:	48ad      	ldr	r0, [pc, #692]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001a10:	f000 faa4 	bl	8001f5c <fsmManager_gotoState>
 8001a14:	e016      	b.n	8001a44 <dumpSensorManager_handler+0x3b8>
			}
			else if(gsmModule_isPowered() && gsmModule_isGpsOn() && !gsmModule_isGpsFixed() && !gsmModule_requestedGpsInfo()) {
 8001a16:	f000 fbff 	bl	8002218 <gsmModule_isPowered>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d011      	beq.n	8001a44 <dumpSensorManager_handler+0x3b8>
 8001a20:	f000 fc08 	bl	8002234 <gsmModule_isGpsOn>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00c      	beq.n	8001a44 <dumpSensorManager_handler+0x3b8>
 8001a2a:	f000 fc11 	bl	8002250 <gsmModule_isGpsFixed>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d107      	bne.n	8001a44 <dumpSensorManager_handler+0x3b8>
 8001a34:	f000 fc36 	bl	80022a4 <gsmModule_requestedGpsInfo>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <dumpSensorManager_handler+0x3b8>
				gsmModule_gpsInfo(1);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f000 fb86 	bl	8002150 <gsmModule_gpsInfo>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001a44:	489f      	ldr	r0, [pc, #636]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001a46:	f000 fab6 	bl	8001fb6 <fsmManager_isStateOut>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 81fe 	beq.w	8001e4e <dumpSensorManager_handler+0x7c2>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001a52:	489c      	ldr	r0, [pc, #624]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001a54:	f000 fac9 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8001a58:	e1f9      	b.n	8001e4e <dumpSensorManager_handler+0x7c2>



		case __dumpSensor_turnOffGps:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001a5a:	489a      	ldr	r0, [pc, #616]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001a5c:	f000 faa0 	bl	8001fa0 <fsmManager_isStateIn>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <dumpSensorManager_handler+0x3ee>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001a66:	4897      	ldr	r0, [pc, #604]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001a68:	f000 fab0 	bl	8001fcc <fsmManager_stateIn>

				gsmModule_gpsOff();
 8001a6c:	f000 fb88 	bl	8002180 <gsmModule_gpsOff>
				softTimer_start(&timer, 60*1000);
 8001a70:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001a74:	4895      	ldr	r0, [pc, #596]	; (8001ccc <dumpSensorManager_handler+0x640>)
 8001a76:	f003 fbfb 	bl	8005270 <softTimer_start>
			}

			if(!gsmModule_isGpsOn()) {
 8001a7a:	f000 fbdb 	bl	8002234 <gsmModule_isGpsOn>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d104      	bne.n	8001a8e <dumpSensorManager_handler+0x402>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sendPackage);
 8001a84:	210a      	movs	r1, #10
 8001a86:	488f      	ldr	r0, [pc, #572]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001a88:	f000 fa68 	bl	8001f5c <fsmManager_gotoState>
 8001a8c:	e009      	b.n	8001aa2 <dumpSensorManager_handler+0x416>
			}
			else if(softTimer_expired(&timer)) {
 8001a8e:	488f      	ldr	r0, [pc, #572]	; (8001ccc <dumpSensorManager_handler+0x640>)
 8001a90:	f003 fc02 	bl	8005298 <softTimer_expired>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <dumpSensorManager_handler+0x416>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sendPackage);
 8001a9a:	210a      	movs	r1, #10
 8001a9c:	4889      	ldr	r0, [pc, #548]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001a9e:	f000 fa5d 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001aa2:	4888      	ldr	r0, [pc, #544]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001aa4:	f000 fa87 	bl	8001fb6 <fsmManager_isStateOut>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 81d1 	beq.w	8001e52 <dumpSensorManager_handler+0x7c6>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001ab0:	4884      	ldr	r0, [pc, #528]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001ab2:	f000 fa9a 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8001ab6:	e1cc      	b.n	8001e52 <dumpSensorManager_handler+0x7c6>



		case __dumpSensor_sendPackage:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001ab8:	4882      	ldr	r0, [pc, #520]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001aba:	f000 fa71 	bl	8001fa0 <fsmManager_isStateIn>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80a8 	beq.w	8001c16 <dumpSensorManager_handler+0x58a>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001ac6:	487f      	ldr	r0, [pc, #508]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001ac8:	f000 fa80 	bl	8001fcc <fsmManager_stateIn>

				gsmModule_serverConnect();
 8001acc:	f000 fb66 	bl	800219c <gsmModule_serverConnect>

				payloadDataToSend[0] = '\0';
 8001ad0:	4b7f      	ldr	r3, [pc, #508]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
				string_appendString(payloadDataToSend, (uint8_t *) "id=");
 8001ad6:	497f      	ldr	r1, [pc, #508]	; (8001cd4 <dumpSensorManager_handler+0x648>)
 8001ad8:	487d      	ldr	r0, [pc, #500]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001ada:	f004 fb98 	bl	800620e <string_appendString>
				number_convertUint32_toArrayOfUint8(auxToSend, productId);
 8001ade:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <dumpSensorManager_handler+0x64c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	487d      	ldr	r0, [pc, #500]	; (8001cdc <dumpSensorManager_handler+0x650>)
 8001ae6:	f004 fc6f 	bl	80063c8 <number_convertUint32_toArrayOfUint8>
				string_appendString(payloadDataToSend, auxToSend);
 8001aea:	497c      	ldr	r1, [pc, #496]	; (8001cdc <dumpSensorManager_handler+0x650>)
 8001aec:	4878      	ldr	r0, [pc, #480]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001aee:	f004 fb8e 	bl	800620e <string_appendString>
				string_appendChar(payloadDataToSend, '&');
 8001af2:	2126      	movs	r1, #38	; 0x26
 8001af4:	4876      	ldr	r0, [pc, #472]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001af6:	f004 fb67 	bl	80061c8 <string_appendChar>

				string_appendString(payloadDataToSend, (uint8_t *) "bat=");
 8001afa:	4979      	ldr	r1, [pc, #484]	; (8001ce0 <dumpSensorManager_handler+0x654>)
 8001afc:	4874      	ldr	r0, [pc, #464]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001afe:	f004 fb86 	bl	800620e <string_appendString>
				ascii_convertNum(auxToSend, (uint32_t) batteryPercent);
 8001b02:	4b78      	ldr	r3, [pc, #480]	; (8001ce4 <dumpSensorManager_handler+0x658>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fab2 	bl	8001070 <__aeabi_f2uiz>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4872      	ldr	r0, [pc, #456]	; (8001cdc <dumpSensorManager_handler+0x650>)
 8001b12:	f004 fbff 	bl	8006314 <ascii_convertNum>
				string_appendString(payloadDataToSend, auxToSend);
 8001b16:	4971      	ldr	r1, [pc, #452]	; (8001cdc <dumpSensorManager_handler+0x650>)
 8001b18:	486d      	ldr	r0, [pc, #436]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001b1a:	f004 fb78 	bl	800620e <string_appendString>

				if(flags_dumpSensor.bits.usSensor_measureDone) {
 8001b1e:	4b72      	ldr	r3, [pc, #456]	; (8001ce8 <dumpSensorManager_handler+0x65c>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d015      	beq.n	8001b58 <dumpSensorManager_handler+0x4cc>
					string_appendChar(payloadDataToSend, '&');
 8001b2c:	2126      	movs	r1, #38	; 0x26
 8001b2e:	4868      	ldr	r0, [pc, #416]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001b30:	f004 fb4a 	bl	80061c8 <string_appendChar>
					string_appendString(payloadDataToSend, (uint8_t *) "level=");
 8001b34:	496d      	ldr	r1, [pc, #436]	; (8001cec <dumpSensorManager_handler+0x660>)
 8001b36:	4866      	ldr	r0, [pc, #408]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001b38:	f004 fb69 	bl	800620e <string_appendString>
					ascii_convertNum(auxToSend, (uint32_t) distance);
 8001b3c:	4b6c      	ldr	r3, [pc, #432]	; (8001cf0 <dumpSensorManager_handler+0x664>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fa95 	bl	8001070 <__aeabi_f2uiz>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4864      	ldr	r0, [pc, #400]	; (8001cdc <dumpSensorManager_handler+0x650>)
 8001b4c:	f004 fbe2 	bl	8006314 <ascii_convertNum>
					string_appendString(payloadDataToSend, auxToSend);
 8001b50:	4962      	ldr	r1, [pc, #392]	; (8001cdc <dumpSensorManager_handler+0x650>)
 8001b52:	485f      	ldr	r0, [pc, #380]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001b54:	f004 fb5b 	bl	800620e <string_appendString>
				}

				if(flags_dumpSensor.bits.nh3Sensor_measureDone) {
 8001b58:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <dumpSensorManager_handler+0x65c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d015      	beq.n	8001b92 <dumpSensorManager_handler+0x506>
					string_appendChar(payloadDataToSend, '&');
 8001b66:	2126      	movs	r1, #38	; 0x26
 8001b68:	4859      	ldr	r0, [pc, #356]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001b6a:	f004 fb2d 	bl	80061c8 <string_appendChar>
					string_appendString(payloadDataToSend, (uint8_t *) "nh3=");
 8001b6e:	4961      	ldr	r1, [pc, #388]	; (8001cf4 <dumpSensorManager_handler+0x668>)
 8001b70:	4857      	ldr	r0, [pc, #348]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001b72:	f004 fb4c 	bl	800620e <string_appendString>
					ascii_convertNum(auxToSend, (uint32_t) nh3Concentration);
 8001b76:	4b60      	ldr	r3, [pc, #384]	; (8001cf8 <dumpSensorManager_handler+0x66c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fa78 	bl	8001070 <__aeabi_f2uiz>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4619      	mov	r1, r3
 8001b84:	4855      	ldr	r0, [pc, #340]	; (8001cdc <dumpSensorManager_handler+0x650>)
 8001b86:	f004 fbc5 	bl	8006314 <ascii_convertNum>
					string_appendString(payloadDataToSend, auxToSend);
 8001b8a:	4954      	ldr	r1, [pc, #336]	; (8001cdc <dumpSensorManager_handler+0x650>)
 8001b8c:	4850      	ldr	r0, [pc, #320]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001b8e:	f004 fb3e 	bl	800620e <string_appendString>
				}

				if(flags_dumpSensor.bits.ch4Sensor_measureDone) {
 8001b92:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <dumpSensorManager_handler+0x65c>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d015      	beq.n	8001bcc <dumpSensorManager_handler+0x540>
					string_appendChar(payloadDataToSend, '&');
 8001ba0:	2126      	movs	r1, #38	; 0x26
 8001ba2:	484b      	ldr	r0, [pc, #300]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001ba4:	f004 fb10 	bl	80061c8 <string_appendChar>
					string_appendString(payloadDataToSend, (uint8_t *) "ch4=");
 8001ba8:	4954      	ldr	r1, [pc, #336]	; (8001cfc <dumpSensorManager_handler+0x670>)
 8001baa:	4849      	ldr	r0, [pc, #292]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001bac:	f004 fb2f 	bl	800620e <string_appendString>
					ascii_convertNum(auxToSend, (uint32_t) ch4Concentration);
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <dumpSensorManager_handler+0x674>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fa5b 	bl	8001070 <__aeabi_f2uiz>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4847      	ldr	r0, [pc, #284]	; (8001cdc <dumpSensorManager_handler+0x650>)
 8001bc0:	f004 fba8 	bl	8006314 <ascii_convertNum>
					string_appendString(payloadDataToSend, auxToSend);
 8001bc4:	4945      	ldr	r1, [pc, #276]	; (8001cdc <dumpSensorManager_handler+0x650>)
 8001bc6:	4842      	ldr	r0, [pc, #264]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001bc8:	f004 fb21 	bl	800620e <string_appendString>
				}

				if(gsmModule_isGpsFixed()) {
 8001bcc:	f000 fb40 	bl	8002250 <gsmModule_isGpsFixed>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d017      	beq.n	8001c06 <dumpSensorManager_handler+0x57a>
					string_appendChar(payloadDataToSend, '&');
 8001bd6:	2126      	movs	r1, #38	; 0x26
 8001bd8:	483d      	ldr	r0, [pc, #244]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001bda:	f004 faf5 	bl	80061c8 <string_appendChar>
					string_appendString(payloadDataToSend, (uint8_t *) "gpslon=");
 8001bde:	4949      	ldr	r1, [pc, #292]	; (8001d04 <dumpSensorManager_handler+0x678>)
 8001be0:	483b      	ldr	r0, [pc, #236]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001be2:	f004 fb14 	bl	800620e <string_appendString>
					string_appendString(payloadDataToSend, gspLon);
 8001be6:	4948      	ldr	r1, [pc, #288]	; (8001d08 <dumpSensorManager_handler+0x67c>)
 8001be8:	4839      	ldr	r0, [pc, #228]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001bea:	f004 fb10 	bl	800620e <string_appendString>

					string_appendChar(payloadDataToSend, '&');
 8001bee:	2126      	movs	r1, #38	; 0x26
 8001bf0:	4837      	ldr	r0, [pc, #220]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001bf2:	f004 fae9 	bl	80061c8 <string_appendChar>
					string_appendString(payloadDataToSend, (uint8_t *) "gpslat=");
 8001bf6:	4945      	ldr	r1, [pc, #276]	; (8001d0c <dumpSensorManager_handler+0x680>)
 8001bf8:	4835      	ldr	r0, [pc, #212]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001bfa:	f004 fb08 	bl	800620e <string_appendString>
					string_appendString(payloadDataToSend, gspLat);
 8001bfe:	4944      	ldr	r1, [pc, #272]	; (8001d10 <dumpSensorManager_handler+0x684>)
 8001c00:	4833      	ldr	r0, [pc, #204]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001c02:	f004 fb04 	bl	800620e <string_appendString>
				}
				string_appendChar(payloadDataToSend, '"');
 8001c06:	2122      	movs	r1, #34	; 0x22
 8001c08:	4831      	ldr	r0, [pc, #196]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001c0a:	f004 fadd 	bl	80061c8 <string_appendChar>

				softTimer_start(&timer, 10*60*1000);
 8001c0e:	492e      	ldr	r1, [pc, #184]	; (8001cc8 <dumpSensorManager_handler+0x63c>)
 8001c10:	482e      	ldr	r0, [pc, #184]	; (8001ccc <dumpSensorManager_handler+0x640>)
 8001c12:	f003 fb2d 	bl	8005270 <softTimer_start>
			}


			if(gsmModule_isServerDataSent()) {
 8001c16:	f000 fb37 	bl	8002288 <gsmModule_isServerDataSent>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d004      	beq.n	8001c2a <dumpSensorManager_handler+0x59e>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_disconnectServer);
 8001c20:	210b      	movs	r1, #11
 8001c22:	4828      	ldr	r0, [pc, #160]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001c24:	f000 f99a 	bl	8001f5c <fsmManager_gotoState>
 8001c28:	e026      	b.n	8001c78 <dumpSensorManager_handler+0x5ec>
			}
			else if(softTimer_expired(&timer) || gsmModule_errorServerSendData()) {
 8001c2a:	4828      	ldr	r0, [pc, #160]	; (8001ccc <dumpSensorManager_handler+0x640>)
 8001c2c:	f003 fb34 	bl	8005298 <softTimer_expired>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d104      	bne.n	8001c40 <dumpSensorManager_handler+0x5b4>
 8001c36:	f000 fb51 	bl	80022dc <gsmModule_errorServerSendData>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <dumpSensorManager_handler+0x5be>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_disconnectServer);
 8001c40:	210b      	movs	r1, #11
 8001c42:	4820      	ldr	r0, [pc, #128]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001c44:	f000 f98a 	bl	8001f5c <fsmManager_gotoState>
 8001c48:	e016      	b.n	8001c78 <dumpSensorManager_handler+0x5ec>
			}
			else if(gsmModule_isPowered() && gsmModule_isServerConnected() && !gsmModule_isServerDataSent() && !gsmModule_requestedServerDataSend()) {
 8001c4a:	f000 fae5 	bl	8002218 <gsmModule_isPowered>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d011      	beq.n	8001c78 <dumpSensorManager_handler+0x5ec>
 8001c54:	f000 fb0a 	bl	800226c <gsmModule_isServerConnected>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00c      	beq.n	8001c78 <dumpSensorManager_handler+0x5ec>
 8001c5e:	f000 fb13 	bl	8002288 <gsmModule_isServerDataSent>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <dumpSensorManager_handler+0x5ec>
 8001c68:	f000 fb2a 	bl	80022c0 <gsmModule_requestedServerDataSend>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <dumpSensorManager_handler+0x5ec>
				gsmModule_serverDataSend(payloadDataToSend);
 8001c72:	4817      	ldr	r0, [pc, #92]	; (8001cd0 <dumpSensorManager_handler+0x644>)
 8001c74:	f000 faa0 	bl	80021b8 <gsmModule_serverDataSend>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001c78:	4812      	ldr	r0, [pc, #72]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001c7a:	f000 f99c 	bl	8001fb6 <fsmManager_isStateOut>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80e8 	beq.w	8001e56 <dumpSensorManager_handler+0x7ca>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001c86:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001c88:	f000 f9af 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8001c8c:	e0e3      	b.n	8001e56 <dumpSensorManager_handler+0x7ca>



		case __dumpSensor_disconnectServer:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001c8e:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001c90:	f000 f986 	bl	8001fa0 <fsmManager_isStateIn>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <dumpSensorManager_handler+0x622>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001c9a:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001c9c:	f000 f996 	bl	8001fcc <fsmManager_stateIn>

				gsmModule_serverDisconnect();
 8001ca0:	f000 faac 	bl	80021fc <gsmModule_serverDisconnect>

				softTimer_start(&timer, 5*1000);
 8001ca4:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ca8:	4808      	ldr	r0, [pc, #32]	; (8001ccc <dumpSensorManager_handler+0x640>)
 8001caa:	f003 fae1 	bl	8005270 <softTimer_start>
			}

			if(gsmModule_isServerConnected() == 0) {
 8001cae:	f000 fadd 	bl	800226c <gsmModule_isServerConnected>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d12d      	bne.n	8001d14 <dumpSensorManager_handler+0x688>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGsmModule);
 8001cb8:	210c      	movs	r1, #12
 8001cba:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <dumpSensorManager_handler+0x638>)
 8001cbc:	f000 f94e 	bl	8001f5c <fsmManager_gotoState>
 8001cc0:	e032      	b.n	8001d28 <dumpSensorManager_handler+0x69c>
 8001cc2:	bf00      	nop
 8001cc4:	20000784 	.word	0x20000784
 8001cc8:	000927c0 	.word	0x000927c0
 8001ccc:	20000258 	.word	0x20000258
 8001cd0:	2000018c 	.word	0x2000018c
 8001cd4:	0800bad8 	.word	0x0800bad8
 8001cd8:	20000150 	.word	0x20000150
 8001cdc:	20000224 	.word	0x20000224
 8001ce0:	0800badc 	.word	0x0800badc
 8001ce4:	20000188 	.word	0x20000188
 8001ce8:	20000790 	.word	0x20000790
 8001cec:	0800bae4 	.word	0x0800bae4
 8001cf0:	20000154 	.word	0x20000154
 8001cf4:	0800baec 	.word	0x0800baec
 8001cf8:	20000158 	.word	0x20000158
 8001cfc:	0800baf4 	.word	0x0800baf4
 8001d00:	2000015c 	.word	0x2000015c
 8001d04:	0800bafc 	.word	0x0800bafc
 8001d08:	20000168 	.word	0x20000168
 8001d0c:	0800bb04 	.word	0x0800bb04
 8001d10:	20000178 	.word	0x20000178
			}
			else if(softTimer_expired(&timer)) {
 8001d14:	4856      	ldr	r0, [pc, #344]	; (8001e70 <dumpSensorManager_handler+0x7e4>)
 8001d16:	f003 fabf 	bl	8005298 <softTimer_expired>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <dumpSensorManager_handler+0x69c>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGsmModule);
 8001d20:	210c      	movs	r1, #12
 8001d22:	4854      	ldr	r0, [pc, #336]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001d24:	f000 f91a 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001d28:	4852      	ldr	r0, [pc, #328]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001d2a:	f000 f944 	bl	8001fb6 <fsmManager_isStateOut>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8092 	beq.w	8001e5a <dumpSensorManager_handler+0x7ce>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001d36:	484f      	ldr	r0, [pc, #316]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001d38:	f000 f957 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8001d3c:	e08d      	b.n	8001e5a <dumpSensorManager_handler+0x7ce>



		case __dumpSensor_turnOffGsmModule:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001d3e:	484d      	ldr	r0, [pc, #308]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001d40:	f000 f92e 	bl	8001fa0 <fsmManager_isStateIn>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <dumpSensorManager_handler+0x6d6>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001d4a:	484a      	ldr	r0, [pc, #296]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001d4c:	f000 f93e 	bl	8001fcc <fsmManager_stateIn>

				gsmModule_powerOff();
 8001d50:	f000 f9cd 	bl	80020ee <gsmModule_powerOff>
				gsmModule_pwrkeyOff();
 8001d54:	f000 f9e0 	bl	8002118 <gsmModule_pwrkeyOff>

				softTimer_start(&timer, 10*1000);
 8001d58:	f242 7110 	movw	r1, #10000	; 0x2710
 8001d5c:	4844      	ldr	r0, [pc, #272]	; (8001e70 <dumpSensorManager_handler+0x7e4>)
 8001d5e:	f003 fa87 	bl	8005270 <softTimer_start>
			}

			if(gsmModule_isPowered() == 0) {
 8001d62:	f000 fa59 	bl	8002218 <gsmModule_isPowered>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <dumpSensorManager_handler+0x6ea>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
 8001d6c:	210d      	movs	r1, #13
 8001d6e:	4841      	ldr	r0, [pc, #260]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001d70:	f000 f8f4 	bl	8001f5c <fsmManager_gotoState>
 8001d74:	e009      	b.n	8001d8a <dumpSensorManager_handler+0x6fe>
			}
			else if(softTimer_expired(&timer)) {
 8001d76:	483e      	ldr	r0, [pc, #248]	; (8001e70 <dumpSensorManager_handler+0x7e4>)
 8001d78:	f003 fa8e 	bl	8005298 <softTimer_expired>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <dumpSensorManager_handler+0x6fe>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
 8001d82:	210d      	movs	r1, #13
 8001d84:	483b      	ldr	r0, [pc, #236]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001d86:	f000 f8e9 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001d8a:	483a      	ldr	r0, [pc, #232]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001d8c:	f000 f913 	bl	8001fb6 <fsmManager_isStateOut>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d063      	beq.n	8001e5e <dumpSensorManager_handler+0x7d2>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001d96:	4837      	ldr	r0, [pc, #220]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001d98:	f000 f927 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8001d9c:	e05f      	b.n	8001e5e <dumpSensorManager_handler+0x7d2>



		case __dumpSensor_sleep:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001d9e:	4835      	ldr	r0, [pc, #212]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001da0:	f000 f8fe 	bl	8001fa0 <fsmManager_isStateIn>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <dumpSensorManager_handler+0x724>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001daa:	4832      	ldr	r0, [pc, #200]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001dac:	f000 f90e 	bl	8001fcc <fsmManager_stateIn>
			}

			//Enters standby mode
			powerMode_enterStandbyMode(1*10);
 8001db0:	200a      	movs	r0, #10
 8001db2:	f003 fa11 	bl	80051d8 <powerMode_enterStandbyMode>

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 8001db6:	2100      	movs	r1, #0
 8001db8:	482e      	ldr	r0, [pc, #184]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001dba:	f000 f8cf 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001dbe:	482d      	ldr	r0, [pc, #180]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001dc0:	f000 f8f9 	bl	8001fb6 <fsmManager_isStateOut>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d04b      	beq.n	8001e62 <dumpSensorManager_handler+0x7d6>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001dca:	482a      	ldr	r0, [pc, #168]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001dcc:	f000 f90d 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8001dd0:	e047      	b.n	8001e62 <dumpSensorManager_handler+0x7d6>



		case __dumpSensor_error:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001dd2:	4828      	ldr	r0, [pc, #160]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001dd4:	f000 f8e4 	bl	8001fa0 <fsmManager_isStateIn>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <dumpSensorManager_handler+0x758>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001dde:	4825      	ldr	r0, [pc, #148]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001de0:	f000 f8f4 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 8001de4:	2100      	movs	r1, #0
 8001de6:	4823      	ldr	r0, [pc, #140]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001de8:	f000 f8b8 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001dec:	4821      	ldr	r0, [pc, #132]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001dee:	f000 f8e2 	bl	8001fb6 <fsmManager_isStateOut>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d036      	beq.n	8001e66 <dumpSensorManager_handler+0x7da>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001df8:	481e      	ldr	r0, [pc, #120]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001dfa:	f000 f8f6 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8001dfe:	e032      	b.n	8001e66 <dumpSensorManager_handler+0x7da>



		default:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001e00:	481c      	ldr	r0, [pc, #112]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001e02:	f000 f8cd 	bl	8001fa0 <fsmManager_isStateIn>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <dumpSensorManager_handler+0x786>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001e0c:	4819      	ldr	r0, [pc, #100]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001e0e:	f000 f8dd 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 8001e12:	2100      	movs	r1, #0
 8001e14:	4817      	ldr	r0, [pc, #92]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001e16:	f000 f8a1 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001e1a:	4816      	ldr	r0, [pc, #88]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001e1c:	f000 f8cb 	bl	8001fb6 <fsmManager_isStateOut>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d021      	beq.n	8001e6a <dumpSensorManager_handler+0x7de>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001e26:	4813      	ldr	r0, [pc, #76]	; (8001e74 <dumpSensorManager_handler+0x7e8>)
 8001e28:	f000 f8df 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8001e2c:	e01d      	b.n	8001e6a <dumpSensorManager_handler+0x7de>
			break;
 8001e2e:	bf00      	nop
 8001e30:	e01c      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e32:	bf00      	nop
 8001e34:	e01a      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e36:	bf00      	nop
 8001e38:	e018      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e3a:	bf00      	nop
 8001e3c:	e016      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e3e:	bf00      	nop
 8001e40:	e014      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e42:	bf00      	nop
 8001e44:	e012      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e46:	bf00      	nop
 8001e48:	e010      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e4a:	bf00      	nop
 8001e4c:	e00e      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e4e:	bf00      	nop
 8001e50:	e00c      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e52:	bf00      	nop
 8001e54:	e00a      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e56:	bf00      	nop
 8001e58:	e008      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e5a:	bf00      	nop
 8001e5c:	e006      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e5e:	bf00      	nop
 8001e60:	e004      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e62:	bf00      	nop
 8001e64:	e002      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e66:	bf00      	nop
 8001e68:	e000      	b.n	8001e6c <dumpSensorManager_handler+0x7e0>
			break;
 8001e6a:	bf00      	nop
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000258 	.word	0x20000258
 8001e74:	20000784 	.word	0x20000784

08001e78 <readNvm>:

	return distPerc;
}

static void readNvm(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001e7e:	2300      	movs	r3, #0
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	e00d      	b.n	8001ea0 <readNvm+0x28>
		reg[i].word = nvm_readWord(NVM_REGISTER1+i);
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	3301      	adds	r3, #1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 f93f 	bl	800510c <nvm_readWord>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	b291      	uxth	r1, r2
 8001e94:	4a06      	ldr	r2, [pc, #24]	; (8001eb0 <readNvm+0x38>)
 8001e96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	71fb      	strb	r3, [r7, #7]
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b09      	cmp	r3, #9
 8001ea4:	d9ee      	bls.n	8001e84 <readNvm+0xc>
	}
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000770 	.word	0x20000770

08001eb4 <writeNvm>:

//https://docs.google.com/spreadsheets/d/1n-ANLwi3L4sAhEEs7HliKyX1nLDQ-HLQLX-bY1MBAcw/edit#gid=0
static void writeNvm(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
	//If it is needed to write to nvm, toggle the value of reg[NVM_FLAGS0].bits.bit0
	if(reg[NVM_FLAGS0].bits.bit0 != 1) {
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <writeNvm+0x78>)
 8001ebc:	7a1b      	ldrb	r3, [r3, #8]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d12c      	bne.n	8001f22 <writeNvm+0x6e>
		reg[NVM_FLAGS0].bits.bit0 = 1;
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <writeNvm+0x78>)
 8001eca:	7a13      	ldrb	r3, [r2, #8]
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	7213      	strb	r3, [r2, #8]

		reg[NVM_ID_HIGH].word = 0xAE23;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <writeNvm+0x78>)
 8001ed4:	f64a 6223 	movw	r2, #44579	; 0xae23
 8001ed8:	809a      	strh	r2, [r3, #4]
		reg[NVM_ID_LOW].word = 0xFA5B;
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <writeNvm+0x78>)
 8001edc:	f64f 225b 	movw	r2, #64091	; 0xfa5b
 8001ee0:	805a      	strh	r2, [r3, #2]

		reg[NVM_COUNTER_DAY].word = 0;
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <writeNvm+0x78>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	80da      	strh	r2, [r3, #6]

		reg[NVM_FLAGS0].bits.bit1 = 0;
 8001ee8:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <writeNvm+0x78>)
 8001eea:	7a13      	ldrb	r3, [r2, #8]
 8001eec:	f36f 0341 	bfc	r3, #1, #1
 8001ef0:	7213      	strb	r3, [r2, #8]
		reg[NVM_FLAGS0].bits.bit2 = 0;
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <writeNvm+0x78>)
 8001ef4:	7a13      	ldrb	r3, [r2, #8]
 8001ef6:	f36f 0382 	bfc	r3, #2, #1
 8001efa:	7213      	strb	r3, [r2, #8]

		for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001efc:	2300      	movs	r3, #0
 8001efe:	71fb      	strb	r3, [r7, #7]
 8001f00:	e00c      	b.n	8001f1c <writeNvm+0x68>
			nvm_writeWord(NVM_REGISTER1+i, reg[i].word);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	4908      	ldr	r1, [pc, #32]	; (8001f2c <writeNvm+0x78>)
 8001f0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4610      	mov	r0, r2
 8001f12:	f003 f907 	bl	8005124 <nvm_writeWord>
		for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b09      	cmp	r3, #9
 8001f20:	d9ef      	bls.n	8001f02 <writeNvm+0x4e>
		}
	}
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000770 	.word	0x20000770

08001f30 <fsmManager_init>:
#include "fsmManager.h"

void fsmManager_init(fsm_t *fsm, uint32_t fsmStateInit)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    fsm->fsmStatePrev = fsmStateInit;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
	fsm->fsmState = fsmStateInit;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	601a      	str	r2, [r3, #0]
	
	fsm->stateIn = 1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	721a      	strb	r2, [r3, #8]
	fsm->stateOut = 0;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	725a      	strb	r2, [r3, #9]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <fsmManager_gotoState>:

void fsmManager_gotoState(fsm_t *fsm, uint32_t fsmStateNext)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    fsm->fsmStatePrev = fsm->fsmState;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	605a      	str	r2, [r3, #4]
	fsm->fsmState = fsmStateNext;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	601a      	str	r2, [r3, #0]
	
	fsm->stateIn = 0;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	721a      	strb	r2, [r3, #8]
	fsm->stateOut = 1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	725a      	strb	r2, [r3, #9]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <fsmManager_getState>:
	fsm->stateIn = 0;
	fsm->stateOut = 1;
}

uint32_t fsmManager_getState(fsm_t *fsm)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
    return fsm->fsmState;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <fsmManager_isStateIn>:
{
    return fsm->fsmState == fsmState;
}

uint8_t fsmManager_isStateIn(fsm_t *fsm)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    return fsm->stateIn;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7a1b      	ldrb	r3, [r3, #8]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <fsmManager_isStateOut>:

uint8_t fsmManager_isStateOut(fsm_t *fsm)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
    return fsm->stateOut;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7a5b      	ldrb	r3, [r3, #9]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <fsmManager_stateIn>:

void fsmManager_stateIn(fsm_t *fsm)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    fsm->stateIn = 0;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	721a      	strb	r2, [r3, #8]
    fsm->stateOut = 0;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	725a      	strb	r2, [r3, #9]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <fsmManager_stateOut>:

void fsmManager_stateOut(fsm_t *fsm)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
    fsm->stateIn = 1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	721a      	strb	r2, [r3, #8]
    fsm->stateOut = 0;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	725a      	strb	r2, [r3, #9]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <gsmModule_init>:
static void (*gsmModuleCallback)(_gsmModule_event evt, void* payload);



void gsmModule_init(UART_HandleTypeDef *huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	//FSM
	fsmManager_init(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8002010:	2100      	movs	r1, #0
 8002012:	481e      	ldr	r0, [pc, #120]	; (800208c <gsmModule_init+0x84>)
 8002014:	f7ff ff8c 	bl	8001f30 <fsmManager_init>
	fsmManager_init(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 8002018:	2100      	movs	r1, #0
 800201a:	481d      	ldr	r0, [pc, #116]	; (8002090 <gsmModule_init+0x88>)
 800201c:	f7ff ff88 	bl	8001f30 <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8002020:	2100      	movs	r1, #0
 8002022:	481c      	ldr	r0, [pc, #112]	; (8002094 <gsmModule_init+0x8c>)
 8002024:	f7ff ff84 	bl	8001f30 <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8002028:	2100      	movs	r1, #0
 800202a:	481b      	ldr	r0, [pc, #108]	; (8002098 <gsmModule_init+0x90>)
 800202c:	f7ff ff80 	bl	8001f30 <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_idle);
 8002030:	2100      	movs	r1, #0
 8002032:	481a      	ldr	r0, [pc, #104]	; (800209c <gsmModule_init+0x94>)
 8002034:	f7ff ff7c 	bl	8001f30 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 8002038:	2100      	movs	r1, #0
 800203a:	4819      	ldr	r0, [pc, #100]	; (80020a0 <gsmModule_init+0x98>)
 800203c:	f7ff ff78 	bl	8001f30 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 8002040:	2100      	movs	r1, #0
 8002042:	4818      	ldr	r0, [pc, #96]	; (80020a4 <gsmModule_init+0x9c>)
 8002044:	f7ff ff74 	bl	8001f30 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDataReceive_state, __gsmModule_requestServerDataReceive_idle);
 8002048:	2100      	movs	r1, #0
 800204a:	4817      	ldr	r0, [pc, #92]	; (80020a8 <gsmModule_init+0xa0>)
 800204c:	f7ff ff70 	bl	8001f30 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 8002050:	2100      	movs	r1, #0
 8002052:	4816      	ldr	r0, [pc, #88]	; (80020ac <gsmModule_init+0xa4>)
 8002054:	f7ff ff6c 	bl	8001f30 <fsmManager_init>

	//UART
	gsmHuart = huart;
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <gsmModule_init+0xa8>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
	//pinGsmUartRx_receive();

	//Flags
	flags_gsmModule.dword = 0;
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <gsmModule_init+0xac>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
	flags_gsmModuleError.dword = 0;
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <gsmModule_init+0xb0>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
	flags_gsmModuleUnsolicited.dword = 0;
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <gsmModule_init+0xb4>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

	//Pin
	pinGsmVdd_write(0);
 8002070:	2000      	movs	r0, #0
 8002072:	f002 fba5 	bl	80047c0 <pinGsmVdd_write>
	pinGsmPwrkey_write(0);
 8002076:	2000      	movs	r0, #0
 8002078:	f002 fbb4 	bl	80047e4 <pinGsmPwrkey_write>

	//Variables
	gsmModule_operator = __gsmModule_operator_unknown;
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <gsmModule_init+0xb8>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000624 	.word	0x20000624
 8002090:	20000630 	.word	0x20000630
 8002094:	2000063c 	.word	0x2000063c
 8002098:	20000648 	.word	0x20000648
 800209c:	20000654 	.word	0x20000654
 80020a0:	20000660 	.word	0x20000660
 80020a4:	2000066c 	.word	0x2000066c
 80020a8:	20000678 	.word	0x20000678
 80020ac:	20000684 	.word	0x20000684
 80020b0:	20000264 	.word	0x20000264
 80020b4:	20000600 	.word	0x20000600
 80020b8:	20000604 	.word	0x20000604
 80020bc:	20000608 	.word	0x20000608
 80020c0:	20000794 	.word	0x20000794

080020c4 <gsmModule_setCallback>:

void gsmModule_setCallback(void (*cb)(_gsmModule_event, void*))
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	gsmModuleCallback = cb;
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <gsmModule_setCallback+0x18>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6013      	str	r3, [r2, #0]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	20000690 	.word	0x20000690

080020e0 <gsmModule_powerOn>:



void gsmModule_powerOn(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	pinGsmVdd_write(1);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f002 fb6b 	bl	80047c0 <pinGsmVdd_write>
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}

080020ee <gsmModule_powerOff>:


void gsmModule_powerOff(void)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	af00      	add	r7, sp, #0
	pinGsmVdd_write(0);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f002 fb64 	bl	80047c0 <pinGsmVdd_write>
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}

080020fc <gsmModule_pwrkeyOn>:

void gsmModule_pwrkeyOn(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestPowerOn = 1;
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <gsmModule_pwrkeyOn+0x18>)
 8002102:	7813      	ldrb	r3, [r2, #0]
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	7013      	strb	r3, [r2, #0]
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000600 	.word	0x20000600

08002118 <gsmModule_pwrkeyOff>:

void gsmModule_pwrkeyOff(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestPowerOff = 1;
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <gsmModule_pwrkeyOff+0x18>)
 800211e:	7813      	ldrb	r3, [r2, #0]
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	7013      	strb	r3, [r2, #0]
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000600 	.word	0x20000600

08002134 <gsmModule_gpsOn>:

void gsmModule_gpsOn(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestGpsOn = 1;
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <gsmModule_gpsOn+0x18>)
 800213a:	7813      	ldrb	r3, [r2, #0]
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	7013      	strb	r3, [r2, #0]
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000600 	.word	0x20000600

08002150 <gsmModule_gpsInfo>:

void gsmModule_gpsInfo(uint8_t enable)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
	flags_gsmModule.bits.requestGpsInfo = (enable ? 1 : 0);
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2d9      	uxtb	r1, r3
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <gsmModule_gpsInfo+0x2c>)
 8002168:	7813      	ldrb	r3, [r2, #0]
 800216a:	f361 03c3 	bfi	r3, r1, #3, #1
 800216e:	7013      	strb	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000600 	.word	0x20000600

08002180 <gsmModule_gpsOff>:

void gsmModule_gpsOff(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestGpsOff = 1;
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <gsmModule_gpsOff+0x18>)
 8002186:	7813      	ldrb	r3, [r2, #0]
 8002188:	f043 0310 	orr.w	r3, r3, #16
 800218c:	7013      	strb	r3, [r2, #0]
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000600 	.word	0x20000600

0800219c <gsmModule_serverConnect>:

void gsmModule_serverConnect(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestServerConnection = 1;
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <gsmModule_serverConnect+0x18>)
 80021a2:	7813      	ldrb	r3, [r2, #0]
 80021a4:	f043 0320 	orr.w	r3, r3, #32
 80021a8:	7013      	strb	r3, [r2, #0]
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000600 	.word	0x20000600

080021b8 <gsmModule_serverDataSend>:

void gsmModule_serverDataSend(uint8_t *data)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	string_appendString(dataToSend, (uint8_t *) gsmModule_command_httppara_url);
 80021c0:	490a      	ldr	r1, [pc, #40]	; (80021ec <gsmModule_serverDataSend+0x34>)
 80021c2:	480b      	ldr	r0, [pc, #44]	; (80021f0 <gsmModule_serverDataSend+0x38>)
 80021c4:	f004 f823 	bl	800620e <string_appendString>
	string_appendString(dataToSend, data);
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4809      	ldr	r0, [pc, #36]	; (80021f0 <gsmModule_serverDataSend+0x38>)
 80021cc:	f004 f81f 	bl	800620e <string_appendString>
	string_appendString(dataToSend, (uint8_t *) "\r\n");
 80021d0:	4908      	ldr	r1, [pc, #32]	; (80021f4 <gsmModule_serverDataSend+0x3c>)
 80021d2:	4807      	ldr	r0, [pc, #28]	; (80021f0 <gsmModule_serverDataSend+0x38>)
 80021d4:	f004 f81b 	bl	800620e <string_appendString>

	flags_gsmModule.bits.requestServerDataSend = 1;
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <gsmModule_serverDataSend+0x40>)
 80021da:	7813      	ldrb	r3, [r2, #0]
 80021dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e0:	7013      	strb	r3, [r2, #0]
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	0800bd10 	.word	0x0800bd10
 80021f0:	200004d4 	.word	0x200004d4
 80021f4:	0800bb0c 	.word	0x0800bb0c
 80021f8:	20000600 	.word	0x20000600

080021fc <gsmModule_serverDisconnect>:
{
	flags_gsmModule.bits.requestServerDataReceive = 1;
}

void gsmModule_serverDisconnect(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestServerDisconnection = 1;
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <gsmModule_serverDisconnect+0x18>)
 8002202:	7853      	ldrb	r3, [r2, #1]
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	7053      	strb	r3, [r2, #1]
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000600 	.word	0x20000600

08002218 <gsmModule_isPowered>:

uint8_t gsmModule_isPowered(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isPowered;
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <gsmModule_isPowered+0x18>)
 800221e:	785b      	ldrb	r3, [r3, #1]
 8002220:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002224:	b2db      	uxtb	r3, r3
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000600 	.word	0x20000600

08002234 <gsmModule_isGpsOn>:

uint8_t gsmModule_isGpsOn(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isGpsOn;
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <gsmModule_isGpsOn+0x18>)
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002240:	b2db      	uxtb	r3, r3
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000600 	.word	0x20000600

08002250 <gsmModule_isGpsFixed>:

uint8_t gsmModule_isGpsFixed(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isGpsFixed;
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <gsmModule_isGpsFixed+0x18>)
 8002256:	785b      	ldrb	r3, [r3, #1]
 8002258:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800225c:	b2db      	uxtb	r3, r3
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000600 	.word	0x20000600

0800226c <gsmModule_isServerConnected>:

uint8_t gsmModule_isServerConnected(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isServerConnected;
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <gsmModule_isServerConnected+0x18>)
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002278:	b2db      	uxtb	r3, r3
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000600 	.word	0x20000600

08002288 <gsmModule_isServerDataSent>:

uint8_t gsmModule_isServerDataSent(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isServerDataSent;
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <gsmModule_isServerDataSent+0x18>)
 800228e:	785b      	ldrb	r3, [r3, #1]
 8002290:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002294:	b2db      	uxtb	r3, r3
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000600 	.word	0x20000600

080022a4 <gsmModule_requestedGpsInfo>:
{
	return flags_gsmModule.bits.requestGpsOn;
}

uint8_t gsmModule_requestedGpsInfo(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.requestGpsInfo;
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <gsmModule_requestedGpsInfo+0x18>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80022b0:	b2db      	uxtb	r3, r3
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000600 	.word	0x20000600

080022c0 <gsmModule_requestedServerDataSend>:
{
	return flags_gsmModule.bits.requestServerConnection;
}

uint8_t gsmModule_requestedServerDataSend(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.requestServerDataSend;
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <gsmModule_requestedServerDataSend+0x18>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80022cc:	b2db      	uxtb	r3, r3
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000600 	.word	0x20000600

080022dc <gsmModule_errorServerSendData>:
}



uint8_t gsmModule_errorServerSendData(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
	return flags_gsmModuleError.bits.serverSendData;
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <gsmModule_errorServerSendData+0x18>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80022e8:	b2db      	uxtb	r3, r3
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000604 	.word	0x20000604

080022f8 <gsmModule_handler>:

static uint32_t contChunks;

void gsmModule_handler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af02      	add	r7, sp, #8
	if(gsmRxPtrInPrev != gsmRxPtrIn) {
 80022fe:	4b51      	ldr	r3, [pc, #324]	; (8002444 <gsmModule_handler+0x14c>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <gsmModule_handler+0x150>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d03e      	beq.n	8002388 <gsmModule_handler+0x90>
		gsmRxPtrInPrev++;
 800230a:	4b4e      	ldr	r3, [pc, #312]	; (8002444 <gsmModule_handler+0x14c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <gsmModule_handler+0x14c>)
 8002312:	6013      	str	r3, [r2, #0]
		gsmRxPtrInPrev%=GSMRXDATA_LENGTH;
 8002314:	4b4b      	ldr	r3, [pc, #300]	; (8002444 <gsmModule_handler+0x14c>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b4c      	ldr	r3, [pc, #304]	; (800244c <gsmModule_handler+0x154>)
 800231a:	fba3 1302 	umull	r1, r3, r3, r2
 800231e:	09db      	lsrs	r3, r3, #7
 8002320:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	4a46      	ldr	r2, [pc, #280]	; (8002444 <gsmModule_handler+0x14c>)
 800232c:	6013      	str	r3, [r2, #0]

		gsmRxDataChunkLen = ringBufferOfUint8_popChunk(gsmRxData, gsmRxPtrOut, gsmRxPtrIn, '\n', GSMRXDATA_LENGTH, gsmRxDataChunk);
 800232e:	4b48      	ldr	r3, [pc, #288]	; (8002450 <gsmModule_handler+0x158>)
 8002330:	6819      	ldr	r1, [r3, #0]
 8002332:	4b45      	ldr	r3, [pc, #276]	; (8002448 <gsmModule_handler+0x150>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b47      	ldr	r3, [pc, #284]	; (8002454 <gsmModule_handler+0x15c>)
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	230a      	movs	r3, #10
 8002342:	4845      	ldr	r0, [pc, #276]	; (8002458 <gsmModule_handler+0x160>)
 8002344:	f004 f91d 	bl	8006582 <ringBufferOfUint8_popChunk>
 8002348:	4603      	mov	r3, r0
 800234a:	4a44      	ldr	r2, [pc, #272]	; (800245c <gsmModule_handler+0x164>)
 800234c:	6013      	str	r3, [r2, #0]
		if(gsmRxDataChunkLen > 0) {
 800234e:	4b43      	ldr	r3, [pc, #268]	; (800245c <gsmModule_handler+0x164>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d018      	beq.n	8002388 <gsmModule_handler+0x90>
			gsmRxPtrOut+=gsmRxDataChunkLen;
 8002356:	4b3e      	ldr	r3, [pc, #248]	; (8002450 <gsmModule_handler+0x158>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b40      	ldr	r3, [pc, #256]	; (800245c <gsmModule_handler+0x164>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a3b      	ldr	r2, [pc, #236]	; (8002450 <gsmModule_handler+0x158>)
 8002362:	6013      	str	r3, [r2, #0]
			gsmRxPtrOut%=GSMRXDATA_LENGTH;
 8002364:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <gsmModule_handler+0x158>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b38      	ldr	r3, [pc, #224]	; (800244c <gsmModule_handler+0x154>)
 800236a:	fba3 1302 	umull	r1, r3, r3, r2
 800236e:	09db      	lsrs	r3, r3, #7
 8002370:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	4a35      	ldr	r2, [pc, #212]	; (8002450 <gsmModule_handler+0x158>)
 800237c:	6013      	str	r3, [r2, #0]

			contChunks++;
 800237e:	4b38      	ldr	r3, [pc, #224]	; (8002460 <gsmModule_handler+0x168>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3301      	adds	r3, #1
 8002384:	4a36      	ldr	r2, [pc, #216]	; (8002460 <gsmModule_handler+0x168>)
 8002386:	6013      	str	r3, [r2, #0]
		}
	}

	handle_unsolicitedMessages();
 8002388:	f000 f86e 	bl	8002468 <handle_unsolicitedMessages>

	if(flags_gsmModule.bits.requestPowerOn) {
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <gsmModule_handler+0x16c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <gsmModule_handler+0xa8>
		handle_requestPowerOn();
 800239a:	f000 f8d5 	bl	8002548 <handle_requestPowerOn>
 800239e:	e04b      	b.n	8002438 <gsmModule_handler+0x140>
	}
	else if(flags_gsmModule.bits.requestPowerOff) {
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <gsmModule_handler+0x16c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <gsmModule_handler+0xbc>
		handle_requestPowerOff();
 80023ae:	f000 fa19 	bl	80027e4 <handle_requestPowerOff>
 80023b2:	e041      	b.n	8002438 <gsmModule_handler+0x140>
	}
	else {
		if(flags_gsmModule.bits.requestGpsOn) {
 80023b4:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <gsmModule_handler+0x16c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <gsmModule_handler+0xd0>
			handle_requestGpsOn();
 80023c2:	f000 fb31 	bl	8002a28 <handle_requestGpsOn>
 80023c6:	e037      	b.n	8002438 <gsmModule_handler+0x140>
		}
		else if(flags_gsmModule.bits.requestGpsInfo) {
 80023c8:	4b26      	ldr	r3, [pc, #152]	; (8002464 <gsmModule_handler+0x16c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <gsmModule_handler+0xe4>
			handle_requestGpsInfo();
 80023d6:	f000 fc6b 	bl	8002cb0 <handle_requestGpsInfo>
 80023da:	e02d      	b.n	8002438 <gsmModule_handler+0x140>
		}
		else if(flags_gsmModule.bits.requestGpsOff) {
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <gsmModule_handler+0x16c>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <gsmModule_handler+0xf8>
			handle_requestGpsOff();
 80023ea:	f000 fdd5 	bl	8002f98 <handle_requestGpsOff>
 80023ee:	e023      	b.n	8002438 <gsmModule_handler+0x140>
		}
		else if(flags_gsmModule.bits.requestServerConnection) {
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <gsmModule_handler+0x16c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <gsmModule_handler+0x10c>
			handle_requestServerConnection();
 80023fe:	f000 ff69 	bl	80032d4 <handle_requestServerConnection>
 8002402:	e019      	b.n	8002438 <gsmModule_handler+0x140>
		}
		else if(flags_gsmModule.bits.requestServerDataSend) {
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <gsmModule_handler+0x16c>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <gsmModule_handler+0x120>
			handle_requestServerDataSend();
 8002412:	f001 fee1 	bl	80041d8 <handle_requestServerDataSend>
 8002416:	e00f      	b.n	8002438 <gsmModule_handler+0x140>
		}
		else if(flags_gsmModule.bits.requestServerDataReceive) {
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <gsmModule_handler+0x16c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d108      	bne.n	8002438 <gsmModule_handler+0x140>
			//handle_requestServerDataReceive();
		}
		else if(flags_gsmModule.bits.requestServerDisconnection) {
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <gsmModule_handler+0x16c>)
 8002428:	785b      	ldrb	r3, [r3, #1]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <gsmModule_handler+0x140>
			handle_requestServerDisconnection();
 8002434:	f002 f81c 	bl	8004470 <handle_requestServerDisconnection>
		}
	}

	gsmRxDataChunkLen = 0;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <gsmModule_handler+0x164>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200004c4 	.word	0x200004c4
 8002448:	200004c0 	.word	0x200004c0
 800244c:	51eb851f 	.word	0x51eb851f
 8002450:	200004c8 	.word	0x200004c8
 8002454:	200003f8 	.word	0x200003f8
 8002458:	20000268 	.word	0x20000268
 800245c:	200004cc 	.word	0x200004cc
 8002460:	20000694 	.word	0x20000694
 8002464:	20000600 	.word	0x20000600

08002468 <handle_unsolicitedMessages>:

static void handle_unsolicitedMessages(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg, gsmRxDataChunkLen)) {
 800246c:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <handle_unsolicitedMessages+0xbc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	492d      	ldr	r1, [pc, #180]	; (8002528 <handle_unsolicitedMessages+0xc0>)
 8002474:	482d      	ldr	r0, [pc, #180]	; (800252c <handle_unsolicitedMessages+0xc4>)
 8002476:	f003 fe2a 	bl	80060ce <string_containsWithinLength>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d02f      	beq.n	80024e0 <handle_unsolicitedMessages+0x78>
		if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg0, gsmRxDataChunkLen)) {
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <handle_unsolicitedMessages+0xbc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	492a      	ldr	r1, [pc, #168]	; (8002530 <handle_unsolicitedMessages+0xc8>)
 8002488:	4828      	ldr	r0, [pc, #160]	; (800252c <handle_unsolicitedMessages+0xc4>)
 800248a:	f003 fe20 	bl	80060ce <string_containsWithinLength>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <handle_unsolicitedMessages+0x38>
			flags_gsmModuleUnsolicited.bits.creg0 = 1;
 8002494:	4a27      	ldr	r2, [pc, #156]	; (8002534 <handle_unsolicitedMessages+0xcc>)
 8002496:	7813      	ldrb	r3, [r2, #0]
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	7013      	strb	r3, [r2, #0]
		}
		else {
			flags_gsmModuleUnsolicited.bits.httpActionError = 1;
		}
	}
}
 800249e:	e03e      	b.n	800251e <handle_unsolicitedMessages+0xb6>
		else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg1, gsmRxDataChunkLen)) {
 80024a0:	4b20      	ldr	r3, [pc, #128]	; (8002524 <handle_unsolicitedMessages+0xbc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4924      	ldr	r1, [pc, #144]	; (8002538 <handle_unsolicitedMessages+0xd0>)
 80024a8:	4820      	ldr	r0, [pc, #128]	; (800252c <handle_unsolicitedMessages+0xc4>)
 80024aa:	f003 fe10 	bl	80060ce <string_containsWithinLength>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <handle_unsolicitedMessages+0x58>
			flags_gsmModuleUnsolicited.bits.creg1 = 1;
 80024b4:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <handle_unsolicitedMessages+0xcc>)
 80024b6:	7813      	ldrb	r3, [r2, #0]
 80024b8:	f043 0310 	orr.w	r3, r3, #16
 80024bc:	7013      	strb	r3, [r2, #0]
}
 80024be:	e02e      	b.n	800251e <handle_unsolicitedMessages+0xb6>
		else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg2, gsmRxDataChunkLen)) {
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <handle_unsolicitedMessages+0xbc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	491d      	ldr	r1, [pc, #116]	; (800253c <handle_unsolicitedMessages+0xd4>)
 80024c8:	4818      	ldr	r0, [pc, #96]	; (800252c <handle_unsolicitedMessages+0xc4>)
 80024ca:	f003 fe00 	bl	80060ce <string_containsWithinLength>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d024      	beq.n	800251e <handle_unsolicitedMessages+0xb6>
			flags_gsmModuleUnsolicited.bits.creg2 = 1;
 80024d4:	4a17      	ldr	r2, [pc, #92]	; (8002534 <handle_unsolicitedMessages+0xcc>)
 80024d6:	7813      	ldrb	r3, [r2, #0]
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	7013      	strb	r3, [r2, #0]
}
 80024de:	e01e      	b.n	800251e <handle_unsolicitedMessages+0xb6>
	else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_httpaction, gsmRxDataChunkLen)) {
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <handle_unsolicitedMessages+0xbc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4916      	ldr	r1, [pc, #88]	; (8002540 <handle_unsolicitedMessages+0xd8>)
 80024e8:	4810      	ldr	r0, [pc, #64]	; (800252c <handle_unsolicitedMessages+0xc4>)
 80024ea:	f003 fdf0 	bl	80060ce <string_containsWithinLength>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d014      	beq.n	800251e <handle_unsolicitedMessages+0xb6>
		if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_httpaction1_200, gsmRxDataChunkLen)) {
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <handle_unsolicitedMessages+0xbc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4912      	ldr	r1, [pc, #72]	; (8002544 <handle_unsolicitedMessages+0xdc>)
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <handle_unsolicitedMessages+0xc4>)
 80024fe:	f003 fde6 	bl	80060ce <string_containsWithinLength>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <handle_unsolicitedMessages+0xac>
			flags_gsmModuleUnsolicited.bits.httpActionOk = 1;
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <handle_unsolicitedMessages+0xcc>)
 800250a:	7813      	ldrb	r3, [r2, #0]
 800250c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002510:	7013      	strb	r3, [r2, #0]
}
 8002512:	e004      	b.n	800251e <handle_unsolicitedMessages+0xb6>
			flags_gsmModuleUnsolicited.bits.httpActionError = 1;
 8002514:	4a07      	ldr	r2, [pc, #28]	; (8002534 <handle_unsolicitedMessages+0xcc>)
 8002516:	7813      	ldrb	r3, [r2, #0]
 8002518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251c:	7013      	strb	r3, [r2, #0]
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200004cc 	.word	0x200004cc
 8002528:	0800bdf8 	.word	0x0800bdf8
 800252c:	200003f8 	.word	0x200003f8
 8002530:	0800be00 	.word	0x0800be00
 8002534:	20000608 	.word	0x20000608
 8002538:	0800be04 	.word	0x0800be04
 800253c:	0800be08 	.word	0x0800be08
 8002540:	0800bdc8 	.word	0x0800bdc8
 8002544:	0800bdc0 	.word	0x0800bdc0

08002548 <handle_requestPowerOn>:

static void handle_requestPowerOn(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestPowerOn_state)) {
 800254c:	489c      	ldr	r0, [pc, #624]	; (80027c0 <handle_requestPowerOn+0x278>)
 800254e:	f7ff fd1c 	bl	8001f8a <fsmManager_getState>
 8002552:	4603      	mov	r3, r0
 8002554:	2b06      	cmp	r3, #6
 8002556:	f200 8105 	bhi.w	8002764 <handle_requestPowerOn+0x21c>
 800255a:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <handle_requestPowerOn+0x18>)
 800255c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002560:	0800257d 	.word	0x0800257d
 8002564:	080025ad 	.word	0x080025ad
 8002568:	080025e3 	.word	0x080025e3
 800256c:	08002629 	.word	0x08002629
 8002570:	0800265f 	.word	0x0800265f
 8002574:	080026ab 	.word	0x080026ab
 8002578:	08002723 	.word	0x08002723
		case __gsmModule_requestPowerOn_idle:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 800257c:	4890      	ldr	r0, [pc, #576]	; (80027c0 <handle_requestPowerOn+0x278>)
 800257e:	f7ff fd0f 	bl	8001fa0 <fsmManager_isStateIn>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <handle_requestPowerOn+0x46>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 8002588:	488d      	ldr	r0, [pc, #564]	; (80027c0 <handle_requestPowerOn+0x278>)
 800258a:	f7ff fd1f 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOn);
 800258e:	2101      	movs	r1, #1
 8002590:	488b      	ldr	r0, [pc, #556]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002592:	f7ff fce3 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002596:	488a      	ldr	r0, [pc, #552]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002598:	f7ff fd0d 	bl	8001fb6 <fsmManager_isStateOut>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80fc 	beq.w	800279c <handle_requestPowerOn+0x254>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80025a4:	4886      	ldr	r0, [pc, #536]	; (80027c0 <handle_requestPowerOn+0x278>)
 80025a6:	f7ff fd20 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80025aa:	e0f7      	b.n	800279c <handle_requestPowerOn+0x254>



		case __gsmModule_requestPowerOn_pwrKeyOn:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80025ac:	4884      	ldr	r0, [pc, #528]	; (80027c0 <handle_requestPowerOn+0x278>)
 80025ae:	f7ff fcf7 	bl	8001fa0 <fsmManager_isStateIn>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <handle_requestPowerOn+0x76>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80025b8:	4881      	ldr	r0, [pc, #516]	; (80027c0 <handle_requestPowerOn+0x278>)
 80025ba:	f7ff fd07 	bl	8001fcc <fsmManager_stateIn>
			}

			pinGsmPwrkey_write(1);
 80025be:	2001      	movs	r0, #1
 80025c0:	f002 f910 	bl	80047e4 <pinGsmPwrkey_write>
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOnWait);
 80025c4:	2102      	movs	r1, #2
 80025c6:	487e      	ldr	r0, [pc, #504]	; (80027c0 <handle_requestPowerOn+0x278>)
 80025c8:	f7ff fcc8 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 80025cc:	487c      	ldr	r0, [pc, #496]	; (80027c0 <handle_requestPowerOn+0x278>)
 80025ce:	f7ff fcf2 	bl	8001fb6 <fsmManager_isStateOut>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80e3 	beq.w	80027a0 <handle_requestPowerOn+0x258>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80025da:	4879      	ldr	r0, [pc, #484]	; (80027c0 <handle_requestPowerOn+0x278>)
 80025dc:	f7ff fd05 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80025e0:	e0de      	b.n	80027a0 <handle_requestPowerOn+0x258>



		case __gsmModule_requestPowerOn_pwrKeyOnWait:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80025e2:	4877      	ldr	r0, [pc, #476]	; (80027c0 <handle_requestPowerOn+0x278>)
 80025e4:	f7ff fcdc 	bl	8001fa0 <fsmManager_isStateIn>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <handle_requestPowerOn+0xb6>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80025ee:	4874      	ldr	r0, [pc, #464]	; (80027c0 <handle_requestPowerOn+0x278>)
 80025f0:	f7ff fcec 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timer, 1500);
 80025f4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80025f8:	4872      	ldr	r0, [pc, #456]	; (80027c4 <handle_requestPowerOn+0x27c>)
 80025fa:	f002 fe39 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 80025fe:	4871      	ldr	r0, [pc, #452]	; (80027c4 <handle_requestPowerOn+0x27c>)
 8002600:	f002 fe4a 	bl	8005298 <softTimer_expired>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <handle_requestPowerOn+0xca>
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOff);
 800260a:	2103      	movs	r1, #3
 800260c:	486c      	ldr	r0, [pc, #432]	; (80027c0 <handle_requestPowerOn+0x278>)
 800260e:	f7ff fca5 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002612:	486b      	ldr	r0, [pc, #428]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002614:	f7ff fccf 	bl	8001fb6 <fsmManager_isStateOut>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80c2 	beq.w	80027a4 <handle_requestPowerOn+0x25c>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 8002620:	4867      	ldr	r0, [pc, #412]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002622:	f7ff fce2 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002626:	e0bd      	b.n	80027a4 <handle_requestPowerOn+0x25c>



		case __gsmModule_requestPowerOn_pwrKeyOff:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002628:	4865      	ldr	r0, [pc, #404]	; (80027c0 <handle_requestPowerOn+0x278>)
 800262a:	f7ff fcb9 	bl	8001fa0 <fsmManager_isStateIn>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <handle_requestPowerOn+0xf2>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 8002634:	4862      	ldr	r0, [pc, #392]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002636:	f7ff fcc9 	bl	8001fcc <fsmManager_stateIn>
			}

			pinGsmPwrkey_write(0);
 800263a:	2000      	movs	r0, #0
 800263c:	f002 f8d2 	bl	80047e4 <pinGsmPwrkey_write>
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_send_at);
 8002640:	2104      	movs	r1, #4
 8002642:	485f      	ldr	r0, [pc, #380]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002644:	f7ff fc8a 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002648:	485d      	ldr	r0, [pc, #372]	; (80027c0 <handle_requestPowerOn+0x278>)
 800264a:	f7ff fcb4 	bl	8001fb6 <fsmManager_isStateOut>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a9 	beq.w	80027a8 <handle_requestPowerOn+0x260>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 8002656:	485a      	ldr	r0, [pc, #360]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002658:	f7ff fcc7 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800265c:	e0a4      	b.n	80027a8 <handle_requestPowerOn+0x260>



		case __gsmModule_requestPowerOn_send_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 800265e:	4858      	ldr	r0, [pc, #352]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002660:	f7ff fc9e 	bl	8001fa0 <fsmManager_isStateIn>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <handle_requestPowerOn+0x132>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 800266a:	4855      	ldr	r0, [pc, #340]	; (80027c0 <handle_requestPowerOn+0x278>)
 800266c:	f7ff fcae 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 4000);
 8002670:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002674:	4854      	ldr	r0, [pc, #336]	; (80027c8 <handle_requestPowerOn+0x280>)
 8002676:	f002 fdfb 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 800267a:	4853      	ldr	r0, [pc, #332]	; (80027c8 <handle_requestPowerOn+0x280>)
 800267c:	f002 fe0c 	bl	8005298 <softTimer_expired>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <handle_requestPowerOn+0x14c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_at);
 8002686:	4851      	ldr	r0, [pc, #324]	; (80027cc <handle_requestPowerOn+0x284>)
 8002688:	f002 f8be 	bl	8004808 <pinGsmUartTx_transmit>

				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_check_at);
 800268c:	2105      	movs	r1, #5
 800268e:	484c      	ldr	r0, [pc, #304]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002690:	f7ff fc64 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002694:	484a      	ldr	r0, [pc, #296]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002696:	f7ff fc8e 	bl	8001fb6 <fsmManager_isStateOut>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8085 	beq.w	80027ac <handle_requestPowerOn+0x264>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80026a2:	4847      	ldr	r0, [pc, #284]	; (80027c0 <handle_requestPowerOn+0x278>)
 80026a4:	f7ff fca1 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80026a8:	e080      	b.n	80027ac <handle_requestPowerOn+0x264>



		case __gsmModule_requestPowerOn_check_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80026aa:	4845      	ldr	r0, [pc, #276]	; (80027c0 <handle_requestPowerOn+0x278>)
 80026ac:	f7ff fc78 	bl	8001fa0 <fsmManager_isStateIn>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <handle_requestPowerOn+0x180>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80026b6:	4842      	ldr	r0, [pc, #264]	; (80027c0 <handle_requestPowerOn+0x278>)
 80026b8:	f7ff fc88 	bl	8001fcc <fsmManager_stateIn>

				pinGsmUartRx_receive();
 80026bc:	f002 f8e2 	bl	8004884 <pinGsmUartRx_receive>
				softTimer_start(&timeout, 100);
 80026c0:	2164      	movs	r1, #100	; 0x64
 80026c2:	4841      	ldr	r0, [pc, #260]	; (80027c8 <handle_requestPowerOn+0x280>)
 80026c4:	f002 fdd4 	bl	8005270 <softTimer_start>
			}


			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80026c8:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <handle_requestPowerOn+0x288>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4941      	ldr	r1, [pc, #260]	; (80027d4 <handle_requestPowerOn+0x28c>)
 80026d0:	4841      	ldr	r0, [pc, #260]	; (80027d8 <handle_requestPowerOn+0x290>)
 80026d2:	f003 fcfc 	bl	80060ce <string_containsWithinLength>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00e      	beq.n	80026fa <handle_requestPowerOn+0x1b2>
				flags_gsmModule.bits.isPowered = 1;
 80026dc:	4a3f      	ldr	r2, [pc, #252]	; (80027dc <handle_requestPowerOn+0x294>)
 80026de:	7853      	ldrb	r3, [r2, #1]
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestPowerOn = 0;
 80026e6:	4a3d      	ldr	r2, [pc, #244]	; (80027dc <handle_requestPowerOn+0x294>)
 80026e8:	7813      	ldrb	r3, [r2, #0]
 80026ea:	f36f 0300 	bfc	r3, #0, #1
 80026ee:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 80026f0:	2100      	movs	r1, #0
 80026f2:	4833      	ldr	r0, [pc, #204]	; (80027c0 <handle_requestPowerOn+0x278>)
 80026f4:	f7ff fc32 	bl	8001f5c <fsmManager_gotoState>
 80026f8:	e009      	b.n	800270e <handle_requestPowerOn+0x1c6>
			}
			else if(softTimer_expired(&timeout)) {
 80026fa:	4833      	ldr	r0, [pc, #204]	; (80027c8 <handle_requestPowerOn+0x280>)
 80026fc:	f002 fdcc 	bl	8005298 <softTimer_expired>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <handle_requestPowerOn+0x1c6>
				//The module is powered off
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8002706:	2100      	movs	r1, #0
 8002708:	482d      	ldr	r0, [pc, #180]	; (80027c0 <handle_requestPowerOn+0x278>)
 800270a:	f7ff fc27 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 800270e:	482c      	ldr	r0, [pc, #176]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002710:	f7ff fc51 	bl	8001fb6 <fsmManager_isStateOut>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d04a      	beq.n	80027b0 <handle_requestPowerOn+0x268>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 800271a:	4829      	ldr	r0, [pc, #164]	; (80027c0 <handle_requestPowerOn+0x278>)
 800271c:	f7ff fc65 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002720:	e046      	b.n	80027b0 <handle_requestPowerOn+0x268>



		case __gsmModule_requestPowerOn_error:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002722:	4827      	ldr	r0, [pc, #156]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002724:	f7ff fc3c 	bl	8001fa0 <fsmManager_isStateIn>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <handle_requestPowerOn+0x1ec>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 800272e:	4824      	ldr	r0, [pc, #144]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002730:	f7ff fc4c 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestPowerOn = 0;
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <handle_requestPowerOn+0x294>)
 8002736:	7813      	ldrb	r3, [r2, #0]
 8002738:	f36f 0300 	bfc	r3, #0, #1
 800273c:	7013      	strb	r3, [r2, #0]
			flags_gsmModuleError.bits.powerOn = 1;
 800273e:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <handle_requestPowerOn+0x298>)
 8002740:	7813      	ldrb	r3, [r2, #0]
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8002748:	2100      	movs	r1, #0
 800274a:	481d      	ldr	r0, [pc, #116]	; (80027c0 <handle_requestPowerOn+0x278>)
 800274c:	f7ff fc06 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002750:	481b      	ldr	r0, [pc, #108]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002752:	f7ff fc30 	bl	8001fb6 <fsmManager_isStateOut>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d02b      	beq.n	80027b4 <handle_requestPowerOn+0x26c>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 800275c:	4818      	ldr	r0, [pc, #96]	; (80027c0 <handle_requestPowerOn+0x278>)
 800275e:	f7ff fc44 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002762:	e027      	b.n	80027b4 <handle_requestPowerOn+0x26c>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002764:	4816      	ldr	r0, [pc, #88]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002766:	f7ff fc1b 	bl	8001fa0 <fsmManager_isStateIn>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <handle_requestPowerOn+0x22e>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 8002770:	4813      	ldr	r0, [pc, #76]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002772:	f7ff fc2b 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestPowerOn = 0;
 8002776:	4a19      	ldr	r2, [pc, #100]	; (80027dc <handle_requestPowerOn+0x294>)
 8002778:	7813      	ldrb	r3, [r2, #0]
 800277a:	f36f 0300 	bfc	r3, #0, #1
 800277e:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8002780:	2100      	movs	r1, #0
 8002782:	480f      	ldr	r0, [pc, #60]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002784:	f7ff fbea 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002788:	480d      	ldr	r0, [pc, #52]	; (80027c0 <handle_requestPowerOn+0x278>)
 800278a:	f7ff fc14 	bl	8001fb6 <fsmManager_isStateOut>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d011      	beq.n	80027b8 <handle_requestPowerOn+0x270>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 8002794:	480a      	ldr	r0, [pc, #40]	; (80027c0 <handle_requestPowerOn+0x278>)
 8002796:	f7ff fc28 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800279a:	e00d      	b.n	80027b8 <handle_requestPowerOn+0x270>
			break;
 800279c:	bf00      	nop
 800279e:	e00c      	b.n	80027ba <handle_requestPowerOn+0x272>
			break;
 80027a0:	bf00      	nop
 80027a2:	e00a      	b.n	80027ba <handle_requestPowerOn+0x272>
			break;
 80027a4:	bf00      	nop
 80027a6:	e008      	b.n	80027ba <handle_requestPowerOn+0x272>
			break;
 80027a8:	bf00      	nop
 80027aa:	e006      	b.n	80027ba <handle_requestPowerOn+0x272>
			break;
 80027ac:	bf00      	nop
 80027ae:	e004      	b.n	80027ba <handle_requestPowerOn+0x272>
			break;
 80027b0:	bf00      	nop
 80027b2:	e002      	b.n	80027ba <handle_requestPowerOn+0x272>
			break;
 80027b4:	bf00      	nop
 80027b6:	e000      	b.n	80027ba <handle_requestPowerOn+0x272>
			break;
 80027b8:	bf00      	nop
	}
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000624 	.word	0x20000624
 80027c4:	2000060c 	.word	0x2000060c
 80027c8:	20000618 	.word	0x20000618
 80027cc:	0800bb58 	.word	0x0800bb58
 80027d0:	200004cc 	.word	0x200004cc
 80027d4:	0800bd74 	.word	0x0800bd74
 80027d8:	200003f8 	.word	0x200003f8
 80027dc:	20000600 	.word	0x20000600
 80027e0:	20000604 	.word	0x20000604

080027e4 <handle_requestPowerOff>:

static void handle_requestPowerOff(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestPowerOff_state)) {
 80027e8:	4884      	ldr	r0, [pc, #528]	; (80029fc <handle_requestPowerOff+0x218>)
 80027ea:	f7ff fbce 	bl	8001f8a <fsmManager_getState>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b05      	cmp	r3, #5
 80027f2:	f200 8100 	bhi.w	80029f6 <handle_requestPowerOff+0x212>
 80027f6:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <handle_requestPowerOff+0x18>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	08002815 	.word	0x08002815
 8002800:	08002845 	.word	0x08002845
 8002804:	0800287b 	.word	0x0800287b
 8002808:	080028df 	.word	0x080028df
 800280c:	08002929 	.word	0x08002929
 8002810:	0800299f 	.word	0x0800299f
		case __gsmModule_requestPowerOff_idle:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002814:	4879      	ldr	r0, [pc, #484]	; (80029fc <handle_requestPowerOff+0x218>)
 8002816:	f7ff fbc3 	bl	8001fa0 <fsmManager_isStateIn>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <handle_requestPowerOff+0x42>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 8002820:	4876      	ldr	r0, [pc, #472]	; (80029fc <handle_requestPowerOff+0x218>)
 8002822:	f7ff fbd3 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_send_atCpowd1);
 8002826:	2101      	movs	r1, #1
 8002828:	4874      	ldr	r0, [pc, #464]	; (80029fc <handle_requestPowerOff+0x218>)
 800282a:	f7ff fb97 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 800282e:	4873      	ldr	r0, [pc, #460]	; (80029fc <handle_requestPowerOff+0x218>)
 8002830:	f7ff fbc1 	bl	8001fb6 <fsmManager_isStateOut>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80d2 	beq.w	80029e0 <handle_requestPowerOff+0x1fc>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 800283c:	486f      	ldr	r0, [pc, #444]	; (80029fc <handle_requestPowerOff+0x218>)
 800283e:	f7ff fbd4 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002842:	e0cd      	b.n	80029e0 <handle_requestPowerOff+0x1fc>



		case __gsmModule_requestPowerOff_send_atCpowd1:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002844:	486d      	ldr	r0, [pc, #436]	; (80029fc <handle_requestPowerOff+0x218>)
 8002846:	f7ff fbab 	bl	8001fa0 <fsmManager_isStateIn>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <handle_requestPowerOff+0x72>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 8002850:	486a      	ldr	r0, [pc, #424]	; (80029fc <handle_requestPowerOff+0x218>)
 8002852:	f7ff fbbb 	bl	8001fcc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cpowd1);
 8002856:	486a      	ldr	r0, [pc, #424]	; (8002a00 <handle_requestPowerOff+0x21c>)
 8002858:	f001 ffd6 	bl	8004808 <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_check_atCpowd1);
 800285c:	2102      	movs	r1, #2
 800285e:	4867      	ldr	r0, [pc, #412]	; (80029fc <handle_requestPowerOff+0x218>)
 8002860:	f7ff fb7c 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 8002864:	4865      	ldr	r0, [pc, #404]	; (80029fc <handle_requestPowerOff+0x218>)
 8002866:	f7ff fba6 	bl	8001fb6 <fsmManager_isStateOut>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80b9 	beq.w	80029e4 <handle_requestPowerOff+0x200>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 8002872:	4862      	ldr	r0, [pc, #392]	; (80029fc <handle_requestPowerOff+0x218>)
 8002874:	f7ff fbb9 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002878:	e0b4      	b.n	80029e4 <handle_requestPowerOff+0x200>



		case __gsmModule_requestPowerOff_check_atCpowd1:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 800287a:	4860      	ldr	r0, [pc, #384]	; (80029fc <handle_requestPowerOff+0x218>)
 800287c:	f7ff fb90 	bl	8001fa0 <fsmManager_isStateIn>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <handle_requestPowerOff+0xb2>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 8002886:	485d      	ldr	r0, [pc, #372]	; (80029fc <handle_requestPowerOff+0x218>)
 8002888:	f7ff fba0 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 2000);
 800288c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002890:	485c      	ldr	r0, [pc, #368]	; (8002a04 <handle_requestPowerOff+0x220>)
 8002892:	f002 fced 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_normal_powerdown, gsmRxDataChunkLen)) {
 8002896:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <handle_requestPowerOff+0x224>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	495b      	ldr	r1, [pc, #364]	; (8002a0c <handle_requestPowerOff+0x228>)
 800289e:	485c      	ldr	r0, [pc, #368]	; (8002a10 <handle_requestPowerOff+0x22c>)
 80028a0:	f003 fc15 	bl	80060ce <string_containsWithinLength>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <handle_requestPowerOff+0xd0>
				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_send_at);
 80028aa:	2103      	movs	r1, #3
 80028ac:	4853      	ldr	r0, [pc, #332]	; (80029fc <handle_requestPowerOff+0x218>)
 80028ae:	f7ff fb55 	bl	8001f5c <fsmManager_gotoState>
 80028b2:	e009      	b.n	80028c8 <handle_requestPowerOff+0xe4>
			}
			else if(softTimer_expired(&timeout)) {
 80028b4:	4853      	ldr	r0, [pc, #332]	; (8002a04 <handle_requestPowerOff+0x220>)
 80028b6:	f002 fcef 	bl	8005298 <softTimer_expired>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <handle_requestPowerOff+0xe4>
				//The module is powered off
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOff_send_at);
 80028c0:	2103      	movs	r1, #3
 80028c2:	4854      	ldr	r0, [pc, #336]	; (8002a14 <handle_requestPowerOff+0x230>)
 80028c4:	f7ff fb4a 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 80028c8:	484c      	ldr	r0, [pc, #304]	; (80029fc <handle_requestPowerOff+0x218>)
 80028ca:	f7ff fb74 	bl	8001fb6 <fsmManager_isStateOut>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8089 	beq.w	80029e8 <handle_requestPowerOff+0x204>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 80028d6:	4849      	ldr	r0, [pc, #292]	; (80029fc <handle_requestPowerOff+0x218>)
 80028d8:	f7ff fb87 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80028dc:	e084      	b.n	80029e8 <handle_requestPowerOff+0x204>



		case __gsmModule_requestPowerOff_send_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 80028de:	4847      	ldr	r0, [pc, #284]	; (80029fc <handle_requestPowerOff+0x218>)
 80028e0:	f7ff fb5e 	bl	8001fa0 <fsmManager_isStateIn>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <handle_requestPowerOff+0x116>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 80028ea:	4844      	ldr	r0, [pc, #272]	; (80029fc <handle_requestPowerOff+0x218>)
 80028ec:	f7ff fb6e 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 2000);
 80028f0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80028f4:	4843      	ldr	r0, [pc, #268]	; (8002a04 <handle_requestPowerOff+0x220>)
 80028f6:	f002 fcbb 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80028fa:	4842      	ldr	r0, [pc, #264]	; (8002a04 <handle_requestPowerOff+0x220>)
 80028fc:	f002 fccc 	bl	8005298 <softTimer_expired>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <handle_requestPowerOff+0x130>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_at);
 8002906:	4844      	ldr	r0, [pc, #272]	; (8002a18 <handle_requestPowerOff+0x234>)
 8002908:	f001 ff7e 	bl	8004808 <pinGsmUartTx_transmit>

				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_check_at);
 800290c:	2104      	movs	r1, #4
 800290e:	483b      	ldr	r0, [pc, #236]	; (80029fc <handle_requestPowerOff+0x218>)
 8002910:	f7ff fb24 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 8002914:	4839      	ldr	r0, [pc, #228]	; (80029fc <handle_requestPowerOff+0x218>)
 8002916:	f7ff fb4e 	bl	8001fb6 <fsmManager_isStateOut>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d065      	beq.n	80029ec <handle_requestPowerOff+0x208>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 8002920:	4836      	ldr	r0, [pc, #216]	; (80029fc <handle_requestPowerOff+0x218>)
 8002922:	f7ff fb62 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002926:	e061      	b.n	80029ec <handle_requestPowerOff+0x208>



		case __gsmModule_requestPowerOff_check_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002928:	4834      	ldr	r0, [pc, #208]	; (80029fc <handle_requestPowerOff+0x218>)
 800292a:	f7ff fb39 	bl	8001fa0 <fsmManager_isStateIn>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <handle_requestPowerOff+0x160>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 8002934:	4831      	ldr	r0, [pc, #196]	; (80029fc <handle_requestPowerOff+0x218>)
 8002936:	f7ff fb49 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 500);
 800293a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800293e:	4831      	ldr	r0, [pc, #196]	; (8002a04 <handle_requestPowerOff+0x220>)
 8002940:	f002 fc96 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002944:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <handle_requestPowerOff+0x224>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	4934      	ldr	r1, [pc, #208]	; (8002a1c <handle_requestPowerOff+0x238>)
 800294c:	4830      	ldr	r0, [pc, #192]	; (8002a10 <handle_requestPowerOff+0x22c>)
 800294e:	f003 fbbe 	bl	80060ce <string_containsWithinLength>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d004      	beq.n	8002962 <handle_requestPowerOff+0x17e>
				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_send_atCpowd1);
 8002958:	2101      	movs	r1, #1
 800295a:	4828      	ldr	r0, [pc, #160]	; (80029fc <handle_requestPowerOff+0x218>)
 800295c:	f7ff fafe 	bl	8001f5c <fsmManager_gotoState>
 8002960:	e013      	b.n	800298a <handle_requestPowerOff+0x1a6>
			}
			else if(softTimer_expired(&timeout)) {
 8002962:	4828      	ldr	r0, [pc, #160]	; (8002a04 <handle_requestPowerOff+0x220>)
 8002964:	f002 fc98 	bl	8005298 <softTimer_expired>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <handle_requestPowerOff+0x1a6>
				flags_gsmModule.bits.requestPowerOff = 0;
 800296e:	4a2c      	ldr	r2, [pc, #176]	; (8002a20 <handle_requestPowerOff+0x23c>)
 8002970:	7813      	ldrb	r3, [r2, #0]
 8002972:	f36f 0341 	bfc	r3, #1, #1
 8002976:	7013      	strb	r3, [r2, #0]
				flags_gsmModule.bits.isPowered = 0;
 8002978:	4a29      	ldr	r2, [pc, #164]	; (8002a20 <handle_requestPowerOff+0x23c>)
 800297a:	7853      	ldrb	r3, [r2, #1]
 800297c:	f36f 0382 	bfc	r3, #2, #1
 8002980:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 8002982:	2100      	movs	r1, #0
 8002984:	481d      	ldr	r0, [pc, #116]	; (80029fc <handle_requestPowerOff+0x218>)
 8002986:	f7ff fae9 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 800298a:	481c      	ldr	r0, [pc, #112]	; (80029fc <handle_requestPowerOff+0x218>)
 800298c:	f7ff fb13 	bl	8001fb6 <fsmManager_isStateOut>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d02c      	beq.n	80029f0 <handle_requestPowerOff+0x20c>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 8002996:	4819      	ldr	r0, [pc, #100]	; (80029fc <handle_requestPowerOff+0x218>)
 8002998:	f7ff fb27 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800299c:	e028      	b.n	80029f0 <handle_requestPowerOff+0x20c>



		case __gsmModule_requestPowerOff_error:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 800299e:	4817      	ldr	r0, [pc, #92]	; (80029fc <handle_requestPowerOff+0x218>)
 80029a0:	f7ff fafe 	bl	8001fa0 <fsmManager_isStateIn>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <handle_requestPowerOff+0x1cc>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 80029aa:	4814      	ldr	r0, [pc, #80]	; (80029fc <handle_requestPowerOff+0x218>)
 80029ac:	f7ff fb0e 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.powerOff = 1;
 80029b0:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <handle_requestPowerOff+0x240>)
 80029b2:	7813      	ldrb	r3, [r2, #0]
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestPowerOff = 0;
 80029ba:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <handle_requestPowerOff+0x23c>)
 80029bc:	7813      	ldrb	r3, [r2, #0]
 80029be:	f36f 0341 	bfc	r3, #1, #1
 80029c2:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 80029c4:	2100      	movs	r1, #0
 80029c6:	480d      	ldr	r0, [pc, #52]	; (80029fc <handle_requestPowerOff+0x218>)
 80029c8:	f7ff fac8 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 80029cc:	480b      	ldr	r0, [pc, #44]	; (80029fc <handle_requestPowerOff+0x218>)
 80029ce:	f7ff faf2 	bl	8001fb6 <fsmManager_isStateOut>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <handle_requestPowerOff+0x210>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 80029d8:	4808      	ldr	r0, [pc, #32]	; (80029fc <handle_requestPowerOff+0x218>)
 80029da:	f7ff fb06 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80029de:	e009      	b.n	80029f4 <handle_requestPowerOff+0x210>
			break;
 80029e0:	bf00      	nop
 80029e2:	e008      	b.n	80029f6 <handle_requestPowerOff+0x212>
			break;
 80029e4:	bf00      	nop
 80029e6:	e006      	b.n	80029f6 <handle_requestPowerOff+0x212>
			break;
 80029e8:	bf00      	nop
 80029ea:	e004      	b.n	80029f6 <handle_requestPowerOff+0x212>
			break;
 80029ec:	bf00      	nop
 80029ee:	e002      	b.n	80029f6 <handle_requestPowerOff+0x212>
			break;
 80029f0:	bf00      	nop
 80029f2:	e000      	b.n	80029f6 <handle_requestPowerOff+0x212>
			break;
 80029f4:	bf00      	nop
	}


}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000630 	.word	0x20000630
 8002a00:	0800bb60 	.word	0x0800bb60
 8002a04:	20000618 	.word	0x20000618
 8002a08:	200004cc 	.word	0x200004cc
 8002a0c:	0800bd84 	.word	0x0800bd84
 8002a10:	200003f8 	.word	0x200003f8
 8002a14:	20000624 	.word	0x20000624
 8002a18:	0800bb58 	.word	0x0800bb58
 8002a1c:	0800bd74 	.word	0x0800bd74
 8002a20:	20000600 	.word	0x20000600
 8002a24:	20000604 	.word	0x20000604

08002a28 <handle_requestGpsOn>:

static void handle_requestGpsOn(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsOn_state)) {
 8002a2c:	4897      	ldr	r0, [pc, #604]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002a2e:	f7ff faac 	bl	8001f8a <fsmManager_getState>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	f200 80fe 	bhi.w	8002c36 <handle_requestGpsOn+0x20e>
 8002a3a:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <handle_requestGpsOn+0x18>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002a59 	.word	0x08002a59
 8002a44:	08002a89 	.word	0x08002a89
 8002a48:	08002ad3 	.word	0x08002ad3
 8002a4c:	08002b35 	.word	0x08002b35
 8002a50:	08002b7f 	.word	0x08002b7f
 8002a54:	08002bf5 	.word	0x08002bf5
		case __gsmModule_requestGpsOn_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002a58:	488c      	ldr	r0, [pc, #560]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002a5a:	f7ff faa1 	bl	8001fa0 <fsmManager_isStateIn>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <handle_requestGpsOn+0x42>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002a64:	4889      	ldr	r0, [pc, #548]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002a66:	f7ff fab1 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpspwr1);
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4887      	ldr	r0, [pc, #540]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002a6e:	f7ff fa75 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002a72:	4886      	ldr	r0, [pc, #536]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002a74:	f7ff fa9f 	bl	8001fb6 <fsmManager_isStateOut>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80f7 	beq.w	8002c6e <handle_requestGpsOn+0x246>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002a80:	4882      	ldr	r0, [pc, #520]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002a82:	f7ff fab2 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002a86:	e0f2      	b.n	8002c6e <handle_requestGpsOn+0x246>



		case __gsmModule_requestGpsOn_send_atCgpspwr1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002a88:	4880      	ldr	r0, [pc, #512]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002a8a:	f7ff fa89 	bl	8001fa0 <fsmManager_isStateIn>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d006      	beq.n	8002aa2 <handle_requestGpsOn+0x7a>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002a94:	487d      	ldr	r0, [pc, #500]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002a96:	f7ff fa99 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002a9a:	2164      	movs	r1, #100	; 0x64
 8002a9c:	487c      	ldr	r0, [pc, #496]	; (8002c90 <handle_requestGpsOn+0x268>)
 8002a9e:	f002 fbe7 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002aa2:	487b      	ldr	r0, [pc, #492]	; (8002c90 <handle_requestGpsOn+0x268>)
 8002aa4:	f002 fbf8 	bl	8005298 <softTimer_expired>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <handle_requestGpsOn+0x94>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpspwr1);
 8002aae:	4879      	ldr	r0, [pc, #484]	; (8002c94 <handle_requestGpsOn+0x26c>)
 8002ab0:	f001 feaa 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_waitOk_atCgpspwr1);
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4875      	ldr	r0, [pc, #468]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002ab8:	f7ff fa50 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002abc:	4873      	ldr	r0, [pc, #460]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002abe:	f7ff fa7a 	bl	8001fb6 <fsmManager_isStateOut>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80d4 	beq.w	8002c72 <handle_requestGpsOn+0x24a>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002aca:	4870      	ldr	r0, [pc, #448]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002acc:	f7ff fa8d 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002ad0:	e0cf      	b.n	8002c72 <handle_requestGpsOn+0x24a>



		case __gsmModule_requestGpsOn_waitOk_atCgpspwr1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002ad2:	486e      	ldr	r0, [pc, #440]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002ad4:	f7ff fa64 	bl	8001fa0 <fsmManager_isStateIn>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <handle_requestGpsOn+0xc4>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002ade:	486b      	ldr	r0, [pc, #428]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002ae0:	f7ff fa74 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002ae4:	2164      	movs	r1, #100	; 0x64
 8002ae6:	486a      	ldr	r0, [pc, #424]	; (8002c90 <handle_requestGpsOn+0x268>)
 8002ae8:	f002 fbc2 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002aec:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <handle_requestGpsOn+0x270>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	496a      	ldr	r1, [pc, #424]	; (8002c9c <handle_requestGpsOn+0x274>)
 8002af4:	486a      	ldr	r0, [pc, #424]	; (8002ca0 <handle_requestGpsOn+0x278>)
 8002af6:	f003 faea 	bl	80060ce <string_containsWithinLength>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d004      	beq.n	8002b0a <handle_requestGpsOn+0xe2>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpsrst0);
 8002b00:	2103      	movs	r1, #3
 8002b02:	4862      	ldr	r0, [pc, #392]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002b04:	f7ff fa2a 	bl	8001f5c <fsmManager_gotoState>
 8002b08:	e009      	b.n	8002b1e <handle_requestGpsOn+0xf6>
			}
			else if(softTimer_expired(&timeout)) {
 8002b0a:	4861      	ldr	r0, [pc, #388]	; (8002c90 <handle_requestGpsOn+0x268>)
 8002b0c:	f002 fbc4 	bl	8005298 <softTimer_expired>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <handle_requestGpsOn+0xf6>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpspwr1);
 8002b16:	2101      	movs	r1, #1
 8002b18:	485c      	ldr	r0, [pc, #368]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002b1a:	f7ff fa1f 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002b1e:	485b      	ldr	r0, [pc, #364]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002b20:	f7ff fa49 	bl	8001fb6 <fsmManager_isStateOut>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80a5 	beq.w	8002c76 <handle_requestGpsOn+0x24e>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002b2c:	4857      	ldr	r0, [pc, #348]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002b2e:	f7ff fa5c 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002b32:	e0a0      	b.n	8002c76 <handle_requestGpsOn+0x24e>



		case __gsmModule_requestGpsOn_send_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002b34:	4855      	ldr	r0, [pc, #340]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002b36:	f7ff fa33 	bl	8001fa0 <fsmManager_isStateIn>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d006      	beq.n	8002b4e <handle_requestGpsOn+0x126>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002b40:	4852      	ldr	r0, [pc, #328]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002b42:	f7ff fa43 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002b46:	2164      	movs	r1, #100	; 0x64
 8002b48:	4851      	ldr	r0, [pc, #324]	; (8002c90 <handle_requestGpsOn+0x268>)
 8002b4a:	f002 fb91 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002b4e:	4850      	ldr	r0, [pc, #320]	; (8002c90 <handle_requestGpsOn+0x268>)
 8002b50:	f002 fba2 	bl	8005298 <softTimer_expired>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <handle_requestGpsOn+0x140>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst0);
 8002b5a:	4852      	ldr	r0, [pc, #328]	; (8002ca4 <handle_requestGpsOn+0x27c>)
 8002b5c:	f001 fe54 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_waitOk_atCgpsrst0);
 8002b60:	2104      	movs	r1, #4
 8002b62:	484a      	ldr	r0, [pc, #296]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002b64:	f7ff f9fa 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002b68:	4848      	ldr	r0, [pc, #288]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002b6a:	f7ff fa24 	bl	8001fb6 <fsmManager_isStateOut>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8082 	beq.w	8002c7a <handle_requestGpsOn+0x252>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002b76:	4845      	ldr	r0, [pc, #276]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002b78:	f7ff fa37 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002b7c:	e07d      	b.n	8002c7a <handle_requestGpsOn+0x252>



		case __gsmModule_requestGpsOn_waitOk_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002b7e:	4843      	ldr	r0, [pc, #268]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002b80:	f7ff fa0e 	bl	8001fa0 <fsmManager_isStateIn>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <handle_requestGpsOn+0x172>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002b8a:	4840      	ldr	r0, [pc, #256]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002b8c:	f7ff fa1e 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 3000);
 8002b90:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002b94:	483e      	ldr	r0, [pc, #248]	; (8002c90 <handle_requestGpsOn+0x268>)
 8002b96:	f002 fb6b 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <handle_requestGpsOn+0x270>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	493e      	ldr	r1, [pc, #248]	; (8002c9c <handle_requestGpsOn+0x274>)
 8002ba2:	483f      	ldr	r0, [pc, #252]	; (8002ca0 <handle_requestGpsOn+0x278>)
 8002ba4:	f003 fa93 	bl	80060ce <string_containsWithinLength>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00e      	beq.n	8002bcc <handle_requestGpsOn+0x1a4>
				flags_gsmModule.bits.isGpsOn = 1;
 8002bae:	4a3e      	ldr	r2, [pc, #248]	; (8002ca8 <handle_requestGpsOn+0x280>)
 8002bb0:	7853      	ldrb	r3, [r2, #1]
 8002bb2:	f043 0308 	orr.w	r3, r3, #8
 8002bb6:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestGpsOn = 0;
 8002bb8:	4a3b      	ldr	r2, [pc, #236]	; (8002ca8 <handle_requestGpsOn+0x280>)
 8002bba:	7813      	ldrb	r3, [r2, #0]
 8002bbc:	f36f 0382 	bfc	r3, #2, #1
 8002bc0:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4831      	ldr	r0, [pc, #196]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002bc6:	f7ff f9c9 	bl	8001f5c <fsmManager_gotoState>
 8002bca:	e009      	b.n	8002be0 <handle_requestGpsOn+0x1b8>
			}
			else if(softTimer_expired(&timeout)) {
 8002bcc:	4830      	ldr	r0, [pc, #192]	; (8002c90 <handle_requestGpsOn+0x268>)
 8002bce:	f002 fb63 	bl	8005298 <softTimer_expired>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <handle_requestGpsOn+0x1b8>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpsrst0);
 8002bd8:	2103      	movs	r1, #3
 8002bda:	482c      	ldr	r0, [pc, #176]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002bdc:	f7ff f9be 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002be0:	482a      	ldr	r0, [pc, #168]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002be2:	f7ff f9e8 	bl	8001fb6 <fsmManager_isStateOut>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d048      	beq.n	8002c7e <handle_requestGpsOn+0x256>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002bec:	4827      	ldr	r0, [pc, #156]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002bee:	f7ff f9fc 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002bf2:	e044      	b.n	8002c7e <handle_requestGpsOn+0x256>

		case __gsmModule_requestGpsOn_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002bf4:	4825      	ldr	r0, [pc, #148]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002bf6:	f7ff f9d3 	bl	8001fa0 <fsmManager_isStateIn>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <handle_requestGpsOn+0x1de>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002c00:	4822      	ldr	r0, [pc, #136]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002c02:	f7ff f9e3 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.gpsOn = 1;
 8002c06:	4a29      	ldr	r2, [pc, #164]	; (8002cac <handle_requestGpsOn+0x284>)
 8002c08:	7813      	ldrb	r3, [r2, #0]
 8002c0a:	f043 0304 	orr.w	r3, r3, #4
 8002c0e:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestGpsOn = 0;
 8002c10:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <handle_requestGpsOn+0x280>)
 8002c12:	7813      	ldrb	r3, [r2, #0]
 8002c14:	f36f 0382 	bfc	r3, #2, #1
 8002c18:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	481b      	ldr	r0, [pc, #108]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002c1e:	f7ff f99d 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002c22:	481a      	ldr	r0, [pc, #104]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002c24:	f7ff f9c7 	bl	8001fb6 <fsmManager_isStateOut>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d029      	beq.n	8002c82 <handle_requestGpsOn+0x25a>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002c2e:	4817      	ldr	r0, [pc, #92]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002c30:	f7ff f9db 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002c34:	e025      	b.n	8002c82 <handle_requestGpsOn+0x25a>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002c36:	4815      	ldr	r0, [pc, #84]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002c38:	f7ff f9b2 	bl	8001fa0 <fsmManager_isStateIn>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <handle_requestGpsOn+0x220>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002c42:	4812      	ldr	r0, [pc, #72]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002c44:	f7ff f9c2 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestGpsOn = 0;
 8002c48:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <handle_requestGpsOn+0x280>)
 8002c4a:	7813      	ldrb	r3, [r2, #0]
 8002c4c:	f36f 0382 	bfc	r3, #2, #1
 8002c50:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8002c52:	2100      	movs	r1, #0
 8002c54:	480d      	ldr	r0, [pc, #52]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002c56:	f7ff f981 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002c5a:	480c      	ldr	r0, [pc, #48]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002c5c:	f7ff f9ab 	bl	8001fb6 <fsmManager_isStateOut>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00f      	beq.n	8002c86 <handle_requestGpsOn+0x25e>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002c66:	4809      	ldr	r0, [pc, #36]	; (8002c8c <handle_requestGpsOn+0x264>)
 8002c68:	f7ff f9bf 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002c6c:	e00b      	b.n	8002c86 <handle_requestGpsOn+0x25e>
			break;
 8002c6e:	bf00      	nop
 8002c70:	e00a      	b.n	8002c88 <handle_requestGpsOn+0x260>
			break;
 8002c72:	bf00      	nop
 8002c74:	e008      	b.n	8002c88 <handle_requestGpsOn+0x260>
			break;
 8002c76:	bf00      	nop
 8002c78:	e006      	b.n	8002c88 <handle_requestGpsOn+0x260>
			break;
 8002c7a:	bf00      	nop
 8002c7c:	e004      	b.n	8002c88 <handle_requestGpsOn+0x260>
			break;
 8002c7e:	bf00      	nop
 8002c80:	e002      	b.n	8002c88 <handle_requestGpsOn+0x260>
			break;
 8002c82:	bf00      	nop
 8002c84:	e000      	b.n	8002c88 <handle_requestGpsOn+0x260>
			break;
 8002c86:	bf00      	nop
	}
}
 8002c88:	bf00      	nop
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000063c 	.word	0x2000063c
 8002c90:	20000618 	.word	0x20000618
 8002c94:	0800bb70 	.word	0x0800bb70
 8002c98:	200004cc 	.word	0x200004cc
 8002c9c:	0800bd74 	.word	0x0800bd74
 8002ca0:	200003f8 	.word	0x200003f8
 8002ca4:	0800bb90 	.word	0x0800bb90
 8002ca8:	20000600 	.word	0x20000600
 8002cac:	20000604 	.word	0x20000604

08002cb0 <handle_requestGpsInfo>:

static void handle_requestGpsInfo(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsInfo_state)) {
 8002cb4:	48a9      	ldr	r0, [pc, #676]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002cb6:	f7ff f968 	bl	8001f8a <fsmManager_getState>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b05      	cmp	r3, #5
 8002cbe:	f200 8127 	bhi.w	8002f10 <handle_requestGpsInfo+0x260>
 8002cc2:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <handle_requestGpsInfo+0x18>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002ce1 	.word	0x08002ce1
 8002ccc:	08002d11 	.word	0x08002d11
 8002cd0:	08002d5d 	.word	0x08002d5d
 8002cd4:	08002dd5 	.word	0x08002dd5
 8002cd8:	08002e21 	.word	0x08002e21
 8002cdc:	08002ecf 	.word	0x08002ecf
		case __gsmModule_requestGpsInfo_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002ce0:	489e      	ldr	r0, [pc, #632]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002ce2:	f7ff f95d 	bl	8001fa0 <fsmManager_isStateIn>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <handle_requestGpsInfo+0x42>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002cec:	489b      	ldr	r0, [pc, #620]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002cee:	f7ff f96d 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsstatus);
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4899      	ldr	r0, [pc, #612]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002cf6:	f7ff f931 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002cfa:	4898      	ldr	r0, [pc, #608]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002cfc:	f7ff f95b 	bl	8001fb6 <fsmManager_isStateOut>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 811b 	beq.w	8002f3e <handle_requestGpsInfo+0x28e>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002d08:	4894      	ldr	r0, [pc, #592]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002d0a:	f7ff f96e 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002d0e:	e116      	b.n	8002f3e <handle_requestGpsInfo+0x28e>



		case __gsmModule_requestGpsInfo_send_atCgpsstatus:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002d10:	4892      	ldr	r0, [pc, #584]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002d12:	f7ff f945 	bl	8001fa0 <fsmManager_isStateIn>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <handle_requestGpsInfo+0x7c>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002d1c:	488f      	ldr	r0, [pc, #572]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002d1e:	f7ff f955 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 10000);
 8002d22:	f242 7110 	movw	r1, #10000	; 0x2710
 8002d26:	488e      	ldr	r0, [pc, #568]	; (8002f60 <handle_requestGpsInfo+0x2b0>)
 8002d28:	f002 faa2 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002d2c:	488c      	ldr	r0, [pc, #560]	; (8002f60 <handle_requestGpsInfo+0x2b0>)
 8002d2e:	f002 fab3 	bl	8005298 <softTimer_expired>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <handle_requestGpsInfo+0x96>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsstatus);
 8002d38:	488a      	ldr	r0, [pc, #552]	; (8002f64 <handle_requestGpsInfo+0x2b4>)
 8002d3a:	f001 fd65 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_check_atCgpsstatus);
 8002d3e:	2102      	movs	r1, #2
 8002d40:	4886      	ldr	r0, [pc, #536]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002d42:	f7ff f90b 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002d46:	4885      	ldr	r0, [pc, #532]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002d48:	f7ff f935 	bl	8001fb6 <fsmManager_isStateOut>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80f7 	beq.w	8002f42 <handle_requestGpsInfo+0x292>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002d54:	4881      	ldr	r0, [pc, #516]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002d56:	f7ff f948 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002d5a:	e0f2      	b.n	8002f42 <handle_requestGpsInfo+0x292>



		case __gsmModule_requestGpsInfo_check_atCgpsstatus:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002d5c:	487f      	ldr	r0, [pc, #508]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002d5e:	f7ff f91f 	bl	8001fa0 <fsmManager_isStateIn>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <handle_requestGpsInfo+0xc8>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002d68:	487c      	ldr	r0, [pc, #496]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002d6a:	f7ff f92f 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002d6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d72:	487b      	ldr	r0, [pc, #492]	; (8002f60 <handle_requestGpsInfo+0x2b0>)
 8002d74:	f002 fa7c 	bl	8005270 <softTimer_start>
			}


			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps2dFix, gsmRxDataChunkLen) ||
 8002d78:	4b7b      	ldr	r3, [pc, #492]	; (8002f68 <handle_requestGpsInfo+0x2b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	497b      	ldr	r1, [pc, #492]	; (8002f6c <handle_requestGpsInfo+0x2bc>)
 8002d80:	487b      	ldr	r0, [pc, #492]	; (8002f70 <handle_requestGpsInfo+0x2c0>)
 8002d82:	f003 f9a4 	bl	80060ce <string_containsWithinLength>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <handle_requestGpsInfo+0xf0>
			   string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps3dFix, gsmRxDataChunkLen)) {
 8002d8c:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <handle_requestGpsInfo+0x2b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	4978      	ldr	r1, [pc, #480]	; (8002f74 <handle_requestGpsInfo+0x2c4>)
 8002d94:	4876      	ldr	r0, [pc, #472]	; (8002f70 <handle_requestGpsInfo+0x2c0>)
 8002d96:	f003 f99a 	bl	80060ce <string_containsWithinLength>
 8002d9a:	4603      	mov	r3, r0
			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps2dFix, gsmRxDataChunkLen) ||
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <handle_requestGpsInfo+0xfa>

				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsinf2);
 8002da0:	2103      	movs	r1, #3
 8002da2:	486e      	ldr	r0, [pc, #440]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002da4:	f7ff f8da 	bl	8001f5c <fsmManager_gotoState>
 8002da8:	e009      	b.n	8002dbe <handle_requestGpsInfo+0x10e>
			}
			else if(softTimer_expired(&timeout)) {
 8002daa:	486d      	ldr	r0, [pc, #436]	; (8002f60 <handle_requestGpsInfo+0x2b0>)
 8002dac:	f002 fa74 	bl	8005298 <softTimer_expired>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <handle_requestGpsInfo+0x10e>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsstatus);
 8002db6:	2101      	movs	r1, #1
 8002db8:	4868      	ldr	r0, [pc, #416]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002dba:	f7ff f8cf 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002dbe:	4867      	ldr	r0, [pc, #412]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002dc0:	f7ff f8f9 	bl	8001fb6 <fsmManager_isStateOut>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80bd 	beq.w	8002f46 <handle_requestGpsInfo+0x296>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002dcc:	4863      	ldr	r0, [pc, #396]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002dce:	f7ff f90c 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002dd2:	e0b8      	b.n	8002f46 <handle_requestGpsInfo+0x296>



		case __gsmModule_requestGpsInfo_send_atCgpsinf2:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002dd4:	4861      	ldr	r0, [pc, #388]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002dd6:	f7ff f8e3 	bl	8001fa0 <fsmManager_isStateIn>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <handle_requestGpsInfo+0x140>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002de0:	485e      	ldr	r0, [pc, #376]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002de2:	f7ff f8f3 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 8000);
 8002de6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002dea:	485d      	ldr	r0, [pc, #372]	; (8002f60 <handle_requestGpsInfo+0x2b0>)
 8002dec:	f002 fa40 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002df0:	485b      	ldr	r0, [pc, #364]	; (8002f60 <handle_requestGpsInfo+0x2b0>)
 8002df2:	f002 fa51 	bl	8005298 <softTimer_expired>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <handle_requestGpsInfo+0x15a>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsinf2);
 8002dfc:	485e      	ldr	r0, [pc, #376]	; (8002f78 <handle_requestGpsInfo+0x2c8>)
 8002dfe:	f001 fd03 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_get_atCgpsinf2);
 8002e02:	2104      	movs	r1, #4
 8002e04:	4855      	ldr	r0, [pc, #340]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002e06:	f7ff f8a9 	bl	8001f5c <fsmManager_gotoState>

			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002e0a:	4854      	ldr	r0, [pc, #336]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002e0c:	f7ff f8d3 	bl	8001fb6 <fsmManager_isStateOut>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8099 	beq.w	8002f4a <handle_requestGpsInfo+0x29a>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002e18:	4850      	ldr	r0, [pc, #320]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002e1a:	f7ff f8e6 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002e1e:	e094      	b.n	8002f4a <handle_requestGpsInfo+0x29a>



		case __gsmModule_requestGpsInfo_get_atCgpsinf2:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002e20:	484e      	ldr	r0, [pc, #312]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002e22:	f7ff f8bd 	bl	8001fa0 <fsmManager_isStateIn>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <handle_requestGpsInfo+0x18c>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002e2c:	484b      	ldr	r0, [pc, #300]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002e2e:	f7ff f8cd 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002e32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e36:	484a      	ldr	r0, [pc, #296]	; (8002f60 <handle_requestGpsInfo+0x2b0>)
 8002e38:	f002 fa1a 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gpsInf2, gsmRxDataChunkLen)) {
 8002e3c:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <handle_requestGpsInfo+0x2b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	494e      	ldr	r1, [pc, #312]	; (8002f7c <handle_requestGpsInfo+0x2cc>)
 8002e44:	484a      	ldr	r0, [pc, #296]	; (8002f70 <handle_requestGpsInfo+0x2c0>)
 8002e46:	f003 f942 	bl	80060ce <string_containsWithinLength>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d02a      	beq.n	8002ea6 <handle_requestGpsInfo+0x1f6>
				countGpsInfo++;
 8002e50:	4b4b      	ldr	r3, [pc, #300]	; (8002f80 <handle_requestGpsInfo+0x2d0>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <handle_requestGpsInfo+0x2d0>)
 8002e5a:	701a      	strb	r2, [r3, #0]

				if(countGpsInfo >= COUNTGPSINFO_MAX) {
 8002e5c:	4b48      	ldr	r3, [pc, #288]	; (8002f80 <handle_requestGpsInfo+0x2d0>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d91b      	bls.n	8002e9c <handle_requestGpsInfo+0x1ec>
					flags_gsmModule.bits.isGpsFixed = 1;
 8002e64:	4a47      	ldr	r2, [pc, #284]	; (8002f84 <handle_requestGpsInfo+0x2d4>)
 8002e66:	7853      	ldrb	r3, [r2, #1]
 8002e68:	f043 0310 	orr.w	r3, r3, #16
 8002e6c:	7053      	strb	r3, [r2, #1]
					flags_gsmModule.bits.requestGpsInfo = 0;
 8002e6e:	4a45      	ldr	r2, [pc, #276]	; (8002f84 <handle_requestGpsInfo+0x2d4>)
 8002e70:	7813      	ldrb	r3, [r2, #0]
 8002e72:	f36f 03c3 	bfc	r3, #3, #1
 8002e76:	7013      	strb	r3, [r2, #0]

					string_writeStr(gsmInfo, &gsmRxDataChunk[10]);
 8002e78:	4943      	ldr	r1, [pc, #268]	; (8002f88 <handle_requestGpsInfo+0x2d8>)
 8002e7a:	4844      	ldr	r0, [pc, #272]	; (8002f8c <handle_requestGpsInfo+0x2dc>)
 8002e7c:	f003 f8d0 	bl	8006020 <string_writeStr>
					if(gsmModuleCallback != NULL) {
 8002e80:	4b43      	ldr	r3, [pc, #268]	; (8002f90 <handle_requestGpsInfo+0x2e0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <handle_requestGpsInfo+0x1e2>
						gsmModuleCallback(__gsmModuleEvent_okGpsInfo, (uint8_t *) gsmInfo);
 8002e88:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <handle_requestGpsInfo+0x2e0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	493f      	ldr	r1, [pc, #252]	; (8002f8c <handle_requestGpsInfo+0x2dc>)
 8002e8e:	2000      	movs	r0, #0
 8002e90:	4798      	blx	r3
					}

					fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8002e92:	2100      	movs	r1, #0
 8002e94:	4831      	ldr	r0, [pc, #196]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002e96:	f7ff f861 	bl	8001f5c <fsmManager_gotoState>
 8002e9a:	e00e      	b.n	8002eba <handle_requestGpsInfo+0x20a>
				}
				else {
					fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsinf2);
 8002e9c:	2103      	movs	r1, #3
 8002e9e:	482f      	ldr	r0, [pc, #188]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002ea0:	f7ff f85c 	bl	8001f5c <fsmManager_gotoState>
 8002ea4:	e009      	b.n	8002eba <handle_requestGpsInfo+0x20a>
				}
			}
			else if(softTimer_expired(&timeout)) {
 8002ea6:	482e      	ldr	r0, [pc, #184]	; (8002f60 <handle_requestGpsInfo+0x2b0>)
 8002ea8:	f002 f9f6 	bl	8005298 <softTimer_expired>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <handle_requestGpsInfo+0x20a>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsinf2);
 8002eb2:	2103      	movs	r1, #3
 8002eb4:	4829      	ldr	r0, [pc, #164]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002eb6:	f7ff f851 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002eba:	4828      	ldr	r0, [pc, #160]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002ebc:	f7ff f87b 	bl	8001fb6 <fsmManager_isStateOut>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d043      	beq.n	8002f4e <handle_requestGpsInfo+0x29e>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002ec6:	4825      	ldr	r0, [pc, #148]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002ec8:	f7ff f88f 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002ecc:	e03f      	b.n	8002f4e <handle_requestGpsInfo+0x29e>



		case __gsmModule_requestGpsInfo_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002ece:	4823      	ldr	r0, [pc, #140]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002ed0:	f7ff f866 	bl	8001fa0 <fsmManager_isStateIn>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <handle_requestGpsInfo+0x230>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002eda:	4820      	ldr	r0, [pc, #128]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002edc:	f7ff f876 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestGpsInfo = 0;
 8002ee0:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <handle_requestGpsInfo+0x2d4>)
 8002ee2:	7813      	ldrb	r3, [r2, #0]
 8002ee4:	f36f 03c3 	bfc	r3, #3, #1
 8002ee8:	7013      	strb	r3, [r2, #0]
			flags_gsmModuleError.bits.gpsInfo = 1;
 8002eea:	4a2a      	ldr	r2, [pc, #168]	; (8002f94 <handle_requestGpsInfo+0x2e4>)
 8002eec:	7813      	ldrb	r3, [r2, #0]
 8002eee:	f043 0308 	orr.w	r3, r3, #8
 8002ef2:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4819      	ldr	r0, [pc, #100]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002ef8:	f7ff f830 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002efc:	4817      	ldr	r0, [pc, #92]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002efe:	f7ff f85a 	bl	8001fb6 <fsmManager_isStateOut>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d024      	beq.n	8002f52 <handle_requestGpsInfo+0x2a2>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002f08:	4814      	ldr	r0, [pc, #80]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002f0a:	f7ff f86e 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002f0e:	e020      	b.n	8002f52 <handle_requestGpsInfo+0x2a2>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002f10:	4812      	ldr	r0, [pc, #72]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002f12:	f7ff f845 	bl	8001fa0 <fsmManager_isStateIn>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <handle_requestGpsInfo+0x272>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002f1c:	480f      	ldr	r0, [pc, #60]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002f1e:	f7ff f855 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8002f22:	2100      	movs	r1, #0
 8002f24:	480d      	ldr	r0, [pc, #52]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002f26:	f7ff f819 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002f2a:	480c      	ldr	r0, [pc, #48]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002f2c:	f7ff f843 	bl	8001fb6 <fsmManager_isStateOut>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00f      	beq.n	8002f56 <handle_requestGpsInfo+0x2a6>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002f36:	4809      	ldr	r0, [pc, #36]	; (8002f5c <handle_requestGpsInfo+0x2ac>)
 8002f38:	f7ff f857 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002f3c:	e00b      	b.n	8002f56 <handle_requestGpsInfo+0x2a6>
			break;
 8002f3e:	bf00      	nop
 8002f40:	e00a      	b.n	8002f58 <handle_requestGpsInfo+0x2a8>
			break;
 8002f42:	bf00      	nop
 8002f44:	e008      	b.n	8002f58 <handle_requestGpsInfo+0x2a8>
			break;
 8002f46:	bf00      	nop
 8002f48:	e006      	b.n	8002f58 <handle_requestGpsInfo+0x2a8>
			break;
 8002f4a:	bf00      	nop
 8002f4c:	e004      	b.n	8002f58 <handle_requestGpsInfo+0x2a8>
			break;
 8002f4e:	bf00      	nop
 8002f50:	e002      	b.n	8002f58 <handle_requestGpsInfo+0x2a8>
			break;
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <handle_requestGpsInfo+0x2a8>
			break;
 8002f56:	bf00      	nop
	}
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000648 	.word	0x20000648
 8002f60:	20000618 	.word	0x20000618
 8002f64:	0800bbb0 	.word	0x0800bbb0
 8002f68:	200004cc 	.word	0x200004cc
 8002f6c:	0800bdd8 	.word	0x0800bdd8
 8002f70:	200003f8 	.word	0x200003f8
 8002f74:	0800bde0 	.word	0x0800bde0
 8002f78:	0800bbc4 	.word	0x0800bbc4
 8002f7c:	0800bde8 	.word	0x0800bde8
 8002f80:	200004d0 	.word	0x200004d0
 8002f84:	20000600 	.word	0x20000600
 8002f88:	20000402 	.word	0x20000402
 8002f8c:	2000059c 	.word	0x2000059c
 8002f90:	20000690 	.word	0x20000690
 8002f94:	20000604 	.word	0x20000604

08002f98 <handle_requestGpsOff>:

static void handle_requestGpsOff(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsOff_state)) {
 8002f9c:	48bf      	ldr	r0, [pc, #764]	; (800329c <handle_requestGpsOff+0x304>)
 8002f9e:	f7fe fff4 	bl	8001f8a <fsmManager_getState>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b07      	cmp	r3, #7
 8002fa6:	f200 8156 	bhi.w	8003256 <handle_requestGpsOff+0x2be>
 8002faa:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <handle_requestGpsOff+0x18>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fd1 	.word	0x08002fd1
 8002fb4:	08003001 	.word	0x08003001
 8002fb8:	0800304b 	.word	0x0800304b
 8002fbc:	080030ad 	.word	0x080030ad
 8002fc0:	080030f7 	.word	0x080030f7
 8002fc4:	08003159 	.word	0x08003159
 8002fc8:	080031a1 	.word	0x080031a1
 8002fcc:	08003215 	.word	0x08003215
		case __gsmModule_requestGpsOff_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002fd0:	48b2      	ldr	r0, [pc, #712]	; (800329c <handle_requestGpsOff+0x304>)
 8002fd2:	f7fe ffe5 	bl	8001fa0 <fsmManager_isStateIn>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <handle_requestGpsOff+0x4a>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002fdc:	48af      	ldr	r0, [pc, #700]	; (800329c <handle_requestGpsOff+0x304>)
 8002fde:	f7fe fff5 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst0);
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	48ad      	ldr	r0, [pc, #692]	; (800329c <handle_requestGpsOff+0x304>)
 8002fe6:	f7fe ffb9 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002fea:	48ac      	ldr	r0, [pc, #688]	; (800329c <handle_requestGpsOff+0x304>)
 8002fec:	f7fe ffe3 	bl	8001fb6 <fsmManager_isStateOut>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 8146 	beq.w	8003284 <handle_requestGpsOff+0x2ec>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002ff8:	48a8      	ldr	r0, [pc, #672]	; (800329c <handle_requestGpsOff+0x304>)
 8002ffa:	f7fe fff6 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8002ffe:	e141      	b.n	8003284 <handle_requestGpsOff+0x2ec>



		case __gsmModule_requestGpsOff_send_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8003000:	48a6      	ldr	r0, [pc, #664]	; (800329c <handle_requestGpsOff+0x304>)
 8003002:	f7fe ffcd 	bl	8001fa0 <fsmManager_isStateIn>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <handle_requestGpsOff+0x82>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 800300c:	48a3      	ldr	r0, [pc, #652]	; (800329c <handle_requestGpsOff+0x304>)
 800300e:	f7fe ffdd 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003012:	2164      	movs	r1, #100	; 0x64
 8003014:	48a2      	ldr	r0, [pc, #648]	; (80032a0 <handle_requestGpsOff+0x308>)
 8003016:	f002 f92b 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 800301a:	48a1      	ldr	r0, [pc, #644]	; (80032a0 <handle_requestGpsOff+0x308>)
 800301c:	f002 f93c 	bl	8005298 <softTimer_expired>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d006      	beq.n	8003034 <handle_requestGpsOff+0x9c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst0);
 8003026:	489f      	ldr	r0, [pc, #636]	; (80032a4 <handle_requestGpsOff+0x30c>)
 8003028:	f001 fbee 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpsrst0);
 800302c:	2102      	movs	r1, #2
 800302e:	489b      	ldr	r0, [pc, #620]	; (800329c <handle_requestGpsOff+0x304>)
 8003030:	f7fe ff94 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8003034:	4899      	ldr	r0, [pc, #612]	; (800329c <handle_requestGpsOff+0x304>)
 8003036:	f7fe ffbe 	bl	8001fb6 <fsmManager_isStateOut>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8123 	beq.w	8003288 <handle_requestGpsOff+0x2f0>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8003042:	4896      	ldr	r0, [pc, #600]	; (800329c <handle_requestGpsOff+0x304>)
 8003044:	f7fe ffd1 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003048:	e11e      	b.n	8003288 <handle_requestGpsOff+0x2f0>



		case __gsmModule_requestGpsOff_waitOk_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 800304a:	4894      	ldr	r0, [pc, #592]	; (800329c <handle_requestGpsOff+0x304>)
 800304c:	f7fe ffa8 	bl	8001fa0 <fsmManager_isStateIn>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d006      	beq.n	8003064 <handle_requestGpsOff+0xcc>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8003056:	4891      	ldr	r0, [pc, #580]	; (800329c <handle_requestGpsOff+0x304>)
 8003058:	f7fe ffb8 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 800305c:	2164      	movs	r1, #100	; 0x64
 800305e:	4890      	ldr	r0, [pc, #576]	; (80032a0 <handle_requestGpsOff+0x308>)
 8003060:	f002 f906 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003064:	4b90      	ldr	r3, [pc, #576]	; (80032a8 <handle_requestGpsOff+0x310>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	4990      	ldr	r1, [pc, #576]	; (80032ac <handle_requestGpsOff+0x314>)
 800306c:	4890      	ldr	r0, [pc, #576]	; (80032b0 <handle_requestGpsOff+0x318>)
 800306e:	f003 f82e 	bl	80060ce <string_containsWithinLength>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <handle_requestGpsOff+0xea>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst1);
 8003078:	2103      	movs	r1, #3
 800307a:	4888      	ldr	r0, [pc, #544]	; (800329c <handle_requestGpsOff+0x304>)
 800307c:	f7fe ff6e 	bl	8001f5c <fsmManager_gotoState>
 8003080:	e009      	b.n	8003096 <handle_requestGpsOff+0xfe>
			}
			else if(softTimer_expired(&timeout)) {
 8003082:	4887      	ldr	r0, [pc, #540]	; (80032a0 <handle_requestGpsOff+0x308>)
 8003084:	f002 f908 	bl	8005298 <softTimer_expired>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <handle_requestGpsOff+0xfe>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst0);
 800308e:	2101      	movs	r1, #1
 8003090:	4882      	ldr	r0, [pc, #520]	; (800329c <handle_requestGpsOff+0x304>)
 8003092:	f7fe ff63 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8003096:	4881      	ldr	r0, [pc, #516]	; (800329c <handle_requestGpsOff+0x304>)
 8003098:	f7fe ff8d 	bl	8001fb6 <fsmManager_isStateOut>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80f4 	beq.w	800328c <handle_requestGpsOff+0x2f4>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 80030a4:	487d      	ldr	r0, [pc, #500]	; (800329c <handle_requestGpsOff+0x304>)
 80030a6:	f7fe ffa0 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80030aa:	e0ef      	b.n	800328c <handle_requestGpsOff+0x2f4>



		case __gsmModule_requestGpsOff_send_atCgpsrst1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 80030ac:	487b      	ldr	r0, [pc, #492]	; (800329c <handle_requestGpsOff+0x304>)
 80030ae:	f7fe ff77 	bl	8001fa0 <fsmManager_isStateIn>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d006      	beq.n	80030c6 <handle_requestGpsOff+0x12e>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 80030b8:	4878      	ldr	r0, [pc, #480]	; (800329c <handle_requestGpsOff+0x304>)
 80030ba:	f7fe ff87 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80030be:	2164      	movs	r1, #100	; 0x64
 80030c0:	4877      	ldr	r0, [pc, #476]	; (80032a0 <handle_requestGpsOff+0x308>)
 80030c2:	f002 f8d5 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80030c6:	4876      	ldr	r0, [pc, #472]	; (80032a0 <handle_requestGpsOff+0x308>)
 80030c8:	f002 f8e6 	bl	8005298 <softTimer_expired>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d006      	beq.n	80030e0 <handle_requestGpsOff+0x148>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst1);
 80030d2:	4878      	ldr	r0, [pc, #480]	; (80032b4 <handle_requestGpsOff+0x31c>)
 80030d4:	f001 fb98 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpsrst1);
 80030d8:	2104      	movs	r1, #4
 80030da:	4870      	ldr	r0, [pc, #448]	; (800329c <handle_requestGpsOff+0x304>)
 80030dc:	f7fe ff3e 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 80030e0:	486e      	ldr	r0, [pc, #440]	; (800329c <handle_requestGpsOff+0x304>)
 80030e2:	f7fe ff68 	bl	8001fb6 <fsmManager_isStateOut>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80d1 	beq.w	8003290 <handle_requestGpsOff+0x2f8>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 80030ee:	486b      	ldr	r0, [pc, #428]	; (800329c <handle_requestGpsOff+0x304>)
 80030f0:	f7fe ff7b 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80030f4:	e0cc      	b.n	8003290 <handle_requestGpsOff+0x2f8>



		case __gsmModule_requestGpsOff_waitOk_atCgpsrst1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 80030f6:	4869      	ldr	r0, [pc, #420]	; (800329c <handle_requestGpsOff+0x304>)
 80030f8:	f7fe ff52 	bl	8001fa0 <fsmManager_isStateIn>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <handle_requestGpsOff+0x178>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8003102:	4866      	ldr	r0, [pc, #408]	; (800329c <handle_requestGpsOff+0x304>)
 8003104:	f7fe ff62 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003108:	2164      	movs	r1, #100	; 0x64
 800310a:	4865      	ldr	r0, [pc, #404]	; (80032a0 <handle_requestGpsOff+0x308>)
 800310c:	f002 f8b0 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003110:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <handle_requestGpsOff+0x310>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	4965      	ldr	r1, [pc, #404]	; (80032ac <handle_requestGpsOff+0x314>)
 8003118:	4865      	ldr	r0, [pc, #404]	; (80032b0 <handle_requestGpsOff+0x318>)
 800311a:	f002 ffd8 	bl	80060ce <string_containsWithinLength>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <handle_requestGpsOff+0x196>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpspwr0);
 8003124:	2105      	movs	r1, #5
 8003126:	485d      	ldr	r0, [pc, #372]	; (800329c <handle_requestGpsOff+0x304>)
 8003128:	f7fe ff18 	bl	8001f5c <fsmManager_gotoState>
 800312c:	e009      	b.n	8003142 <handle_requestGpsOff+0x1aa>
			}
			else if(softTimer_expired(&timeout)) {
 800312e:	485c      	ldr	r0, [pc, #368]	; (80032a0 <handle_requestGpsOff+0x308>)
 8003130:	f002 f8b2 	bl	8005298 <softTimer_expired>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <handle_requestGpsOff+0x1aa>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst1);
 800313a:	2103      	movs	r1, #3
 800313c:	4857      	ldr	r0, [pc, #348]	; (800329c <handle_requestGpsOff+0x304>)
 800313e:	f7fe ff0d 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8003142:	4856      	ldr	r0, [pc, #344]	; (800329c <handle_requestGpsOff+0x304>)
 8003144:	f7fe ff37 	bl	8001fb6 <fsmManager_isStateOut>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80a2 	beq.w	8003294 <handle_requestGpsOff+0x2fc>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8003150:	4852      	ldr	r0, [pc, #328]	; (800329c <handle_requestGpsOff+0x304>)
 8003152:	f7fe ff4a 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003156:	e09d      	b.n	8003294 <handle_requestGpsOff+0x2fc>



		case __gsmModule_requestGpsOff_send_atCgpspwr0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8003158:	4850      	ldr	r0, [pc, #320]	; (800329c <handle_requestGpsOff+0x304>)
 800315a:	f7fe ff21 	bl	8001fa0 <fsmManager_isStateIn>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d006      	beq.n	8003172 <handle_requestGpsOff+0x1da>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8003164:	484d      	ldr	r0, [pc, #308]	; (800329c <handle_requestGpsOff+0x304>)
 8003166:	f7fe ff31 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 800316a:	2164      	movs	r1, #100	; 0x64
 800316c:	484c      	ldr	r0, [pc, #304]	; (80032a0 <handle_requestGpsOff+0x308>)
 800316e:	f002 f87f 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003172:	484b      	ldr	r0, [pc, #300]	; (80032a0 <handle_requestGpsOff+0x308>)
 8003174:	f002 f890 	bl	8005298 <softTimer_expired>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <handle_requestGpsOff+0x1f4>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpspwr0);
 800317e:	484e      	ldr	r0, [pc, #312]	; (80032b8 <handle_requestGpsOff+0x320>)
 8003180:	f001 fb42 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpspwr0);
 8003184:	2106      	movs	r1, #6
 8003186:	4845      	ldr	r0, [pc, #276]	; (800329c <handle_requestGpsOff+0x304>)
 8003188:	f7fe fee8 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 800318c:	4843      	ldr	r0, [pc, #268]	; (800329c <handle_requestGpsOff+0x304>)
 800318e:	f7fe ff12 	bl	8001fb6 <fsmManager_isStateOut>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d07f      	beq.n	8003298 <handle_requestGpsOff+0x300>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8003198:	4840      	ldr	r0, [pc, #256]	; (800329c <handle_requestGpsOff+0x304>)
 800319a:	f7fe ff26 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800319e:	e07b      	b.n	8003298 <handle_requestGpsOff+0x300>



		case __gsmModule_requestGpsOff_waitOk_atCgpspwr0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 80031a0:	483e      	ldr	r0, [pc, #248]	; (800329c <handle_requestGpsOff+0x304>)
 80031a2:	f7fe fefd 	bl	8001fa0 <fsmManager_isStateIn>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d006      	beq.n	80031ba <handle_requestGpsOff+0x222>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 80031ac:	483b      	ldr	r0, [pc, #236]	; (800329c <handle_requestGpsOff+0x304>)
 80031ae:	f7fe ff0d 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80031b2:	2164      	movs	r1, #100	; 0x64
 80031b4:	483a      	ldr	r0, [pc, #232]	; (80032a0 <handle_requestGpsOff+0x308>)
 80031b6:	f002 f85b 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80031ba:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <handle_requestGpsOff+0x310>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	493a      	ldr	r1, [pc, #232]	; (80032ac <handle_requestGpsOff+0x314>)
 80031c2:	483b      	ldr	r0, [pc, #236]	; (80032b0 <handle_requestGpsOff+0x318>)
 80031c4:	f002 ff83 	bl	80060ce <string_containsWithinLength>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00e      	beq.n	80031ec <handle_requestGpsOff+0x254>
				flags_gsmModule.bits.requestGpsOff = 0;
 80031ce:	4a3b      	ldr	r2, [pc, #236]	; (80032bc <handle_requestGpsOff+0x324>)
 80031d0:	7813      	ldrb	r3, [r2, #0]
 80031d2:	f36f 1304 	bfc	r3, #4, #1
 80031d6:	7013      	strb	r3, [r2, #0]
				flags_gsmModule.bits.isGpsOn = 0;
 80031d8:	4a38      	ldr	r2, [pc, #224]	; (80032bc <handle_requestGpsOff+0x324>)
 80031da:	7853      	ldrb	r3, [r2, #1]
 80031dc:	f36f 03c3 	bfc	r3, #3, #1
 80031e0:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_idle);
 80031e2:	2100      	movs	r1, #0
 80031e4:	482d      	ldr	r0, [pc, #180]	; (800329c <handle_requestGpsOff+0x304>)
 80031e6:	f7fe feb9 	bl	8001f5c <fsmManager_gotoState>
 80031ea:	e009      	b.n	8003200 <handle_requestGpsOff+0x268>
			}
			else if(softTimer_expired(&timeout)) {
 80031ec:	482c      	ldr	r0, [pc, #176]	; (80032a0 <handle_requestGpsOff+0x308>)
 80031ee:	f002 f853 	bl	8005298 <softTimer_expired>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <handle_requestGpsOff+0x268>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpspwr0);
 80031f8:	2105      	movs	r1, #5
 80031fa:	4828      	ldr	r0, [pc, #160]	; (800329c <handle_requestGpsOff+0x304>)
 80031fc:	f7fe feae 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8003200:	4826      	ldr	r0, [pc, #152]	; (800329c <handle_requestGpsOff+0x304>)
 8003202:	f7fe fed8 	bl	8001fb6 <fsmManager_isStateOut>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d05b      	beq.n	80032c4 <handle_requestGpsOff+0x32c>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 800320c:	4823      	ldr	r0, [pc, #140]	; (800329c <handle_requestGpsOff+0x304>)
 800320e:	f7fe feec 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003212:	e057      	b.n	80032c4 <handle_requestGpsOff+0x32c>



		case __gsmModule_requestGpsOff_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8003214:	4821      	ldr	r0, [pc, #132]	; (800329c <handle_requestGpsOff+0x304>)
 8003216:	f7fe fec3 	bl	8001fa0 <fsmManager_isStateIn>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <handle_requestGpsOff+0x28e>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8003220:	481e      	ldr	r0, [pc, #120]	; (800329c <handle_requestGpsOff+0x304>)
 8003222:	f7fe fed3 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.gpsOff = 1;
 8003226:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <handle_requestGpsOff+0x328>)
 8003228:	7813      	ldrb	r3, [r2, #0]
 800322a:	f043 0310 	orr.w	r3, r3, #16
 800322e:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestGpsOff = 0;
 8003230:	4a22      	ldr	r2, [pc, #136]	; (80032bc <handle_requestGpsOff+0x324>)
 8003232:	7813      	ldrb	r3, [r2, #0]
 8003234:	f36f 1304 	bfc	r3, #4, #1
 8003238:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOn_idle);
 800323a:	2100      	movs	r1, #0
 800323c:	4817      	ldr	r0, [pc, #92]	; (800329c <handle_requestGpsOff+0x304>)
 800323e:	f7fe fe8d 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8003242:	4816      	ldr	r0, [pc, #88]	; (800329c <handle_requestGpsOff+0x304>)
 8003244:	f7fe feb7 	bl	8001fb6 <fsmManager_isStateOut>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d03c      	beq.n	80032c8 <handle_requestGpsOff+0x330>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 800324e:	4813      	ldr	r0, [pc, #76]	; (800329c <handle_requestGpsOff+0x304>)
 8003250:	f7fe fecb 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003254:	e038      	b.n	80032c8 <handle_requestGpsOff+0x330>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8003256:	4811      	ldr	r0, [pc, #68]	; (800329c <handle_requestGpsOff+0x304>)
 8003258:	f7fe fea2 	bl	8001fa0 <fsmManager_isStateIn>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <handle_requestGpsOff+0x2d0>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8003262:	480e      	ldr	r0, [pc, #56]	; (800329c <handle_requestGpsOff+0x304>)
 8003264:	f7fe feb2 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOn_idle);
 8003268:	2100      	movs	r1, #0
 800326a:	480c      	ldr	r0, [pc, #48]	; (800329c <handle_requestGpsOff+0x304>)
 800326c:	f7fe fe76 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8003270:	480a      	ldr	r0, [pc, #40]	; (800329c <handle_requestGpsOff+0x304>)
 8003272:	f7fe fea0 	bl	8001fb6 <fsmManager_isStateOut>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d027      	beq.n	80032cc <handle_requestGpsOff+0x334>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 800327c:	4807      	ldr	r0, [pc, #28]	; (800329c <handle_requestGpsOff+0x304>)
 800327e:	f7fe feb4 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003282:	e023      	b.n	80032cc <handle_requestGpsOff+0x334>
			break;
 8003284:	bf00      	nop
 8003286:	e022      	b.n	80032ce <handle_requestGpsOff+0x336>
			break;
 8003288:	bf00      	nop
 800328a:	e020      	b.n	80032ce <handle_requestGpsOff+0x336>
			break;
 800328c:	bf00      	nop
 800328e:	e01e      	b.n	80032ce <handle_requestGpsOff+0x336>
			break;
 8003290:	bf00      	nop
 8003292:	e01c      	b.n	80032ce <handle_requestGpsOff+0x336>
			break;
 8003294:	bf00      	nop
 8003296:	e01a      	b.n	80032ce <handle_requestGpsOff+0x336>
			break;
 8003298:	bf00      	nop
 800329a:	e018      	b.n	80032ce <handle_requestGpsOff+0x336>
 800329c:	20000654 	.word	0x20000654
 80032a0:	20000618 	.word	0x20000618
 80032a4:	0800bb90 	.word	0x0800bb90
 80032a8:	200004cc 	.word	0x200004cc
 80032ac:	0800bd74 	.word	0x0800bd74
 80032b0:	200003f8 	.word	0x200003f8
 80032b4:	0800bba0 	.word	0x0800bba0
 80032b8:	0800bb80 	.word	0x0800bb80
 80032bc:	20000600 	.word	0x20000600
 80032c0:	20000604 	.word	0x20000604
			break;
 80032c4:	bf00      	nop
 80032c6:	e002      	b.n	80032ce <handle_requestGpsOff+0x336>
			break;
 80032c8:	bf00      	nop
 80032ca:	e000      	b.n	80032ce <handle_requestGpsOff+0x336>
			break;
 80032cc:	bf00      	nop
	}
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop

080032d4 <handle_requestServerConnection>:

static void handle_requestServerConnection(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerConnection_state)) {
 80032d8:	48c7      	ldr	r0, [pc, #796]	; (80035f8 <handle_requestServerConnection+0x324>)
 80032da:	f7fe fe56 	bl	8001f8a <fsmManager_getState>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b22      	cmp	r3, #34	; 0x22
 80032e2:	f200 8701 	bhi.w	80040e8 <handle_requestServerConnection+0xe14>
 80032e6:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <handle_requestServerConnection+0x18>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	08003379 	.word	0x08003379
 80032f0:	080033ab 	.word	0x080033ab
 80032f4:	080033e3 	.word	0x080033e3
 80032f8:	08003447 	.word	0x08003447
 80032fc:	08003493 	.word	0x08003493
 8003300:	080034f9 	.word	0x080034f9
 8003304:	08003545 	.word	0x08003545
 8003308:	080035ab 	.word	0x080035ab
 800330c:	0800361d 	.word	0x0800361d
 8003310:	080036a1 	.word	0x080036a1
 8003314:	080036ef 	.word	0x080036ef
 8003318:	08003755 	.word	0x08003755
 800331c:	080037a1 	.word	0x080037a1
 8003320:	08003845 	.word	0x08003845
 8003324:	080038ab 	.word	0x080038ab
 8003328:	08003925 	.word	0x08003925
 800332c:	080039a7 	.word	0x080039a7
 8003330:	080039f1 	.word	0x080039f1
 8003334:	08003aa9 	.word	0x08003aa9
 8003338:	08003af3 	.word	0x08003af3
 800333c:	08003b57 	.word	0x08003b57
 8003340:	08003ba9 	.word	0x08003ba9
 8003344:	08003c45 	.word	0x08003c45
 8003348:	08003c97 	.word	0x08003c97
 800334c:	08003cfb 	.word	0x08003cfb
 8003350:	08003d4d 	.word	0x08003d4d
 8003354:	08003db1 	.word	0x08003db1
 8003358:	08003dfb 	.word	0x08003dfb
 800335c:	08003e5f 	.word	0x08003e5f
 8003360:	08003ea9 	.word	0x08003ea9
 8003364:	08003f39 	.word	0x08003f39
 8003368:	08003f83 	.word	0x08003f83
 800336c:	08003fe5 	.word	0x08003fe5
 8003370:	0800402f 	.word	0x0800402f
 8003374:	080040a7 	.word	0x080040a7
		case __gsmModule_requestServerConnection_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003378:	489f      	ldr	r0, [pc, #636]	; (80035f8 <handle_requestServerConnection+0x324>)
 800337a:	f7fe fe11 	bl	8001fa0 <fsmManager_isStateIn>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <handle_requestServerConnection+0xb6>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003384:	489c      	ldr	r0, [pc, #624]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003386:	f7fe fe21 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCmee1);
 800338a:	2101      	movs	r1, #1
 800338c:	489a      	ldr	r0, [pc, #616]	; (80035f8 <handle_requestServerConnection+0x324>)
 800338e:	f7fe fde5 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003392:	4899      	ldr	r0, [pc, #612]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003394:	f7fe fe0f 	bl	8001fb6 <fsmManager_isStateOut>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 86c0 	beq.w	8004120 <handle_requestServerConnection+0xe4c>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80033a0:	4895      	ldr	r0, [pc, #596]	; (80035f8 <handle_requestServerConnection+0x324>)
 80033a2:	f7fe fe22 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80033a6:	f000 bebb 	b.w	8004120 <handle_requestServerConnection+0xe4c>



		case __gsmModule_requestServerConnection_send_atCmee1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80033aa:	4893      	ldr	r0, [pc, #588]	; (80035f8 <handle_requestServerConnection+0x324>)
 80033ac:	f7fe fdf8 	bl	8001fa0 <fsmManager_isStateIn>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <handle_requestServerConnection+0xe8>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80033b6:	4890      	ldr	r0, [pc, #576]	; (80035f8 <handle_requestServerConnection+0x324>)
 80033b8:	f7fe fe08 	bl	8001fcc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_atcmee1);
 80033bc:	488f      	ldr	r0, [pc, #572]	; (80035fc <handle_requestServerConnection+0x328>)
 80033be:	f001 fa23 	bl	8004808 <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCmee1);
 80033c2:	2102      	movs	r1, #2
 80033c4:	488c      	ldr	r0, [pc, #560]	; (80035f8 <handle_requestServerConnection+0x324>)
 80033c6:	f7fe fdc9 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80033ca:	488b      	ldr	r0, [pc, #556]	; (80035f8 <handle_requestServerConnection+0x324>)
 80033cc:	f7fe fdf3 	bl	8001fb6 <fsmManager_isStateOut>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 86a6 	beq.w	8004124 <handle_requestServerConnection+0xe50>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80033d8:	4887      	ldr	r0, [pc, #540]	; (80035f8 <handle_requestServerConnection+0x324>)
 80033da:	f7fe fe06 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80033de:	f000 bea1 	b.w	8004124 <handle_requestServerConnection+0xe50>



		case __gsmModule_requestServerConnection_waitOk_atCmee1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80033e2:	4885      	ldr	r0, [pc, #532]	; (80035f8 <handle_requestServerConnection+0x324>)
 80033e4:	f7fe fddc 	bl	8001fa0 <fsmManager_isStateIn>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <handle_requestServerConnection+0x128>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80033ee:	4882      	ldr	r0, [pc, #520]	; (80035f8 <handle_requestServerConnection+0x324>)
 80033f0:	f7fe fdec 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80033f4:	2164      	movs	r1, #100	; 0x64
 80033f6:	4882      	ldr	r0, [pc, #520]	; (8003600 <handle_requestServerConnection+0x32c>)
 80033f8:	f001 ff3a 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80033fc:	4b81      	ldr	r3, [pc, #516]	; (8003604 <handle_requestServerConnection+0x330>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	4981      	ldr	r1, [pc, #516]	; (8003608 <handle_requestServerConnection+0x334>)
 8003404:	4881      	ldr	r0, [pc, #516]	; (800360c <handle_requestServerConnection+0x338>)
 8003406:	f002 fe62 	bl	80060ce <string_containsWithinLength>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d004      	beq.n	800341a <handle_requestServerConnection+0x146>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun0);
 8003410:	2103      	movs	r1, #3
 8003412:	4879      	ldr	r0, [pc, #484]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003414:	f7fe fda2 	bl	8001f5c <fsmManager_gotoState>
 8003418:	e009      	b.n	800342e <handle_requestServerConnection+0x15a>
			}
			else if(softTimer_expired(&timeout)) {
 800341a:	4879      	ldr	r0, [pc, #484]	; (8003600 <handle_requestServerConnection+0x32c>)
 800341c:	f001 ff3c 	bl	8005298 <softTimer_expired>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <handle_requestServerConnection+0x15a>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun0);
 8003426:	2103      	movs	r1, #3
 8003428:	4873      	ldr	r0, [pc, #460]	; (80035f8 <handle_requestServerConnection+0x324>)
 800342a:	f7fe fd97 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800342e:	4872      	ldr	r0, [pc, #456]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003430:	f7fe fdc1 	bl	8001fb6 <fsmManager_isStateOut>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8676 	beq.w	8004128 <handle_requestServerConnection+0xe54>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800343c:	486e      	ldr	r0, [pc, #440]	; (80035f8 <handle_requestServerConnection+0x324>)
 800343e:	f7fe fdd4 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003442:	f000 be71 	b.w	8004128 <handle_requestServerConnection+0xe54>



		case __gsmModule_requestServerConnection_send_atCfun0:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003446:	486c      	ldr	r0, [pc, #432]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003448:	f7fe fdaa 	bl	8001fa0 <fsmManager_isStateIn>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <handle_requestServerConnection+0x18c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003452:	4869      	ldr	r0, [pc, #420]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003454:	f7fe fdba 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003458:	2164      	movs	r1, #100	; 0x64
 800345a:	4869      	ldr	r0, [pc, #420]	; (8003600 <handle_requestServerConnection+0x32c>)
 800345c:	f001 ff08 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003460:	4867      	ldr	r0, [pc, #412]	; (8003600 <handle_requestServerConnection+0x32c>)
 8003462:	f001 ff19 	bl	8005298 <softTimer_expired>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <handle_requestServerConnection+0x1a6>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cfun0);
 800346c:	4868      	ldr	r0, [pc, #416]	; (8003610 <handle_requestServerConnection+0x33c>)
 800346e:	f001 f9cb 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCfun0);
 8003472:	2104      	movs	r1, #4
 8003474:	4860      	ldr	r0, [pc, #384]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003476:	f7fe fd71 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800347a:	485f      	ldr	r0, [pc, #380]	; (80035f8 <handle_requestServerConnection+0x324>)
 800347c:	f7fe fd9b 	bl	8001fb6 <fsmManager_isStateOut>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8652 	beq.w	800412c <handle_requestServerConnection+0xe58>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003488:	485b      	ldr	r0, [pc, #364]	; (80035f8 <handle_requestServerConnection+0x324>)
 800348a:	f7fe fdae 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800348e:	f000 be4d 	b.w	800412c <handle_requestServerConnection+0xe58>



		case __gsmModule_requestServerConnection_waitOk_atCfun0:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003492:	4859      	ldr	r0, [pc, #356]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003494:	f7fe fd84 	bl	8001fa0 <fsmManager_isStateIn>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <handle_requestServerConnection+0x1da>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800349e:	4856      	ldr	r0, [pc, #344]	; (80035f8 <handle_requestServerConnection+0x324>)
 80034a0:	f7fe fd94 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 10*1000);
 80034a4:	f242 7110 	movw	r1, #10000	; 0x2710
 80034a8:	4855      	ldr	r0, [pc, #340]	; (8003600 <handle_requestServerConnection+0x32c>)
 80034aa:	f001 fee1 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80034ae:	4b55      	ldr	r3, [pc, #340]	; (8003604 <handle_requestServerConnection+0x330>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	4954      	ldr	r1, [pc, #336]	; (8003608 <handle_requestServerConnection+0x334>)
 80034b6:	4855      	ldr	r0, [pc, #340]	; (800360c <handle_requestServerConnection+0x338>)
 80034b8:	f002 fe09 	bl	80060ce <string_containsWithinLength>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <handle_requestServerConnection+0x1f8>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun1);
 80034c2:	2105      	movs	r1, #5
 80034c4:	484c      	ldr	r0, [pc, #304]	; (80035f8 <handle_requestServerConnection+0x324>)
 80034c6:	f7fe fd49 	bl	8001f5c <fsmManager_gotoState>
 80034ca:	e009      	b.n	80034e0 <handle_requestServerConnection+0x20c>
			}
			else if(softTimer_expired(&timeout)) {
 80034cc:	484c      	ldr	r0, [pc, #304]	; (8003600 <handle_requestServerConnection+0x32c>)
 80034ce:	f001 fee3 	bl	8005298 <softTimer_expired>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <handle_requestServerConnection+0x20c>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun0);
 80034d8:	2103      	movs	r1, #3
 80034da:	4847      	ldr	r0, [pc, #284]	; (80035f8 <handle_requestServerConnection+0x324>)
 80034dc:	f7fe fd3e 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80034e0:	4845      	ldr	r0, [pc, #276]	; (80035f8 <handle_requestServerConnection+0x324>)
 80034e2:	f7fe fd68 	bl	8001fb6 <fsmManager_isStateOut>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8621 	beq.w	8004130 <handle_requestServerConnection+0xe5c>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80034ee:	4842      	ldr	r0, [pc, #264]	; (80035f8 <handle_requestServerConnection+0x324>)
 80034f0:	f7fe fd7b 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80034f4:	f000 be1c 	b.w	8004130 <handle_requestServerConnection+0xe5c>



		case __gsmModule_requestServerConnection_send_atCfun1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80034f8:	483f      	ldr	r0, [pc, #252]	; (80035f8 <handle_requestServerConnection+0x324>)
 80034fa:	f7fe fd51 	bl	8001fa0 <fsmManager_isStateIn>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d006      	beq.n	8003512 <handle_requestServerConnection+0x23e>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003504:	483c      	ldr	r0, [pc, #240]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003506:	f7fe fd61 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 800350a:	2164      	movs	r1, #100	; 0x64
 800350c:	483c      	ldr	r0, [pc, #240]	; (8003600 <handle_requestServerConnection+0x32c>)
 800350e:	f001 feaf 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003512:	483b      	ldr	r0, [pc, #236]	; (8003600 <handle_requestServerConnection+0x32c>)
 8003514:	f001 fec0 	bl	8005298 <softTimer_expired>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <handle_requestServerConnection+0x258>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cfun1);
 800351e:	483d      	ldr	r0, [pc, #244]	; (8003614 <handle_requestServerConnection+0x340>)
 8003520:	f001 f972 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCfun1);
 8003524:	2106      	movs	r1, #6
 8003526:	4834      	ldr	r0, [pc, #208]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003528:	f7fe fd18 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800352c:	4832      	ldr	r0, [pc, #200]	; (80035f8 <handle_requestServerConnection+0x324>)
 800352e:	f7fe fd42 	bl	8001fb6 <fsmManager_isStateOut>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 85fd 	beq.w	8004134 <handle_requestServerConnection+0xe60>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800353a:	482f      	ldr	r0, [pc, #188]	; (80035f8 <handle_requestServerConnection+0x324>)
 800353c:	f7fe fd55 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003540:	f000 bdf8 	b.w	8004134 <handle_requestServerConnection+0xe60>



		case __gsmModule_requestServerConnection_waitOk_atCfun1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003544:	482c      	ldr	r0, [pc, #176]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003546:	f7fe fd2b 	bl	8001fa0 <fsmManager_isStateIn>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <handle_requestServerConnection+0x28c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003550:	4829      	ldr	r0, [pc, #164]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003552:	f7fe fd3b 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 10*1000);
 8003556:	f242 7110 	movw	r1, #10000	; 0x2710
 800355a:	4829      	ldr	r0, [pc, #164]	; (8003600 <handle_requestServerConnection+0x32c>)
 800355c:	f001 fe88 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003560:	4b28      	ldr	r3, [pc, #160]	; (8003604 <handle_requestServerConnection+0x330>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	4928      	ldr	r1, [pc, #160]	; (8003608 <handle_requestServerConnection+0x334>)
 8003568:	4828      	ldr	r0, [pc, #160]	; (800360c <handle_requestServerConnection+0x338>)
 800356a:	f002 fdb0 	bl	80060ce <string_containsWithinLength>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d004      	beq.n	800357e <handle_requestServerConnection+0x2aa>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCpin);
 8003574:	2107      	movs	r1, #7
 8003576:	4820      	ldr	r0, [pc, #128]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003578:	f7fe fcf0 	bl	8001f5c <fsmManager_gotoState>
 800357c:	e009      	b.n	8003592 <handle_requestServerConnection+0x2be>
			}
			else if(softTimer_expired(&timeout)) {
 800357e:	4820      	ldr	r0, [pc, #128]	; (8003600 <handle_requestServerConnection+0x32c>)
 8003580:	f001 fe8a 	bl	8005298 <softTimer_expired>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <handle_requestServerConnection+0x2be>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun1);
 800358a:	2105      	movs	r1, #5
 800358c:	481a      	ldr	r0, [pc, #104]	; (80035f8 <handle_requestServerConnection+0x324>)
 800358e:	f7fe fce5 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003592:	4819      	ldr	r0, [pc, #100]	; (80035f8 <handle_requestServerConnection+0x324>)
 8003594:	f7fe fd0f 	bl	8001fb6 <fsmManager_isStateOut>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 85cc 	beq.w	8004138 <handle_requestServerConnection+0xe64>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80035a0:	4815      	ldr	r0, [pc, #84]	; (80035f8 <handle_requestServerConnection+0x324>)
 80035a2:	f7fe fd22 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80035a6:	f000 bdc7 	b.w	8004138 <handle_requestServerConnection+0xe64>



		case __gsmModule_requestServerConnection_send_atCpin:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80035aa:	4813      	ldr	r0, [pc, #76]	; (80035f8 <handle_requestServerConnection+0x324>)
 80035ac:	f7fe fcf8 	bl	8001fa0 <fsmManager_isStateIn>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <handle_requestServerConnection+0x2f0>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80035b6:	4810      	ldr	r0, [pc, #64]	; (80035f8 <handle_requestServerConnection+0x324>)
 80035b8:	f7fe fd08 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80035bc:	2164      	movs	r1, #100	; 0x64
 80035be:	4810      	ldr	r0, [pc, #64]	; (8003600 <handle_requestServerConnection+0x32c>)
 80035c0:	f001 fe56 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80035c4:	480e      	ldr	r0, [pc, #56]	; (8003600 <handle_requestServerConnection+0x32c>)
 80035c6:	f001 fe67 	bl	8005298 <softTimer_expired>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d006      	beq.n	80035de <handle_requestServerConnection+0x30a>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cpin);
 80035d0:	4811      	ldr	r0, [pc, #68]	; (8003618 <handle_requestServerConnection+0x344>)
 80035d2:	f001 f919 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atCpin);
 80035d6:	2108      	movs	r1, #8
 80035d8:	4807      	ldr	r0, [pc, #28]	; (80035f8 <handle_requestServerConnection+0x324>)
 80035da:	f7fe fcbf 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80035de:	4806      	ldr	r0, [pc, #24]	; (80035f8 <handle_requestServerConnection+0x324>)
 80035e0:	f7fe fce9 	bl	8001fb6 <fsmManager_isStateOut>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 85a8 	beq.w	800413c <handle_requestServerConnection+0xe68>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80035ec:	4802      	ldr	r0, [pc, #8]	; (80035f8 <handle_requestServerConnection+0x324>)
 80035ee:	f7fe fcfc 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80035f2:	f000 bda3 	b.w	800413c <handle_requestServerConnection+0xe68>
 80035f6:	bf00      	nop
 80035f8:	20000660 	.word	0x20000660
 80035fc:	0800bbd4 	.word	0x0800bbd4
 8003600:	20000618 	.word	0x20000618
 8003604:	200004cc 	.word	0x200004cc
 8003608:	0800bd74 	.word	0x0800bd74
 800360c:	200003f8 	.word	0x200003f8
 8003610:	0800bbe0 	.word	0x0800bbe0
 8003614:	0800bbec 	.word	0x0800bbec
 8003618:	0800bbf8 	.word	0x0800bbf8



		case __gsmModule_requestServerConnection_check_atCpin:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800361c:	48b6      	ldr	r0, [pc, #728]	; (80038f8 <handle_requestServerConnection+0x624>)
 800361e:	f7fe fcbf 	bl	8001fa0 <fsmManager_isStateIn>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <handle_requestServerConnection+0x364>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003628:	48b3      	ldr	r0, [pc, #716]	; (80038f8 <handle_requestServerConnection+0x624>)
 800362a:	f7fe fccf 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 5*1000);
 800362e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003632:	48b2      	ldr	r0, [pc, #712]	; (80038fc <handle_requestServerConnection+0x628>)
 8003634:	f001 fe1c 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_cpinReady, gsmRxDataChunkLen)) {
 8003638:	4bb1      	ldr	r3, [pc, #708]	; (8003900 <handle_requestServerConnection+0x62c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	49b1      	ldr	r1, [pc, #708]	; (8003904 <handle_requestServerConnection+0x630>)
 8003640:	48b1      	ldr	r0, [pc, #708]	; (8003908 <handle_requestServerConnection+0x634>)
 8003642:	f002 fd44 	bl	80060ce <string_containsWithinLength>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <handle_requestServerConnection+0x382>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCband);
 800364c:	2109      	movs	r1, #9
 800364e:	48aa      	ldr	r0, [pc, #680]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003650:	f7fe fc84 	bl	8001f5c <fsmManager_gotoState>
 8003654:	e018      	b.n	8003688 <handle_requestServerConnection+0x3b4>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_cme_error, gsmRxDataChunkLen)) {
 8003656:	4baa      	ldr	r3, [pc, #680]	; (8003900 <handle_requestServerConnection+0x62c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	49ab      	ldr	r1, [pc, #684]	; (800390c <handle_requestServerConnection+0x638>)
 800365e:	48aa      	ldr	r0, [pc, #680]	; (8003908 <handle_requestServerConnection+0x634>)
 8003660:	f002 fd35 	bl	80060ce <string_containsWithinLength>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <handle_requestServerConnection+0x3a0>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun1);
 800366a:	2105      	movs	r1, #5
 800366c:	48a2      	ldr	r0, [pc, #648]	; (80038f8 <handle_requestServerConnection+0x624>)
 800366e:	f7fe fc75 	bl	8001f5c <fsmManager_gotoState>
 8003672:	e009      	b.n	8003688 <handle_requestServerConnection+0x3b4>
			}
			else if(softTimer_expired(&timeout)) {
 8003674:	48a1      	ldr	r0, [pc, #644]	; (80038fc <handle_requestServerConnection+0x628>)
 8003676:	f001 fe0f 	bl	8005298 <softTimer_expired>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <handle_requestServerConnection+0x3b4>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCpin);
 8003680:	2107      	movs	r1, #7
 8003682:	489d      	ldr	r0, [pc, #628]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003684:	f7fe fc6a 	bl	8001f5c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003688:	489b      	ldr	r0, [pc, #620]	; (80038f8 <handle_requestServerConnection+0x624>)
 800368a:	f7fe fc94 	bl	8001fb6 <fsmManager_isStateOut>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8555 	beq.w	8004140 <handle_requestServerConnection+0xe6c>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003696:	4898      	ldr	r0, [pc, #608]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003698:	f7fe fca7 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800369c:	f000 bd50 	b.w	8004140 <handle_requestServerConnection+0xe6c>



		case __gsmModule_requestServerConnection_send_atCband:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80036a0:	4895      	ldr	r0, [pc, #596]	; (80038f8 <handle_requestServerConnection+0x624>)
 80036a2:	f7fe fc7d 	bl	8001fa0 <fsmManager_isStateIn>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <handle_requestServerConnection+0x3e8>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80036ac:	4892      	ldr	r0, [pc, #584]	; (80038f8 <handle_requestServerConnection+0x624>)
 80036ae:	f7fe fc8d 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 80036b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036b6:	4891      	ldr	r0, [pc, #580]	; (80038fc <handle_requestServerConnection+0x628>)
 80036b8:	f001 fdda 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80036bc:	488f      	ldr	r0, [pc, #572]	; (80038fc <handle_requestServerConnection+0x628>)
 80036be:	f001 fdeb 	bl	8005298 <softTimer_expired>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d006      	beq.n	80036d6 <handle_requestServerConnection+0x402>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cband_allBand);
 80036c8:	4891      	ldr	r0, [pc, #580]	; (8003910 <handle_requestServerConnection+0x63c>)
 80036ca:	f001 f89d 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCband);
 80036ce:	210a      	movs	r1, #10
 80036d0:	4889      	ldr	r0, [pc, #548]	; (80038f8 <handle_requestServerConnection+0x624>)
 80036d2:	f7fe fc43 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80036d6:	4888      	ldr	r0, [pc, #544]	; (80038f8 <handle_requestServerConnection+0x624>)
 80036d8:	f7fe fc6d 	bl	8001fb6 <fsmManager_isStateOut>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8530 	beq.w	8004144 <handle_requestServerConnection+0xe70>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80036e4:	4884      	ldr	r0, [pc, #528]	; (80038f8 <handle_requestServerConnection+0x624>)
 80036e6:	f7fe fc80 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80036ea:	f000 bd2b 	b.w	8004144 <handle_requestServerConnection+0xe70>



		case __gsmModule_requestServerConnection_waitOk_atCband:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80036ee:	4882      	ldr	r0, [pc, #520]	; (80038f8 <handle_requestServerConnection+0x624>)
 80036f0:	f7fe fc56 	bl	8001fa0 <fsmManager_isStateIn>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <handle_requestServerConnection+0x436>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80036fa:	487f      	ldr	r0, [pc, #508]	; (80038f8 <handle_requestServerConnection+0x624>)
 80036fc:	f7fe fc66 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 5000);
 8003700:	f241 3188 	movw	r1, #5000	; 0x1388
 8003704:	487d      	ldr	r0, [pc, #500]	; (80038fc <handle_requestServerConnection+0x628>)
 8003706:	f001 fdb3 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800370a:	4b7d      	ldr	r3, [pc, #500]	; (8003900 <handle_requestServerConnection+0x62c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	4980      	ldr	r1, [pc, #512]	; (8003914 <handle_requestServerConnection+0x640>)
 8003712:	487d      	ldr	r0, [pc, #500]	; (8003908 <handle_requestServerConnection+0x634>)
 8003714:	f002 fcdb 	bl	80060ce <string_containsWithinLength>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <handle_requestServerConnection+0x454>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 800371e:	210b      	movs	r1, #11
 8003720:	4875      	ldr	r0, [pc, #468]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003722:	f7fe fc1b 	bl	8001f5c <fsmManager_gotoState>
 8003726:	e009      	b.n	800373c <handle_requestServerConnection+0x468>
			}
			else if(softTimer_expired(&timeout)) {
 8003728:	4874      	ldr	r0, [pc, #464]	; (80038fc <handle_requestServerConnection+0x628>)
 800372a:	f001 fdb5 	bl	8005298 <softTimer_expired>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <handle_requestServerConnection+0x468>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCband);
 8003734:	2109      	movs	r1, #9
 8003736:	4870      	ldr	r0, [pc, #448]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003738:	f7fe fc10 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800373c:	486e      	ldr	r0, [pc, #440]	; (80038f8 <handle_requestServerConnection+0x624>)
 800373e:	f7fe fc3a 	bl	8001fb6 <fsmManager_isStateOut>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 84ff 	beq.w	8004148 <handle_requestServerConnection+0xe74>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800374a:	486b      	ldr	r0, [pc, #428]	; (80038f8 <handle_requestServerConnection+0x624>)
 800374c:	f7fe fc4d 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003750:	f000 bcfa 	b.w	8004148 <handle_requestServerConnection+0xe74>



		case __gsmModule_requestServerConnection_send_atCreg1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003754:	4868      	ldr	r0, [pc, #416]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003756:	f7fe fc23 	bl	8001fa0 <fsmManager_isStateIn>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <handle_requestServerConnection+0x49a>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003760:	4865      	ldr	r0, [pc, #404]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003762:	f7fe fc33 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003766:	2164      	movs	r1, #100	; 0x64
 8003768:	4864      	ldr	r0, [pc, #400]	; (80038fc <handle_requestServerConnection+0x628>)
 800376a:	f001 fd81 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 800376e:	4863      	ldr	r0, [pc, #396]	; (80038fc <handle_requestServerConnection+0x628>)
 8003770:	f001 fd92 	bl	8005298 <softTimer_expired>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <handle_requestServerConnection+0x4b4>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_creg1);
 800377a:	4867      	ldr	r0, [pc, #412]	; (8003918 <handle_requestServerConnection+0x644>)
 800377c:	f001 f844 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atCreg1);
 8003780:	210c      	movs	r1, #12
 8003782:	485d      	ldr	r0, [pc, #372]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003784:	f7fe fbea 	bl	8001f5c <fsmManager_gotoState>
				//fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCreg1);
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003788:	485b      	ldr	r0, [pc, #364]	; (80038f8 <handle_requestServerConnection+0x624>)
 800378a:	f7fe fc14 	bl	8001fb6 <fsmManager_isStateOut>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 84db 	beq.w	800414c <handle_requestServerConnection+0xe78>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003796:	4858      	ldr	r0, [pc, #352]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003798:	f7fe fc27 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800379c:	f000 bcd6 	b.w	800414c <handle_requestServerConnection+0xe78>



		case __gsmModule_requestServerConnection_check_atCreg1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80037a0:	4855      	ldr	r0, [pc, #340]	; (80038f8 <handle_requestServerConnection+0x624>)
 80037a2:	f7fe fbfd 	bl	8001fa0 <fsmManager_isStateIn>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <handle_requestServerConnection+0x4e8>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80037ac:	4852      	ldr	r0, [pc, #328]	; (80038f8 <handle_requestServerConnection+0x624>)
 80037ae:	f7fe fc0d 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 20*1000);
 80037b2:	f644 6120 	movw	r1, #20000	; 0x4e20
 80037b6:	4851      	ldr	r0, [pc, #324]	; (80038fc <handle_requestServerConnection+0x628>)
 80037b8:	f001 fd5a 	bl	8005270 <softTimer_start>
			}

			if(flags_gsmModuleUnsolicited.bits.creg1) {
 80037bc:	4b57      	ldr	r3, [pc, #348]	; (800391c <handle_requestServerConnection+0x648>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <handle_requestServerConnection+0x50a>
				flags_gsmModuleUnsolicited.bits.creg1 = 0;
 80037ca:	4a54      	ldr	r2, [pc, #336]	; (800391c <handle_requestServerConnection+0x648>)
 80037cc:	7813      	ldrb	r3, [r2, #0]
 80037ce:	f36f 1304 	bfc	r3, #4, #1
 80037d2:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCops);
 80037d4:	2110      	movs	r1, #16
 80037d6:	4848      	ldr	r0, [pc, #288]	; (80038f8 <handle_requestServerConnection+0x624>)
 80037d8:	f7fe fbc0 	bl	8001f5c <fsmManager_gotoState>
 80037dc:	e026      	b.n	800382c <handle_requestServerConnection+0x558>
			}
			else if(flags_gsmModuleUnsolicited.bits.creg2) {
 80037de:	4b4f      	ldr	r3, [pc, #316]	; (800391c <handle_requestServerConnection+0x648>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <handle_requestServerConnection+0x52c>
				flags_gsmModuleUnsolicited.bits.creg2 = 0;
 80037ec:	4a4b      	ldr	r2, [pc, #300]	; (800391c <handle_requestServerConnection+0x648>)
 80037ee:	7813      	ldrb	r3, [r2, #0]
 80037f0:	f36f 1345 	bfc	r3, #5, #1
 80037f4:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 80037f6:	210b      	movs	r1, #11
 80037f8:	483f      	ldr	r0, [pc, #252]	; (80038f8 <handle_requestServerConnection+0x624>)
 80037fa:	f7fe fbaf 	bl	8001f5c <fsmManager_gotoState>
 80037fe:	e015      	b.n	800382c <handle_requestServerConnection+0x558>
			}
			else if(softTimer_expired(&timeout) || flags_gsmModuleUnsolicited.bits.creg0) {
 8003800:	483e      	ldr	r0, [pc, #248]	; (80038fc <handle_requestServerConnection+0x628>)
 8003802:	f001 fd49 	bl	8005298 <softTimer_expired>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <handle_requestServerConnection+0x546>
 800380c:	4b43      	ldr	r3, [pc, #268]	; (800391c <handle_requestServerConnection+0x648>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <handle_requestServerConnection+0x558>
				flags_gsmModuleUnsolicited.bits.creg0 = 0;
 800381a:	4a40      	ldr	r2, [pc, #256]	; (800391c <handle_requestServerConnection+0x648>)
 800381c:	7813      	ldrb	r3, [r2, #0]
 800381e:	f36f 03c3 	bfc	r3, #3, #1
 8003822:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 8003824:	210b      	movs	r1, #11
 8003826:	4834      	ldr	r0, [pc, #208]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003828:	f7fe fb98 	bl	8001f5c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800382c:	4832      	ldr	r0, [pc, #200]	; (80038f8 <handle_requestServerConnection+0x624>)
 800382e:	f7fe fbc2 	bl	8001fb6 <fsmManager_isStateOut>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 848b 	beq.w	8004150 <handle_requestServerConnection+0xe7c>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800383a:	482f      	ldr	r0, [pc, #188]	; (80038f8 <handle_requestServerConnection+0x624>)
 800383c:	f7fe fbd5 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003840:	f000 bc86 	b.w	8004150 <handle_requestServerConnection+0xe7c>



		case __gsmModule_requestServerConnection_waitOk_atCreg1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003844:	482c      	ldr	r0, [pc, #176]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003846:	f7fe fbab 	bl	8001fa0 <fsmManager_isStateIn>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <handle_requestServerConnection+0x58c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003850:	4829      	ldr	r0, [pc, #164]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003852:	f7fe fbbb 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003856:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800385a:	4828      	ldr	r0, [pc, #160]	; (80038fc <handle_requestServerConnection+0x628>)
 800385c:	f001 fd08 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003860:	4b27      	ldr	r3, [pc, #156]	; (8003900 <handle_requestServerConnection+0x62c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	492b      	ldr	r1, [pc, #172]	; (8003914 <handle_requestServerConnection+0x640>)
 8003868:	4827      	ldr	r0, [pc, #156]	; (8003908 <handle_requestServerConnection+0x634>)
 800386a:	f002 fc30 	bl	80060ce <string_containsWithinLength>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <handle_requestServerConnection+0x5aa>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg);
 8003874:	210e      	movs	r1, #14
 8003876:	4820      	ldr	r0, [pc, #128]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003878:	f7fe fb70 	bl	8001f5c <fsmManager_gotoState>
 800387c:	e009      	b.n	8003892 <handle_requestServerConnection+0x5be>
			}
			else if(softTimer_expired(&timeout)) {
 800387e:	481f      	ldr	r0, [pc, #124]	; (80038fc <handle_requestServerConnection+0x628>)
 8003880:	f001 fd0a 	bl	8005298 <softTimer_expired>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <handle_requestServerConnection+0x5be>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 800388a:	210b      	movs	r1, #11
 800388c:	481a      	ldr	r0, [pc, #104]	; (80038f8 <handle_requestServerConnection+0x624>)
 800388e:	f7fe fb65 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003892:	4819      	ldr	r0, [pc, #100]	; (80038f8 <handle_requestServerConnection+0x624>)
 8003894:	f7fe fb8f 	bl	8001fb6 <fsmManager_isStateOut>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 845a 	beq.w	8004154 <handle_requestServerConnection+0xe80>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80038a0:	4815      	ldr	r0, [pc, #84]	; (80038f8 <handle_requestServerConnection+0x624>)
 80038a2:	f7fe fba2 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80038a6:	f000 bc55 	b.w	8004154 <handle_requestServerConnection+0xe80>



		case __gsmModule_requestServerConnection_send_atCreg:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80038aa:	4813      	ldr	r0, [pc, #76]	; (80038f8 <handle_requestServerConnection+0x624>)
 80038ac:	f7fe fb78 	bl	8001fa0 <fsmManager_isStateIn>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <handle_requestServerConnection+0x5f2>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80038b6:	4810      	ldr	r0, [pc, #64]	; (80038f8 <handle_requestServerConnection+0x624>)
 80038b8:	f7fe fb88 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 80038bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038c0:	480e      	ldr	r0, [pc, #56]	; (80038fc <handle_requestServerConnection+0x628>)
 80038c2:	f001 fcd5 	bl	8005270 <softTimer_start>
			}


			if(softTimer_expired(&timeout)) {
 80038c6:	480d      	ldr	r0, [pc, #52]	; (80038fc <handle_requestServerConnection+0x628>)
 80038c8:	f001 fce6 	bl	8005298 <softTimer_expired>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <handle_requestServerConnection+0x60c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_creg);
 80038d2:	4813      	ldr	r0, [pc, #76]	; (8003920 <handle_requestServerConnection+0x64c>)
 80038d4:	f000 ff98 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atCreg);
 80038d8:	210f      	movs	r1, #15
 80038da:	4807      	ldr	r0, [pc, #28]	; (80038f8 <handle_requestServerConnection+0x624>)
 80038dc:	f7fe fb3e 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80038e0:	4805      	ldr	r0, [pc, #20]	; (80038f8 <handle_requestServerConnection+0x624>)
 80038e2:	f7fe fb68 	bl	8001fb6 <fsmManager_isStateOut>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8435 	beq.w	8004158 <handle_requestServerConnection+0xe84>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80038ee:	4802      	ldr	r0, [pc, #8]	; (80038f8 <handle_requestServerConnection+0x624>)
 80038f0:	f7fe fb7b 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80038f4:	f000 bc30 	b.w	8004158 <handle_requestServerConnection+0xe84>
 80038f8:	20000660 	.word	0x20000660
 80038fc:	20000618 	.word	0x20000618
 8003900:	200004cc 	.word	0x200004cc
 8003904:	0800bd98 	.word	0x0800bd98
 8003908:	200003f8 	.word	0x200003f8
 800390c:	0800bd78 	.word	0x0800bd78
 8003910:	0800bc04 	.word	0x0800bc04
 8003914:	0800bd74 	.word	0x0800bd74
 8003918:	0800bc1c 	.word	0x0800bc1c
 800391c:	20000608 	.word	0x20000608
 8003920:	0800bc28 	.word	0x0800bc28



		case __gsmModule_requestServerConnection_check_atCreg:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003924:	48b9      	ldr	r0, [pc, #740]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003926:	f7fe fb3b 	bl	8001fa0 <fsmManager_isStateIn>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <handle_requestServerConnection+0x66c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003930:	48b6      	ldr	r0, [pc, #728]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003932:	f7fe fb4b 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 5*1000);
 8003936:	f241 3188 	movw	r1, #5000	; 0x1388
 800393a:	48b5      	ldr	r0, [pc, #724]	; (8003c10 <handle_requestServerConnection+0x93c>)
 800393c:	f001 fc98 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_creg1_1, gsmRxDataChunkLen)) {
 8003940:	4bb4      	ldr	r3, [pc, #720]	; (8003c14 <handle_requestServerConnection+0x940>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	49b4      	ldr	r1, [pc, #720]	; (8003c18 <handle_requestServerConnection+0x944>)
 8003948:	48b4      	ldr	r0, [pc, #720]	; (8003c1c <handle_requestServerConnection+0x948>)
 800394a:	f002 fbc0 	bl	80060ce <string_containsWithinLength>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <handle_requestServerConnection+0x68a>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCops);
 8003954:	2110      	movs	r1, #16
 8003956:	48ad      	ldr	r0, [pc, #692]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003958:	f7fe fb00 	bl	8001f5c <fsmManager_gotoState>
 800395c:	e018      	b.n	8003990 <handle_requestServerConnection+0x6bc>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_creg1_0, gsmRxDataChunkLen)) {
 800395e:	4bad      	ldr	r3, [pc, #692]	; (8003c14 <handle_requestServerConnection+0x940>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	49ae      	ldr	r1, [pc, #696]	; (8003c20 <handle_requestServerConnection+0x94c>)
 8003966:	48ad      	ldr	r0, [pc, #692]	; (8003c1c <handle_requestServerConnection+0x948>)
 8003968:	f002 fbb1 	bl	80060ce <string_containsWithinLength>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <handle_requestServerConnection+0x6a8>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg);
 8003972:	210e      	movs	r1, #14
 8003974:	48a5      	ldr	r0, [pc, #660]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003976:	f7fe faf1 	bl	8001f5c <fsmManager_gotoState>
 800397a:	e009      	b.n	8003990 <handle_requestServerConnection+0x6bc>
			}
			else if(softTimer_expired(&timeout)) {
 800397c:	48a4      	ldr	r0, [pc, #656]	; (8003c10 <handle_requestServerConnection+0x93c>)
 800397e:	f001 fc8b 	bl	8005298 <softTimer_expired>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <handle_requestServerConnection+0x6bc>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg);
 8003988:	210e      	movs	r1, #14
 800398a:	48a0      	ldr	r0, [pc, #640]	; (8003c0c <handle_requestServerConnection+0x938>)
 800398c:	f7fe fae6 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003990:	489e      	ldr	r0, [pc, #632]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003992:	f7fe fb10 	bl	8001fb6 <fsmManager_isStateOut>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 83df 	beq.w	800415c <handle_requestServerConnection+0xe88>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800399e:	489b      	ldr	r0, [pc, #620]	; (8003c0c <handle_requestServerConnection+0x938>)
 80039a0:	f7fe fb23 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80039a4:	e3da      	b.n	800415c <handle_requestServerConnection+0xe88>



		case __gsmModule_requestServerConnection_send_atCops:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80039a6:	4899      	ldr	r0, [pc, #612]	; (8003c0c <handle_requestServerConnection+0x938>)
 80039a8:	f7fe fafa 	bl	8001fa0 <fsmManager_isStateIn>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d006      	beq.n	80039c0 <handle_requestServerConnection+0x6ec>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80039b2:	4896      	ldr	r0, [pc, #600]	; (8003c0c <handle_requestServerConnection+0x938>)
 80039b4:	f7fe fb0a 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80039b8:	2164      	movs	r1, #100	; 0x64
 80039ba:	4895      	ldr	r0, [pc, #596]	; (8003c10 <handle_requestServerConnection+0x93c>)
 80039bc:	f001 fc58 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80039c0:	4893      	ldr	r0, [pc, #588]	; (8003c10 <handle_requestServerConnection+0x93c>)
 80039c2:	f001 fc69 	bl	8005298 <softTimer_expired>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <handle_requestServerConnection+0x706>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cops);
 80039cc:	4895      	ldr	r0, [pc, #596]	; (8003c24 <handle_requestServerConnection+0x950>)
 80039ce:	f000 ff1b 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_get_atCops);
 80039d2:	2111      	movs	r1, #17
 80039d4:	488d      	ldr	r0, [pc, #564]	; (8003c0c <handle_requestServerConnection+0x938>)
 80039d6:	f7fe fac1 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80039da:	488c      	ldr	r0, [pc, #560]	; (8003c0c <handle_requestServerConnection+0x938>)
 80039dc:	f7fe faeb 	bl	8001fb6 <fsmManager_isStateOut>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 83bc 	beq.w	8004160 <handle_requestServerConnection+0xe8c>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80039e8:	4888      	ldr	r0, [pc, #544]	; (8003c0c <handle_requestServerConnection+0x938>)
 80039ea:	f7fe fafe 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80039ee:	e3b7      	b.n	8004160 <handle_requestServerConnection+0xe8c>



		case __gsmModule_requestServerConnection_get_atCops:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80039f0:	4886      	ldr	r0, [pc, #536]	; (8003c0c <handle_requestServerConnection+0x938>)
 80039f2:	f7fe fad5 	bl	8001fa0 <fsmManager_isStateIn>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <handle_requestServerConnection+0x738>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80039fc:	4883      	ldr	r0, [pc, #524]	; (8003c0c <handle_requestServerConnection+0x938>)
 80039fe:	f7fe fae5 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 45*1000);
 8003a02:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8003a06:	4882      	ldr	r0, [pc, #520]	; (8003c10 <handle_requestServerConnection+0x93c>)
 8003a08:	f001 fc32 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "PERSONAL", gsmRxDataChunkLen)) {
 8003a0c:	4b81      	ldr	r3, [pc, #516]	; (8003c14 <handle_requestServerConnection+0x940>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4985      	ldr	r1, [pc, #532]	; (8003c28 <handle_requestServerConnection+0x954>)
 8003a14:	4881      	ldr	r0, [pc, #516]	; (8003c1c <handle_requestServerConnection+0x948>)
 8003a16:	f002 fb5a 	bl	80060ce <string_containsWithinLength>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <handle_requestServerConnection+0x75c>
				gsmModule_operator = __gsmModule_operator_personal;
 8003a20:	4b82      	ldr	r3, [pc, #520]	; (8003c2c <handle_requestServerConnection+0x958>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 8003a26:	2112      	movs	r1, #18
 8003a28:	4878      	ldr	r0, [pc, #480]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003a2a:	f7fe fa97 	bl	8001f5c <fsmManager_gotoState>
 8003a2e:	e030      	b.n	8003a92 <handle_requestServerConnection+0x7be>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "CLARO", gsmRxDataChunkLen)) {
 8003a30:	4b78      	ldr	r3, [pc, #480]	; (8003c14 <handle_requestServerConnection+0x940>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	497e      	ldr	r1, [pc, #504]	; (8003c30 <handle_requestServerConnection+0x95c>)
 8003a38:	4878      	ldr	r0, [pc, #480]	; (8003c1c <handle_requestServerConnection+0x948>)
 8003a3a:	f002 fb48 	bl	80060ce <string_containsWithinLength>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <handle_requestServerConnection+0x780>
				gsmModule_operator = __gsmModule_operator_claro;
 8003a44:	4b79      	ldr	r3, [pc, #484]	; (8003c2c <handle_requestServerConnection+0x958>)
 8003a46:	2202      	movs	r2, #2
 8003a48:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 8003a4a:	2112      	movs	r1, #18
 8003a4c:	486f      	ldr	r0, [pc, #444]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003a4e:	f7fe fa85 	bl	8001f5c <fsmManager_gotoState>
 8003a52:	e01e      	b.n	8003a92 <handle_requestServerConnection+0x7be>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "MOVISTAR", gsmRxDataChunkLen)) {
 8003a54:	4b6f      	ldr	r3, [pc, #444]	; (8003c14 <handle_requestServerConnection+0x940>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4976      	ldr	r1, [pc, #472]	; (8003c34 <handle_requestServerConnection+0x960>)
 8003a5c:	486f      	ldr	r0, [pc, #444]	; (8003c1c <handle_requestServerConnection+0x948>)
 8003a5e:	f002 fb36 	bl	80060ce <string_containsWithinLength>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <handle_requestServerConnection+0x7a4>
				gsmModule_operator = __gsmModule_operator_movistar;
 8003a68:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <handle_requestServerConnection+0x958>)
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 8003a6e:	2112      	movs	r1, #18
 8003a70:	4866      	ldr	r0, [pc, #408]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003a72:	f7fe fa73 	bl	8001f5c <fsmManager_gotoState>
 8003a76:	e00c      	b.n	8003a92 <handle_requestServerConnection+0x7be>
			}
			else if(softTimer_expired(&timeout)) {
 8003a78:	4865      	ldr	r0, [pc, #404]	; (8003c10 <handle_requestServerConnection+0x93c>)
 8003a7a:	f001 fc0d 	bl	8005298 <softTimer_expired>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d006      	beq.n	8003a92 <handle_requestServerConnection+0x7be>
				gsmModule_operator = __gsmModule_operator_unknown;
 8003a84:	4b69      	ldr	r3, [pc, #420]	; (8003c2c <handle_requestServerConnection+0x958>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCops);
 8003a8a:	2110      	movs	r1, #16
 8003a8c:	485f      	ldr	r0, [pc, #380]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003a8e:	f7fe fa65 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003a92:	485e      	ldr	r0, [pc, #376]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003a94:	f7fe fa8f 	bl	8001fb6 <fsmManager_isStateOut>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8362 	beq.w	8004164 <handle_requestServerConnection+0xe90>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003aa0:	485a      	ldr	r0, [pc, #360]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003aa2:	f7fe faa2 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003aa6:	e35d      	b.n	8004164 <handle_requestServerConnection+0xe90>



		case __gsmModule_requestServerConnection_send_atSapbr3_contype:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003aa8:	4858      	ldr	r0, [pc, #352]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003aaa:	f7fe fa79 	bl	8001fa0 <fsmManager_isStateIn>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d006      	beq.n	8003ac2 <handle_requestServerConnection+0x7ee>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003ab4:	4855      	ldr	r0, [pc, #340]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003ab6:	f7fe fa89 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003aba:	2164      	movs	r1, #100	; 0x64
 8003abc:	4854      	ldr	r0, [pc, #336]	; (8003c10 <handle_requestServerConnection+0x93c>)
 8003abe:	f001 fbd7 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003ac2:	4853      	ldr	r0, [pc, #332]	; (8003c10 <handle_requestServerConnection+0x93c>)
 8003ac4:	f001 fbe8 	bl	8005298 <softTimer_expired>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <handle_requestServerConnection+0x808>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3contype);
 8003ace:	485a      	ldr	r0, [pc, #360]	; (8003c38 <handle_requestServerConnection+0x964>)
 8003ad0:	f000 fe9a 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_contype);
 8003ad4:	2113      	movs	r1, #19
 8003ad6:	484d      	ldr	r0, [pc, #308]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003ad8:	f7fe fa40 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003adc:	484b      	ldr	r0, [pc, #300]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003ade:	f7fe fa6a 	bl	8001fb6 <fsmManager_isStateOut>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 833f 	beq.w	8004168 <handle_requestServerConnection+0xe94>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003aea:	4848      	ldr	r0, [pc, #288]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003aec:	f7fe fa7d 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003af0:	e33a      	b.n	8004168 <handle_requestServerConnection+0xe94>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_contype:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003af2:	4846      	ldr	r0, [pc, #280]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003af4:	f7fe fa54 	bl	8001fa0 <fsmManager_isStateIn>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <handle_requestServerConnection+0x83a>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003afe:	4843      	ldr	r0, [pc, #268]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003b00:	f7fe fa64 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 1*1000);
 8003b04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b08:	4841      	ldr	r0, [pc, #260]	; (8003c10 <handle_requestServerConnection+0x93c>)
 8003b0a:	f001 fbb1 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <handle_requestServerConnection+0x940>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	4949      	ldr	r1, [pc, #292]	; (8003c3c <handle_requestServerConnection+0x968>)
 8003b16:	4841      	ldr	r0, [pc, #260]	; (8003c1c <handle_requestServerConnection+0x948>)
 8003b18:	f002 fad9 	bl	80060ce <string_containsWithinLength>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <handle_requestServerConnection+0x858>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_apn);
 8003b22:	2114      	movs	r1, #20
 8003b24:	4839      	ldr	r0, [pc, #228]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003b26:	f7fe fa19 	bl	8001f5c <fsmManager_gotoState>
 8003b2a:	e009      	b.n	8003b40 <handle_requestServerConnection+0x86c>
			}
			else if(softTimer_expired(&timeout)) {
 8003b2c:	4838      	ldr	r0, [pc, #224]	; (8003c10 <handle_requestServerConnection+0x93c>)
 8003b2e:	f001 fbb3 	bl	8005298 <softTimer_expired>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <handle_requestServerConnection+0x86c>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 8003b38:	2112      	movs	r1, #18
 8003b3a:	4834      	ldr	r0, [pc, #208]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003b3c:	f7fe fa0e 	bl	8001f5c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003b40:	4832      	ldr	r0, [pc, #200]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003b42:	f7fe fa38 	bl	8001fb6 <fsmManager_isStateOut>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 830f 	beq.w	800416c <handle_requestServerConnection+0xe98>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003b4e:	482f      	ldr	r0, [pc, #188]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003b50:	f7fe fa4b 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003b54:	e30a      	b.n	800416c <handle_requestServerConnection+0xe98>



		case __gsmModule_requestServerConnection_send_atSapbr3_apn:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003b56:	482d      	ldr	r0, [pc, #180]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003b58:	f7fe fa22 	bl	8001fa0 <fsmManager_isStateIn>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d006      	beq.n	8003b70 <handle_requestServerConnection+0x89c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003b62:	482a      	ldr	r0, [pc, #168]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003b64:	f7fe fa32 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003b68:	2164      	movs	r1, #100	; 0x64
 8003b6a:	4829      	ldr	r0, [pc, #164]	; (8003c10 <handle_requestServerConnection+0x93c>)
 8003b6c:	f001 fb80 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003b70:	4827      	ldr	r0, [pc, #156]	; (8003c10 <handle_requestServerConnection+0x93c>)
 8003b72:	f001 fb91 	bl	8005298 <softTimer_expired>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <handle_requestServerConnection+0x8be>
				if(gsmModule_operator == __gsmModule_operator_personal) {
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <handle_requestServerConnection+0x958>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d106      	bne.n	8003b92 <handle_requestServerConnection+0x8be>
					pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3apnPersonal);
 8003b84:	482e      	ldr	r0, [pc, #184]	; (8003c40 <handle_requestServerConnection+0x96c>)
 8003b86:	f000 fe3f 	bl	8004808 <pinGsmUartTx_transmit>
					fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_apn);
 8003b8a:	2115      	movs	r1, #21
 8003b8c:	481f      	ldr	r0, [pc, #124]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003b8e:	f7fe f9e5 	bl	8001f5c <fsmManager_gotoState>
				}
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003b92:	481e      	ldr	r0, [pc, #120]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003b94:	f7fe fa0f 	bl	8001fb6 <fsmManager_isStateOut>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 82e8 	beq.w	8004170 <handle_requestServerConnection+0xe9c>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003ba0:	481a      	ldr	r0, [pc, #104]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003ba2:	f7fe fa22 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003ba6:	e2e3      	b.n	8004170 <handle_requestServerConnection+0xe9c>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_apn:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003ba8:	4818      	ldr	r0, [pc, #96]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003baa:	f7fe f9f9 	bl	8001fa0 <fsmManager_isStateIn>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <handle_requestServerConnection+0x8f0>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003bb4:	4815      	ldr	r0, [pc, #84]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003bb6:	f7fe fa09 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8003bba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003bbe:	4814      	ldr	r0, [pc, #80]	; (8003c10 <handle_requestServerConnection+0x93c>)
 8003bc0:	f001 fb56 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003bc4:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <handle_requestServerConnection+0x940>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	491c      	ldr	r1, [pc, #112]	; (8003c3c <handle_requestServerConnection+0x968>)
 8003bcc:	4813      	ldr	r0, [pc, #76]	; (8003c1c <handle_requestServerConnection+0x948>)
 8003bce:	f002 fa7e 	bl	80060ce <string_containsWithinLength>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <handle_requestServerConnection+0x90e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_user);
 8003bd8:	2116      	movs	r1, #22
 8003bda:	480c      	ldr	r0, [pc, #48]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003bdc:	f7fe f9be 	bl	8001f5c <fsmManager_gotoState>
 8003be0:	e009      	b.n	8003bf6 <handle_requestServerConnection+0x922>
			}
			else if(softTimer_expired(&timeout)) {
 8003be2:	480b      	ldr	r0, [pc, #44]	; (8003c10 <handle_requestServerConnection+0x93c>)
 8003be4:	f001 fb58 	bl	8005298 <softTimer_expired>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <handle_requestServerConnection+0x922>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_apn);
 8003bee:	2114      	movs	r1, #20
 8003bf0:	4806      	ldr	r0, [pc, #24]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003bf2:	f7fe f9b3 	bl	8001f5c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003bf6:	4805      	ldr	r0, [pc, #20]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003bf8:	f7fe f9dd 	bl	8001fb6 <fsmManager_isStateOut>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 82b8 	beq.w	8004174 <handle_requestServerConnection+0xea0>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003c04:	4801      	ldr	r0, [pc, #4]	; (8003c0c <handle_requestServerConnection+0x938>)
 8003c06:	f7fe f9f0 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003c0a:	e2b3      	b.n	8004174 <handle_requestServerConnection+0xea0>
 8003c0c:	20000660 	.word	0x20000660
 8003c10:	20000618 	.word	0x20000618
 8003c14:	200004cc 	.word	0x200004cc
 8003c18:	0800bdb4 	.word	0x0800bdb4
 8003c1c:	200003f8 	.word	0x200003f8
 8003c20:	0800bda8 	.word	0x0800bda8
 8003c24:	0800bcdc 	.word	0x0800bcdc
 8003c28:	0800bb10 	.word	0x0800bb10
 8003c2c:	20000794 	.word	0x20000794
 8003c30:	0800bb1c 	.word	0x0800bb1c
 8003c34:	0800bb24 	.word	0x0800bb24
 8003c38:	0800bc34 	.word	0x0800bc34
 8003c3c:	0800bd74 	.word	0x0800bd74
 8003c40:	0800bc54 	.word	0x0800bc54



		case __gsmModule_requestServerConnection_send_atSapbr3_user:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003c44:	48b1      	ldr	r0, [pc, #708]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003c46:	f7fe f9ab 	bl	8001fa0 <fsmManager_isStateIn>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d006      	beq.n	8003c5e <handle_requestServerConnection+0x98a>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003c50:	48ae      	ldr	r0, [pc, #696]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003c52:	f7fe f9bb 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003c56:	2164      	movs	r1, #100	; 0x64
 8003c58:	48ad      	ldr	r0, [pc, #692]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003c5a:	f001 fb09 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003c5e:	48ac      	ldr	r0, [pc, #688]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003c60:	f001 fb1a 	bl	8005298 <softTimer_expired>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <handle_requestServerConnection+0x9ac>
				if(gsmModule_operator == __gsmModule_operator_personal) {
 8003c6a:	4baa      	ldr	r3, [pc, #680]	; (8003f14 <handle_requestServerConnection+0xc40>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d106      	bne.n	8003c80 <handle_requestServerConnection+0x9ac>
					pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3userPersonal);
 8003c72:	48a9      	ldr	r0, [pc, #676]	; (8003f18 <handle_requestServerConnection+0xc44>)
 8003c74:	f000 fdc8 	bl	8004808 <pinGsmUartTx_transmit>
					fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_user);
 8003c78:	2117      	movs	r1, #23
 8003c7a:	48a4      	ldr	r0, [pc, #656]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003c7c:	f7fe f96e 	bl	8001f5c <fsmManager_gotoState>
				}
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003c80:	48a2      	ldr	r0, [pc, #648]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003c82:	f7fe f998 	bl	8001fb6 <fsmManager_isStateOut>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8275 	beq.w	8004178 <handle_requestServerConnection+0xea4>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003c8e:	489f      	ldr	r0, [pc, #636]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003c90:	f7fe f9ab 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003c94:	e270      	b.n	8004178 <handle_requestServerConnection+0xea4>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_user:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003c96:	489d      	ldr	r0, [pc, #628]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003c98:	f7fe f982 	bl	8001fa0 <fsmManager_isStateIn>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <handle_requestServerConnection+0x9de>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003ca2:	489a      	ldr	r0, [pc, #616]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003ca4:	f7fe f992 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8003ca8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cac:	4898      	ldr	r0, [pc, #608]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003cae:	f001 fadf 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003cb2:	4b9a      	ldr	r3, [pc, #616]	; (8003f1c <handle_requestServerConnection+0xc48>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	4999      	ldr	r1, [pc, #612]	; (8003f20 <handle_requestServerConnection+0xc4c>)
 8003cba:	489a      	ldr	r0, [pc, #616]	; (8003f24 <handle_requestServerConnection+0xc50>)
 8003cbc:	f002 fa07 	bl	80060ce <string_containsWithinLength>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d004      	beq.n	8003cd0 <handle_requestServerConnection+0x9fc>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_pwd);
 8003cc6:	2118      	movs	r1, #24
 8003cc8:	4890      	ldr	r0, [pc, #576]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003cca:	f7fe f947 	bl	8001f5c <fsmManager_gotoState>
 8003cce:	e009      	b.n	8003ce4 <handle_requestServerConnection+0xa10>
			}
			else if(softTimer_expired(&timeout)) {
 8003cd0:	488f      	ldr	r0, [pc, #572]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003cd2:	f001 fae1 	bl	8005298 <softTimer_expired>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <handle_requestServerConnection+0xa10>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_user);
 8003cdc:	2116      	movs	r1, #22
 8003cde:	488b      	ldr	r0, [pc, #556]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003ce0:	f7fe f93c 	bl	8001f5c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003ce4:	4889      	ldr	r0, [pc, #548]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003ce6:	f7fe f966 	bl	8001fb6 <fsmManager_isStateOut>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8245 	beq.w	800417c <handle_requestServerConnection+0xea8>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003cf2:	4886      	ldr	r0, [pc, #536]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003cf4:	f7fe f979 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003cf8:	e240      	b.n	800417c <handle_requestServerConnection+0xea8>



		case __gsmModule_requestServerConnection_send_atSapbr3_pwd:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003cfa:	4884      	ldr	r0, [pc, #528]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003cfc:	f7fe f950 	bl	8001fa0 <fsmManager_isStateIn>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d006      	beq.n	8003d14 <handle_requestServerConnection+0xa40>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003d06:	4881      	ldr	r0, [pc, #516]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003d08:	f7fe f960 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003d0c:	2164      	movs	r1, #100	; 0x64
 8003d0e:	4880      	ldr	r0, [pc, #512]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003d10:	f001 faae 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003d14:	487e      	ldr	r0, [pc, #504]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003d16:	f001 fabf 	bl	8005298 <softTimer_expired>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <handle_requestServerConnection+0xa62>
				if(gsmModule_operator == __gsmModule_operator_personal) {
 8003d20:	4b7c      	ldr	r3, [pc, #496]	; (8003f14 <handle_requestServerConnection+0xc40>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d106      	bne.n	8003d36 <handle_requestServerConnection+0xa62>
					pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3pwdPersonal);
 8003d28:	487f      	ldr	r0, [pc, #508]	; (8003f28 <handle_requestServerConnection+0xc54>)
 8003d2a:	f000 fd6d 	bl	8004808 <pinGsmUartTx_transmit>
					fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_pwd);
 8003d2e:	2119      	movs	r1, #25
 8003d30:	4876      	ldr	r0, [pc, #472]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003d32:	f7fe f913 	bl	8001f5c <fsmManager_gotoState>
				}
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003d36:	4875      	ldr	r0, [pc, #468]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003d38:	f7fe f93d 	bl	8001fb6 <fsmManager_isStateOut>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 821e 	beq.w	8004180 <handle_requestServerConnection+0xeac>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003d44:	4871      	ldr	r0, [pc, #452]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003d46:	f7fe f950 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003d4a:	e219      	b.n	8004180 <handle_requestServerConnection+0xeac>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_pwd:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003d4c:	486f      	ldr	r0, [pc, #444]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003d4e:	f7fe f927 	bl	8001fa0 <fsmManager_isStateIn>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <handle_requestServerConnection+0xa94>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003d58:	486c      	ldr	r0, [pc, #432]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003d5a:	f7fe f937 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 3*1000);
 8003d5e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003d62:	486b      	ldr	r0, [pc, #428]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003d64:	f001 fa84 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003d68:	4b6c      	ldr	r3, [pc, #432]	; (8003f1c <handle_requestServerConnection+0xc48>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	496c      	ldr	r1, [pc, #432]	; (8003f20 <handle_requestServerConnection+0xc4c>)
 8003d70:	486c      	ldr	r0, [pc, #432]	; (8003f24 <handle_requestServerConnection+0xc50>)
 8003d72:	f002 f9ac 	bl	80060ce <string_containsWithinLength>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <handle_requestServerConnection+0xab2>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr1);
 8003d7c:	211a      	movs	r1, #26
 8003d7e:	4863      	ldr	r0, [pc, #396]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003d80:	f7fe f8ec 	bl	8001f5c <fsmManager_gotoState>
 8003d84:	e009      	b.n	8003d9a <handle_requestServerConnection+0xac6>
			}
			else if(softTimer_expired(&timeout)) {
 8003d86:	4862      	ldr	r0, [pc, #392]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003d88:	f001 fa86 	bl	8005298 <softTimer_expired>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <handle_requestServerConnection+0xac6>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_pwd);
 8003d92:	2118      	movs	r1, #24
 8003d94:	485d      	ldr	r0, [pc, #372]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003d96:	f7fe f8e1 	bl	8001f5c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003d9a:	485c      	ldr	r0, [pc, #368]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003d9c:	f7fe f90b 	bl	8001fb6 <fsmManager_isStateOut>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 81ee 	beq.w	8004184 <handle_requestServerConnection+0xeb0>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003da8:	4858      	ldr	r0, [pc, #352]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003daa:	f7fe f91e 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003dae:	e1e9      	b.n	8004184 <handle_requestServerConnection+0xeb0>



		case __gsmModule_requestServerConnection_send_atSapbr1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003db0:	4856      	ldr	r0, [pc, #344]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003db2:	f7fe f8f5 	bl	8001fa0 <fsmManager_isStateIn>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d006      	beq.n	8003dca <handle_requestServerConnection+0xaf6>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003dbc:	4853      	ldr	r0, [pc, #332]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003dbe:	f7fe f905 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003dc2:	2164      	movs	r1, #100	; 0x64
 8003dc4:	4852      	ldr	r0, [pc, #328]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003dc6:	f001 fa53 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003dca:	4851      	ldr	r0, [pc, #324]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003dcc:	f001 fa64 	bl	8005298 <softTimer_expired>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d006      	beq.n	8003de4 <handle_requestServerConnection+0xb10>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr1);
 8003dd6:	4855      	ldr	r0, [pc, #340]	; (8003f2c <handle_requestServerConnection+0xc58>)
 8003dd8:	f000 fd16 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr1);
 8003ddc:	211b      	movs	r1, #27
 8003dde:	484b      	ldr	r0, [pc, #300]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003de0:	f7fe f8bc 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003de4:	4849      	ldr	r0, [pc, #292]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003de6:	f7fe f8e6 	bl	8001fb6 <fsmManager_isStateOut>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 81cb 	beq.w	8004188 <handle_requestServerConnection+0xeb4>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003df2:	4846      	ldr	r0, [pc, #280]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003df4:	f7fe f8f9 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003df8:	e1c6      	b.n	8004188 <handle_requestServerConnection+0xeb4>



		case __gsmModule_requestServerConnection_waitOk_atSapbr1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003dfa:	4844      	ldr	r0, [pc, #272]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003dfc:	f7fe f8d0 	bl	8001fa0 <fsmManager_isStateIn>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d007      	beq.n	8003e16 <handle_requestServerConnection+0xb42>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003e06:	4841      	ldr	r0, [pc, #260]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003e08:	f7fe f8e0 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 20*1000);
 8003e0c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003e10:	483f      	ldr	r0, [pc, #252]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003e12:	f001 fa2d 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <handle_requestServerConnection+0xc48>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4940      	ldr	r1, [pc, #256]	; (8003f20 <handle_requestServerConnection+0xc4c>)
 8003e1e:	4841      	ldr	r0, [pc, #260]	; (8003f24 <handle_requestServerConnection+0xc50>)
 8003e20:	f002 f955 	bl	80060ce <string_containsWithinLength>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <handle_requestServerConnection+0xb60>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr2);
 8003e2a:	211c      	movs	r1, #28
 8003e2c:	4837      	ldr	r0, [pc, #220]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003e2e:	f7fe f895 	bl	8001f5c <fsmManager_gotoState>
 8003e32:	e009      	b.n	8003e48 <handle_requestServerConnection+0xb74>
			}
			else if(softTimer_expired(&timeout)) {
 8003e34:	4836      	ldr	r0, [pc, #216]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003e36:	f001 fa2f 	bl	8005298 <softTimer_expired>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <handle_requestServerConnection+0xb74>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr1);
 8003e40:	211a      	movs	r1, #26
 8003e42:	4832      	ldr	r0, [pc, #200]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003e44:	f7fe f88a 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003e48:	4830      	ldr	r0, [pc, #192]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003e4a:	f7fe f8b4 	bl	8001fb6 <fsmManager_isStateOut>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 819b 	beq.w	800418c <handle_requestServerConnection+0xeb8>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003e56:	482d      	ldr	r0, [pc, #180]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003e58:	f7fe f8c7 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003e5c:	e196      	b.n	800418c <handle_requestServerConnection+0xeb8>



		case __gsmModule_requestServerConnection_send_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003e5e:	482b      	ldr	r0, [pc, #172]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003e60:	f7fe f89e 	bl	8001fa0 <fsmManager_isStateIn>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d006      	beq.n	8003e78 <handle_requestServerConnection+0xba4>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003e6a:	4828      	ldr	r0, [pc, #160]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003e6c:	f7fe f8ae 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003e70:	2164      	movs	r1, #100	; 0x64
 8003e72:	4827      	ldr	r0, [pc, #156]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003e74:	f001 f9fc 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003e78:	4825      	ldr	r0, [pc, #148]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003e7a:	f001 fa0d 	bl	8005298 <softTimer_expired>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <handle_requestServerConnection+0xbbe>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr2);
 8003e84:	482a      	ldr	r0, [pc, #168]	; (8003f30 <handle_requestServerConnection+0xc5c>)
 8003e86:	f000 fcbf 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atSapbr2);
 8003e8a:	211d      	movs	r1, #29
 8003e8c:	481f      	ldr	r0, [pc, #124]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003e8e:	f7fe f865 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003e92:	481e      	ldr	r0, [pc, #120]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003e94:	f7fe f88f 	bl	8001fb6 <fsmManager_isStateOut>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8178 	beq.w	8004190 <handle_requestServerConnection+0xebc>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003ea0:	481a      	ldr	r0, [pc, #104]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003ea2:	f7fe f8a2 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003ea6:	e173      	b.n	8004190 <handle_requestServerConnection+0xebc>



		case __gsmModule_requestServerConnection_check_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003ea8:	4818      	ldr	r0, [pc, #96]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003eaa:	f7fe f879 	bl	8001fa0 <fsmManager_isStateIn>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <handle_requestServerConnection+0xbf0>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003eb4:	4815      	ldr	r0, [pc, #84]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003eb6:	f7fe f889 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8003eba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ebe:	4814      	ldr	r0, [pc, #80]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003ec0:	f001 f9d6 	bl	8005270 <softTimer_start>
			}

			if(!string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "0.0.0.0", gsmRxDataChunkLen)) {
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <handle_requestServerConnection+0xc48>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	491a      	ldr	r1, [pc, #104]	; (8003f34 <handle_requestServerConnection+0xc60>)
 8003ecc:	4815      	ldr	r0, [pc, #84]	; (8003f24 <handle_requestServerConnection+0xc50>)
 8003ece:	f002 f8fe 	bl	80060ce <string_containsWithinLength>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <handle_requestServerConnection+0xc0e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttpinit);
 8003ed8:	211e      	movs	r1, #30
 8003eda:	480c      	ldr	r0, [pc, #48]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003edc:	f7fe f83e 	bl	8001f5c <fsmManager_gotoState>
 8003ee0:	e009      	b.n	8003ef6 <handle_requestServerConnection+0xc22>
			}
			else if(softTimer_expired(&timeout)) {
 8003ee2:	480b      	ldr	r0, [pc, #44]	; (8003f10 <handle_requestServerConnection+0xc3c>)
 8003ee4:	f001 f9d8 	bl	8005298 <softTimer_expired>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <handle_requestServerConnection+0xc22>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr2);
 8003eee:	211c      	movs	r1, #28
 8003ef0:	4806      	ldr	r0, [pc, #24]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003ef2:	f7fe f833 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003ef6:	4805      	ldr	r0, [pc, #20]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003ef8:	f7fe f85d 	bl	8001fb6 <fsmManager_isStateOut>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8148 	beq.w	8004194 <handle_requestServerConnection+0xec0>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003f04:	4801      	ldr	r0, [pc, #4]	; (8003f0c <handle_requestServerConnection+0xc38>)
 8003f06:	f7fe f870 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003f0a:	e143      	b.n	8004194 <handle_requestServerConnection+0xec0>
 8003f0c:	20000660 	.word	0x20000660
 8003f10:	20000618 	.word	0x20000618
 8003f14:	20000794 	.word	0x20000794
 8003f18:	0800bc80 	.word	0x0800bc80
 8003f1c:	200004cc 	.word	0x200004cc
 8003f20:	0800bd74 	.word	0x0800bd74
 8003f24:	200003f8 	.word	0x200003f8
 8003f28:	0800bca0 	.word	0x0800bca0
 8003f2c:	0800bcbc 	.word	0x0800bcbc
 8003f30:	0800bccc 	.word	0x0800bccc
 8003f34:	0800bb30 	.word	0x0800bb30



		case __gsmModule_requestServerConnection_send_atHttpinit:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003f38:	489e      	ldr	r0, [pc, #632]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003f3a:	f7fe f831 	bl	8001fa0 <fsmManager_isStateIn>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d006      	beq.n	8003f52 <handle_requestServerConnection+0xc7e>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003f44:	489b      	ldr	r0, [pc, #620]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003f46:	f7fe f841 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003f4a:	2164      	movs	r1, #100	; 0x64
 8003f4c:	489a      	ldr	r0, [pc, #616]	; (80041b8 <handle_requestServerConnection+0xee4>)
 8003f4e:	f001 f98f 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003f52:	4899      	ldr	r0, [pc, #612]	; (80041b8 <handle_requestServerConnection+0xee4>)
 8003f54:	f001 f9a0 	bl	8005298 <softTimer_expired>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d006      	beq.n	8003f6c <handle_requestServerConnection+0xc98>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpinit);
 8003f5e:	4897      	ldr	r0, [pc, #604]	; (80041bc <handle_requestServerConnection+0xee8>)
 8003f60:	f000 fc52 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atHttpinit);
 8003f64:	211f      	movs	r1, #31
 8003f66:	4893      	ldr	r0, [pc, #588]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003f68:	f7fd fff8 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003f6c:	4891      	ldr	r0, [pc, #580]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003f6e:	f7fe f822 	bl	8001fb6 <fsmManager_isStateOut>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 810f 	beq.w	8004198 <handle_requestServerConnection+0xec4>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003f7a:	488e      	ldr	r0, [pc, #568]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003f7c:	f7fe f835 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003f80:	e10a      	b.n	8004198 <handle_requestServerConnection+0xec4>



		case __gsmModule_requestServerConnection_waitOk_atHttpinit:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003f82:	488c      	ldr	r0, [pc, #560]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003f84:	f7fe f80c 	bl	8001fa0 <fsmManager_isStateIn>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <handle_requestServerConnection+0xcc8>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003f8e:	4889      	ldr	r0, [pc, #548]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003f90:	f7fe f81c 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003f94:	2164      	movs	r1, #100	; 0x64
 8003f96:	4888      	ldr	r0, [pc, #544]	; (80041b8 <handle_requestServerConnection+0xee4>)
 8003f98:	f001 f96a 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003f9c:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <handle_requestServerConnection+0xeec>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4988      	ldr	r1, [pc, #544]	; (80041c4 <handle_requestServerConnection+0xef0>)
 8003fa4:	4888      	ldr	r0, [pc, #544]	; (80041c8 <handle_requestServerConnection+0xef4>)
 8003fa6:	f002 f892 	bl	80060ce <string_containsWithinLength>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d004      	beq.n	8003fba <handle_requestServerConnection+0xce6>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttppara_cid);
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	4880      	ldr	r0, [pc, #512]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003fb4:	f7fd ffd2 	bl	8001f5c <fsmManager_gotoState>
 8003fb8:	e009      	b.n	8003fce <handle_requestServerConnection+0xcfa>
			}
			else if(softTimer_expired(&timeout)) {
 8003fba:	487f      	ldr	r0, [pc, #508]	; (80041b8 <handle_requestServerConnection+0xee4>)
 8003fbc:	f001 f96c 	bl	8005298 <softTimer_expired>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <handle_requestServerConnection+0xcfa>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttpinit);
 8003fc6:	211e      	movs	r1, #30
 8003fc8:	487a      	ldr	r0, [pc, #488]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003fca:	f7fd ffc7 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003fce:	4879      	ldr	r0, [pc, #484]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003fd0:	f7fd fff1 	bl	8001fb6 <fsmManager_isStateOut>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80e0 	beq.w	800419c <handle_requestServerConnection+0xec8>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003fdc:	4875      	ldr	r0, [pc, #468]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003fde:	f7fe f804 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8003fe2:	e0db      	b.n	800419c <handle_requestServerConnection+0xec8>



		case __gsmModule_requestServerConnection_send_atHttppara_cid:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003fe4:	4873      	ldr	r0, [pc, #460]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003fe6:	f7fd ffdb 	bl	8001fa0 <fsmManager_isStateIn>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d006      	beq.n	8003ffe <handle_requestServerConnection+0xd2a>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003ff0:	4870      	ldr	r0, [pc, #448]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8003ff2:	f7fd ffeb 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003ff6:	2164      	movs	r1, #100	; 0x64
 8003ff8:	486f      	ldr	r0, [pc, #444]	; (80041b8 <handle_requestServerConnection+0xee4>)
 8003ffa:	f001 f939 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003ffe:	486e      	ldr	r0, [pc, #440]	; (80041b8 <handle_requestServerConnection+0xee4>)
 8004000:	f001 f94a 	bl	8005298 <softTimer_expired>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d006      	beq.n	8004018 <handle_requestServerConnection+0xd44>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httppara_cid);
 800400a:	4870      	ldr	r0, [pc, #448]	; (80041cc <handle_requestServerConnection+0xef8>)
 800400c:	f000 fbfc 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atHttppara_cid);
 8004010:	2121      	movs	r1, #33	; 0x21
 8004012:	4868      	ldr	r0, [pc, #416]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8004014:	f7fd ffa2 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8004018:	4866      	ldr	r0, [pc, #408]	; (80041b4 <handle_requestServerConnection+0xee0>)
 800401a:	f7fd ffcc 	bl	8001fb6 <fsmManager_isStateOut>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80bd 	beq.w	80041a0 <handle_requestServerConnection+0xecc>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8004026:	4863      	ldr	r0, [pc, #396]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8004028:	f7fd ffdf 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800402c:	e0b8      	b.n	80041a0 <handle_requestServerConnection+0xecc>



		case __gsmModule_requestServerConnection_waitOk_atHttppara_cid:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800402e:	4861      	ldr	r0, [pc, #388]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8004030:	f7fd ffb6 	bl	8001fa0 <fsmManager_isStateIn>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <handle_requestServerConnection+0xd76>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800403a:	485e      	ldr	r0, [pc, #376]	; (80041b4 <handle_requestServerConnection+0xee0>)
 800403c:	f7fd ffc6 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8004040:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004044:	485c      	ldr	r0, [pc, #368]	; (80041b8 <handle_requestServerConnection+0xee4>)
 8004046:	f001 f913 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800404a:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <handle_requestServerConnection+0xeec>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	495c      	ldr	r1, [pc, #368]	; (80041c4 <handle_requestServerConnection+0xef0>)
 8004052:	485d      	ldr	r0, [pc, #372]	; (80041c8 <handle_requestServerConnection+0xef4>)
 8004054:	f002 f83b 	bl	80060ce <string_containsWithinLength>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00e      	beq.n	800407c <handle_requestServerConnection+0xda8>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 800405e:	2100      	movs	r1, #0
 8004060:	4854      	ldr	r0, [pc, #336]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8004062:	f7fd ff7b 	bl	8001f5c <fsmManager_gotoState>

				flags_gsmModule.bits.isServerConnected = 1;
 8004066:	4a5a      	ldr	r2, [pc, #360]	; (80041d0 <handle_requestServerConnection+0xefc>)
 8004068:	7853      	ldrb	r3, [r2, #1]
 800406a:	f043 0320 	orr.w	r3, r3, #32
 800406e:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerConnection = 0;
 8004070:	4a57      	ldr	r2, [pc, #348]	; (80041d0 <handle_requestServerConnection+0xefc>)
 8004072:	7813      	ldrb	r3, [r2, #0]
 8004074:	f36f 1345 	bfc	r3, #5, #1
 8004078:	7013      	strb	r3, [r2, #0]
 800407a:	e009      	b.n	8004090 <handle_requestServerConnection+0xdbc>
			}
			else if(softTimer_expired(&timeout)) {
 800407c:	484e      	ldr	r0, [pc, #312]	; (80041b8 <handle_requestServerConnection+0xee4>)
 800407e:	f001 f90b 	bl	8005298 <softTimer_expired>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <handle_requestServerConnection+0xdbc>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttppara_cid);
 8004088:	2120      	movs	r1, #32
 800408a:	484a      	ldr	r0, [pc, #296]	; (80041b4 <handle_requestServerConnection+0xee0>)
 800408c:	f7fd ff66 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8004090:	4848      	ldr	r0, [pc, #288]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8004092:	f7fd ff90 	bl	8001fb6 <fsmManager_isStateOut>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8083 	beq.w	80041a4 <handle_requestServerConnection+0xed0>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800409e:	4845      	ldr	r0, [pc, #276]	; (80041b4 <handle_requestServerConnection+0xee0>)
 80040a0:	f7fd ffa3 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80040a4:	e07e      	b.n	80041a4 <handle_requestServerConnection+0xed0>



		case __gsmModule_requestServerConnection_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80040a6:	4843      	ldr	r0, [pc, #268]	; (80041b4 <handle_requestServerConnection+0xee0>)
 80040a8:	f7fd ff7a 	bl	8001fa0 <fsmManager_isStateIn>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <handle_requestServerConnection+0xde4>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80040b2:	4840      	ldr	r0, [pc, #256]	; (80041b4 <handle_requestServerConnection+0xee0>)
 80040b4:	f7fd ff8a 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverConnection = 1;
 80040b8:	4a46      	ldr	r2, [pc, #280]	; (80041d4 <handle_requestServerConnection+0xf00>)
 80040ba:	7813      	ldrb	r3, [r2, #0]
 80040bc:	f043 0320 	orr.w	r3, r3, #32
 80040c0:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerConnection = 0;
 80040c2:	4a43      	ldr	r2, [pc, #268]	; (80041d0 <handle_requestServerConnection+0xefc>)
 80040c4:	7813      	ldrb	r3, [r2, #0]
 80040c6:	f36f 1345 	bfc	r3, #5, #1
 80040ca:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 80040cc:	2100      	movs	r1, #0
 80040ce:	4839      	ldr	r0, [pc, #228]	; (80041b4 <handle_requestServerConnection+0xee0>)
 80040d0:	f7fd ff44 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80040d4:	4837      	ldr	r0, [pc, #220]	; (80041b4 <handle_requestServerConnection+0xee0>)
 80040d6:	f7fd ff6e 	bl	8001fb6 <fsmManager_isStateOut>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d063      	beq.n	80041a8 <handle_requestServerConnection+0xed4>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80040e0:	4834      	ldr	r0, [pc, #208]	; (80041b4 <handle_requestServerConnection+0xee0>)
 80040e2:	f7fd ff82 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80040e6:	e05f      	b.n	80041a8 <handle_requestServerConnection+0xed4>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80040e8:	4832      	ldr	r0, [pc, #200]	; (80041b4 <handle_requestServerConnection+0xee0>)
 80040ea:	f7fd ff59 	bl	8001fa0 <fsmManager_isStateIn>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <handle_requestServerConnection+0xe26>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80040f4:	482f      	ldr	r0, [pc, #188]	; (80041b4 <handle_requestServerConnection+0xee0>)
 80040f6:	f7fd ff69 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestServerConnection = 0;
 80040fa:	4a35      	ldr	r2, [pc, #212]	; (80041d0 <handle_requestServerConnection+0xefc>)
 80040fc:	7813      	ldrb	r3, [r2, #0]
 80040fe:	f36f 1345 	bfc	r3, #5, #1
 8004102:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 8004104:	2100      	movs	r1, #0
 8004106:	482b      	ldr	r0, [pc, #172]	; (80041b4 <handle_requestServerConnection+0xee0>)
 8004108:	f7fd ff28 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800410c:	4829      	ldr	r0, [pc, #164]	; (80041b4 <handle_requestServerConnection+0xee0>)
 800410e:	f7fd ff52 	bl	8001fb6 <fsmManager_isStateOut>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d049      	beq.n	80041ac <handle_requestServerConnection+0xed8>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8004118:	4826      	ldr	r0, [pc, #152]	; (80041b4 <handle_requestServerConnection+0xee0>)
 800411a:	f7fd ff66 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800411e:	e045      	b.n	80041ac <handle_requestServerConnection+0xed8>
			break;
 8004120:	bf00      	nop
 8004122:	e044      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004124:	bf00      	nop
 8004126:	e042      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004128:	bf00      	nop
 800412a:	e040      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 800412c:	bf00      	nop
 800412e:	e03e      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004130:	bf00      	nop
 8004132:	e03c      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004134:	bf00      	nop
 8004136:	e03a      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004138:	bf00      	nop
 800413a:	e038      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 800413c:	bf00      	nop
 800413e:	e036      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004140:	bf00      	nop
 8004142:	e034      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004144:	bf00      	nop
 8004146:	e032      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004148:	bf00      	nop
 800414a:	e030      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 800414c:	bf00      	nop
 800414e:	e02e      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004150:	bf00      	nop
 8004152:	e02c      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004154:	bf00      	nop
 8004156:	e02a      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004158:	bf00      	nop
 800415a:	e028      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 800415c:	bf00      	nop
 800415e:	e026      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004160:	bf00      	nop
 8004162:	e024      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004164:	bf00      	nop
 8004166:	e022      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004168:	bf00      	nop
 800416a:	e020      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 800416c:	bf00      	nop
 800416e:	e01e      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004170:	bf00      	nop
 8004172:	e01c      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004174:	bf00      	nop
 8004176:	e01a      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004178:	bf00      	nop
 800417a:	e018      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 800417c:	bf00      	nop
 800417e:	e016      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004180:	bf00      	nop
 8004182:	e014      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004184:	bf00      	nop
 8004186:	e012      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004188:	bf00      	nop
 800418a:	e010      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 800418c:	bf00      	nop
 800418e:	e00e      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004190:	bf00      	nop
 8004192:	e00c      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004194:	bf00      	nop
 8004196:	e00a      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 8004198:	bf00      	nop
 800419a:	e008      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 800419c:	bf00      	nop
 800419e:	e006      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 80041a0:	bf00      	nop
 80041a2:	e004      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 80041a4:	bf00      	nop
 80041a6:	e002      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 80041a8:	bf00      	nop
 80041aa:	e000      	b.n	80041ae <handle_requestServerConnection+0xeda>
			break;
 80041ac:	bf00      	nop
	}
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000660 	.word	0x20000660
 80041b8:	20000618 	.word	0x20000618
 80041bc:	0800bce8 	.word	0x0800bce8
 80041c0:	200004cc 	.word	0x200004cc
 80041c4:	0800bd74 	.word	0x0800bd74
 80041c8:	200003f8 	.word	0x200003f8
 80041cc:	0800bcf8 	.word	0x0800bcf8
 80041d0:	20000600 	.word	0x20000600
 80041d4:	20000604 	.word	0x20000604

080041d8 <handle_requestServerDataSend>:

static void handle_requestServerDataSend(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerDataSend_state)) {
 80041dc:	4899      	ldr	r0, [pc, #612]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80041de:	f7fd fed4 	bl	8001f8a <fsmManager_getState>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b05      	cmp	r3, #5
 80041e6:	f200 8107 	bhi.w	80043f8 <handle_requestServerDataSend+0x220>
 80041ea:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <handle_requestServerDataSend+0x18>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	08004209 	.word	0x08004209
 80041f4:	08004239 	.word	0x08004239
 80041f8:	08004283 	.word	0x08004283
 80041fc:	080042e7 	.word	0x080042e7
 8004200:	08004331 	.word	0x08004331
 8004204:	080043b7 	.word	0x080043b7
		case __gsmModule_requestServerDataSend_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8004208:	488e      	ldr	r0, [pc, #568]	; (8004444 <handle_requestServerDataSend+0x26c>)
 800420a:	f7fd fec9 	bl	8001fa0 <fsmManager_isStateIn>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <handle_requestServerDataSend+0x42>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8004214:	488b      	ldr	r0, [pc, #556]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004216:	f7fd fed9 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_send_atHttppara_url);
 800421a:	2101      	movs	r1, #1
 800421c:	4889      	ldr	r0, [pc, #548]	; (8004444 <handle_requestServerDataSend+0x26c>)
 800421e:	f7fd fe9d 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8004222:	4888      	ldr	r0, [pc, #544]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004224:	f7fd fec7 	bl	8001fb6 <fsmManager_isStateOut>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80fb 	beq.w	8004426 <handle_requestServerDataSend+0x24e>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8004230:	4884      	ldr	r0, [pc, #528]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004232:	f7fd feda 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8004236:	e0f6      	b.n	8004426 <handle_requestServerDataSend+0x24e>

		case __gsmModule_requestServerDataSend_send_atHttppara_url:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8004238:	4882      	ldr	r0, [pc, #520]	; (8004444 <handle_requestServerDataSend+0x26c>)
 800423a:	f7fd feb1 	bl	8001fa0 <fsmManager_isStateIn>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d006      	beq.n	8004252 <handle_requestServerDataSend+0x7a>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8004244:	487f      	ldr	r0, [pc, #508]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004246:	f7fd fec1 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 800424a:	2164      	movs	r1, #100	; 0x64
 800424c:	487e      	ldr	r0, [pc, #504]	; (8004448 <handle_requestServerDataSend+0x270>)
 800424e:	f001 f80f 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8004252:	487d      	ldr	r0, [pc, #500]	; (8004448 <handle_requestServerDataSend+0x270>)
 8004254:	f001 f820 	bl	8005298 <softTimer_expired>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d006      	beq.n	800426c <handle_requestServerDataSend+0x94>
				pinGsmUartTx_transmit((uint8_t *) dataToSend);
 800425e:	487b      	ldr	r0, [pc, #492]	; (800444c <handle_requestServerDataSend+0x274>)
 8004260:	f000 fad2 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_waitOk_atHttppara_url);
 8004264:	2102      	movs	r1, #2
 8004266:	4877      	ldr	r0, [pc, #476]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004268:	f7fd fe78 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 800426c:	4875      	ldr	r0, [pc, #468]	; (8004444 <handle_requestServerDataSend+0x26c>)
 800426e:	f7fd fea2 	bl	8001fb6 <fsmManager_isStateOut>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80d8 	beq.w	800442a <handle_requestServerDataSend+0x252>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 800427a:	4872      	ldr	r0, [pc, #456]	; (8004444 <handle_requestServerDataSend+0x26c>)
 800427c:	f7fd feb5 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8004280:	e0d3      	b.n	800442a <handle_requestServerDataSend+0x252>

		case __gsmModule_requestServerDataSend_waitOk_atHttppara_url:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8004282:	4870      	ldr	r0, [pc, #448]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004284:	f7fd fe8c 	bl	8001fa0 <fsmManager_isStateIn>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <handle_requestServerDataSend+0xc6>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 800428e:	486d      	ldr	r0, [pc, #436]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004290:	f7fd fe9c 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 5*1000);
 8004294:	f241 3188 	movw	r1, #5000	; 0x1388
 8004298:	486b      	ldr	r0, [pc, #428]	; (8004448 <handle_requestServerDataSend+0x270>)
 800429a:	f000 ffe9 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800429e:	4b6c      	ldr	r3, [pc, #432]	; (8004450 <handle_requestServerDataSend+0x278>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	496b      	ldr	r1, [pc, #428]	; (8004454 <handle_requestServerDataSend+0x27c>)
 80042a6:	486c      	ldr	r0, [pc, #432]	; (8004458 <handle_requestServerDataSend+0x280>)
 80042a8:	f001 ff11 	bl	80060ce <string_containsWithinLength>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d004      	beq.n	80042bc <handle_requestServerDataSend+0xe4>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_send_atHttpaction1);
 80042b2:	2103      	movs	r1, #3
 80042b4:	4863      	ldr	r0, [pc, #396]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80042b6:	f7fd fe51 	bl	8001f5c <fsmManager_gotoState>
 80042ba:	e009      	b.n	80042d0 <handle_requestServerDataSend+0xf8>
			}
			else if(softTimer_expired(&timeout)) {
 80042bc:	4862      	ldr	r0, [pc, #392]	; (8004448 <handle_requestServerDataSend+0x270>)
 80042be:	f000 ffeb 	bl	8005298 <softTimer_expired>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <handle_requestServerDataSend+0xf8>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_send_atHttppara_url);
 80042c8:	2101      	movs	r1, #1
 80042ca:	485e      	ldr	r0, [pc, #376]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80042cc:	f7fd fe46 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 80042d0:	485c      	ldr	r0, [pc, #368]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80042d2:	f7fd fe70 	bl	8001fb6 <fsmManager_isStateOut>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80a8 	beq.w	800442e <handle_requestServerDataSend+0x256>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 80042de:	4859      	ldr	r0, [pc, #356]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80042e0:	f7fd fe83 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80042e4:	e0a3      	b.n	800442e <handle_requestServerDataSend+0x256>

		case __gsmModule_requestServerDataSend_send_atHttpaction1:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 80042e6:	4857      	ldr	r0, [pc, #348]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80042e8:	f7fd fe5a 	bl	8001fa0 <fsmManager_isStateIn>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d006      	beq.n	8004300 <handle_requestServerDataSend+0x128>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 80042f2:	4854      	ldr	r0, [pc, #336]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80042f4:	f7fd fe6a 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80042f8:	2164      	movs	r1, #100	; 0x64
 80042fa:	4853      	ldr	r0, [pc, #332]	; (8004448 <handle_requestServerDataSend+0x270>)
 80042fc:	f000 ffb8 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8004300:	4851      	ldr	r0, [pc, #324]	; (8004448 <handle_requestServerDataSend+0x270>)
 8004302:	f000 ffc9 	bl	8005298 <softTimer_expired>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d006      	beq.n	800431a <handle_requestServerDataSend+0x142>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpaction1);
 800430c:	4853      	ldr	r0, [pc, #332]	; (800445c <handle_requestServerDataSend+0x284>)
 800430e:	f000 fa7b 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_waitOk_atHttpaction1);
 8004312:	2104      	movs	r1, #4
 8004314:	484b      	ldr	r0, [pc, #300]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004316:	f7fd fe21 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 800431a:	484a      	ldr	r0, [pc, #296]	; (8004444 <handle_requestServerDataSend+0x26c>)
 800431c:	f7fd fe4b 	bl	8001fb6 <fsmManager_isStateOut>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8085 	beq.w	8004432 <handle_requestServerDataSend+0x25a>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8004328:	4846      	ldr	r0, [pc, #280]	; (8004444 <handle_requestServerDataSend+0x26c>)
 800432a:	f7fd fe5e 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800432e:	e080      	b.n	8004432 <handle_requestServerDataSend+0x25a>

		case __gsmModule_requestServerDataSend_waitOk_atHttpaction1:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8004330:	4844      	ldr	r0, [pc, #272]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004332:	f7fd fe35 	bl	8001fa0 <fsmManager_isStateIn>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d006      	beq.n	800434a <handle_requestServerDataSend+0x172>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 800433c:	4841      	ldr	r0, [pc, #260]	; (8004444 <handle_requestServerDataSend+0x26c>)
 800433e:	f7fd fe45 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 120*1000);
 8004342:	4947      	ldr	r1, [pc, #284]	; (8004460 <handle_requestServerDataSend+0x288>)
 8004344:	4840      	ldr	r0, [pc, #256]	; (8004448 <handle_requestServerDataSend+0x270>)
 8004346:	f000 ff93 	bl	8005270 <softTimer_start>
			}

			if(flags_gsmModuleUnsolicited.bits.httpActionOk == 1) {
 800434a:	4b46      	ldr	r3, [pc, #280]	; (8004464 <handle_requestServerDataSend+0x28c>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00e      	beq.n	8004376 <handle_requestServerDataSend+0x19e>
				flags_gsmModule.bits.isServerDataSent = 1;
 8004358:	4a43      	ldr	r2, [pc, #268]	; (8004468 <handle_requestServerDataSend+0x290>)
 800435a:	7853      	ldrb	r3, [r2, #1]
 800435c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004360:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerDataSend = 0;
 8004362:	4a41      	ldr	r2, [pc, #260]	; (8004468 <handle_requestServerDataSend+0x290>)
 8004364:	7813      	ldrb	r3, [r2, #0]
 8004366:	f36f 1386 	bfc	r3, #6, #1
 800436a:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 800436c:	2100      	movs	r1, #0
 800436e:	4835      	ldr	r0, [pc, #212]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004370:	f7fd fdf4 	bl	8001f5c <fsmManager_gotoState>
 8004374:	e015      	b.n	80043a2 <handle_requestServerDataSend+0x1ca>
			}
			else if(flags_gsmModuleUnsolicited.bits.httpActionError == 1) {
 8004376:	4b3b      	ldr	r3, [pc, #236]	; (8004464 <handle_requestServerDataSend+0x28c>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <handle_requestServerDataSend+0x1b6>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_error);
 8004384:	2105      	movs	r1, #5
 8004386:	482f      	ldr	r0, [pc, #188]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004388:	f7fd fde8 	bl	8001f5c <fsmManager_gotoState>
 800438c:	e009      	b.n	80043a2 <handle_requestServerDataSend+0x1ca>
			}
			else if(softTimer_expired(&timeout)) {
 800438e:	482e      	ldr	r0, [pc, #184]	; (8004448 <handle_requestServerDataSend+0x270>)
 8004390:	f000 ff82 	bl	8005298 <softTimer_expired>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <handle_requestServerDataSend+0x1ca>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_waitOk_atHttpaction1);
 800439a:	2104      	movs	r1, #4
 800439c:	4829      	ldr	r0, [pc, #164]	; (8004444 <handle_requestServerDataSend+0x26c>)
 800439e:	f7fd fddd 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 80043a2:	4828      	ldr	r0, [pc, #160]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80043a4:	f7fd fe07 	bl	8001fb6 <fsmManager_isStateOut>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d043      	beq.n	8004436 <handle_requestServerDataSend+0x25e>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 80043ae:	4825      	ldr	r0, [pc, #148]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80043b0:	f7fd fe1b 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80043b4:	e03f      	b.n	8004436 <handle_requestServerDataSend+0x25e>

		case __gsmModule_requestServerDataSend_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 80043b6:	4823      	ldr	r0, [pc, #140]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80043b8:	f7fd fdf2 	bl	8001fa0 <fsmManager_isStateIn>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <handle_requestServerDataSend+0x1f0>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 80043c2:	4820      	ldr	r0, [pc, #128]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80043c4:	f7fd fe02 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverSendData = 1;
 80043c8:	4a28      	ldr	r2, [pc, #160]	; (800446c <handle_requestServerDataSend+0x294>)
 80043ca:	7813      	ldrb	r3, [r2, #0]
 80043cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d0:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerDataSend = 0;
 80043d2:	4a25      	ldr	r2, [pc, #148]	; (8004468 <handle_requestServerDataSend+0x290>)
 80043d4:	7813      	ldrb	r3, [r2, #0]
 80043d6:	f36f 1386 	bfc	r3, #6, #1
 80043da:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 80043dc:	2100      	movs	r1, #0
 80043de:	4819      	ldr	r0, [pc, #100]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80043e0:	f7fd fdbc 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 80043e4:	4817      	ldr	r0, [pc, #92]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80043e6:	f7fd fde6 	bl	8001fb6 <fsmManager_isStateOut>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d024      	beq.n	800443a <handle_requestServerDataSend+0x262>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 80043f0:	4814      	ldr	r0, [pc, #80]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80043f2:	f7fd fdfa 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80043f6:	e020      	b.n	800443a <handle_requestServerDataSend+0x262>

		default:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 80043f8:	4812      	ldr	r0, [pc, #72]	; (8004444 <handle_requestServerDataSend+0x26c>)
 80043fa:	f7fd fdd1 	bl	8001fa0 <fsmManager_isStateIn>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <handle_requestServerDataSend+0x232>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8004404:	480f      	ldr	r0, [pc, #60]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004406:	f7fd fde1 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 800440a:	2100      	movs	r1, #0
 800440c:	480d      	ldr	r0, [pc, #52]	; (8004444 <handle_requestServerDataSend+0x26c>)
 800440e:	f7fd fda5 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8004412:	480c      	ldr	r0, [pc, #48]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004414:	f7fd fdcf 	bl	8001fb6 <fsmManager_isStateOut>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00f      	beq.n	800443e <handle_requestServerDataSend+0x266>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 800441e:	4809      	ldr	r0, [pc, #36]	; (8004444 <handle_requestServerDataSend+0x26c>)
 8004420:	f7fd fde3 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8004424:	e00b      	b.n	800443e <handle_requestServerDataSend+0x266>
			break;
 8004426:	bf00      	nop
 8004428:	e00a      	b.n	8004440 <handle_requestServerDataSend+0x268>
			break;
 800442a:	bf00      	nop
 800442c:	e008      	b.n	8004440 <handle_requestServerDataSend+0x268>
			break;
 800442e:	bf00      	nop
 8004430:	e006      	b.n	8004440 <handle_requestServerDataSend+0x268>
			break;
 8004432:	bf00      	nop
 8004434:	e004      	b.n	8004440 <handle_requestServerDataSend+0x268>
			break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <handle_requestServerDataSend+0x268>
			break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <handle_requestServerDataSend+0x268>
			break;
 800443e:	bf00      	nop
	}
}
 8004440:	bf00      	nop
 8004442:	bd80      	pop	{r7, pc}
 8004444:	2000066c 	.word	0x2000066c
 8004448:	20000618 	.word	0x20000618
 800444c:	200004d4 	.word	0x200004d4
 8004450:	200004cc 	.word	0x200004cc
 8004454:	0800bd74 	.word	0x0800bd74
 8004458:	200003f8 	.word	0x200003f8
 800445c:	0800bd40 	.word	0x0800bd40
 8004460:	0001d4c0 	.word	0x0001d4c0
 8004464:	20000608 	.word	0x20000608
 8004468:	20000600 	.word	0x20000600
 800446c:	20000604 	.word	0x20000604

08004470 <handle_requestServerDisconnection>:

static void handle_requestServerDisconnection(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerDisconnection_state)) {
 8004474:	48c1      	ldr	r0, [pc, #772]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004476:	f7fd fd88 	bl	8001f8a <fsmManager_getState>
 800447a:	4603      	mov	r3, r0
 800447c:	2b07      	cmp	r3, #7
 800447e:	f200 8158 	bhi.w	8004732 <handle_requestServerDisconnection+0x2c2>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <handle_requestServerDisconnection+0x18>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044a9 	.word	0x080044a9
 800448c:	080044d9 	.word	0x080044d9
 8004490:	08004523 	.word	0x08004523
 8004494:	08004585 	.word	0x08004585
 8004498:	080045cf 	.word	0x080045cf
 800449c:	08004633 	.word	0x08004633
 80044a0:	0800467d 	.word	0x0800467d
 80044a4:	080046f1 	.word	0x080046f1
		case __gsmModule_requestServerDisconnection_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 80044a8:	48b4      	ldr	r0, [pc, #720]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80044aa:	f7fd fd79 	bl	8001fa0 <fsmManager_isStateIn>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <handle_requestServerDisconnection+0x4a>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 80044b4:	48b1      	ldr	r0, [pc, #708]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80044b6:	f7fd fd89 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atHttpterm);
 80044ba:	2101      	movs	r1, #1
 80044bc:	48af      	ldr	r0, [pc, #700]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80044be:	f7fd fd4d 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 80044c2:	48ae      	ldr	r0, [pc, #696]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80044c4:	f7fd fd77 	bl	8001fb6 <fsmManager_isStateOut>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 814d 	beq.w	800476a <handle_requestServerDisconnection+0x2fa>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 80044d0:	48aa      	ldr	r0, [pc, #680]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80044d2:	f7fd fd8a 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80044d6:	e148      	b.n	800476a <handle_requestServerDisconnection+0x2fa>



		case __gsmModule_requestServerDisconnection_send_atHttpterm:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 80044d8:	48a8      	ldr	r0, [pc, #672]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80044da:	f7fd fd61 	bl	8001fa0 <fsmManager_isStateIn>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d006      	beq.n	80044f2 <handle_requestServerDisconnection+0x82>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 80044e4:	48a5      	ldr	r0, [pc, #660]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80044e6:	f7fd fd71 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80044ea:	2164      	movs	r1, #100	; 0x64
 80044ec:	48a4      	ldr	r0, [pc, #656]	; (8004780 <handle_requestServerDisconnection+0x310>)
 80044ee:	f000 febf 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80044f2:	48a3      	ldr	r0, [pc, #652]	; (8004780 <handle_requestServerDisconnection+0x310>)
 80044f4:	f000 fed0 	bl	8005298 <softTimer_expired>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d006      	beq.n	800450c <handle_requestServerDisconnection+0x9c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpterm);
 80044fe:	48a1      	ldr	r0, [pc, #644]	; (8004784 <handle_requestServerDisconnection+0x314>)
 8004500:	f000 f982 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_waitOk_atHttpterm);
 8004504:	2102      	movs	r1, #2
 8004506:	489d      	ldr	r0, [pc, #628]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004508:	f7fd fd28 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 800450c:	489b      	ldr	r0, [pc, #620]	; (800477c <handle_requestServerDisconnection+0x30c>)
 800450e:	f7fd fd52 	bl	8001fb6 <fsmManager_isStateOut>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 812a 	beq.w	800476e <handle_requestServerDisconnection+0x2fe>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 800451a:	4898      	ldr	r0, [pc, #608]	; (800477c <handle_requestServerDisconnection+0x30c>)
 800451c:	f7fd fd65 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8004520:	e125      	b.n	800476e <handle_requestServerDisconnection+0x2fe>



		case __gsmModule_requestServerDisconnection_waitOk_atHttpterm:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004522:	4896      	ldr	r0, [pc, #600]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004524:	f7fd fd3c 	bl	8001fa0 <fsmManager_isStateIn>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d006      	beq.n	800453c <handle_requestServerDisconnection+0xcc>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 800452e:	4893      	ldr	r0, [pc, #588]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004530:	f7fd fd4c 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8004534:	2164      	movs	r1, #100	; 0x64
 8004536:	4892      	ldr	r0, [pc, #584]	; (8004780 <handle_requestServerDisconnection+0x310>)
 8004538:	f000 fe9a 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800453c:	4b92      	ldr	r3, [pc, #584]	; (8004788 <handle_requestServerDisconnection+0x318>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4992      	ldr	r1, [pc, #584]	; (800478c <handle_requestServerDisconnection+0x31c>)
 8004544:	4892      	ldr	r0, [pc, #584]	; (8004790 <handle_requestServerDisconnection+0x320>)
 8004546:	f001 fdc2 	bl	80060ce <string_containsWithinLength>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d004      	beq.n	800455a <handle_requestServerDisconnection+0xea>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr0);
 8004550:	2103      	movs	r1, #3
 8004552:	488a      	ldr	r0, [pc, #552]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004554:	f7fd fd02 	bl	8001f5c <fsmManager_gotoState>
 8004558:	e009      	b.n	800456e <handle_requestServerDisconnection+0xfe>
			}
			else if(softTimer_expired(&timeout)) {
 800455a:	4889      	ldr	r0, [pc, #548]	; (8004780 <handle_requestServerDisconnection+0x310>)
 800455c:	f000 fe9c 	bl	8005298 <softTimer_expired>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <handle_requestServerDisconnection+0xfe>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atHttpterm);
 8004566:	2101      	movs	r1, #1
 8004568:	4884      	ldr	r0, [pc, #528]	; (800477c <handle_requestServerDisconnection+0x30c>)
 800456a:	f7fd fcf7 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 800456e:	4883      	ldr	r0, [pc, #524]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004570:	f7fd fd21 	bl	8001fb6 <fsmManager_isStateOut>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80fb 	beq.w	8004772 <handle_requestServerDisconnection+0x302>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 800457c:	487f      	ldr	r0, [pc, #508]	; (800477c <handle_requestServerDisconnection+0x30c>)
 800457e:	f7fd fd34 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8004582:	e0f6      	b.n	8004772 <handle_requestServerDisconnection+0x302>



		case __gsmModule_requestServerDisconnection_send_atSapbr0:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004584:	487d      	ldr	r0, [pc, #500]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004586:	f7fd fd0b 	bl	8001fa0 <fsmManager_isStateIn>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d006      	beq.n	800459e <handle_requestServerDisconnection+0x12e>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8004590:	487a      	ldr	r0, [pc, #488]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004592:	f7fd fd1b 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8004596:	2164      	movs	r1, #100	; 0x64
 8004598:	4879      	ldr	r0, [pc, #484]	; (8004780 <handle_requestServerDisconnection+0x310>)
 800459a:	f000 fe69 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 800459e:	4878      	ldr	r0, [pc, #480]	; (8004780 <handle_requestServerDisconnection+0x310>)
 80045a0:	f000 fe7a 	bl	8005298 <softTimer_expired>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d006      	beq.n	80045b8 <handle_requestServerDisconnection+0x148>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr0);
 80045aa:	487a      	ldr	r0, [pc, #488]	; (8004794 <handle_requestServerDisconnection+0x324>)
 80045ac:	f000 f92c 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_waitOk_atSapbr0);
 80045b0:	2104      	movs	r1, #4
 80045b2:	4872      	ldr	r0, [pc, #456]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80045b4:	f7fd fcd2 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 80045b8:	4870      	ldr	r0, [pc, #448]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80045ba:	f7fd fcfc 	bl	8001fb6 <fsmManager_isStateOut>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80d8 	beq.w	8004776 <handle_requestServerDisconnection+0x306>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 80045c6:	486d      	ldr	r0, [pc, #436]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80045c8:	f7fd fd0f 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80045cc:	e0d3      	b.n	8004776 <handle_requestServerDisconnection+0x306>



		case __gsmModule_requestServerDisconnection_waitOk_atSapbr0:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 80045ce:	486b      	ldr	r0, [pc, #428]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80045d0:	f7fd fce6 	bl	8001fa0 <fsmManager_isStateIn>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <handle_requestServerDisconnection+0x17a>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 80045da:	4868      	ldr	r0, [pc, #416]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80045dc:	f7fd fcf6 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 65*1000);
 80045e0:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 80045e4:	4866      	ldr	r0, [pc, #408]	; (8004780 <handle_requestServerDisconnection+0x310>)
 80045e6:	f000 fe43 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80045ea:	4b67      	ldr	r3, [pc, #412]	; (8004788 <handle_requestServerDisconnection+0x318>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	4966      	ldr	r1, [pc, #408]	; (800478c <handle_requestServerDisconnection+0x31c>)
 80045f2:	4867      	ldr	r0, [pc, #412]	; (8004790 <handle_requestServerDisconnection+0x320>)
 80045f4:	f001 fd6b 	bl	80060ce <string_containsWithinLength>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <handle_requestServerDisconnection+0x198>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr2);
 80045fe:	2105      	movs	r1, #5
 8004600:	485e      	ldr	r0, [pc, #376]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004602:	f7fd fcab 	bl	8001f5c <fsmManager_gotoState>
 8004606:	e009      	b.n	800461c <handle_requestServerDisconnection+0x1ac>
			}
			else if(softTimer_expired(&timeout)) {
 8004608:	485d      	ldr	r0, [pc, #372]	; (8004780 <handle_requestServerDisconnection+0x310>)
 800460a:	f000 fe45 	bl	8005298 <softTimer_expired>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <handle_requestServerDisconnection+0x1ac>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr0);
 8004614:	2103      	movs	r1, #3
 8004616:	4859      	ldr	r0, [pc, #356]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004618:	f7fd fca0 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 800461c:	4857      	ldr	r0, [pc, #348]	; (800477c <handle_requestServerDisconnection+0x30c>)
 800461e:	f7fd fcca 	bl	8001fb6 <fsmManager_isStateOut>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80bf 	beq.w	80047a8 <handle_requestServerDisconnection+0x338>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 800462a:	4854      	ldr	r0, [pc, #336]	; (800477c <handle_requestServerDisconnection+0x30c>)
 800462c:	f7fd fcdd 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8004630:	e0ba      	b.n	80047a8 <handle_requestServerDisconnection+0x338>



		case __gsmModule_requestServerDisconnection_send_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004632:	4852      	ldr	r0, [pc, #328]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004634:	f7fd fcb4 	bl	8001fa0 <fsmManager_isStateIn>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d006      	beq.n	800464c <handle_requestServerDisconnection+0x1dc>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 800463e:	484f      	ldr	r0, [pc, #316]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004640:	f7fd fcc4 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8004644:	2164      	movs	r1, #100	; 0x64
 8004646:	484e      	ldr	r0, [pc, #312]	; (8004780 <handle_requestServerDisconnection+0x310>)
 8004648:	f000 fe12 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 800464c:	484c      	ldr	r0, [pc, #304]	; (8004780 <handle_requestServerDisconnection+0x310>)
 800464e:	f000 fe23 	bl	8005298 <softTimer_expired>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <handle_requestServerDisconnection+0x1f6>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr2);
 8004658:	484f      	ldr	r0, [pc, #316]	; (8004798 <handle_requestServerDisconnection+0x328>)
 800465a:	f000 f8d5 	bl	8004808 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_check_atSapbr2);
 800465e:	2106      	movs	r1, #6
 8004660:	4846      	ldr	r0, [pc, #280]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004662:	f7fd fc7b 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8004666:	4845      	ldr	r0, [pc, #276]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004668:	f7fd fca5 	bl	8001fb6 <fsmManager_isStateOut>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 809c 	beq.w	80047ac <handle_requestServerDisconnection+0x33c>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8004674:	4841      	ldr	r0, [pc, #260]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004676:	f7fd fcb8 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 800467a:	e097      	b.n	80047ac <handle_requestServerDisconnection+0x33c>



		case __gsmModule_requestServerDisconnection_check_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 800467c:	483f      	ldr	r0, [pc, #252]	; (800477c <handle_requestServerDisconnection+0x30c>)
 800467e:	f7fd fc8f 	bl	8001fa0 <fsmManager_isStateIn>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d006      	beq.n	8004696 <handle_requestServerDisconnection+0x226>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8004688:	483c      	ldr	r0, [pc, #240]	; (800477c <handle_requestServerDisconnection+0x30c>)
 800468a:	f7fd fc9f 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 800468e:	2164      	movs	r1, #100	; 0x64
 8004690:	483b      	ldr	r0, [pc, #236]	; (8004780 <handle_requestServerDisconnection+0x310>)
 8004692:	f000 fded 	bl	8005270 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "0.0.0.0", gsmRxDataChunkLen)) {
 8004696:	4b3c      	ldr	r3, [pc, #240]	; (8004788 <handle_requestServerDisconnection+0x318>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	493f      	ldr	r1, [pc, #252]	; (800479c <handle_requestServerDisconnection+0x32c>)
 800469e:	483c      	ldr	r0, [pc, #240]	; (8004790 <handle_requestServerDisconnection+0x320>)
 80046a0:	f001 fd15 	bl	80060ce <string_containsWithinLength>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00e      	beq.n	80046c8 <handle_requestServerDisconnection+0x258>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 80046aa:	2100      	movs	r1, #0
 80046ac:	4833      	ldr	r0, [pc, #204]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80046ae:	f7fd fc55 	bl	8001f5c <fsmManager_gotoState>

				flags_gsmModule.bits.isServerConnected = 0;
 80046b2:	4a3b      	ldr	r2, [pc, #236]	; (80047a0 <handle_requestServerDisconnection+0x330>)
 80046b4:	7853      	ldrb	r3, [r2, #1]
 80046b6:	f36f 1345 	bfc	r3, #5, #1
 80046ba:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerDisconnection = 0;
 80046bc:	4a38      	ldr	r2, [pc, #224]	; (80047a0 <handle_requestServerDisconnection+0x330>)
 80046be:	7853      	ldrb	r3, [r2, #1]
 80046c0:	f36f 0300 	bfc	r3, #0, #1
 80046c4:	7053      	strb	r3, [r2, #1]
 80046c6:	e009      	b.n	80046dc <handle_requestServerDisconnection+0x26c>
			}
			else if(softTimer_expired(&timeout)) {
 80046c8:	482d      	ldr	r0, [pc, #180]	; (8004780 <handle_requestServerDisconnection+0x310>)
 80046ca:	f000 fde5 	bl	8005298 <softTimer_expired>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <handle_requestServerDisconnection+0x26c>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr2);
 80046d4:	2105      	movs	r1, #5
 80046d6:	4829      	ldr	r0, [pc, #164]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80046d8:	f7fd fc40 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 80046dc:	4827      	ldr	r0, [pc, #156]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80046de:	f7fd fc6a 	bl	8001fb6 <fsmManager_isStateOut>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d063      	beq.n	80047b0 <handle_requestServerDisconnection+0x340>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 80046e8:	4824      	ldr	r0, [pc, #144]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80046ea:	f7fd fc7e 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 80046ee:	e05f      	b.n	80047b0 <handle_requestServerDisconnection+0x340>



		case __gsmModule_requestServerDisconnection_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 80046f0:	4822      	ldr	r0, [pc, #136]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80046f2:	f7fd fc55 	bl	8001fa0 <fsmManager_isStateIn>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <handle_requestServerDisconnection+0x292>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 80046fc:	481f      	ldr	r0, [pc, #124]	; (800477c <handle_requestServerDisconnection+0x30c>)
 80046fe:	f7fd fc65 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverDisconnection = 1;
 8004702:	4a28      	ldr	r2, [pc, #160]	; (80047a4 <handle_requestServerDisconnection+0x334>)
 8004704:	7813      	ldrb	r3, [r2, #0]
 8004706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470a:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerDisconnection = 0;
 800470c:	4a24      	ldr	r2, [pc, #144]	; (80047a0 <handle_requestServerDisconnection+0x330>)
 800470e:	7853      	ldrb	r3, [r2, #1]
 8004710:	f36f 0300 	bfc	r3, #0, #1
 8004714:	7053      	strb	r3, [r2, #1]
			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 8004716:	2100      	movs	r1, #0
 8004718:	4818      	ldr	r0, [pc, #96]	; (800477c <handle_requestServerDisconnection+0x30c>)
 800471a:	f7fd fc1f 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 800471e:	4817      	ldr	r0, [pc, #92]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004720:	f7fd fc49 	bl	8001fb6 <fsmManager_isStateOut>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d044      	beq.n	80047b4 <handle_requestServerDisconnection+0x344>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 800472a:	4814      	ldr	r0, [pc, #80]	; (800477c <handle_requestServerDisconnection+0x30c>)
 800472c:	f7fd fc5d 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8004730:	e040      	b.n	80047b4 <handle_requestServerDisconnection+0x344>




		default:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004732:	4812      	ldr	r0, [pc, #72]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004734:	f7fd fc34 	bl	8001fa0 <fsmManager_isStateIn>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <handle_requestServerDisconnection+0x2d4>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 800473e:	480f      	ldr	r0, [pc, #60]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004740:	f7fd fc44 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestServerDisconnection = 0;
 8004744:	4a16      	ldr	r2, [pc, #88]	; (80047a0 <handle_requestServerDisconnection+0x330>)
 8004746:	7853      	ldrb	r3, [r2, #1]
 8004748:	f36f 0300 	bfc	r3, #0, #1
 800474c:	7053      	strb	r3, [r2, #1]
			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 800474e:	2100      	movs	r1, #0
 8004750:	480a      	ldr	r0, [pc, #40]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004752:	f7fd fc03 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8004756:	4809      	ldr	r0, [pc, #36]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004758:	f7fd fc2d 	bl	8001fb6 <fsmManager_isStateOut>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d02a      	beq.n	80047b8 <handle_requestServerDisconnection+0x348>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8004762:	4806      	ldr	r0, [pc, #24]	; (800477c <handle_requestServerDisconnection+0x30c>)
 8004764:	f7fd fc41 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8004768:	e026      	b.n	80047b8 <handle_requestServerDisconnection+0x348>
			break;
 800476a:	bf00      	nop
 800476c:	e025      	b.n	80047ba <handle_requestServerDisconnection+0x34a>
			break;
 800476e:	bf00      	nop
 8004770:	e023      	b.n	80047ba <handle_requestServerDisconnection+0x34a>
			break;
 8004772:	bf00      	nop
 8004774:	e021      	b.n	80047ba <handle_requestServerDisconnection+0x34a>
			break;
 8004776:	bf00      	nop
 8004778:	e01f      	b.n	80047ba <handle_requestServerDisconnection+0x34a>
 800477a:	bf00      	nop
 800477c:	20000684 	.word	0x20000684
 8004780:	20000618 	.word	0x20000618
 8004784:	0800bd64 	.word	0x0800bd64
 8004788:	200004cc 	.word	0x200004cc
 800478c:	0800bd74 	.word	0x0800bd74
 8004790:	200003f8 	.word	0x200003f8
 8004794:	0800bd54 	.word	0x0800bd54
 8004798:	0800bccc 	.word	0x0800bccc
 800479c:	0800bb30 	.word	0x0800bb30
 80047a0:	20000600 	.word	0x20000600
 80047a4:	20000604 	.word	0x20000604
			break;
 80047a8:	bf00      	nop
 80047aa:	e006      	b.n	80047ba <handle_requestServerDisconnection+0x34a>
			break;
 80047ac:	bf00      	nop
 80047ae:	e004      	b.n	80047ba <handle_requestServerDisconnection+0x34a>
			break;
 80047b0:	bf00      	nop
 80047b2:	e002      	b.n	80047ba <handle_requestServerDisconnection+0x34a>
			break;
 80047b4:	bf00      	nop
 80047b6:	e000      	b.n	80047ba <handle_requestServerDisconnection+0x34a>
			break;
 80047b8:	bf00      	nop
	}
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop

080047c0 <pinGsmVdd_write>:
	GSM_UART_TX		output			uart
	GSM_UART_RX		input			uart
*/

static void pinGsmVdd_write(uint8_t value)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GSM_VDD_GPIO_Port, GSM_VDD_Pin, value);
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	461a      	mov	r2, r3
 80047ce:	2140      	movs	r1, #64	; 0x40
 80047d0:	4803      	ldr	r0, [pc, #12]	; (80047e0 <pinGsmVdd_write+0x20>)
 80047d2:	f002 ff3d 	bl	8007650 <HAL_GPIO_WritePin>
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40010c00 	.word	0x40010c00

080047e4 <pinGsmPwrkey_write>:

static void pinGsmPwrkey_write(uint8_t value)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GSM_PWRKEY_GPIO_Port, GSM_PWRKEY_Pin, value);
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	461a      	mov	r2, r3
 80047f2:	2108      	movs	r1, #8
 80047f4:	4803      	ldr	r0, [pc, #12]	; (8004804 <pinGsmPwrkey_write+0x20>)
 80047f6:	f002 ff2b 	bl	8007650 <HAL_GPIO_WritePin>
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40010c00 	.word	0x40010c00

08004808 <pinGsmUartTx_transmit>:

static void pinGsmUartTx_transmit(uint8_t *gsmModule_command)
{
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(gsmHuart, UART_IT_RXNE);
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <pinGsmUartTx_transmit+0x78>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <pinGsmUartTx_transmit+0x78>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0220 	bic.w	r2, r2, #32
 8004822:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(gsmHuart, UART_IT_TC);
 8004824:	4b16      	ldr	r3, [pc, #88]	; (8004880 <pinGsmUartTx_transmit+0x78>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <pinGsmUartTx_transmit+0x78>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004836:	60da      	str	r2, [r3, #12]
	HAL_UART_Transmit_IT(gsmHuart, gsmModule_command, string_length(gsmModule_command));
 8004838:	4b11      	ldr	r3, [pc, #68]	; (8004880 <pinGsmUartTx_transmit+0x78>)
 800483a:	681c      	ldr	r4, [r3, #0]
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f001 fc2d 	bl	800609c <string_length>
 8004842:	4603      	mov	r3, r0
 8004844:	b29b      	uxth	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4620      	mov	r0, r4
 800484c:	f005 fab9 	bl	8009dc2 <HAL_UART_Transmit_IT>
	__HAL_UART_DISABLE_IT(gsmHuart, UART_IT_TC);
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <pinGsmUartTx_transmit+0x78>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	4b09      	ldr	r3, [pc, #36]	; (8004880 <pinGsmUartTx_transmit+0x78>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004862:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(gsmHuart, UART_IT_RXNE);
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <pinGsmUartTx_transmit+0x78>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <pinGsmUartTx_transmit+0x78>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0220 	orr.w	r2, r2, #32
 8004876:	60da      	str	r2, [r3, #12]
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	bd90      	pop	{r4, r7, pc}
 8004880:	20000264 	.word	0x20000264

08004884 <pinGsmUartRx_receive>:

static void pinGsmUartRx_receive(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(gsmHuart, &gsmRxData[gsmRxPtrIn], 1);
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <pinGsmUartRx_receive+0x40>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <pinGsmUartRx_receive+0x44>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0e      	ldr	r2, [pc, #56]	; (80048cc <pinGsmUartRx_receive+0x48>)
 8004892:	4413      	add	r3, r2
 8004894:	2201      	movs	r2, #1
 8004896:	4619      	mov	r1, r3
 8004898:	f005 fad7 	bl	8009e4a <HAL_UART_Receive_IT>
	gsmRxPtrIn++;
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <pinGsmUartRx_receive+0x44>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <pinGsmUartRx_receive+0x44>)
 80048a4:	6013      	str	r3, [r2, #0]
	gsmRxPtrIn%=GSMRXDATA_LENGTH;
 80048a6:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <pinGsmUartRx_receive+0x44>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <pinGsmUartRx_receive+0x4c>)
 80048ac:	fba3 1302 	umull	r1, r3, r3, r2
 80048b0:	09db      	lsrs	r3, r3, #7
 80048b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	4a02      	ldr	r2, [pc, #8]	; (80048c8 <pinGsmUartRx_receive+0x44>)
 80048be:	6013      	str	r3, [r2, #0]
}
 80048c0:	bf00      	nop
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000264 	.word	0x20000264
 80048c8:	200004c0 	.word	0x200004c0
 80048cc:	20000268 	.word	0x20000268
 80048d0:	51eb851f 	.word	0x51eb851f

080048d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	if(huart->Instance == gsmHuart->Instance) {
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_UART_RxCpltCallback+0x24>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d101      	bne.n	80048ee <HAL_UART_RxCpltCallback+0x1a>
		pinGsmUartRx_receive();
 80048ea:	f7ff ffcb 	bl	8004884 <pinGsmUartRx_receive>
	}
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000264 	.word	0x20000264

080048fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
	softTimer_periodElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fd16 	bl	8005348 <softTimer_periodElapsedCallback>
}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004928:	f001 fe96 	bl	8006658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800492c:	f000 f811 	bl	8004952 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004930:	f000 f9aa 	bl	8004c88 <MX_GPIO_Init>
  MX_ADC1_Init();
 8004934:	f000 f862 	bl	80049fc <MX_ADC1_Init>
  MX_RTC_Init();
 8004938:	f000 f8be 	bl	8004ab8 <MX_RTC_Init>
  MX_TIM3_Init();
 800493c:	f000 f8d8 	bl	8004af0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004940:	f000 f92a 	bl	8004b98 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004944:	f000 f976 	bl	8004c34 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dumpSensorManager_init();
 8004948:	f7fc fe4e 	bl	80015e8 <dumpSensorManager_init>

  while (1)
  {
	  dumpSensorManager_handler();
 800494c:	f7fc fe9e 	bl	800168c <dumpSensorManager_handler>
 8004950:	e7fc      	b.n	800494c <main+0x28>

08004952 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b094      	sub	sp, #80	; 0x50
 8004956:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004958:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800495c:	2228      	movs	r2, #40	; 0x28
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f005 fea3 	bl	800a6ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004966:	f107 0314 	add.w	r3, r7, #20
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	605a      	str	r2, [r3, #4]
 8004970:	609a      	str	r2, [r3, #8]
 8004972:	60da      	str	r2, [r3, #12]
 8004974:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004976:	1d3b      	adds	r3, r7, #4
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004982:	230a      	movs	r3, #10
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004986:	2301      	movs	r3, #1
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800498a:	2310      	movs	r3, #16
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800498e:	2301      	movs	r3, #1
 8004990:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004992:	2300      	movs	r3, #0
 8004994:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800499a:	4618      	mov	r0, r3
 800499c:	f002 fea0 	bl	80076e0 <HAL_RCC_OscConfig>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <SystemClock_Config+0x58>
  {
    Error_Handler();
 80049a6:	f000 f9c3 	bl	8004d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049aa:	230f      	movs	r3, #15
 80049ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049ba:	2300      	movs	r3, #0
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80049be:	f107 0314 	add.w	r3, r7, #20
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f003 f90b 	bl	8007be0 <HAL_RCC_ClockConfig>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80049d0:	f000 f9ae 	bl	8004d30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80049d4:	2303      	movs	r3, #3
 80049d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80049d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f003 fa95 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80049f0:	f000 f99e 	bl	8004d30 <Error_Handler>
  }
}
 80049f4:	bf00      	nop
 80049f6:	3750      	adds	r7, #80	; 0x50
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a02:	1d3b      	adds	r3, r7, #4
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8004a0c:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <MX_ADC1_Init+0xb4>)
 8004a0e:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <MX_ADC1_Init+0xb8>)
 8004a10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004a12:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <MX_ADC1_Init+0xb4>)
 8004a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004a1a:	4b25      	ldr	r3, [pc, #148]	; (8004ab0 <MX_ADC1_Init+0xb4>)
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004a20:	4b23      	ldr	r3, [pc, #140]	; (8004ab0 <MX_ADC1_Init+0xb4>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a26:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <MX_ADC1_Init+0xb4>)
 8004a28:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004a2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <MX_ADC1_Init+0xb4>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8004a34:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <MX_ADC1_Init+0xb4>)
 8004a36:	2203      	movs	r2, #3
 8004a38:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004a3a:	481d      	ldr	r0, [pc, #116]	; (8004ab0 <MX_ADC1_Init+0xb4>)
 8004a3c:	f001 fe6e 	bl	800671c <HAL_ADC_Init>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8004a46:	f000 f973 	bl	8004d30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004a4a:	2306      	movs	r3, #6
 8004a4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8004a52:	2306      	movs	r3, #6
 8004a54:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a56:	1d3b      	adds	r3, r7, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4815      	ldr	r0, [pc, #84]	; (8004ab0 <MX_ADC1_Init+0xb4>)
 8004a5c:	f002 f922 	bl	8006ca4 <HAL_ADC_ConfigChannel>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8004a66:	f000 f963 	bl	8004d30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004a6a:	2304      	movs	r3, #4
 8004a6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	480e      	ldr	r0, [pc, #56]	; (8004ab0 <MX_ADC1_Init+0xb4>)
 8004a78:	f002 f914 	bl	8006ca4 <HAL_ADC_ConfigChannel>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8004a82:	f000 f955 	bl	8004d30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004a86:	2310      	movs	r3, #16
 8004a88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8004a8e:	2304      	movs	r3, #4
 8004a90:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a92:	1d3b      	adds	r3, r7, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4806      	ldr	r0, [pc, #24]	; (8004ab0 <MX_ADC1_Init+0xb4>)
 8004a98:	f002 f904 	bl	8006ca4 <HAL_ADC_ConfigChannel>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8004aa2:	f000 f945 	bl	8004d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000828 	.word	0x20000828
 8004ab4:	40012400 	.word	0x40012400

08004ab8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <MX_RTC_Init+0x30>)
 8004abe:	4a0b      	ldr	r2, [pc, #44]	; (8004aec <MX_RTC_Init+0x34>)
 8004ac0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8004ac2:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <MX_RTC_Init+0x30>)
 8004ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8004aca:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <MX_RTC_Init+0x30>)
 8004acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ad0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004ad2:	4805      	ldr	r0, [pc, #20]	; (8004ae8 <MX_RTC_Init+0x30>)
 8004ad4:	f003 fb98 	bl	8008208 <HAL_RTC_Init>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8004ade:	f000 f927 	bl	8004d30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	2000089c 	.word	0x2000089c
 8004aec:	40002800 	.word	0x40002800

08004af0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004af6:	f107 0310 	add.w	r3, r7, #16
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004b00:	463b      	mov	r3, r7
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	605a      	str	r2, [r3, #4]
 8004b08:	609a      	str	r2, [r3, #8]
 8004b0a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b0c:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <MX_TIM3_Init+0xa0>)
 8004b0e:	4a21      	ldr	r2, [pc, #132]	; (8004b94 <MX_TIM3_Init+0xa4>)
 8004b10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8004b12:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <MX_TIM3_Init+0xa0>)
 8004b14:	2207      	movs	r2, #7
 8004b16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <MX_TIM3_Init+0xa0>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <MX_TIM3_Init+0xa0>)
 8004b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <MX_TIM3_Init+0xa0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b2c:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <MX_TIM3_Init+0xa0>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004b32:	4817      	ldr	r0, [pc, #92]	; (8004b90 <MX_TIM3_Init+0xa0>)
 8004b34:	f004 f9a0 	bl	8008e78 <HAL_TIM_IC_Init>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004b3e:	f000 f8f7 	bl	8004d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b4a:	f107 0310 	add.w	r3, r7, #16
 8004b4e:	4619      	mov	r1, r3
 8004b50:	480f      	ldr	r0, [pc, #60]	; (8004b90 <MX_TIM3_Init+0xa0>)
 8004b52:	f005 f879 	bl	8009c48 <HAL_TIMEx_MasterConfigSynchronization>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004b5c:	f000 f8e8 	bl	8004d30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004b60:	2300      	movs	r3, #0
 8004b62:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004b64:	2301      	movs	r3, #1
 8004b66:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004b70:	463b      	mov	r3, r7
 8004b72:	2208      	movs	r2, #8
 8004b74:	4619      	mov	r1, r3
 8004b76:	4806      	ldr	r0, [pc, #24]	; (8004b90 <MX_TIM3_Init+0xa0>)
 8004b78:	f004 fc84 	bl	8009484 <HAL_TIM_IC_ConfigChannel>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004b82:	f000 f8d5 	bl	8004d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	200007e0 	.word	0x200007e0
 8004b94:	40000400 	.word	0x40000400

08004b98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b9e:	f107 0308 	add.w	r3, r7, #8
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bac:	463b      	mov	r3, r7
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004bb4:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <MX_TIM4_Init+0x94>)
 8004bb6:	4a1e      	ldr	r2, [pc, #120]	; (8004c30 <MX_TIM4_Init+0x98>)
 8004bb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 8004bba:	4b1c      	ldr	r3, [pc, #112]	; (8004c2c <MX_TIM4_Init+0x94>)
 8004bbc:	2207      	movs	r2, #7
 8004bbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc0:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <MX_TIM4_Init+0x94>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8004bc6:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <MX_TIM4_Init+0x94>)
 8004bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004bcc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bce:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <MX_TIM4_Init+0x94>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bd4:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <MX_TIM4_Init+0x94>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004bda:	4814      	ldr	r0, [pc, #80]	; (8004c2c <MX_TIM4_Init+0x94>)
 8004bdc:	f004 f8aa 	bl	8008d34 <HAL_TIM_Base_Init>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004be6:	f000 f8a3 	bl	8004d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004bf0:	f107 0308 	add.w	r3, r7, #8
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	480d      	ldr	r0, [pc, #52]	; (8004c2c <MX_TIM4_Init+0x94>)
 8004bf8:	f004 fcd8 	bl	80095ac <HAL_TIM_ConfigClockSource>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004c02:	f000 f895 	bl	8004d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c06:	2300      	movs	r3, #0
 8004c08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c0e:	463b      	mov	r3, r7
 8004c10:	4619      	mov	r1, r3
 8004c12:	4806      	ldr	r0, [pc, #24]	; (8004c2c <MX_TIM4_Init+0x94>)
 8004c14:	f005 f818 	bl	8009c48 <HAL_TIMEx_MasterConfigSynchronization>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004c1e:	f000 f887 	bl	8004d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004c22:	bf00      	nop
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000798 	.word	0x20000798
 8004c30:	40000800 	.word	0x40000800

08004c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <MX_USART1_UART_Init+0x4c>)
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <MX_USART1_UART_Init+0x50>)
 8004c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <MX_USART1_UART_Init+0x4c>)
 8004c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c46:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <MX_USART1_UART_Init+0x4c>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <MX_USART1_UART_Init+0x4c>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c52:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <MX_USART1_UART_Init+0x4c>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <MX_USART1_UART_Init+0x4c>)
 8004c5a:	220c      	movs	r2, #12
 8004c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c5e:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <MX_USART1_UART_Init+0x4c>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <MX_USART1_UART_Init+0x4c>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c6a:	4805      	ldr	r0, [pc, #20]	; (8004c80 <MX_USART1_UART_Init+0x4c>)
 8004c6c:	f005 f85c 	bl	8009d28 <HAL_UART_Init>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004c76:	f000 f85b 	bl	8004d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000858 	.word	0x20000858
 8004c84:	40013800 	.word	0x40013800

08004c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c8e:	f107 0308 	add.w	r3, r7, #8
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	605a      	str	r2, [r3, #4]
 8004c98:	609a      	str	r2, [r3, #8]
 8004c9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c9c:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <MX_GPIO_Init+0x9c>)
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	4a20      	ldr	r2, [pc, #128]	; (8004d24 <MX_GPIO_Init+0x9c>)
 8004ca2:	f043 0304 	orr.w	r3, r3, #4
 8004ca6:	6193      	str	r3, [r2, #24]
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <MX_GPIO_Init+0x9c>)
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	607b      	str	r3, [r7, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <MX_GPIO_Init+0x9c>)
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <MX_GPIO_Init+0x9c>)
 8004cba:	f043 0308 	orr.w	r3, r3, #8
 8004cbe:	6193      	str	r3, [r2, #24]
 8004cc0:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <MX_GPIO_Init+0x9c>)
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CH4_VDD_Pin|NH3_VDD_Pin, GPIO_PIN_RESET);
 8004ccc:	2200      	movs	r2, #0
 8004cce:	21a0      	movs	r1, #160	; 0xa0
 8004cd0:	4815      	ldr	r0, [pc, #84]	; (8004d28 <MX_GPIO_Init+0xa0>)
 8004cd2:	f002 fcbd 	bl	8007650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US_TRIGGER_Pin|US_VDD_Pin|GSM_PWRKEY_Pin|GSM_VDD_Pin, GPIO_PIN_RESET);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f240 414a 	movw	r1, #1098	; 0x44a
 8004cdc:	4813      	ldr	r0, [pc, #76]	; (8004d2c <MX_GPIO_Init+0xa4>)
 8004cde:	f002 fcb7 	bl	8007650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CH4_VDD_Pin NH3_VDD_Pin */
  GPIO_InitStruct.Pin = CH4_VDD_Pin|NH3_VDD_Pin;
 8004ce2:	23a0      	movs	r3, #160	; 0xa0
 8004ce4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf2:	f107 0308 	add.w	r3, r7, #8
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	480b      	ldr	r0, [pc, #44]	; (8004d28 <MX_GPIO_Init+0xa0>)
 8004cfa:	f002 fb25 	bl	8007348 <HAL_GPIO_Init>

  /*Configure GPIO pins : US_TRIGGER_Pin US_VDD_Pin GSM_PWRKEY_Pin GSM_VDD_Pin */
  GPIO_InitStruct.Pin = US_TRIGGER_Pin|US_VDD_Pin|GSM_PWRKEY_Pin|GSM_VDD_Pin;
 8004cfe:	f240 434a 	movw	r3, #1098	; 0x44a
 8004d02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d04:	2301      	movs	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d10:	f107 0308 	add.w	r3, r7, #8
 8004d14:	4619      	mov	r1, r3
 8004d16:	4805      	ldr	r0, [pc, #20]	; (8004d2c <MX_GPIO_Init+0xa4>)
 8004d18:	f002 fb16 	bl	8007348 <HAL_GPIO_Init>

}
 8004d1c:	bf00      	nop
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40021000 	.word	0x40021000
 8004d28:	40010800 	.word	0x40010800
 8004d2c:	40010c00 	.word	0x40010c00

08004d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d34:	b672      	cpsid	i
}
 8004d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d38:	e7fe      	b.n	8004d38 <Error_Handler+0x8>
	...

08004d3c <nh3Sensor_init>:




void nh3Sensor_init(ADC_HandleTypeDef *hadc)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	//ADC
	nh3Hadc = hadc;
 8004d44:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <nh3Sensor_init+0x2c>)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&nh3Sensor_state, __nh3Sensor_idle);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4807      	ldr	r0, [pc, #28]	; (8004d6c <nh3Sensor_init+0x30>)
 8004d4e:	f7fd f8ef 	bl	8001f30 <fsmManager_init>

	//Flags
	flags_nh3Sensor.dword = 0;
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <nh3Sensor_init+0x34>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
	flags_nh3SensorError.dword = 0;
 8004d58:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <nh3Sensor_init+0x38>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000698 	.word	0x20000698
 8004d6c:	200006b4 	.word	0x200006b4
 8004d70:	200006c0 	.word	0x200006c0
 8004d74:	200006c4 	.word	0x200006c4

08004d78 <nh3Sensor_handler>:

void nh3Sensor_handler(void)
{
 8004d78:	b5b0      	push	{r4, r5, r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&nh3Sensor_state)) {
 8004d7c:	4886      	ldr	r0, [pc, #536]	; (8004f98 <nh3Sensor_handler+0x220>)
 8004d7e:	f7fd f904 	bl	8001f8a <fsmManager_getState>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <nh3Sensor_handler+0x16>
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d029      	beq.n	8004de0 <nh3Sensor_handler+0x68>

				flags_nh3Sensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 8004d8c:	e0fd      	b.n	8004f8a <nh3Sensor_handler+0x212>
			if(fsmManager_isStateIn(&nh3Sensor_state)) {
 8004d8e:	4882      	ldr	r0, [pc, #520]	; (8004f98 <nh3Sensor_handler+0x220>)
 8004d90:	f7fd f906 	bl	8001fa0 <fsmManager_isStateIn>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <nh3Sensor_handler+0x32>
				fsmManager_stateIn(&nh3Sensor_state);
 8004d9a:	487f      	ldr	r0, [pc, #508]	; (8004f98 <nh3Sensor_handler+0x220>)
 8004d9c:	f7fd f916 	bl	8001fcc <fsmManager_stateIn>
				flags_nh3Sensor.bits.isMeasuring = 0;
 8004da0:	4a7e      	ldr	r2, [pc, #504]	; (8004f9c <nh3Sensor_handler+0x224>)
 8004da2:	7853      	ldrb	r3, [r2, #1]
 8004da4:	f36f 03c3 	bfc	r3, #3, #1
 8004da8:	7053      	strb	r3, [r2, #1]
			if(flags_nh3Sensor.bits.requestMeasure) {
 8004daa:	4b7c      	ldr	r3, [pc, #496]	; (8004f9c <nh3Sensor_handler+0x224>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <nh3Sensor_handler+0x52>
				flags_nh3Sensor.bits.isMeasuring = 1;
 8004db8:	4a78      	ldr	r2, [pc, #480]	; (8004f9c <nh3Sensor_handler+0x224>)
 8004dba:	7853      	ldrb	r3, [r2, #1]
 8004dbc:	f043 0308 	orr.w	r3, r3, #8
 8004dc0:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&nh3Sensor_state,__nh3Sensor_getAmmoniac);
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	4874      	ldr	r0, [pc, #464]	; (8004f98 <nh3Sensor_handler+0x220>)
 8004dc6:	f7fd f8c9 	bl	8001f5c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&nh3Sensor_state)) {
 8004dca:	4873      	ldr	r0, [pc, #460]	; (8004f98 <nh3Sensor_handler+0x220>)
 8004dcc:	f7fd f8f3 	bl	8001fb6 <fsmManager_isStateOut>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80d6 	beq.w	8004f84 <nh3Sensor_handler+0x20c>
				fsmManager_stateOut(&nh3Sensor_state);
 8004dd8:	486f      	ldr	r0, [pc, #444]	; (8004f98 <nh3Sensor_handler+0x220>)
 8004dda:	f7fd f906 	bl	8001fea <fsmManager_stateOut>
			break;
 8004dde:	e0d1      	b.n	8004f84 <nh3Sensor_handler+0x20c>
			if(fsmManager_isStateIn(&nh3Sensor_state)) {
 8004de0:	486d      	ldr	r0, [pc, #436]	; (8004f98 <nh3Sensor_handler+0x220>)
 8004de2:	f7fd f8dd 	bl	8001fa0 <fsmManager_isStateIn>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00f      	beq.n	8004e0c <nh3Sensor_handler+0x94>
				fsmManager_stateIn(&nh3Sensor_state);
 8004dec:	486a      	ldr	r0, [pc, #424]	; (8004f98 <nh3Sensor_handler+0x220>)
 8004dee:	f7fd f8ed 	bl	8001fcc <fsmManager_stateIn>
				nh3_adcStart();
 8004df2:	f000 f93f 	bl	8005074 <nh3_adcStart>
				nAverages = 0;
 8004df6:	4b6a      	ldr	r3, [pc, #424]	; (8004fa0 <nh3Sensor_handler+0x228>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
				nh3SensorPpmAverage = 0;
 8004dfc:	4b69      	ldr	r3, [pc, #420]	; (8004fa4 <nh3Sensor_handler+0x22c>)
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
				softTimer_start(&timer, 50);
 8004e04:	2132      	movs	r1, #50	; 0x32
 8004e06:	4868      	ldr	r0, [pc, #416]	; (8004fa8 <nh3Sensor_handler+0x230>)
 8004e08:	f000 fa32 	bl	8005270 <softTimer_start>
			if(nAverages < NH3_SENSOR_N_AVERAGES) {
 8004e0c:	4b64      	ldr	r3, [pc, #400]	; (8004fa0 <nh3Sensor_handler+0x228>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b09      	cmp	r3, #9
 8004e12:	d827      	bhi.n	8004e64 <nh3Sensor_handler+0xec>
				if(softTimer_expired(&timer)) {
 8004e14:	4864      	ldr	r0, [pc, #400]	; (8004fa8 <nh3Sensor_handler+0x230>)
 8004e16:	f000 fa3f 	bl	8005298 <softTimer_expired>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80a0 	beq.w	8004f62 <nh3Sensor_handler+0x1ea>
					softTimer_start(&timer, 50);
 8004e22:	2132      	movs	r1, #50	; 0x32
 8004e24:	4860      	ldr	r0, [pc, #384]	; (8004fa8 <nh3Sensor_handler+0x230>)
 8004e26:	f000 fa23 	bl	8005270 <softTimer_start>
					nAverages++;
 8004e2a:	4b5d      	ldr	r3, [pc, #372]	; (8004fa0 <nh3Sensor_handler+0x228>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	4a5b      	ldr	r2, [pc, #364]	; (8004fa0 <nh3Sensor_handler+0x228>)
 8004e32:	6013      	str	r3, [r2, #0]
					nh3SensorPpmAverage += (float)nh3_adcGetValue()/NH3_SENSOR_N_AVERAGES;
 8004e34:	f000 f932 	bl	800509c <nh3_adcGetValue>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fb fefa 	bl	8000c34 <__aeabi_ui2f>
 8004e40:	4603      	mov	r3, r0
 8004e42:	495a      	ldr	r1, [pc, #360]	; (8004fac <nh3Sensor_handler+0x234>)
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fc f801 	bl	8000e4c <__aeabi_fdiv>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4b55      	ldr	r3, [pc, #340]	; (8004fa4 <nh3Sensor_handler+0x22c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7fb fe3d 	bl	8000ad4 <__addsf3>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b51      	ldr	r3, [pc, #324]	; (8004fa4 <nh3Sensor_handler+0x22c>)
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e07e      	b.n	8004f62 <nh3Sensor_handler+0x1ea>
				nh3Adc = (float) nh3SensorPpmAverage;							//Gets adc value
 8004e64:	4b4f      	ldr	r3, [pc, #316]	; (8004fa4 <nh3Sensor_handler+0x22c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a51      	ldr	r2, [pc, #324]	; (8004fb0 <nh3Sensor_handler+0x238>)
 8004e6a:	6013      	str	r3, [r2, #0]
				nh3Rs = NH3_RL*(4095/nh3Adc-1);									//Gets Rs
 8004e6c:	4b50      	ldr	r3, [pc, #320]	; (8004fb0 <nh3Sensor_handler+0x238>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4619      	mov	r1, r3
 8004e72:	4850      	ldr	r0, [pc, #320]	; (8004fb4 <nh3Sensor_handler+0x23c>)
 8004e74:	f7fb ffea 	bl	8000e4c <__aeabi_fdiv>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb fe26 	bl	8000ad0 <__aeabi_fsub>
 8004e84:	4603      	mov	r3, r0
 8004e86:	494c      	ldr	r1, [pc, #304]	; (8004fb8 <nh3Sensor_handler+0x240>)
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fb ff2b 	bl	8000ce4 <__aeabi_fmul>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	461a      	mov	r2, r3
 8004e92:	4b4a      	ldr	r3, [pc, #296]	; (8004fbc <nh3Sensor_handler+0x244>)
 8004e94:	601a      	str	r2, [r3, #0]
				nh3Ratio = nh3Rs/NH3_R0;										//Gets Rs/Ro ratio
 8004e96:	4b49      	ldr	r3, [pc, #292]	; (8004fbc <nh3Sensor_handler+0x244>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4949      	ldr	r1, [pc, #292]	; (8004fc0 <nh3Sensor_handler+0x248>)
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fb ffd5 	bl	8000e4c <__aeabi_fdiv>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <nh3Sensor_handler+0x24c>)
 8004ea8:	601a      	str	r2, [r3, #0]
				nh3Slope = log10(NH3_P2_Y/NH3_P1_Y)/log10(NH3_P2_X/NH3_P1_X);	//Gets m
 8004eaa:	4b47      	ldr	r3, [pc, #284]	; (8004fc8 <nh3Sensor_handler+0x250>)
 8004eac:	4a47      	ldr	r2, [pc, #284]	; (8004fcc <nh3Sensor_handler+0x254>)
 8004eae:	601a      	str	r2, [r3, #0]
				nh3Intersec = log10(NH3_P1_Y)-nh3Slope*log10(NH3_P1_X);			//Gets b
 8004eb0:	4b45      	ldr	r3, [pc, #276]	; (8004fc8 <nh3Sensor_handler+0x250>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fb faaf 	bl	8000418 <__aeabi_f2d>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	a134      	add	r1, pc, #208	; (adr r1, 8004f90 <nh3Sensor_handler+0x218>)
 8004ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ec4:	f7fb f948 	bl	8000158 <__aeabi_dsub>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f7fb fdaa 	bl	8000a28 <__aeabi_d2f>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4a3e      	ldr	r2, [pc, #248]	; (8004fd0 <nh3Sensor_handler+0x258>)
 8004ed8:	6013      	str	r3, [r2, #0]
				nh3Ppm = pow(10, (log10(nh3Ratio)-nh3Intersec)/nh3Slope);		//Gets ppm
 8004eda:	4b3a      	ldr	r3, [pc, #232]	; (8004fc4 <nh3Sensor_handler+0x24c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fb fa9a 	bl	8000418 <__aeabi_f2d>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	f005 fbe6 	bl	800a6bc <log10>
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	460d      	mov	r5, r1
 8004ef4:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <nh3Sensor_handler+0x258>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fb fa8d 	bl	8000418 <__aeabi_f2d>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4620      	mov	r0, r4
 8004f04:	4629      	mov	r1, r5
 8004f06:	f7fb f927 	bl	8000158 <__aeabi_dsub>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4614      	mov	r4, r2
 8004f10:	461d      	mov	r5, r3
 8004f12:	4b2d      	ldr	r3, [pc, #180]	; (8004fc8 <nh3Sensor_handler+0x250>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fb fa7e 	bl	8000418 <__aeabi_f2d>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4620      	mov	r0, r4
 8004f22:	4629      	mov	r1, r5
 8004f24:	f7fb fbfa 	bl	800071c <__aeabi_ddiv>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	f04f 0000 	mov.w	r0, #0
 8004f30:	4928      	ldr	r1, [pc, #160]	; (8004fd4 <nh3Sensor_handler+0x25c>)
 8004f32:	f005 fbfd 	bl	800a730 <pow>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f7fb fd73 	bl	8000a28 <__aeabi_d2f>
 8004f42:	4603      	mov	r3, r0
 8004f44:	4a24      	ldr	r2, [pc, #144]	; (8004fd8 <nh3Sensor_handler+0x260>)
 8004f46:	6013      	str	r3, [r2, #0]
				if(nh3SensorCallback != NULL) {
 8004f48:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <nh3Sensor_handler+0x264>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <nh3Sensor_handler+0x1e2>
					nh3SensorCallback(__nh3SensorEvent_okMeasuring, (float *) &nh3Ppm);
 8004f50:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <nh3Sensor_handler+0x264>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4920      	ldr	r1, [pc, #128]	; (8004fd8 <nh3Sensor_handler+0x260>)
 8004f56:	2000      	movs	r0, #0
 8004f58:	4798      	blx	r3
				fsmManager_gotoState(&nh3Sensor_state,__nh3Sensor_idle);
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	480e      	ldr	r0, [pc, #56]	; (8004f98 <nh3Sensor_handler+0x220>)
 8004f5e:	f7fc fffd 	bl	8001f5c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&nh3Sensor_state)) {
 8004f62:	480d      	ldr	r0, [pc, #52]	; (8004f98 <nh3Sensor_handler+0x220>)
 8004f64:	f7fd f827 	bl	8001fb6 <fsmManager_isStateOut>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00c      	beq.n	8004f88 <nh3Sensor_handler+0x210>
				fsmManager_stateOut(&nh3Sensor_state);
 8004f6e:	480a      	ldr	r0, [pc, #40]	; (8004f98 <nh3Sensor_handler+0x220>)
 8004f70:	f7fd f83b 	bl	8001fea <fsmManager_stateOut>
				nh3_adcStop();
 8004f74:	f000 f89e 	bl	80050b4 <nh3_adcStop>
				flags_nh3Sensor.bits.requestMeasure = 0;
 8004f78:	4a08      	ldr	r2, [pc, #32]	; (8004f9c <nh3Sensor_handler+0x224>)
 8004f7a:	7813      	ldrb	r3, [r2, #0]
 8004f7c:	f36f 0300 	bfc	r3, #0, #1
 8004f80:	7013      	strb	r3, [r2, #0]
			break;
 8004f82:	e001      	b.n	8004f88 <nh3Sensor_handler+0x210>
			break;
 8004f84:	bf00      	nop
 8004f86:	e000      	b.n	8004f8a <nh3Sensor_handler+0x212>
			break;
 8004f88:	bf00      	nop
}
 8004f8a:	bf00      	nop
 8004f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	4e750151 	.word	0x4e750151
 8004f94:	3fda8eec 	.word	0x3fda8eec
 8004f98:	200006b4 	.word	0x200006b4
 8004f9c:	200006c0 	.word	0x200006c0
 8004fa0:	200006cc 	.word	0x200006cc
 8004fa4:	200006c8 	.word	0x200006c8
 8004fa8:	200006d0 	.word	0x200006d0
 8004fac:	41200000 	.word	0x41200000
 8004fb0:	200006a0 	.word	0x200006a0
 8004fb4:	457ff000 	.word	0x457ff000
 8004fb8:	41b00000 	.word	0x41b00000
 8004fbc:	200006a4 	.word	0x200006a4
 8004fc0:	412471c7 	.word	0x412471c7
 8004fc4:	200006a8 	.word	0x200006a8
 8004fc8:	200006ac 	.word	0x200006ac
 8004fcc:	bed235d0 	.word	0xbed235d0
 8004fd0:	200006b0 	.word	0x200006b0
 8004fd4:	40240000 	.word	0x40240000
 8004fd8:	2000069c 	.word	0x2000069c
 8004fdc:	200006dc 	.word	0x200006dc

08004fe0 <nh3Sensor_measure>:

void nh3Sensor_measure(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
	flags_nh3Sensor.bits.requestMeasure = 1;
 8004fe4:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <nh3Sensor_measure+0x18>)
 8004fe6:	7813      	ldrb	r3, [r2, #0]
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	7013      	strb	r3, [r2, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	200006c0 	.word	0x200006c0

08004ffc <nh3Sensor_setCallback>:
{
	return flags_nh3Sensor.bits.isMeasuring;
}

void nh3Sensor_setCallback(void (*cb)(_nh3Sensor_event, void*))
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	nh3SensorCallback = cb;
 8005004:	4a03      	ldr	r2, [pc, #12]	; (8005014 <nh3Sensor_setCallback+0x18>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6013      	str	r3, [r2, #0]
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	200006dc 	.word	0x200006dc

08005018 <nh3Sensor_powerOn>:

void nh3Sensor_powerOn(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
	pinNh3Vdd_write(1);
 800501c:	2001      	movs	r0, #1
 800501e:	f000 f855 	bl	80050cc <pinNh3Vdd_write>
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}

08005026 <nh3Sensor_powerOff>:

void nh3Sensor_powerOff(void)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	af00      	add	r7, sp, #0
	pinNh3Vdd_write(0);
 800502a:	2000      	movs	r0, #0
 800502c:	f000 f84e 	bl	80050cc <pinNh3Vdd_write>
}
 8005030:	bf00      	nop
 8005032:	bd80      	pop	{r7, pc}

08005034 <ADC_Select_CHNh3>:



static void ADC_Select_CHNh3(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800503a:	1d3b      	adds	r3, r7, #4
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_6;
 8005044:	2306      	movs	r3, #6
 8005046:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8005048:	2301      	movs	r3, #1
 800504a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800504c:	2301      	movs	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(nh3Hadc, &sConfig) != HAL_OK) {
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <ADC_Select_CHNh3+0x3c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	1d3a      	adds	r2, r7, #4
 8005056:	4611      	mov	r1, r2
 8005058:	4618      	mov	r0, r3
 800505a:	f001 fe23 	bl	8006ca4 <HAL_ADC_ConfigChannel>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <ADC_Select_CHNh3+0x34>
		Error_Handler();
 8005064:	f7ff fe64 	bl	8004d30 <Error_Handler>
	}
}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20000698 	.word	0x20000698

08005074 <nh3_adcStart>:

static void nh3_adcStart(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
	ADC_Select_CHNh3();
 8005078:	f7ff ffdc 	bl	8005034 <ADC_Select_CHNh3>
	HAL_ADC_Start(nh3Hadc);
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <nh3_adcStart+0x24>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f001 fc23 	bl	80068cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(nh3Hadc, 100);
 8005086:	4b04      	ldr	r3, [pc, #16]	; (8005098 <nh3_adcStart+0x24>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2164      	movs	r1, #100	; 0x64
 800508c:	4618      	mov	r0, r3
 800508e:	f001 fcf7 	bl	8006a80 <HAL_ADC_PollForConversion>
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000698 	.word	0x20000698

0800509c <nh3_adcGetValue>:

static uint32_t nh3_adcGetValue(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(nh3Hadc);
 80050a0:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <nh3_adcGetValue+0x14>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 fdf1 	bl	8006c8c <HAL_ADC_GetValue>
 80050aa:	4603      	mov	r3, r0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20000698 	.word	0x20000698

080050b4 <nh3_adcStop>:

static void nh3_adcStop(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(nh3Hadc);
 80050b8:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <nh3_adcStop+0x14>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f001 fcb3 	bl	8006a28 <HAL_ADC_Stop>
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000698 	.word	0x20000698

080050cc <pinNh3Vdd_write>:

static void pinNh3Vdd_write(uint8_t state)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NH3_SENSOR_VDD_PORT, NH3_SENSOR_VDD_PIN, state);
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	461a      	mov	r2, r3
 80050da:	2180      	movs	r1, #128	; 0x80
 80050dc:	4803      	ldr	r0, [pc, #12]	; (80050ec <pinNh3Vdd_write+0x20>)
 80050de:	f002 fab7 	bl	8007650 <HAL_GPIO_WritePin>
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40010800 	.word	0x40010800

080050f0 <nvm_init>:




void nvm_init(RTC_HandleTypeDef *hrtc)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	//RTC
	nvmHrtc = hrtc;
 80050f8:	4a03      	ldr	r2, [pc, #12]	; (8005108 <nvm_init+0x18>)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6013      	str	r3, [r2, #0]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr
 8005108:	200006e0 	.word	0x200006e0

0800510c <nvm_readWord>:

uint32_t nvm_readWord(uint32_t nReg)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	return RTC_Read_BackupRegister(nReg);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f813 	bl	8005140 <RTC_Read_BackupRegister>
 800511a:	4603      	mov	r3, r0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <nvm_writeWord>:

	return (wData & (1 << pos)) >> pos;
}

void nvm_writeWord(uint32_t nReg, uint32_t wData)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
	RTC_WriteWord_BackupRegister(nReg, wData);
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f817 	bl	8005164 <RTC_WriteWord_BackupRegister>
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <RTC_Read_BackupRegister>:




static uint32_t RTC_Read_BackupRegister(uint32_t backupRegister)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
    return HAL_RTCEx_BKUPRead(nvmHrtc, backupRegister);
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <RTC_Read_BackupRegister+0x20>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	f003 fdd4 	bl	8008cfc <HAL_RTCEx_BKUPRead>
 8005154:	4603      	mov	r3, r0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	200006e0 	.word	0x200006e0

08005164 <RTC_WriteWord_BackupRegister>:

static void RTC_WriteWord_BackupRegister(uint32_t backupRegister, uint32_t wData)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
    HAL_PWR_EnableBkUpAccess();
 800516e:	f002 fa87 	bl	8007680 <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(nvmHrtc, backupRegister, (uint16_t) wData);
 8005172:	4b07      	ldr	r3, [pc, #28]	; (8005190 <RTC_WriteWord_BackupRegister+0x2c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	b292      	uxth	r2, r2
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4618      	mov	r0, r3
 800517e:	f003 fda3 	bl	8008cc8 <HAL_RTCEx_BKUPWrite>
    HAL_PWR_DisableBkUpAccess();
 8005182:	f002 fa89 	bl	8007698 <HAL_PWR_DisableBkUpAccess>
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	200006e0 	.word	0x200006e0

08005194 <powerMode_init>:
static RTC_HandleTypeDef* powerHrtc;
static RTC_TimeTypeDef rtcTime;
RTC_AlarmTypeDef rtcAlarm;

void powerMode_init(RTC_HandleTypeDef* hrtc)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	powerHrtc = hrtc;
 800519c:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <powerMode_init+0x3c>)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6013      	str	r3, [r2, #0]

	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 80051a2:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <powerMode_init+0x40>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d10b      	bne.n	80051c6 <powerMode_init+0x32>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <powerMode_init+0x40>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a08      	ldr	r2, [pc, #32]	; (80051d4 <powerMode_init+0x40>)
 80051b4:	f043 0308 	orr.w	r3, r3, #8
 80051b8:	6013      	str	r3, [r2, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80051ba:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <powerMode_init+0x40>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a05      	ldr	r2, [pc, #20]	; (80051d4 <powerMode_init+0x40>)
 80051c0:	f043 0304 	orr.w	r3, r3, #4
 80051c4:	6013      	str	r3, [r2, #0]
	}
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr
 80051d0:	200006e4 	.word	0x200006e4
 80051d4:	40007000 	.word	0x40007000

080051d8 <powerMode_enterStandbyMode>:

void powerMode_enterStandbyMode(uint32_t sec)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

	// Ponemos la hora actual a 00:00:00
	HAL_RTC_WaitForSynchro(powerHrtc);
 80051e0:	4b18      	ldr	r3, [pc, #96]	; (8005244 <powerMode_enterStandbyMode+0x6c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f003 facd 	bl	8008784 <HAL_RTC_WaitForSynchro>
	rtcTime.Hours = 0;
 80051ea:	4b17      	ldr	r3, [pc, #92]	; (8005248 <powerMode_enterStandbyMode+0x70>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
	rtcTime.Minutes = 0;
 80051f0:	4b15      	ldr	r3, [pc, #84]	; (8005248 <powerMode_enterStandbyMode+0x70>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	705a      	strb	r2, [r3, #1]
	rtcTime.Seconds = 0;
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <powerMode_enterStandbyMode+0x70>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(powerHrtc, &rtcTime, RTC_FORMAT_BCD);
 80051fc:	4b11      	ldr	r3, [pc, #68]	; (8005244 <powerMode_enterStandbyMode+0x6c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2201      	movs	r2, #1
 8005202:	4911      	ldr	r1, [pc, #68]	; (8005248 <powerMode_enterStandbyMode+0x70>)
 8005204:	4618      	mov	r0, r3
 8005206:	f003 f895 	bl	8008334 <HAL_RTC_SetTime>

	// Configuramos la alarma a las 00:00:10
	rtcAlarm.Alarm = RTC_ALARM_A;
 800520a:	4b10      	ldr	r3, [pc, #64]	; (800524c <powerMode_enterStandbyMode+0x74>)
 800520c:	2200      	movs	r2, #0
 800520e:	605a      	str	r2, [r3, #4]
	rtcAlarm.AlarmTime = rtcTime;
 8005210:	4b0e      	ldr	r3, [pc, #56]	; (800524c <powerMode_enterStandbyMode+0x74>)
 8005212:	4a0d      	ldr	r2, [pc, #52]	; (8005248 <powerMode_enterStandbyMode+0x70>)
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	4611      	mov	r1, r2
 8005218:	8019      	strh	r1, [r3, #0]
 800521a:	3302      	adds	r3, #2
 800521c:	0c12      	lsrs	r2, r2, #16
 800521e:	701a      	strb	r2, [r3, #0]
	rtcAlarm.AlarmTime.Seconds = sec;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	b2da      	uxtb	r2, r3
 8005224:	4b09      	ldr	r3, [pc, #36]	; (800524c <powerMode_enterStandbyMode+0x74>)
 8005226:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetAlarm_IT(powerHrtc, &rtcAlarm, RTC_FORMAT_BCD);
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <powerMode_enterStandbyMode+0x6c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2201      	movs	r2, #1
 800522e:	4907      	ldr	r1, [pc, #28]	; (800524c <powerMode_enterStandbyMode+0x74>)
 8005230:	4618      	mov	r0, r3
 8005232:	f003 f9ef 	bl	8008614 <HAL_RTC_SetAlarm_IT>

	// Entramos en Standby
	HAL_PWR_EnterSTANDBYMode();
 8005236:	f002 fa3b 	bl	80076b0 <HAL_PWR_EnterSTANDBYMode>
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	200006e4 	.word	0x200006e4
 8005248:	200006e8 	.word	0x200006e8
 800524c:	200008b0 	.word	0x200008b0

08005250 <softTimer_init>:




void softTimer_init(TIM_HandleTypeDef *htim)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	timerHtim = htim;
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <softTimer_init+0x1c>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f003 fdb8 	bl	8008dd4 <HAL_TIM_Base_Start_IT>
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	200006ec 	.word	0x200006ec

08005270 <softTimer_start>:

void softTimer_start(SoftTimer_t* timer, uint32_t interval)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
	timer->state = state_running;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	721a      	strb	r2, [r3, #8]
	timer->start = softTimer_getTicks();
 8005280:	f000 f858 	bl	8005334 <softTimer_getTicks>
 8005284:	4602      	mov	r2, r0
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	601a      	str	r2, [r3, #0]
	timer->interval = interval;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	605a      	str	r2, [r3, #4]
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <softTimer_expired>:

uint8_t softTimer_expired(SoftTimer_t* timer)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	73fb      	strb	r3, [r7, #15]

	if(timer->state == state_running) {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	7a1b      	ldrb	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d121      	bne.n	80052f0 <softTimer_expired+0x58>
		if(systemTicks >= timer->start)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b12      	ldr	r3, [pc, #72]	; (80052fc <softTimer_expired+0x64>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d80d      	bhi.n	80052d4 <softTimer_expired+0x3c>
			ret = ((systemTicks - timer->start) > timer->interval) ? 1 : 0;
 80052b8:	4b10      	ldr	r3, [pc, #64]	; (80052fc <softTimer_expired+0x64>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1ad2      	subs	r2, r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	bf8c      	ite	hi
 80052ca:	2301      	movhi	r3, #1
 80052cc:	2300      	movls	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	73fb      	strb	r3, [r7, #15]
 80052d2:	e00d      	b.n	80052f0 <softTimer_expired+0x58>
		else
			ret = (((0xFFFFFFFF - timer->start)+systemTicks) > timer->interval) ? 1 : 0;
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <softTimer_expired+0x64>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	1e5a      	subs	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	bf8c      	ite	hi
 80052e8:	2301      	movhi	r3, #1
 80052ea:	2300      	movls	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	200006f0 	.word	0x200006f0

08005300 <softTimer_stop>:

void softTimer_stop(SoftTimer_t* timer)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	timer->state = state_stopped;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	721a      	strb	r2, [r3, #8]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <softTimer_handler>:

void softTimer_handler(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
	systemTicks++;
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <softTimer_handler+0x18>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	4a03      	ldr	r2, [pc, #12]	; (8005330 <softTimer_handler+0x18>)
 8005324:	6013      	str	r3, [r2, #0]
}
 8005326:	bf00      	nop
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	200006f0 	.word	0x200006f0

08005334 <softTimer_getTicks>:

uint32_t softTimer_getTicks(void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
	return systemTicks;
 8005338:	4b02      	ldr	r3, [pc, #8]	; (8005344 <softTimer_getTicks+0x10>)
 800533a:	681b      	ldr	r3, [r3, #0]
}
 800533c:	4618      	mov	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	200006f0 	.word	0x200006f0

08005348 <softTimer_periodElapsedCallback>:




void softTimer_periodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == timerHtim->Instance) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <softTimer_periodElapsedCallback+0x24>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d101      	bne.n	8005362 <softTimer_periodElapsedCallback+0x1a>
		softTimer_handler();
 800535e:	f7ff ffdb 	bl	8005318 <softTimer_handler>
	}
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	200006ec 	.word	0x200006ec

08005370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005376:	4b15      	ldr	r3, [pc, #84]	; (80053cc <HAL_MspInit+0x5c>)
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	4a14      	ldr	r2, [pc, #80]	; (80053cc <HAL_MspInit+0x5c>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6193      	str	r3, [r2, #24]
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_MspInit+0x5c>)
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	60bb      	str	r3, [r7, #8]
 800538c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800538e:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <HAL_MspInit+0x5c>)
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	4a0e      	ldr	r2, [pc, #56]	; (80053cc <HAL_MspInit+0x5c>)
 8005394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005398:	61d3      	str	r3, [r2, #28]
 800539a:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <HAL_MspInit+0x5c>)
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80053a6:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <HAL_MspInit+0x60>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <HAL_MspInit+0x60>)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40010000 	.word	0x40010000

080053d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053dc:	f107 0310 	add.w	r3, r7, #16
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a14      	ldr	r2, [pc, #80]	; (8005440 <HAL_ADC_MspInit+0x6c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d121      	bne.n	8005438 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80053f4:	4b13      	ldr	r3, [pc, #76]	; (8005444 <HAL_ADC_MspInit+0x70>)
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	4a12      	ldr	r2, [pc, #72]	; (8005444 <HAL_ADC_MspInit+0x70>)
 80053fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053fe:	6193      	str	r3, [r2, #24]
 8005400:	4b10      	ldr	r3, [pc, #64]	; (8005444 <HAL_ADC_MspInit+0x70>)
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <HAL_ADC_MspInit+0x70>)
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	4a0c      	ldr	r2, [pc, #48]	; (8005444 <HAL_ADC_MspInit+0x70>)
 8005412:	f043 0304 	orr.w	r3, r3, #4
 8005416:	6193      	str	r3, [r2, #24]
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <HAL_ADC_MspInit+0x70>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = CH4_ADC_Pin|NH3_ADC_Pin;
 8005424:	2350      	movs	r3, #80	; 0x50
 8005426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005428:	2303      	movs	r3, #3
 800542a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800542c:	f107 0310 	add.w	r3, r7, #16
 8005430:	4619      	mov	r1, r3
 8005432:	4805      	ldr	r0, [pc, #20]	; (8005448 <HAL_ADC_MspInit+0x74>)
 8005434:	f001 ff88 	bl	8007348 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005438:	bf00      	nop
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40012400 	.word	0x40012400
 8005444:	40021000 	.word	0x40021000
 8005448:	40010800 	.word	0x40010800

0800544c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a0b      	ldr	r2, [pc, #44]	; (8005488 <HAL_RTC_MspInit+0x3c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d110      	bne.n	8005480 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800545e:	f002 f90f 	bl	8007680 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8005462:	4b0a      	ldr	r3, [pc, #40]	; (800548c <HAL_RTC_MspInit+0x40>)
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	4a09      	ldr	r2, [pc, #36]	; (800548c <HAL_RTC_MspInit+0x40>)
 8005468:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800546c:	61d3      	str	r3, [r2, #28]
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <HAL_RTC_MspInit+0x40>)
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <HAL_RTC_MspInit+0x44>)
 800547c:	2201      	movs	r2, #1
 800547e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40002800 	.word	0x40002800
 800548c:	40021000 	.word	0x40021000
 8005490:	4242043c 	.word	0x4242043c

08005494 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549c:	f107 0310 	add.w	r3, r7, #16
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a19      	ldr	r2, [pc, #100]	; (8005514 <HAL_TIM_IC_MspInit+0x80>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d12b      	bne.n	800550c <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054b4:	4b18      	ldr	r3, [pc, #96]	; (8005518 <HAL_TIM_IC_MspInit+0x84>)
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	4a17      	ldr	r2, [pc, #92]	; (8005518 <HAL_TIM_IC_MspInit+0x84>)
 80054ba:	f043 0302 	orr.w	r3, r3, #2
 80054be:	61d3      	str	r3, [r2, #28]
 80054c0:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_TIM_IC_MspInit+0x84>)
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054cc:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_TIM_IC_MspInit+0x84>)
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	4a11      	ldr	r2, [pc, #68]	; (8005518 <HAL_TIM_IC_MspInit+0x84>)
 80054d2:	f043 0308 	orr.w	r3, r3, #8
 80054d6:	6193      	str	r3, [r2, #24]
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <HAL_TIM_IC_MspInit+0x84>)
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = US_ECHO_Pin;
 80054e4:	2301      	movs	r3, #1
 80054e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 80054f0:	f107 0310 	add.w	r3, r7, #16
 80054f4:	4619      	mov	r1, r3
 80054f6:	4809      	ldr	r0, [pc, #36]	; (800551c <HAL_TIM_IC_MspInit+0x88>)
 80054f8:	f001 ff26 	bl	8007348 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80054fc:	2200      	movs	r2, #0
 80054fe:	2100      	movs	r1, #0
 8005500:	201d      	movs	r0, #29
 8005502:	f001 fe3a 	bl	800717a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005506:	201d      	movs	r0, #29
 8005508:	f001 fe53 	bl	80071b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800550c:	bf00      	nop
 800550e:	3720      	adds	r7, #32
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40000400 	.word	0x40000400
 8005518:	40021000 	.word	0x40021000
 800551c:	40010c00 	.word	0x40010c00

08005520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a0d      	ldr	r2, [pc, #52]	; (8005564 <HAL_TIM_Base_MspInit+0x44>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d113      	bne.n	800555a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005532:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <HAL_TIM_Base_MspInit+0x48>)
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	4a0c      	ldr	r2, [pc, #48]	; (8005568 <HAL_TIM_Base_MspInit+0x48>)
 8005538:	f043 0304 	orr.w	r3, r3, #4
 800553c:	61d3      	str	r3, [r2, #28]
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <HAL_TIM_Base_MspInit+0x48>)
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800554a:	2200      	movs	r2, #0
 800554c:	2100      	movs	r1, #0
 800554e:	201e      	movs	r0, #30
 8005550:	f001 fe13 	bl	800717a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005554:	201e      	movs	r0, #30
 8005556:	f001 fe2c 	bl	80071b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40000800 	.word	0x40000800
 8005568:	40021000 	.word	0x40021000

0800556c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005574:	f107 0310 	add.w	r3, r7, #16
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	609a      	str	r2, [r3, #8]
 8005580:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a20      	ldr	r2, [pc, #128]	; (8005608 <HAL_UART_MspInit+0x9c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d139      	bne.n	8005600 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800558c:	4b1f      	ldr	r3, [pc, #124]	; (800560c <HAL_UART_MspInit+0xa0>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_UART_MspInit+0xa0>)
 8005592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005596:	6193      	str	r3, [r2, #24]
 8005598:	4b1c      	ldr	r3, [pc, #112]	; (800560c <HAL_UART_MspInit+0xa0>)
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_UART_MspInit+0xa0>)
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	4a18      	ldr	r2, [pc, #96]	; (800560c <HAL_UART_MspInit+0xa0>)
 80055aa:	f043 0304 	orr.w	r3, r3, #4
 80055ae:	6193      	str	r3, [r2, #24]
 80055b0:	4b16      	ldr	r3, [pc, #88]	; (800560c <HAL_UART_MspInit+0xa0>)
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GSM_RX_Pin;
 80055bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c2:	2302      	movs	r3, #2
 80055c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055c6:	2303      	movs	r3, #3
 80055c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 80055ca:	f107 0310 	add.w	r3, r7, #16
 80055ce:	4619      	mov	r1, r3
 80055d0:	480f      	ldr	r0, [pc, #60]	; (8005610 <HAL_UART_MspInit+0xa4>)
 80055d2:	f001 feb9 	bl	8007348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_TX_Pin;
 80055d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 80055e4:	f107 0310 	add.w	r3, r7, #16
 80055e8:	4619      	mov	r1, r3
 80055ea:	4809      	ldr	r0, [pc, #36]	; (8005610 <HAL_UART_MspInit+0xa4>)
 80055ec:	f001 feac 	bl	8007348 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80055f0:	2200      	movs	r2, #0
 80055f2:	2100      	movs	r1, #0
 80055f4:	2025      	movs	r0, #37	; 0x25
 80055f6:	f001 fdc0 	bl	800717a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80055fa:	2025      	movs	r0, #37	; 0x25
 80055fc:	f001 fdd9 	bl	80071b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005600:	bf00      	nop
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40013800 	.word	0x40013800
 800560c:	40021000 	.word	0x40021000
 8005610:	40010800 	.word	0x40010800

08005614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005618:	e7fe      	b.n	8005618 <NMI_Handler+0x4>

0800561a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800561a:	b480      	push	{r7}
 800561c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800561e:	e7fe      	b.n	800561e <HardFault_Handler+0x4>

08005620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005624:	e7fe      	b.n	8005624 <MemManage_Handler+0x4>

08005626 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005626:	b480      	push	{r7}
 8005628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800562a:	e7fe      	b.n	800562a <BusFault_Handler+0x4>

0800562c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005630:	e7fe      	b.n	8005630 <UsageFault_Handler+0x4>

08005632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005632:	b480      	push	{r7}
 8005634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005636:	bf00      	nop
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800563e:	b480      	push	{r7}
 8005640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005642:	bf00      	nop
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800564a:	b480      	push	{r7}
 800564c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800564e:	bf00      	nop
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr

08005656 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800565a:	f001 f843 	bl	80066e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800565e:	bf00      	nop
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005668:	4802      	ldr	r0, [pc, #8]	; (8005674 <TIM3_IRQHandler+0x10>)
 800566a:	f003 fe03 	bl	8009274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	200007e0 	.word	0x200007e0

08005678 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800567c:	4802      	ldr	r0, [pc, #8]	; (8005688 <TIM4_IRQHandler+0x10>)
 800567e:	f003 fdf9 	bl	8009274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005682:	bf00      	nop
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000798 	.word	0x20000798

0800568c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005690:	4802      	ldr	r0, [pc, #8]	; (800569c <USART1_IRQHandler+0x10>)
 8005692:	f004 fc0b 	bl	8009eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005696:	bf00      	nop
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000858 	.word	0x20000858

080056a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056a4:	bf00      	nop
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <tempSensor_init>:




void tempSensor_init(ADC_HandleTypeDef *hadc)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	//ADC
	tempHadc = hadc;
 80056b4:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <tempSensor_init+0x2c>)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&tempSensor_state, __tempSensor_idle);
 80056ba:	2100      	movs	r1, #0
 80056bc:	4807      	ldr	r0, [pc, #28]	; (80056dc <tempSensor_init+0x30>)
 80056be:	f7fc fc37 	bl	8001f30 <fsmManager_init>

	//Flags
	flags_tempSensor.dword = 0;
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <tempSensor_init+0x34>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
	flags_tempSensorError.dword = 0;
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <tempSensor_init+0x38>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	200006f4 	.word	0x200006f4
 80056dc:	200006fc 	.word	0x200006fc
 80056e0:	20000708 	.word	0x20000708
 80056e4:	2000070c 	.word	0x2000070c

080056e8 <tempSensor_handler>:

void tempSensor_handler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&tempSensor_state)) {
 80056ec:	4856      	ldr	r0, [pc, #344]	; (8005848 <tempSensor_handler+0x160>)
 80056ee:	f7fc fc4c 	bl	8001f8a <fsmManager_getState>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <tempSensor_handler+0x16>
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d028      	beq.n	800574e <tempSensor_handler+0x66>

				flags_tempSensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 80056fc:	e08f      	b.n	800581e <tempSensor_handler+0x136>
			if(fsmManager_isStateIn(&tempSensor_state)) {
 80056fe:	4852      	ldr	r0, [pc, #328]	; (8005848 <tempSensor_handler+0x160>)
 8005700:	f7fc fc4e 	bl	8001fa0 <fsmManager_isStateIn>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <tempSensor_handler+0x32>
				fsmManager_stateIn(&tempSensor_state);
 800570a:	484f      	ldr	r0, [pc, #316]	; (8005848 <tempSensor_handler+0x160>)
 800570c:	f7fc fc5e 	bl	8001fcc <fsmManager_stateIn>
				flags_tempSensor.bits.isMeasuring = 0;
 8005710:	4a4e      	ldr	r2, [pc, #312]	; (800584c <tempSensor_handler+0x164>)
 8005712:	7853      	ldrb	r3, [r2, #1]
 8005714:	f36f 03c3 	bfc	r3, #3, #1
 8005718:	7053      	strb	r3, [r2, #1]
			if(flags_tempSensor.bits.requestMeasure) {
 800571a:	4b4c      	ldr	r3, [pc, #304]	; (800584c <tempSensor_handler+0x164>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <tempSensor_handler+0x52>
				flags_tempSensor.bits.isMeasuring = 1;
 8005728:	4a48      	ldr	r2, [pc, #288]	; (800584c <tempSensor_handler+0x164>)
 800572a:	7853      	ldrb	r3, [r2, #1]
 800572c:	f043 0308 	orr.w	r3, r3, #8
 8005730:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&tempSensor_state,__tempSensor_getTemperature);
 8005732:	2101      	movs	r1, #1
 8005734:	4844      	ldr	r0, [pc, #272]	; (8005848 <tempSensor_handler+0x160>)
 8005736:	f7fc fc11 	bl	8001f5c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&tempSensor_state)) {
 800573a:	4843      	ldr	r0, [pc, #268]	; (8005848 <tempSensor_handler+0x160>)
 800573c:	f7fc fc3b 	bl	8001fb6 <fsmManager_isStateOut>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d068      	beq.n	8005818 <tempSensor_handler+0x130>
				fsmManager_stateOut(&tempSensor_state);
 8005746:	4840      	ldr	r0, [pc, #256]	; (8005848 <tempSensor_handler+0x160>)
 8005748:	f7fc fc4f 	bl	8001fea <fsmManager_stateOut>
			break;
 800574c:	e064      	b.n	8005818 <tempSensor_handler+0x130>
			if(fsmManager_isStateIn(&tempSensor_state)) {
 800574e:	483e      	ldr	r0, [pc, #248]	; (8005848 <tempSensor_handler+0x160>)
 8005750:	f7fc fc26 	bl	8001fa0 <fsmManager_isStateIn>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d004      	beq.n	8005764 <tempSensor_handler+0x7c>
				fsmManager_stateIn(&tempSensor_state);
 800575a:	483b      	ldr	r0, [pc, #236]	; (8005848 <tempSensor_handler+0x160>)
 800575c:	f7fc fc36 	bl	8001fcc <fsmManager_stateIn>
				temp_adcStart();
 8005760:	f000 f8b8 	bl	80058d4 <temp_adcStart>
			tCelcius = (3.3*((float)temp_adcGetValue())/4095 - V_25)/AVG_SLOPE + 25;
 8005764:	f000 f8ca 	bl	80058fc <temp_adcGetValue>
 8005768:	4603      	mov	r3, r0
 800576a:	4618      	mov	r0, r3
 800576c:	f7fb fa62 	bl	8000c34 <__aeabi_ui2f>
 8005770:	4603      	mov	r3, r0
 8005772:	4618      	mov	r0, r3
 8005774:	f7fa fe50 	bl	8000418 <__aeabi_f2d>
 8005778:	a32b      	add	r3, pc, #172	; (adr r3, 8005828 <tempSensor_handler+0x140>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f7fa fea3 	bl	80004c8 <__aeabi_dmul>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4610      	mov	r0, r2
 8005788:	4619      	mov	r1, r3
 800578a:	a329      	add	r3, pc, #164	; (adr r3, 8005830 <tempSensor_handler+0x148>)
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	f7fa ffc4 	bl	800071c <__aeabi_ddiv>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4610      	mov	r0, r2
 800579a:	4619      	mov	r1, r3
 800579c:	a326      	add	r3, pc, #152	; (adr r3, 8005838 <tempSensor_handler+0x150>)
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f7fa fcd9 	bl	8000158 <__aeabi_dsub>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4610      	mov	r0, r2
 80057ac:	4619      	mov	r1, r3
 80057ae:	a324      	add	r3, pc, #144	; (adr r3, 8005840 <tempSensor_handler+0x158>)
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f7fa ffb2 	bl	800071c <__aeabi_ddiv>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4610      	mov	r0, r2
 80057be:	4619      	mov	r1, r3
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	4b22      	ldr	r3, [pc, #136]	; (8005850 <tempSensor_handler+0x168>)
 80057c6:	f7fa fcc9 	bl	800015c <__adddf3>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4610      	mov	r0, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	f7fb f929 	bl	8000a28 <__aeabi_d2f>
 80057d6:	4603      	mov	r3, r0
 80057d8:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <tempSensor_handler+0x16c>)
 80057da:	6013      	str	r3, [r2, #0]
			if(tempSensorCallback != NULL) {
 80057dc:	4b1e      	ldr	r3, [pc, #120]	; (8005858 <tempSensor_handler+0x170>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <tempSensor_handler+0x106>
				tempSensorCallback(__tempSensorEvent_okMeasuring, (float *) &tCelcius);
 80057e4:	4b1c      	ldr	r3, [pc, #112]	; (8005858 <tempSensor_handler+0x170>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	491a      	ldr	r1, [pc, #104]	; (8005854 <tempSensor_handler+0x16c>)
 80057ea:	2000      	movs	r0, #0
 80057ec:	4798      	blx	r3
			fsmManager_gotoState(&tempSensor_state,__tempSensor_idle);
 80057ee:	2100      	movs	r1, #0
 80057f0:	4815      	ldr	r0, [pc, #84]	; (8005848 <tempSensor_handler+0x160>)
 80057f2:	f7fc fbb3 	bl	8001f5c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&tempSensor_state)) {
 80057f6:	4814      	ldr	r0, [pc, #80]	; (8005848 <tempSensor_handler+0x160>)
 80057f8:	f7fc fbdd 	bl	8001fb6 <fsmManager_isStateOut>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00c      	beq.n	800581c <tempSensor_handler+0x134>
				fsmManager_stateOut(&tempSensor_state);
 8005802:	4811      	ldr	r0, [pc, #68]	; (8005848 <tempSensor_handler+0x160>)
 8005804:	f7fc fbf1 	bl	8001fea <fsmManager_stateOut>
				temp_adcStop();
 8005808:	f000 f884 	bl	8005914 <temp_adcStop>
				flags_tempSensor.bits.requestMeasure = 0;
 800580c:	4a0f      	ldr	r2, [pc, #60]	; (800584c <tempSensor_handler+0x164>)
 800580e:	7813      	ldrb	r3, [r2, #0]
 8005810:	f36f 0300 	bfc	r3, #0, #1
 8005814:	7013      	strb	r3, [r2, #0]
			break;
 8005816:	e001      	b.n	800581c <tempSensor_handler+0x134>
			break;
 8005818:	bf00      	nop
 800581a:	e000      	b.n	800581e <tempSensor_handler+0x136>
			break;
 800581c:	bf00      	nop
}
 800581e:	bf00      	nop
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	f3af 8000 	nop.w
 8005828:	66666666 	.word	0x66666666
 800582c:	400a6666 	.word	0x400a6666
 8005830:	00000000 	.word	0x00000000
 8005834:	40affe00 	.word	0x40affe00
 8005838:	851eb852 	.word	0x851eb852
 800583c:	3fe851eb 	.word	0x3fe851eb
 8005840:	9999999a 	.word	0x9999999a
 8005844:	3f999999 	.word	0x3f999999
 8005848:	200006fc 	.word	0x200006fc
 800584c:	20000708 	.word	0x20000708
 8005850:	40390000 	.word	0x40390000
 8005854:	200006f8 	.word	0x200006f8
 8005858:	20000710 	.word	0x20000710

0800585c <tempSensor_measure>:

void tempSensor_measure(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
	flags_tempSensor.bits.requestMeasure = 1;
 8005860:	4a04      	ldr	r2, [pc, #16]	; (8005874 <tempSensor_measure+0x18>)
 8005862:	7813      	ldrb	r3, [r2, #0]
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	7013      	strb	r3, [r2, #0]
}
 800586a:	bf00      	nop
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000708 	.word	0x20000708

08005878 <tempSensor_setCallback>:
{
	return flags_tempSensor.bits.isMeasuring;
}

void tempSensor_setCallback(void (*cb)(_tempSensor_event, void*))
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	tempSensorCallback = cb;
 8005880:	4a03      	ldr	r2, [pc, #12]	; (8005890 <tempSensor_setCallback+0x18>)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6013      	str	r3, [r2, #0]
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr
 8005890:	20000710 	.word	0x20000710

08005894 <ADC_Select_CHTemp>:




static void ADC_Select_CHTemp(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800589a:	1d3b      	adds	r3, r7, #4
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	605a      	str	r2, [r3, #4]
 80058a2:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80058a4:	2310      	movs	r3, #16
 80058a6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 80058a8:	2301      	movs	r3, #1
 80058aa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80058ac:	2304      	movs	r3, #4
 80058ae:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(tempHadc, &sConfig) != HAL_OK) {
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <ADC_Select_CHTemp+0x3c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	1d3a      	adds	r2, r7, #4
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 f9f3 	bl	8006ca4 <HAL_ADC_ConfigChannel>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <ADC_Select_CHTemp+0x34>
		Error_Handler();
 80058c4:	f7ff fa34 	bl	8004d30 <Error_Handler>
	}
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	200006f4 	.word	0x200006f4

080058d4 <temp_adcStart>:

static void temp_adcStart(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
	ADC_Select_CHTemp();
 80058d8:	f7ff ffdc 	bl	8005894 <ADC_Select_CHTemp>
	HAL_ADC_Start(tempHadc);
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <temp_adcStart+0x24>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fff3 	bl	80068cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(tempHadc, 100);
 80058e6:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <temp_adcStart+0x24>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2164      	movs	r1, #100	; 0x64
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 f8c7 	bl	8006a80 <HAL_ADC_PollForConversion>
}
 80058f2:	bf00      	nop
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	200006f4 	.word	0x200006f4

080058fc <temp_adcGetValue>:

static uint32_t temp_adcGetValue(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(tempHadc);
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <temp_adcGetValue+0x14>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f001 f9c1 	bl	8006c8c <HAL_ADC_GetValue>
 800590a:	4603      	mov	r3, r0
}
 800590c:	4618      	mov	r0, r3
 800590e:	bd80      	pop	{r7, pc}
 8005910:	200006f4 	.word	0x200006f4

08005914 <temp_adcStop>:

static void temp_adcStop(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(tempHadc);
 8005918:	4b03      	ldr	r3, [pc, #12]	; (8005928 <temp_adcStop+0x14>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f883 	bl	8006a28 <HAL_ADC_Stop>
}
 8005922:	bf00      	nop
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	200006f4 	.word	0x200006f4

0800592c <usSensor_init>:




void usSensor_init(TIM_HandleTypeDef *htim)
{
 800592c:	b590      	push	{r4, r7, lr}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
	//Timer
	usHtim = htim;
 8005934:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <usSensor_init+0x80>)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&usSensor_state, __usSensor_idle);
 800593a:	2100      	movs	r1, #0
 800593c:	481c      	ldr	r0, [pc, #112]	; (80059b0 <usSensor_init+0x84>)
 800593e:	f7fc faf7 	bl	8001f30 <fsmManager_init>

	//Pin
	pinUsVdd_write(0);
 8005942:	2000      	movs	r0, #0
 8005944:	f000 fa88 	bl	8005e58 <pinUsVdd_write>
	pinUsTrigger_write(0);
 8005948:	2000      	movs	r0, #0
 800594a:	f000 fa97 	bl	8005e7c <pinUsTrigger_write>
	//pinUsEcho_inputCaptureStop();
	//HAL_TIM_IC_Start_IT(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);

	//Flags
	flags_usSensor.dword = 0;
 800594e:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <usSensor_init+0x88>)
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
	flags_usSensorError.dword = 0;
 8005954:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <usSensor_init+0x8c>)
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]

	//Variables
	echoTime = 0;
 800595a:	4b18      	ldr	r3, [pc, #96]	; (80059bc <usSensor_init+0x90>)
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
	usDistance = 0;
 8005962:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <usSensor_init+0x94>)
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
	soundSpeed = numberFloat_getLinearValue(US_SENSOR_DEFAULT_TEMPERATURE, tableTempVsSpeed, sizeof(tableTempVsSpeed)/(sizeof(float)*2));		//Default 25 celcius
 800596a:	220f      	movs	r2, #15
 800596c:	4915      	ldr	r1, [pc, #84]	; (80059c4 <usSensor_init+0x98>)
 800596e:	4816      	ldr	r0, [pc, #88]	; (80059c8 <usSensor_init+0x9c>)
 8005970:	f000 fd56 	bl	8006420 <numberFloat_getLinearValue>
 8005974:	4603      	mov	r3, r0
 8005976:	4a15      	ldr	r2, [pc, #84]	; (80059cc <usSensor_init+0xa0>)
 8005978:	6013      	str	r3, [r2, #0]

	//Callback
	usSensorCallback = NULL;
 800597a:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <usSensor_init+0xa4>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]

	//Reference clock for Input Capture
	mFactor = 1000000*(usHtim->Init.Prescaler+1)/HAL_RCC_GetSysClockFreq();
 8005980:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <usSensor_init+0x80>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	3301      	adds	r3, #1
 8005988:	4a12      	ldr	r2, [pc, #72]	; (80059d4 <usSensor_init+0xa8>)
 800598a:	fb02 f403 	mul.w	r4, r2, r3
 800598e:	f002 fa11 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8005992:	4603      	mov	r3, r0
 8005994:	fbb4 f3f3 	udiv	r3, r4, r3
 8005998:	4618      	mov	r0, r3
 800599a:	f7fb f94b 	bl	8000c34 <__aeabi_ui2f>
 800599e:	4603      	mov	r3, r0
 80059a0:	4a0d      	ldr	r2, [pc, #52]	; (80059d8 <usSensor_init+0xac>)
 80059a2:	6013      	str	r3, [r2, #0]
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd90      	pop	{r4, r7, pc}
 80059ac:	20000718 	.word	0x20000718
 80059b0:	20000734 	.word	0x20000734
 80059b4:	20000740 	.word	0x20000740
 80059b8:	20000744 	.word	0x20000744
 80059bc:	20000758 	.word	0x20000758
 80059c0:	2000075c 	.word	0x2000075c
 80059c4:	20000004 	.word	0x20000004
 80059c8:	41a00000 	.word	0x41a00000
 80059cc:	20000760 	.word	0x20000760
 80059d0:	2000076c 	.word	0x2000076c
 80059d4:	000f4240 	.word	0x000f4240
 80059d8:	20000754 	.word	0x20000754

080059dc <usSensor_handler>:

void usSensor_handler(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&usSensor_state)) {
 80059e0:	48b5      	ldr	r0, [pc, #724]	; (8005cb8 <usSensor_handler+0x2dc>)
 80059e2:	f7fc fad2 	bl	8001f8a <fsmManager_getState>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b07      	cmp	r3, #7
 80059ea:	f200 81bd 	bhi.w	8005d68 <usSensor_handler+0x38c>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <usSensor_handler+0x18>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a15 	.word	0x08005a15
 80059f8:	08005a95 	.word	0x08005a95
 80059fc:	08005adb 	.word	0x08005adb
 8005a00:	08005b35 	.word	0x08005b35
 8005a04:	08005ba5 	.word	0x08005ba5
 8005a08:	08005c6f 	.word	0x08005c6f
 8005a0c:	08005cf1 	.word	0x08005cf1
 8005a10:	08005d3b 	.word	0x08005d3b
		case __usSensor_idle:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005a14:	48a8      	ldr	r0, [pc, #672]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005a16:	f7fc fac3 	bl	8001fa0 <fsmManager_isStateIn>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d019      	beq.n	8005a54 <usSensor_handler+0x78>
				fsmManager_stateIn(&usSensor_state);
 8005a20:	48a5      	ldr	r0, [pc, #660]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005a22:	f7fc fad3 	bl	8001fcc <fsmManager_stateIn>

				//Clear signals
				pinUsTrigger_write(0);
 8005a26:	2000      	movs	r0, #0
 8005a28:	f000 fa28 	bl	8005e7c <pinUsTrigger_write>

				//Clear variables
				echoTime = 0;
 8005a2c:	4ba3      	ldr	r3, [pc, #652]	; (8005cbc <usSensor_handler+0x2e0>)
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
				usDistance = 0;
 8005a34:	4ba2      	ldr	r3, [pc, #648]	; (8005cc0 <usSensor_handler+0x2e4>)
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
				nAverages = 0;
 8005a3c:	4ba1      	ldr	r3, [pc, #644]	; (8005cc4 <usSensor_handler+0x2e8>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
				usDistanceAverage = 0;
 8005a42:	4ba1      	ldr	r3, [pc, #644]	; (8005cc8 <usSensor_handler+0x2ec>)
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
				flags_usSensor.bits.isMeasuring = 0;
 8005a4a:	4aa0      	ldr	r2, [pc, #640]	; (8005ccc <usSensor_handler+0x2f0>)
 8005a4c:	7853      	ldrb	r3, [r2, #1]
 8005a4e:	f36f 03c3 	bfc	r3, #3, #1
 8005a52:	7053      	strb	r3, [r2, #1]
			}

			if(flags_usSensor.bits.requestMeasure) {
 8005a54:	4b9d      	ldr	r3, [pc, #628]	; (8005ccc <usSensor_handler+0x2f0>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00d      	beq.n	8005a7e <usSensor_handler+0xa2>
				flags_usSensor.bits.requestMeasure = 0;
 8005a62:	4a9a      	ldr	r2, [pc, #616]	; (8005ccc <usSensor_handler+0x2f0>)
 8005a64:	7813      	ldrb	r3, [r2, #0]
 8005a66:	f36f 0300 	bfc	r3, #0, #1
 8005a6a:	7013      	strb	r3, [r2, #0]
				flags_usSensor.bits.isMeasuring = 1;
 8005a6c:	4a97      	ldr	r2, [pc, #604]	; (8005ccc <usSensor_handler+0x2f0>)
 8005a6e:	7853      	ldrb	r3, [r2, #1]
 8005a70:	f043 0308 	orr.w	r3, r3, #8
 8005a74:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&usSensor_state,__usSensor_delay);
 8005a76:	2101      	movs	r1, #1
 8005a78:	488f      	ldr	r0, [pc, #572]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005a7a:	f7fc fa6f 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005a7e:	488e      	ldr	r0, [pc, #568]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005a80:	f7fc fa99 	bl	8001fb6 <fsmManager_isStateOut>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8185 	beq.w	8005d96 <usSensor_handler+0x3ba>
				fsmManager_stateOut(&usSensor_state);
 8005a8c:	488a      	ldr	r0, [pc, #552]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005a8e:	f7fc faac 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8005a92:	e180      	b.n	8005d96 <usSensor_handler+0x3ba>



		case __usSensor_delay:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005a94:	4888      	ldr	r0, [pc, #544]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005a96:	f7fc fa83 	bl	8001fa0 <fsmManager_isStateIn>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <usSensor_handler+0xd4>
				fsmManager_stateIn(&usSensor_state);
 8005aa0:	4885      	ldr	r0, [pc, #532]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005aa2:	f7fc fa93 	bl	8001fcc <fsmManager_stateIn>

				softTimer_start(&timer, 3000);
 8005aa6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8005aaa:	4889      	ldr	r0, [pc, #548]	; (8005cd0 <usSensor_handler+0x2f4>)
 8005aac:	f7ff fbe0 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 8005ab0:	4887      	ldr	r0, [pc, #540]	; (8005cd0 <usSensor_handler+0x2f4>)
 8005ab2:	f7ff fbf1 	bl	8005298 <softTimer_expired>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <usSensor_handler+0xe8>
				fsmManager_gotoState(&usSensor_state,__usSensor_pinUsTrigger_write);
 8005abc:	2102      	movs	r1, #2
 8005abe:	487e      	ldr	r0, [pc, #504]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005ac0:	f7fc fa4c 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005ac4:	487c      	ldr	r0, [pc, #496]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005ac6:	f7fc fa76 	bl	8001fb6 <fsmManager_isStateOut>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8164 	beq.w	8005d9a <usSensor_handler+0x3be>
				fsmManager_stateOut(&usSensor_state);
 8005ad2:	4879      	ldr	r0, [pc, #484]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005ad4:	f7fc fa89 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8005ad8:	e15f      	b.n	8005d9a <usSensor_handler+0x3be>



		case __usSensor_pinUsTrigger_write:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005ada:	4877      	ldr	r0, [pc, #476]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005adc:	f7fc fa60 	bl	8001fa0 <fsmManager_isStateIn>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <usSensor_handler+0x11e>
				fsmManager_stateIn(&usSensor_state);
 8005ae6:	4874      	ldr	r0, [pc, #464]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005ae8:	f7fc fa70 	bl	8001fcc <fsmManager_stateIn>

				//Set trigger during 1 mseg
				pinUsTrigger_write(1);
 8005aec:	2001      	movs	r0, #1
 8005aee:	f000 f9c5 	bl	8005e7c <pinUsTrigger_write>
				softTimer_start(&timer, 10);
 8005af2:	210a      	movs	r1, #10
 8005af4:	4876      	ldr	r0, [pc, #472]	; (8005cd0 <usSensor_handler+0x2f4>)
 8005af6:	f7ff fbbb 	bl	8005270 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 8005afa:	4875      	ldr	r0, [pc, #468]	; (8005cd0 <usSensor_handler+0x2f4>)
 8005afc:	f7ff fbcc 	bl	8005298 <softTimer_expired>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <usSensor_handler+0x142>
				softTimer_stop(&timer);
 8005b06:	4872      	ldr	r0, [pc, #456]	; (8005cd0 <usSensor_handler+0x2f4>)
 8005b08:	f7ff fbfa 	bl	8005300 <softTimer_stop>

				//Finished setting trigger
				pinUsTrigger_write(0);
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f000 f9b5 	bl	8005e7c <pinUsTrigger_write>

				//Enable input capture for echo
				pinUsEcho_inputCaptureStart();
 8005b12:	f000 f9c5 	bl	8005ea0 <pinUsEcho_inputCaptureStart>

				fsmManager_gotoState(&usSensor_state,__usSensor_waitEcho);
 8005b16:	2103      	movs	r1, #3
 8005b18:	4867      	ldr	r0, [pc, #412]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005b1a:	f7fc fa1f 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005b1e:	4866      	ldr	r0, [pc, #408]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005b20:	f7fc fa49 	bl	8001fb6 <fsmManager_isStateOut>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8139 	beq.w	8005d9e <usSensor_handler+0x3c2>
				fsmManager_stateOut(&usSensor_state);
 8005b2c:	4862      	ldr	r0, [pc, #392]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005b2e:	f7fc fa5c 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8005b32:	e134      	b.n	8005d9e <usSensor_handler+0x3c2>



		case __usSensor_waitEcho:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005b34:	4860      	ldr	r0, [pc, #384]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005b36:	f7fc fa33 	bl	8001fa0 <fsmManager_isStateIn>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d006      	beq.n	8005b4e <usSensor_handler+0x172>
				fsmManager_stateIn(&usSensor_state);
 8005b40:	485d      	ldr	r0, [pc, #372]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005b42:	f7fc fa43 	bl	8001fcc <fsmManager_stateIn>

				//Set 100mseg timeout
				softTimer_start(&timeout, 100);
 8005b46:	2164      	movs	r1, #100	; 0x64
 8005b48:	4862      	ldr	r0, [pc, #392]	; (8005cd4 <usSensor_handler+0x2f8>)
 8005b4a:	f7ff fb91 	bl	8005270 <softTimer_start>
			}

			//Echo received
			if(flags_usSensor.bits.receivedEcho == 1) {
 8005b4e:	4b5f      	ldr	r3, [pc, #380]	; (8005ccc <usSensor_handler+0x2f0>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <usSensor_handler+0x194>
				flags_usSensor.bits.receivedEcho = 0;
 8005b5c:	4a5b      	ldr	r2, [pc, #364]	; (8005ccc <usSensor_handler+0x2f0>)
 8005b5e:	7813      	ldrb	r3, [r2, #0]
 8005b60:	f36f 1386 	bfc	r3, #6, #1
 8005b64:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&usSensor_state,__usSensor_getDistance);
 8005b66:	2104      	movs	r1, #4
 8005b68:	4853      	ldr	r0, [pc, #332]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005b6a:	f7fc f9f7 	bl	8001f5c <fsmManager_gotoState>
 8005b6e:	e00c      	b.n	8005b8a <usSensor_handler+0x1ae>
			} else if(softTimer_expired(&timeout)) {
 8005b70:	4858      	ldr	r0, [pc, #352]	; (8005cd4 <usSensor_handler+0x2f8>)
 8005b72:	f7ff fb91 	bl	8005298 <softTimer_expired>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d006      	beq.n	8005b8a <usSensor_handler+0x1ae>
				softTimer_stop(&timeout);
 8005b7c:	4855      	ldr	r0, [pc, #340]	; (8005cd4 <usSensor_handler+0x2f8>)
 8005b7e:	f7ff fbbf 	bl	8005300 <softTimer_stop>

				fsmManager_gotoState(&usSensor_state,__usSensor_errorWaitEcho);
 8005b82:	2105      	movs	r1, #5
 8005b84:	484c      	ldr	r0, [pc, #304]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005b86:	f7fc f9e9 	bl	8001f5c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005b8a:	484b      	ldr	r0, [pc, #300]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005b8c:	f7fc fa13 	bl	8001fb6 <fsmManager_isStateOut>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 8105 	beq.w	8005da2 <usSensor_handler+0x3c6>
				fsmManager_stateOut(&usSensor_state);
 8005b98:	4847      	ldr	r0, [pc, #284]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005b9a:	f7fc fa26 	bl	8001fea <fsmManager_stateOut>

				pinUsEcho_inputCaptureStop();
 8005b9e:	f000 f98b 	bl	8005eb8 <pinUsEcho_inputCaptureStop>
			}
			break;
 8005ba2:	e0fe      	b.n	8005da2 <usSensor_handler+0x3c6>



		case __usSensor_getDistance:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005ba4:	4844      	ldr	r0, [pc, #272]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005ba6:	f7fc f9fb 	bl	8001fa0 <fsmManager_isStateIn>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <usSensor_handler+0x1da>
				fsmManager_stateIn(&usSensor_state);
 8005bb0:	4841      	ldr	r0, [pc, #260]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005bb2:	f7fc fa0b 	bl	8001fcc <fsmManager_stateIn>
			}

			//Get speed of sound based on temperature
			soundSpeed = getSoundSpeed();
 8005bb6:	f000 f929 	bl	8005e0c <getSoundSpeed>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4a46      	ldr	r2, [pc, #280]	; (8005cd8 <usSensor_handler+0x2fc>)
 8005bbe:	6013      	str	r3, [r2, #0]

			//Calculate usDistance
			usDistance = (echoTime*soundSpeed/2000); //[mm]
 8005bc0:	4b3e      	ldr	r3, [pc, #248]	; (8005cbc <usSensor_handler+0x2e0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a44      	ldr	r2, [pc, #272]	; (8005cd8 <usSensor_handler+0x2fc>)
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	4611      	mov	r1, r2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fb f88a 	bl	8000ce4 <__aeabi_fmul>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	4942      	ldr	r1, [pc, #264]	; (8005cdc <usSensor_handler+0x300>)
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fb f939 	bl	8000e4c <__aeabi_fdiv>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4b38      	ldr	r3, [pc, #224]	; (8005cc0 <usSensor_handler+0x2e4>)
 8005be0:	601a      	str	r2, [r3, #0]

			if(usDistance > US_SENSOR_DISTANCE_MAX_MILIMETER) {
 8005be2:	4b37      	ldr	r3, [pc, #220]	; (8005cc0 <usSensor_handler+0x2e4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	493e      	ldr	r1, [pc, #248]	; (8005ce0 <usSensor_handler+0x304>)
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fb fa37 	bl	800105c <__aeabi_fcmpgt>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <usSensor_handler+0x222>
				fsmManager_gotoState(&usSensor_state,__usSensor_errorEchoOverflow);
 8005bf4:	2106      	movs	r1, #6
 8005bf6:	4830      	ldr	r0, [pc, #192]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005bf8:	f7fc f9b0 	bl	8001f5c <fsmManager_gotoState>
 8005bfc:	e02c      	b.n	8005c58 <usSensor_handler+0x27c>
			} else {
				nAverages++;
 8005bfe:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <usSensor_handler+0x2e8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3301      	adds	r3, #1
 8005c04:	4a2f      	ldr	r2, [pc, #188]	; (8005cc4 <usSensor_handler+0x2e8>)
 8005c06:	6013      	str	r3, [r2, #0]

				if(nAverages < US_SENSOR_N_AVERAGES) {
 8005c08:	4b2e      	ldr	r3, [pc, #184]	; (8005cc4 <usSensor_handler+0x2e8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b09      	cmp	r3, #9
 8005c0e:	d816      	bhi.n	8005c3e <usSensor_handler+0x262>
					usDistanceAverage += usDistance/US_SENSOR_N_AVERAGES;
 8005c10:	4b2b      	ldr	r3, [pc, #172]	; (8005cc0 <usSensor_handler+0x2e4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4933      	ldr	r1, [pc, #204]	; (8005ce4 <usSensor_handler+0x308>)
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fb f918 	bl	8000e4c <__aeabi_fdiv>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4b29      	ldr	r3, [pc, #164]	; (8005cc8 <usSensor_handler+0x2ec>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4619      	mov	r1, r3
 8005c26:	4610      	mov	r0, r2
 8005c28:	f7fa ff54 	bl	8000ad4 <__addsf3>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	461a      	mov	r2, r3
 8005c30:	4b25      	ldr	r3, [pc, #148]	; (8005cc8 <usSensor_handler+0x2ec>)
 8005c32:	601a      	str	r2, [r3, #0]

					fsmManager_gotoState(&usSensor_state,__usSensor_pinUsTrigger_write);
 8005c34:	2102      	movs	r1, #2
 8005c36:	4820      	ldr	r0, [pc, #128]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005c38:	f7fc f990 	bl	8001f5c <fsmManager_gotoState>
 8005c3c:	e00c      	b.n	8005c58 <usSensor_handler+0x27c>
				}
				else {
					//Informs to higher layer
					if(usSensorCallback != NULL) {
 8005c3e:	4b2a      	ldr	r3, [pc, #168]	; (8005ce8 <usSensor_handler+0x30c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <usSensor_handler+0x274>
						usSensorCallback(__usSensorEvent_okMeasuring, (float *) &usDistanceAverage);
 8005c46:	4b28      	ldr	r3, [pc, #160]	; (8005ce8 <usSensor_handler+0x30c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	491f      	ldr	r1, [pc, #124]	; (8005cc8 <usSensor_handler+0x2ec>)
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	4798      	blx	r3
					}

					fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 8005c50:	2100      	movs	r1, #0
 8005c52:	4819      	ldr	r0, [pc, #100]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005c54:	f7fc f982 	bl	8001f5c <fsmManager_gotoState>
				}
			}


			if(fsmManager_isStateOut(&usSensor_state)) {
 8005c58:	4817      	ldr	r0, [pc, #92]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005c5a:	f7fc f9ac 	bl	8001fb6 <fsmManager_isStateOut>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80a0 	beq.w	8005da6 <usSensor_handler+0x3ca>
				fsmManager_stateOut(&usSensor_state);
 8005c66:	4814      	ldr	r0, [pc, #80]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005c68:	f7fc f9bf 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8005c6c:	e09b      	b.n	8005da6 <usSensor_handler+0x3ca>



		case __usSensor_errorWaitEcho:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005c6e:	4812      	ldr	r0, [pc, #72]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005c70:	f7fc f996 	bl	8001fa0 <fsmManager_isStateIn>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <usSensor_handler+0x2a4>
				fsmManager_stateIn(&usSensor_state);
 8005c7a:	480f      	ldr	r0, [pc, #60]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005c7c:	f7fc f9a6 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_usSensorError.bits.echo = 1;
 8005c80:	4a1a      	ldr	r2, [pc, #104]	; (8005cec <usSensor_handler+0x310>)
 8005c82:	7813      	ldrb	r3, [r2, #0]
 8005c84:	f043 0301 	orr.w	r3, r3, #1
 8005c88:	7013      	strb	r3, [r2, #0]

			//Informs to higher layer
			if(usSensorCallback != NULL) {
 8005c8a:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <usSensor_handler+0x30c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <usSensor_handler+0x2c0>
				usSensorCallback(__usSensorEvent_errorEcho, NULL);
 8005c92:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <usSensor_handler+0x30c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2100      	movs	r1, #0
 8005c98:	2001      	movs	r0, #1
 8005c9a:	4798      	blx	r3
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_error);
 8005c9c:	2107      	movs	r1, #7
 8005c9e:	4806      	ldr	r0, [pc, #24]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005ca0:	f7fc f95c 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005ca4:	4804      	ldr	r0, [pc, #16]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005ca6:	f7fc f986 	bl	8001fb6 <fsmManager_isStateOut>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d07c      	beq.n	8005daa <usSensor_handler+0x3ce>
				fsmManager_stateOut(&usSensor_state);
 8005cb0:	4801      	ldr	r0, [pc, #4]	; (8005cb8 <usSensor_handler+0x2dc>)
 8005cb2:	f7fc f99a 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8005cb6:	e078      	b.n	8005daa <usSensor_handler+0x3ce>
 8005cb8:	20000734 	.word	0x20000734
 8005cbc:	20000758 	.word	0x20000758
 8005cc0:	2000075c 	.word	0x2000075c
 8005cc4:	20000768 	.word	0x20000768
 8005cc8:	20000764 	.word	0x20000764
 8005ccc:	20000740 	.word	0x20000740
 8005cd0:	2000071c 	.word	0x2000071c
 8005cd4:	20000728 	.word	0x20000728
 8005cd8:	20000760 	.word	0x20000760
 8005cdc:	44fa0000 	.word	0x44fa0000
 8005ce0:	45bb8000 	.word	0x45bb8000
 8005ce4:	41200000 	.word	0x41200000
 8005ce8:	2000076c 	.word	0x2000076c
 8005cec:	20000744 	.word	0x20000744



		case __usSensor_errorEchoOverflow:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005cf0:	4831      	ldr	r0, [pc, #196]	; (8005db8 <usSensor_handler+0x3dc>)
 8005cf2:	f7fc f955 	bl	8001fa0 <fsmManager_isStateIn>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <usSensor_handler+0x326>
				fsmManager_stateIn(&usSensor_state);
 8005cfc:	482e      	ldr	r0, [pc, #184]	; (8005db8 <usSensor_handler+0x3dc>)
 8005cfe:	f7fc f965 	bl	8001fcc <fsmManager_stateIn>
			}

			flags_usSensorError.bits.echo = 1;
 8005d02:	4a2e      	ldr	r2, [pc, #184]	; (8005dbc <usSensor_handler+0x3e0>)
 8005d04:	7813      	ldrb	r3, [r2, #0]
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	7013      	strb	r3, [r2, #0]

			//Informs to higher layer
			if(usSensorCallback != NULL) {
 8005d0c:	4b2c      	ldr	r3, [pc, #176]	; (8005dc0 <usSensor_handler+0x3e4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <usSensor_handler+0x342>
				usSensorCallback(__usSensorEvent_errorEcho, NULL);
 8005d14:	4b2a      	ldr	r3, [pc, #168]	; (8005dc0 <usSensor_handler+0x3e4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2100      	movs	r1, #0
 8005d1a:	2001      	movs	r0, #1
 8005d1c:	4798      	blx	r3
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_error);
 8005d1e:	2107      	movs	r1, #7
 8005d20:	4825      	ldr	r0, [pc, #148]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d22:	f7fc f91b 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005d26:	4824      	ldr	r0, [pc, #144]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d28:	f7fc f945 	bl	8001fb6 <fsmManager_isStateOut>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d03d      	beq.n	8005dae <usSensor_handler+0x3d2>
				fsmManager_stateOut(&usSensor_state);
 8005d32:	4821      	ldr	r0, [pc, #132]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d34:	f7fc f959 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8005d38:	e039      	b.n	8005dae <usSensor_handler+0x3d2>



		case __usSensor_error:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005d3a:	481f      	ldr	r0, [pc, #124]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d3c:	f7fc f930 	bl	8001fa0 <fsmManager_isStateIn>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <usSensor_handler+0x370>
				fsmManager_stateIn(&usSensor_state);
 8005d46:	481c      	ldr	r0, [pc, #112]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d48:	f7fc f940 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	481a      	ldr	r0, [pc, #104]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d50:	f7fc f904 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005d54:	4818      	ldr	r0, [pc, #96]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d56:	f7fc f92e 	bl	8001fb6 <fsmManager_isStateOut>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d028      	beq.n	8005db2 <usSensor_handler+0x3d6>
				fsmManager_stateOut(&usSensor_state);
 8005d60:	4815      	ldr	r0, [pc, #84]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d62:	f7fc f942 	bl	8001fea <fsmManager_stateOut>
			}
			break;
 8005d66:	e024      	b.n	8005db2 <usSensor_handler+0x3d6>



		default:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005d68:	4813      	ldr	r0, [pc, #76]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d6a:	f7fc f919 	bl	8001fa0 <fsmManager_isStateIn>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <usSensor_handler+0x39e>
				fsmManager_stateIn(&usSensor_state);
 8005d74:	4810      	ldr	r0, [pc, #64]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d76:	f7fc f929 	bl	8001fcc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	480e      	ldr	r0, [pc, #56]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d7e:	f7fc f8ed 	bl	8001f5c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005d82:	480d      	ldr	r0, [pc, #52]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d84:	f7fc f917 	bl	8001fb6 <fsmManager_isStateOut>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d012      	beq.n	8005db4 <usSensor_handler+0x3d8>
				fsmManager_stateOut(&usSensor_state);
 8005d8e:	480a      	ldr	r0, [pc, #40]	; (8005db8 <usSensor_handler+0x3dc>)
 8005d90:	f7fc f92b 	bl	8001fea <fsmManager_stateOut>
			}
	}
}
 8005d94:	e00e      	b.n	8005db4 <usSensor_handler+0x3d8>
			break;
 8005d96:	bf00      	nop
 8005d98:	e00c      	b.n	8005db4 <usSensor_handler+0x3d8>
			break;
 8005d9a:	bf00      	nop
 8005d9c:	e00a      	b.n	8005db4 <usSensor_handler+0x3d8>
			break;
 8005d9e:	bf00      	nop
 8005da0:	e008      	b.n	8005db4 <usSensor_handler+0x3d8>
			break;
 8005da2:	bf00      	nop
 8005da4:	e006      	b.n	8005db4 <usSensor_handler+0x3d8>
			break;
 8005da6:	bf00      	nop
 8005da8:	e004      	b.n	8005db4 <usSensor_handler+0x3d8>
			break;
 8005daa:	bf00      	nop
 8005dac:	e002      	b.n	8005db4 <usSensor_handler+0x3d8>
			break;
 8005dae:	bf00      	nop
 8005db0:	e000      	b.n	8005db4 <usSensor_handler+0x3d8>
			break;
 8005db2:	bf00      	nop
}
 8005db4:	bf00      	nop
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000734 	.word	0x20000734
 8005dbc:	20000744 	.word	0x20000744
 8005dc0:	2000076c 	.word	0x2000076c

08005dc4 <usSensor_powerOn>:

void usSensor_powerOn(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
	pinUsVdd_write(1);
 8005dc8:	2001      	movs	r0, #1
 8005dca:	f000 f845 	bl	8005e58 <pinUsVdd_write>
}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <usSensor_powerOff>:

void usSensor_powerOff(void)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	af00      	add	r7, sp, #0
	pinUsVdd_write(0);
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	f000 f83e 	bl	8005e58 <pinUsVdd_write>
}
 8005ddc:	bf00      	nop
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <usSensor_measure>:

void usSensor_measure(float temp)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	temperature = temp;
 8005de8:	4a06      	ldr	r2, [pc, #24]	; (8005e04 <usSensor_measure+0x24>)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6013      	str	r3, [r2, #0]

	flags_usSensor.bits.requestMeasure = 1;
 8005dee:	4a06      	ldr	r2, [pc, #24]	; (8005e08 <usSensor_measure+0x28>)
 8005df0:	7813      	ldrb	r3, [r2, #0]
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	7013      	strb	r3, [r2, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000714 	.word	0x20000714
 8005e08:	20000740 	.word	0x20000740

08005e0c <getSoundSpeed>:




static float getSoundSpeed(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
	float speed = 0;
 8005e12:	f04f 0300 	mov.w	r3, #0
 8005e16:	607b      	str	r3, [r7, #4]

	speed = numberFloat_getLinearValue(temperature, tableTempVsSpeed, sizeof(tableTempVsSpeed)/(sizeof(float)*2));
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <getSoundSpeed+0x28>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	220f      	movs	r2, #15
 8005e1e:	4906      	ldr	r1, [pc, #24]	; (8005e38 <getSoundSpeed+0x2c>)
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fafd 	bl	8006420 <numberFloat_getLinearValue>
 8005e26:	6078      	str	r0, [r7, #4]

	return speed;
 8005e28:	687b      	ldr	r3, [r7, #4]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000714 	.word	0x20000714
 8005e38:	20000004 	.word	0x20000004

08005e3c <usSensor_setCallback>:

void usSensor_setCallback(void (*cb)(_usSensor_event, void*))
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	usSensorCallback = cb;
 8005e44:	4a03      	ldr	r2, [pc, #12]	; (8005e54 <usSensor_setCallback+0x18>)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6013      	str	r3, [r2, #0]
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr
 8005e54:	2000076c 	.word	0x2000076c

08005e58 <pinUsVdd_write>:
	US_TRIGGER		input			gpio
	US_ECHO			output			input capture
*/

static void pinUsVdd_write(uint8_t state)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(US_SENSOR_VDD_PORT, US_SENSOR_VDD_PIN, state);
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	461a      	mov	r2, r3
 8005e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e6a:	4803      	ldr	r0, [pc, #12]	; (8005e78 <pinUsVdd_write+0x20>)
 8005e6c:	f001 fbf0 	bl	8007650 <HAL_GPIO_WritePin>
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40010c00 	.word	0x40010c00

08005e7c <pinUsTrigger_write>:

static void pinUsTrigger_write(uint8_t state)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(US_SENSOR_TRIGGER_PORT, US_SENSOR_TRIGGER_PIN, state);
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2102      	movs	r1, #2
 8005e8c:	4803      	ldr	r0, [pc, #12]	; (8005e9c <pinUsTrigger_write+0x20>)
 8005e8e:	f001 fbdf 	bl	8007650 <HAL_GPIO_WritePin>
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40010c00 	.word	0x40010c00

08005ea0 <pinUsEcho_inputCaptureStart>:

static void pinUsEcho_inputCaptureStart(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005ea4:	4b03      	ldr	r3, [pc, #12]	; (8005eb4 <pinUsEcho_inputCaptureStart+0x14>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2108      	movs	r1, #8
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f003 f834 	bl	8008f18 <HAL_TIM_IC_Start_IT>
}
 8005eb0:	bf00      	nop
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000718 	.word	0x20000718

08005eb8 <pinUsEcho_inputCaptureStop>:

static void pinUsEcho_inputCaptureStop(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Stop_IT(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005ebc:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <pinUsEcho_inputCaptureStop+0x14>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2108      	movs	r1, #8
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f003 f92e 	bl	8009124 <HAL_TIM_IC_Stop_IT>
}
 8005ec8:	bf00      	nop
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000718 	.word	0x20000718

08005ed0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == usHtim->Instance && htim->Channel == usHtim->Channel) {
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	4b49      	ldr	r3, [pc, #292]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	f040 8089 	bne.w	8005ffa <HAL_TIM_IC_CaptureCallback+0x12a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7f1a      	ldrb	r2, [r3, #28]
 8005eec:	4b45      	ldr	r3, [pc, #276]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	7f1b      	ldrb	r3, [r3, #28]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	f040 8081 	bne.w	8005ffa <HAL_TIM_IC_CaptureCallback+0x12a>
		if(flags_usSensor.bits.isFirstCaptured == 0) {
 8005ef8:	4b43      	ldr	r3, [pc, #268]	; (8006008 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d122      	bne.n	8005f4c <HAL_TIM_IC_CaptureCallback+0x7c>
			flags_usSensor.bits.isFirstCaptured = 1;
 8005f06:	4a40      	ldr	r2, [pc, #256]	; (8006008 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005f08:	7853      	ldrb	r3, [r2, #1]
 8005f0a:	f043 0304 	orr.w	r3, r3, #4
 8005f0e:	7053      	strb	r3, [r2, #1]

			icVal1 = HAL_TIM_ReadCapturedValue(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005f10:	4b3c      	ldr	r3, [pc, #240]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2108      	movs	r1, #8
 8005f16:	4618      	mov	r0, r3
 8005f18:	f003 fc0c 	bl	8009734 <HAL_TIM_ReadCapturedValue>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	4a3b      	ldr	r2, [pc, #236]	; (800600c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005f20:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(usHtim, US_SENSOR_ECHO_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
 8005f22:	4b38      	ldr	r3, [pc, #224]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6a1a      	ldr	r2, [r3, #32]
 8005f2a:	4b36      	ldr	r3, [pc, #216]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f34:	621a      	str	r2, [r3, #32]
 8005f36:	4b33      	ldr	r3, [pc, #204]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6a1a      	ldr	r2, [r3, #32]
 8005f3e:	4b31      	ldr	r3, [pc, #196]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f48:	621a      	str	r2, [r3, #32]

			flags_usSensor.bits.receivedEcho = 1;
			__HAL_TIM_SET_CAPTUREPOLARITY(usHtim, US_SENSOR_ECHO_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8005f4a:	e056      	b.n	8005ffa <HAL_TIM_IC_CaptureCallback+0x12a>
			flags_usSensor.bits.isFirstCaptured = 0;
 8005f4c:	4a2e      	ldr	r2, [pc, #184]	; (8006008 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005f4e:	7853      	ldrb	r3, [r2, #1]
 8005f50:	f36f 0382 	bfc	r3, #2, #1
 8005f54:	7053      	strb	r3, [r2, #1]
			icVal2 = HAL_TIM_ReadCapturedValue(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005f56:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2108      	movs	r1, #8
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f003 fbe9 	bl	8009734 <HAL_TIM_ReadCapturedValue>
 8005f62:	4603      	mov	r3, r0
 8005f64:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005f66:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(usHtim, 0);
 8005f68:	4b26      	ldr	r3, [pc, #152]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	625a      	str	r2, [r3, #36]	; 0x24
			if(icVal2 > icVal1) icDif = icVal2-icVal1;
 8005f72:	4b27      	ldr	r3, [pc, #156]	; (8006010 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	4b25      	ldr	r3, [pc, #148]	; (800600c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d906      	bls.n	8005f8c <HAL_TIM_IC_CaptureCallback+0xbc>
 8005f7e:	4b24      	ldr	r3, [pc, #144]	; (8006010 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b22      	ldr	r3, [pc, #136]	; (800600c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	4a22      	ldr	r2, [pc, #136]	; (8006014 <HAL_TIM_IC_CaptureCallback+0x144>)
 8005f8a:	6013      	str	r3, [r2, #0]
			if(icVal1 > icVal2) icDif = (0xffff-icVal1)+icVal2;
 8005f8c:	4b1f      	ldr	r3, [pc, #124]	; (800600c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b1f      	ldr	r3, [pc, #124]	; (8006010 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d909      	bls.n	8005fac <HAL_TIM_IC_CaptureCallback+0xdc>
 8005f98:	4b1d      	ldr	r3, [pc, #116]	; (8006010 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	4b1b      	ldr	r3, [pc, #108]	; (800600c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005fa6:	33ff      	adds	r3, #255	; 0xff
 8005fa8:	4a1a      	ldr	r2, [pc, #104]	; (8006014 <HAL_TIM_IC_CaptureCallback+0x144>)
 8005faa:	6013      	str	r3, [r2, #0]
			echoTime = icDif*mFactor;
 8005fac:	4b19      	ldr	r3, [pc, #100]	; (8006014 <HAL_TIM_IC_CaptureCallback+0x144>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fa fe3f 	bl	8000c34 <__aeabi_ui2f>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	4b17      	ldr	r3, [pc, #92]	; (8006018 <HAL_TIM_IC_CaptureCallback+0x148>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f7fa fe90 	bl	8000ce4 <__aeabi_fmul>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4b14      	ldr	r3, [pc, #80]	; (800601c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8005fca:	601a      	str	r2, [r3, #0]
			flags_usSensor.bits.receivedEcho = 1;
 8005fcc:	4a0e      	ldr	r2, [pc, #56]	; (8006008 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005fce:	7813      	ldrb	r3, [r2, #0]
 8005fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd4:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(usHtim, US_SENSOR_ECHO_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6a1a      	ldr	r2, [r3, #32]
 8005fde:	4b09      	ldr	r3, [pc, #36]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005fe8:	621a      	str	r2, [r3, #32]
 8005fea:	4b06      	ldr	r3, [pc, #24]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b04      	ldr	r3, [pc, #16]	; (8006004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6a12      	ldr	r2, [r2, #32]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000718 	.word	0x20000718
 8006008:	20000740 	.word	0x20000740
 800600c:	20000748 	.word	0x20000748
 8006010:	2000074c 	.word	0x2000074c
 8006014:	20000750 	.word	0x20000750
 8006018:	20000754 	.word	0x20000754
 800601c:	20000758 	.word	0x20000758

08006020 <string_writeStr>:
 */ 

#include "utilities.h"

uint32_t string_writeStr(uint8_t *strDest, uint8_t *strSrc)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
    return string_writeStr_fromPos(strDest, strSrc, 0);
 800602a:	2200      	movs	r2, #0
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f805 	bl	800603e <string_writeStr_fromPos>
 8006034:	4603      	mov	r3, r0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <string_writeStr_fromPos>:

uint32_t string_writeStr_fromPos(uint8_t *strDest, uint8_t *strSrc, uint32_t pos)
{
 800603e:	b480      	push	{r7}
 8006040:	b087      	sub	sp, #28
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
    uint32_t i = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]

    if(strDest != NULL && strSrc != NULL) {
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d016      	beq.n	8006082 <string_writeStr_fromPos+0x44>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d013      	beq.n	8006082 <string_writeStr_fromPos+0x44>
        while(strSrc[i] != '\0') {
 800605a:	e00c      	b.n	8006076 <string_writeStr_fromPos+0x38>
            strDest[pos+i] = strSrc[i];
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	441a      	add	r2, r3
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	440b      	add	r3, r1
 8006068:	68f9      	ldr	r1, [r7, #12]
 800606a:	440b      	add	r3, r1
 800606c:	7812      	ldrb	r2, [r2, #0]
 800606e:	701a      	strb	r2, [r3, #0]
            i++;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	3301      	adds	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
        while(strSrc[i] != '\0') {
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4413      	add	r3, r2
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1ec      	bne.n	800605c <string_writeStr_fromPos+0x1e>
        }
    }

    strDest[pos+i] = '\0';
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]

    return i;
 8006090:	697b      	ldr	r3, [r7, #20]
}
 8006092:	4618      	mov	r0, r3
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <string_length>:

    return i;
}

uint32_t string_length(uint8_t *str)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]

    if(str != NULL) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <string_length+0x26>
        while(str[len] != '\0') {
 80060ae:	e002      	b.n	80060b6 <string_length+0x1a>
            len++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
        while(str[len] != '\0') {
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f6      	bne.n	80060b0 <string_length+0x14>
        }
    }

    return len;
 80060c2:	68fb      	ldr	r3, [r7, #12]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr

080060ce <string_containsWithinLength>:

    return contains;
}

uint8_t string_containsWithinLength(uint8_t *str, uint8_t *subStr, uint32_t lenStr)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b088      	sub	sp, #32
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
	uint32_t pos = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
	uint32_t i = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	61bb      	str	r3, [r7, #24]
    uint8_t contains = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	75fb      	strb	r3, [r7, #23]
    uint32_t lenSubStr;
    
    if(subStr != NULL && lenStr != 0) {
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d038      	beq.n	800615e <string_containsWithinLength+0x90>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d035      	beq.n	800615e <string_containsWithinLength+0x90>
        lenSubStr = string_length(subStr);
 80060f2:	68b8      	ldr	r0, [r7, #8]
 80060f4:	f7ff ffd2 	bl	800609c <string_length>
 80060f8:	6138      	str	r0, [r7, #16]

        if(lenSubStr <= lenStr) {
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d82d      	bhi.n	800615e <string_containsWithinLength+0x90>
            while(pos < lenStr && contains == 0) {
 8006102:	e025      	b.n	8006150 <string_containsWithinLength+0x82>
                i = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	61bb      	str	r3, [r7, #24]

                while((pos + i) < lenStr) {
 8006108:	e019      	b.n	800613e <string_containsWithinLength+0x70>
                    if(str[pos + i] != subStr[i]) {
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	4413      	add	r3, r2
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	781a      	ldrb	r2, [r3, #0]
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	440b      	add	r3, r1
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d002      	beq.n	8006128 <string_containsWithinLength+0x5a>
                        contains = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	75fb      	strb	r3, [r7, #23]
                        break;
 8006126:	e010      	b.n	800614a <string_containsWithinLength+0x7c>
                    }
                    else if ((lenSubStr - 1) == i) {
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	3b01      	subs	r3, #1
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	429a      	cmp	r2, r3
 8006130:	d102      	bne.n	8006138 <string_containsWithinLength+0x6a>
                        contains = 1;
 8006132:	2301      	movs	r3, #1
 8006134:	75fb      	strb	r3, [r7, #23]
                        break;
 8006136:	e008      	b.n	800614a <string_containsWithinLength+0x7c>
                    }

                    i++;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	3301      	adds	r3, #1
 800613c:	61bb      	str	r3, [r7, #24]
                while((pos + i) < lenStr) {
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	4413      	add	r3, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d8df      	bhi.n	800610a <string_containsWithinLength+0x3c>
                }

                pos++;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	3301      	adds	r3, #1
 800614e:	61fb      	str	r3, [r7, #28]
            while(pos < lenStr && contains == 0) {
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	d202      	bcs.n	800615e <string_containsWithinLength+0x90>
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0d2      	beq.n	8006104 <string_containsWithinLength+0x36>
    		}
        }
    }

    return contains;
 800615e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <string_indexOf>:

    return starts;
}

uint32_t string_indexOf(uint8_t *str, uint8_t c)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	70fb      	strb	r3, [r7, #3]
    uint32_t i = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
    uint32_t len;

    if(str != NULL) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01f      	beq.n	80061be <string_indexOf+0x56>
        len = string_length(str);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff ff8c 	bl	800609c <string_length>
 8006184:	60b8      	str	r0, [r7, #8]

        while(i < len) {
 8006186:	e009      	b.n	800619c <string_indexOf+0x34>
            if(str[i] == c) {
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	429a      	cmp	r2, r3
 8006194:	d007      	beq.n	80061a6 <string_indexOf+0x3e>
                break;
            }

            i++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3301      	adds	r3, #1
 800619a:	60fb      	str	r3, [r7, #12]
        while(i < len) {
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d3f1      	bcc.n	8006188 <string_indexOf+0x20>
 80061a4:	e000      	b.n	80061a8 <string_indexOf+0x40>
                break;
 80061a6:	bf00      	nop
        }

        i = (str[i] == c) ? i : 0;
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	78fa      	ldrb	r2, [r7, #3]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d101      	bne.n	80061ba <string_indexOf+0x52>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	e000      	b.n	80061bc <string_indexOf+0x54>
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
    }

    return i;
 80061be:	68fb      	ldr	r3, [r7, #12]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <string_appendChar>:

uint32_t string_appendChar(uint8_t *str, uint8_t c)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	70fb      	strb	r3, [r7, #3]
    uint32_t i = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
    uint32_t len;
    
    if(str != NULL) {
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d012      	beq.n	8006204 <string_appendChar+0x3c>
        len = string_length(str);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff ff5c 	bl	800609c <string_length>
 80061e4:	60b8      	str	r0, [r7, #8]

        str[len] = c;
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4413      	add	r3, r2
 80061ec:	78fa      	ldrb	r2, [r7, #3]
 80061ee:	701a      	strb	r2, [r3, #0]
        str[len+1] = '\0';
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	3301      	adds	r3, #1
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	4413      	add	r3, r2
 80061f8:	2200      	movs	r2, #0
 80061fa:	701a      	strb	r2, [r3, #0]

        i = len++;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	60ba      	str	r2, [r7, #8]
 8006202:	60fb      	str	r3, [r7, #12]
    }

    return i;
 8006204:	68fb      	ldr	r3, [r7, #12]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <string_appendString>:

uint32_t string_appendString(uint8_t *str1, uint8_t *str2)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b086      	sub	sp, #24
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
    uint32_t lenStr1;
    uint32_t lenStr2;
    
    if(str1 != NULL && str2 != NULL) {
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01c      	beq.n	800625c <string_appendString+0x4e>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d019      	beq.n	800625c <string_appendString+0x4e>
        lenStr1 = string_length(str1);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff ff37 	bl	800609c <string_length>
 800622e:	6138      	str	r0, [r7, #16]
        lenStr2 = string_length(str2);
 8006230:	6838      	ldr	r0, [r7, #0]
 8006232:	f7ff ff33 	bl	800609c <string_length>
 8006236:	60f8      	str	r0, [r7, #12]

        while(i < lenStr2) {
 8006238:	e00c      	b.n	8006254 <string_appendString+0x46>
            str1[lenStr1 + i] = str2[i];
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	441a      	add	r2, r3
 8006240:	6939      	ldr	r1, [r7, #16]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	440b      	add	r3, r1
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	440b      	add	r3, r1
 800624a:	7812      	ldrb	r2, [r2, #0]
 800624c:	701a      	strb	r2, [r3, #0]

            i++;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	3301      	adds	r3, #1
 8006252:	617b      	str	r3, [r7, #20]
        while(i < lenStr2) {
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	429a      	cmp	r2, r3
 800625a:	d3ee      	bcc.n	800623a <string_appendString+0x2c>
        }
    }

    return i;
 800625c:	697b      	ldr	r3, [r7, #20]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <string_split>:

uint32_t string_split(uint8_t *str, uint8_t c, uint8_t *strOut)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b088      	sub	sp, #32
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	460b      	mov	r3, r1
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	72fb      	strb	r3, [r7, #11]
    uint32_t strLen = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	613b      	str	r3, [r7, #16]
    uint32_t pos = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]

    if(str != NULL && strOut != NULL) {
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d042      	beq.n	8006308 <string_split+0xa2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d03f      	beq.n	8006308 <string_split+0xa2>
        strLen = string_length(str);
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff ff07 	bl	800609c <string_length>
 800628e:	6138      	str	r0, [r7, #16]

        pos = string_indexOf(str, c);
 8006290:	7afb      	ldrb	r3, [r7, #11]
 8006292:	4619      	mov	r1, r3
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff ff67 	bl	8006168 <string_indexOf>
 800629a:	61f8      	str	r0, [r7, #28]

        if(pos > 0) {
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d032      	beq.n	8006308 <string_split+0xa2>
            for(uint32_t i = 0; i < pos; i++) {
 80062a2:	2300      	movs	r3, #0
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	e00a      	b.n	80062be <string_split+0x58>
                strOut[i] = str[i];
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	441a      	add	r2, r3
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	440b      	add	r3, r1
 80062b4:	7812      	ldrb	r2, [r2, #0]
 80062b6:	701a      	strb	r2, [r3, #0]
            for(uint32_t i = 0; i < pos; i++) {
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d3f0      	bcc.n	80062a8 <string_split+0x42>
            }
            strOut[pos] = '\0';
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	2200      	movs	r2, #0
 80062ce:	701a      	strb	r2, [r3, #0]

            for(uint32_t i = pos; i < strLen; i++) {
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	e00d      	b.n	80062f2 <string_split+0x8c>
                str[i - pos] = str[i + 1];
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	3301      	adds	r3, #1
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	441a      	add	r2, r3
 80062de:	6979      	ldr	r1, [r7, #20]
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	1acb      	subs	r3, r1, r3
 80062e4:	68f9      	ldr	r1, [r7, #12]
 80062e6:	440b      	add	r3, r1
 80062e8:	7812      	ldrb	r2, [r2, #0]
 80062ea:	701a      	strb	r2, [r3, #0]
            for(uint32_t i = pos; i < strLen; i++) {
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	3301      	adds	r3, #1
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d3ed      	bcc.n	80062d6 <string_split+0x70>
            }
            str[strLen - pos] = '\0';
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]
        }
    }

    return pos;
 8006308:	69fb      	ldr	r3, [r7, #28]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3720      	adds	r7, #32
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <ascii_convertNum>:

uint32_t ascii_convertNum(uint8_t *strAscii, uint32_t num)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]
    uint32_t digits = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	60bb      	str	r3, [r7, #8]
    digits = number_getDigits(num);
 8006326:	6838      	ldr	r0, [r7, #0]
 8006328:	f000 f834 	bl	8006394 <number_getDigits>
 800632c:	60b8      	str	r0, [r7, #8]

    if(strAscii != NULL) {
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d028      	beq.n	8006386 <ascii_convertNum+0x72>
        for(i = 0; i < digits; i++) {
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e01c      	b.n	8006374 <ascii_convertNum+0x60>
            strAscii[digits - 1 - i] = num % 10 + '0';
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	4b14      	ldr	r3, [pc, #80]	; (8006390 <ascii_convertNum+0x7c>)
 800633e:	fba3 2301 	umull	r2, r3, r3, r1
 8006342:	08da      	lsrs	r2, r3, #3
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	1aca      	subs	r2, r1, r3
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1acb      	subs	r3, r1, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	440b      	add	r3, r1
 800635c:	3230      	adds	r2, #48	; 0x30
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]
            num /= 10;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	4a0a      	ldr	r2, [pc, #40]	; (8006390 <ascii_convertNum+0x7c>)
 8006366:	fba2 2303 	umull	r2, r3, r2, r3
 800636a:	08db      	lsrs	r3, r3, #3
 800636c:	603b      	str	r3, [r7, #0]
        for(i = 0; i < digits; i++) {
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3301      	adds	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	429a      	cmp	r2, r3
 800637a:	d3de      	bcc.n	800633a <ascii_convertNum+0x26>
        }

        strAscii[digits] = '\0';
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	4413      	add	r3, r2
 8006382:	2200      	movs	r2, #0
 8006384:	701a      	strb	r2, [r3, #0]
    }

    return i;
 8006386:	68fb      	ldr	r3, [r7, #12]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	cccccccd 	.word	0xcccccccd

08006394 <number_getDigits>:




uint32_t number_getDigits(uint32_t num)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
    uint32_t digits = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]

	do {
		num /= 10;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a08      	ldr	r2, [pc, #32]	; (80063c4 <number_getDigits+0x30>)
 80063a4:	fba2 2303 	umull	r2, r3, r2, r3
 80063a8:	08db      	lsrs	r3, r3, #3
 80063aa:	607b      	str	r3, [r7, #4]
		digits++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
	} while(num != 0);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f3      	bne.n	80063a0 <number_getDigits+0xc>

	return digits;
 80063b8:	68fb      	ldr	r3, [r7, #12]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr
 80063c4:	cccccccd 	.word	0xcccccccd

080063c8 <number_convertUint32_toArrayOfUint8>:
    return isBin;
}


void number_convertUint32_toArrayOfUint8(uint8_t *hex, uint32_t value)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
	static const char hex_lookup[] = "0123456789ABCDEF";

	// Extract each 4-bit nibble of the number
	for (int i = 7; i >= 0; i--) {
 80063d2:	2307      	movs	r3, #7
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	e015      	b.n	8006404 <number_convertUint32_toArrayOfUint8+0x3c>
		uint8_t nibble = (value >> (4 * i)) & 0xF;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	fa22 f303 	lsr.w	r3, r2, r3
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	72fb      	strb	r3, [r7, #11]
		hex[7 - i] = hex_lookup[nibble];
 80063ea:	7afa      	ldrb	r2, [r7, #11]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f1c3 0307 	rsb	r3, r3, #7
 80063f2:	4619      	mov	r1, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	440b      	add	r3, r1
 80063f8:	4908      	ldr	r1, [pc, #32]	; (800641c <number_convertUint32_toArrayOfUint8+0x54>)
 80063fa:	5c8a      	ldrb	r2, [r1, r2]
 80063fc:	701a      	strb	r2, [r3, #0]
	for (int i = 7; i >= 0; i--) {
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3b01      	subs	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	dae6      	bge.n	80063d8 <number_convertUint32_toArrayOfUint8+0x10>
	}

	hex[8] = '\0';
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3308      	adds	r3, #8
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr
 800641c:	0800be24 	.word	0x0800be24

08006420 <numberFloat_getLinearValue>:

    return pos;
}

float numberFloat_getLinearValue(float x, float table[][2], uint32_t size)
{
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b089      	sub	sp, #36	; 0x24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
    float y = 0;
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	61bb      	str	r3, [r7, #24]
    float m = 0;
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	617b      	str	r3, [r7, #20]
    uint32_t nSegment = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]

    while(x > table[nSegment][0] && nSegment < size) {
 800643c:	e002      	b.n	8006444 <numberFloat_getLinearValue+0x24>
        nSegment++;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3301      	adds	r3, #1
 8006442:	61fb      	str	r3, [r7, #28]
    while(x > table[nSegment][0] && nSegment < size) {
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	4413      	add	r3, r2
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4619      	mov	r1, r3
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7fa fe03 	bl	800105c <__aeabi_fcmpgt>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <numberFloat_getLinearValue+0x44>
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d3ec      	bcc.n	800643e <numberFloat_getLinearValue+0x1e>
    }

    if(nSegment == 0) {
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d102      	bne.n	8006470 <numberFloat_getLinearValue+0x50>
        nSegment = 1;
 800646a:	2301      	movs	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	e006      	b.n	800647e <numberFloat_getLinearValue+0x5e>
    }
    else if(nSegment == size) {
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d102      	bne.n	800647e <numberFloat_getLinearValue+0x5e>
        nSegment = size - 1;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3b01      	subs	r3, #1
 800647c:	61fb      	str	r3, [r7, #28]
    }

    m = (table[nSegment][1]-table[nSegment-1][1]) / (table[nSegment][0]-table[nSegment-1][0]);
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	4413      	add	r3, r2
 8006486:	6858      	ldr	r0, [r3, #4]
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800648e:	3b01      	subs	r3, #1
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	4413      	add	r3, r2
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	4619      	mov	r1, r3
 800649a:	f7fa fb19 	bl	8000ad0 <__aeabi_fsub>
 800649e:	4603      	mov	r3, r0
 80064a0:	461c      	mov	r4, r3
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	4413      	add	r3, r2
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80064b2:	3b01      	subs	r3, #1
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	4413      	add	r3, r2
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4619      	mov	r1, r3
 80064be:	f7fa fb07 	bl	8000ad0 <__aeabi_fsub>
 80064c2:	4603      	mov	r3, r0
 80064c4:	4619      	mov	r1, r3
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7fa fcc0 	bl	8000e4c <__aeabi_fdiv>
 80064cc:	4603      	mov	r3, r0
 80064ce:	617b      	str	r3, [r7, #20]
    y = m * (x - table[nSegment-1][0]) + table[nSegment-1][1];
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80064d6:	3b01      	subs	r3, #1
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	4413      	add	r3, r2
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4619      	mov	r1, r3
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f7fa faf4 	bl	8000ad0 <__aeabi_fsub>
 80064e8:	4603      	mov	r3, r0
 80064ea:	6979      	ldr	r1, [r7, #20]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fa fbf9 	bl	8000ce4 <__aeabi_fmul>
 80064f2:	4603      	mov	r3, r0
 80064f4:	4618      	mov	r0, r3
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80064fc:	3b01      	subs	r3, #1
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	4413      	add	r3, r2
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	4619      	mov	r1, r3
 8006508:	f7fa fae4 	bl	8000ad4 <__addsf3>
 800650c:	4603      	mov	r3, r0
 800650e:	61bb      	str	r3, [r7, #24]

    return y;
 8006510:	69bb      	ldr	r3, [r7, #24]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3724      	adds	r7, #36	; 0x24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd90      	pop	{r4, r7, pc}

0800651a <ringBufferOfUint8_indexOf>:
		array[i] = 0;
	}
}

uint32_t ringBufferOfUint8_indexOf(uint8_t *rb, uint32_t ptrStart, uint32_t ptrEnd, uint8_t c, uint32_t rbLen)
{
 800651a:	b480      	push	{r7}
 800651c:	b087      	sub	sp, #28
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	607a      	str	r2, [r7, #4]
 8006526:	70fb      	strb	r3, [r7, #3]
    uint32_t i = ptrStart;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	617b      	str	r3, [r7, #20]
    uint8_t matched = 0;
 800652c:	2300      	movs	r3, #0
 800652e:	74fb      	strb	r3, [r7, #19]

	while( i != ptrEnd) {
 8006530:	e015      	b.n	800655e <ringBufferOfUint8_indexOf+0x44>

		if(rb[i] == c) {
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	4413      	add	r3, r2
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	78fa      	ldrb	r2, [r7, #3]
 800653c:	429a      	cmp	r2, r3
 800653e:	d102      	bne.n	8006546 <ringBufferOfUint8_indexOf+0x2c>
            matched = 1;
 8006540:	2301      	movs	r3, #1
 8006542:	74fb      	strb	r3, [r7, #19]
			break;
 8006544:	e00f      	b.n	8006566 <ringBufferOfUint8_indexOf+0x4c>
		}

		i++;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	3301      	adds	r3, #1
 800654a:	617b      	str	r3, [r7, #20]
        i%=rbLen;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	6a3a      	ldr	r2, [r7, #32]
 8006550:	fbb3 f2f2 	udiv	r2, r3, r2
 8006554:	6a39      	ldr	r1, [r7, #32]
 8006556:	fb01 f202 	mul.w	r2, r1, r2
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	617b      	str	r3, [r7, #20]
	while( i != ptrEnd) {
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	429a      	cmp	r2, r3
 8006564:	d1e5      	bne.n	8006532 <ringBufferOfUint8_indexOf+0x18>
	}

	i = (matched == 1) ? i+1 : 0;
 8006566:	7cfb      	ldrb	r3, [r7, #19]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d102      	bne.n	8006572 <ringBufferOfUint8_indexOf+0x58>
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	3301      	adds	r3, #1
 8006570:	e000      	b.n	8006574 <ringBufferOfUint8_indexOf+0x5a>
 8006572:	2300      	movs	r3, #0
 8006574:	617b      	str	r3, [r7, #20]

	return i;
 8006576:	697b      	ldr	r3, [r7, #20]
}
 8006578:	4618      	mov	r0, r3
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr

08006582 <ringBufferOfUint8_popChunk>:

uint32_t ringBufferOfUint8_popChunk(uint8_t *rb, uint32_t ptrStart, uint32_t ptrEnd, uint8_t c, uint32_t rbLen, uint8_t *chunk)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b08a      	sub	sp, #40	; 0x28
 8006586:	af02      	add	r7, sp, #8
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	70fb      	strb	r3, [r7, #3]
    uint32_t pos = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
    uint32_t chunkPos = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	61fb      	str	r3, [r7, #28]

	pos = ringBufferOfUint8_indexOf(rb, ptrStart, ptrEnd, c, rbLen);
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	4613      	mov	r3, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f7ff ffb8 	bl	800651a <ringBufferOfUint8_indexOf>
 80065aa:	6178      	str	r0, [r7, #20]

	if(pos > 0) {
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d026      	beq.n	8006600 <ringBufferOfUint8_popChunk+0x7e>
		pos -= 1;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	617b      	str	r3, [r7, #20]

		for(uint32_t i = ptrStart; i != pos + 1; i++, chunkPos++) {
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	e016      	b.n	80065ec <ringBufferOfUint8_popChunk+0x6a>
			i%=rbLen;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80065c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065c8:	fb01 f202 	mul.w	r2, r1, r2
 80065cc:	1a9b      	subs	r3, r3, r2
 80065ce:	61bb      	str	r3, [r7, #24]
			chunk[chunkPos] = rb[i];
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	441a      	add	r2, r3
 80065d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	440b      	add	r3, r1
 80065dc:	7812      	ldrb	r2, [r2, #0]
 80065de:	701a      	strb	r2, [r3, #0]
		for(uint32_t i = ptrStart; i != pos + 1; i++, chunkPos++) {
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	3301      	adds	r3, #1
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	3301      	adds	r3, #1
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	3301      	adds	r3, #1
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d1e3      	bne.n	80065be <ringBufferOfUint8_popChunk+0x3c>
		}
		chunk[chunkPos] = '\0';
 80065f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	2200      	movs	r2, #0
 80065fe:	701a      	strb	r2, [r3, #0]
	}

	return chunkPos;
 8006600:	69fb      	ldr	r3, [r7, #28]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3720      	adds	r7, #32
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800660c:	480c      	ldr	r0, [pc, #48]	; (8006640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800660e:	490d      	ldr	r1, [pc, #52]	; (8006644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006610:	4a0d      	ldr	r2, [pc, #52]	; (8006648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006614:	e002      	b.n	800661c <LoopCopyDataInit>

08006616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800661a:	3304      	adds	r3, #4

0800661c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800661c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800661e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006620:	d3f9      	bcc.n	8006616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006622:	4a0a      	ldr	r2, [pc, #40]	; (800664c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006624:	4c0a      	ldr	r4, [pc, #40]	; (8006650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006628:	e001      	b.n	800662e <LoopFillZerobss>

0800662a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800662a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800662c:	3204      	adds	r2, #4

0800662e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800662e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006630:	d3fb      	bcc.n	800662a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006632:	f7ff f835 	bl	80056a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006636:	f004 f815 	bl	800a664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800663a:	f7fe f973 	bl	8004924 <main>
  bx lr
 800663e:	4770      	bx	lr
  ldr r0, =_sdata
 8006640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006644:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8006648:	0800be80 	.word	0x0800be80
  ldr r2, =_sbss
 800664c:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8006650:	200008bc 	.word	0x200008bc

08006654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006654:	e7fe      	b.n	8006654 <ADC1_2_IRQHandler>
	...

08006658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800665c:	4b08      	ldr	r3, [pc, #32]	; (8006680 <HAL_Init+0x28>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a07      	ldr	r2, [pc, #28]	; (8006680 <HAL_Init+0x28>)
 8006662:	f043 0310 	orr.w	r3, r3, #16
 8006666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006668:	2003      	movs	r0, #3
 800666a:	f000 fd7b 	bl	8007164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800666e:	200f      	movs	r0, #15
 8006670:	f000 f808 	bl	8006684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006674:	f7fe fe7c 	bl	8005370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40022000 	.word	0x40022000

08006684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800668c:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <HAL_InitTick+0x54>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4b12      	ldr	r3, [pc, #72]	; (80066dc <HAL_InitTick+0x58>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	4619      	mov	r1, r3
 8006696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800669a:	fbb3 f3f1 	udiv	r3, r3, r1
 800669e:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fd93 	bl	80071ce <HAL_SYSTICK_Config>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e00e      	b.n	80066d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b0f      	cmp	r3, #15
 80066b6:	d80a      	bhi.n	80066ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066b8:	2200      	movs	r2, #0
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	f000 fd5b 	bl	800717a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066c4:	4a06      	ldr	r2, [pc, #24]	; (80066e0 <HAL_InitTick+0x5c>)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e000      	b.n	80066d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20000000 	.word	0x20000000
 80066dc:	20000080 	.word	0x20000080
 80066e0:	2000007c 	.word	0x2000007c

080066e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <HAL_IncTick+0x1c>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <HAL_IncTick+0x20>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4413      	add	r3, r2
 80066f4:	4a03      	ldr	r2, [pc, #12]	; (8006704 <HAL_IncTick+0x20>)
 80066f6:	6013      	str	r3, [r2, #0]
}
 80066f8:	bf00      	nop
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr
 8006700:	20000080 	.word	0x20000080
 8006704:	200008b8 	.word	0x200008b8

08006708 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  return uwTick;
 800670c:	4b02      	ldr	r3, [pc, #8]	; (8006718 <HAL_GetTick+0x10>)
 800670e:	681b      	ldr	r3, [r3, #0]
}
 8006710:	4618      	mov	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr
 8006718:	200008b8 	.word	0x200008b8

0800671c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e0be      	b.n	80068bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	2b00      	cmp	r3, #0
 800674a:	d109      	bne.n	8006760 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fe fe3a 	bl	80053d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fbf1 	bl	8006f48 <ADC_ConversionStop_Disable>
 8006766:	4603      	mov	r3, r0
 8006768:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b00      	cmp	r3, #0
 8006774:	f040 8099 	bne.w	80068aa <HAL_ADC_Init+0x18e>
 8006778:	7dfb      	ldrb	r3, [r7, #23]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f040 8095 	bne.w	80068aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006784:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006788:	f023 0302 	bic.w	r3, r3, #2
 800678c:	f043 0202 	orr.w	r2, r3, #2
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800679c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	7b1b      	ldrb	r3, [r3, #12]
 80067a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80067a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b4:	d003      	beq.n	80067be <HAL_ADC_Init+0xa2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d102      	bne.n	80067c4 <HAL_ADC_Init+0xa8>
 80067be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067c2:	e000      	b.n	80067c6 <HAL_ADC_Init+0xaa>
 80067c4:	2300      	movs	r3, #0
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	7d1b      	ldrb	r3, [r3, #20]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d119      	bne.n	8006808 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	7b1b      	ldrb	r3, [r3, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	035a      	lsls	r2, r3, #13
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	e00b      	b.n	8006808 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	f043 0220 	orr.w	r2, r3, #32
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	f043 0201 	orr.w	r2, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	4b28      	ldr	r3, [pc, #160]	; (80068c4 <HAL_ADC_Init+0x1a8>)
 8006824:	4013      	ands	r3, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6812      	ldr	r2, [r2, #0]
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	430b      	orrs	r3, r1
 800682e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006838:	d003      	beq.n	8006842 <HAL_ADC_Init+0x126>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d104      	bne.n	800684c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	3b01      	subs	r3, #1
 8006848:	051b      	lsls	r3, r3, #20
 800684a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006852:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	430a      	orrs	r2, r1
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689a      	ldr	r2, [r3, #8]
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <HAL_ADC_Init+0x1ac>)
 8006868:	4013      	ands	r3, r2
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	d10b      	bne.n	8006888 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	f043 0201 	orr.w	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006886:	e018      	b.n	80068ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	f023 0312 	bic.w	r3, r3, #18
 8006890:	f043 0210 	orr.w	r2, r3, #16
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	f043 0201 	orr.w	r2, r3, #1
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80068a8:	e007      	b.n	80068ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	f043 0210 	orr.w	r2, r3, #16
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	ffe1f7fd 	.word	0xffe1f7fd
 80068c8:	ff1f0efe 	.word	0xff1f0efe

080068cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d101      	bne.n	80068e6 <HAL_ADC_Start+0x1a>
 80068e2:	2302      	movs	r3, #2
 80068e4:	e098      	b.n	8006a18 <HAL_ADC_Start+0x14c>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fad0 	bl	8006e94 <ADC_Enable>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f040 8087 	bne.w	8006a0e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a41      	ldr	r2, [pc, #260]	; (8006a20 <HAL_ADC_Start+0x154>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d105      	bne.n	800692a <HAL_ADC_Start+0x5e>
 800691e:	4b41      	ldr	r3, [pc, #260]	; (8006a24 <HAL_ADC_Start+0x158>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d115      	bne.n	8006956 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006940:	2b00      	cmp	r3, #0
 8006942:	d026      	beq.n	8006992 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800694c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006954:	e01d      	b.n	8006992 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a2f      	ldr	r2, [pc, #188]	; (8006a24 <HAL_ADC_Start+0x158>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_ADC_Start+0xaa>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a2b      	ldr	r2, [pc, #172]	; (8006a20 <HAL_ADC_Start+0x154>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d10d      	bne.n	8006992 <HAL_ADC_Start+0xc6>
 8006976:	4b2b      	ldr	r3, [pc, #172]	; (8006a24 <HAL_ADC_Start+0x158>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800698a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d006      	beq.n	80069ac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	f023 0206 	bic.w	r2, r3, #6
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80069aa:	e002      	b.n	80069b2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f06f 0202 	mvn.w	r2, #2
 80069c2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80069ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80069d2:	d113      	bne.n	80069fc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80069d8:	4a11      	ldr	r2, [pc, #68]	; (8006a20 <HAL_ADC_Start+0x154>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d105      	bne.n	80069ea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <HAL_ADC_Start+0x158>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d108      	bne.n	80069fc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80069f8:	609a      	str	r2, [r3, #8]
 80069fa:	e00c      	b.n	8006a16 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a0a:	609a      	str	r2, [r3, #8]
 8006a0c:	e003      	b.n	8006a16 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	40012800 	.word	0x40012800
 8006a24:	40012400 	.word	0x40012400

08006a28 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_ADC_Stop+0x1a>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e01a      	b.n	8006a78 <HAL_ADC_Stop+0x50>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa7c 	bl	8006f48 <ADC_ConversionStop_Disable>
 8006a50:	4603      	mov	r3, r0
 8006a52:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d109      	bne.n	8006a6e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	f043 0201 	orr.w	r2, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006a80:	b590      	push	{r4, r7, lr}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006a96:	f7ff fe37 	bl	8006708 <HAL_GetTick>
 8006a9a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	f043 0220 	orr.w	r2, r3, #32
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e0d3      	b.n	8006c6a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d131      	bne.n	8006b34 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d12a      	bne.n	8006b34 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8006ade:	e021      	b.n	8006b24 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae6:	d01d      	beq.n	8006b24 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <HAL_ADC_PollForConversion+0x7e>
 8006aee:	f7ff fe0b 	bl	8006708 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d212      	bcs.n	8006b24 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10b      	bne.n	8006b24 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	f043 0204 	orr.w	r2, r3, #4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e0a2      	b.n	8006c6a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0d6      	beq.n	8006ae0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8006b32:	e070      	b.n	8006c16 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8006b34:	4b4f      	ldr	r3, [pc, #316]	; (8006c74 <HAL_ADC_PollForConversion+0x1f4>)
 8006b36:	681c      	ldr	r4, [r3, #0]
 8006b38:	2002      	movs	r0, #2
 8006b3a:	f001 faa1 	bl	8008080 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6919      	ldr	r1, [r3, #16]
 8006b4a:	4b4b      	ldr	r3, [pc, #300]	; (8006c78 <HAL_ADC_PollForConversion+0x1f8>)
 8006b4c:	400b      	ands	r3, r1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d118      	bne.n	8006b84 <HAL_ADC_PollForConversion+0x104>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68d9      	ldr	r1, [r3, #12]
 8006b58:	4b48      	ldr	r3, [pc, #288]	; (8006c7c <HAL_ADC_PollForConversion+0x1fc>)
 8006b5a:	400b      	ands	r3, r1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d111      	bne.n	8006b84 <HAL_ADC_PollForConversion+0x104>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6919      	ldr	r1, [r3, #16]
 8006b66:	4b46      	ldr	r3, [pc, #280]	; (8006c80 <HAL_ADC_PollForConversion+0x200>)
 8006b68:	400b      	ands	r3, r1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d108      	bne.n	8006b80 <HAL_ADC_PollForConversion+0x100>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68d9      	ldr	r1, [r3, #12]
 8006b74:	4b43      	ldr	r3, [pc, #268]	; (8006c84 <HAL_ADC_PollForConversion+0x204>)
 8006b76:	400b      	ands	r3, r1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <HAL_ADC_PollForConversion+0x100>
 8006b7c:	2314      	movs	r3, #20
 8006b7e:	e020      	b.n	8006bc2 <HAL_ADC_PollForConversion+0x142>
 8006b80:	2329      	movs	r3, #41	; 0x29
 8006b82:	e01e      	b.n	8006bc2 <HAL_ADC_PollForConversion+0x142>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6919      	ldr	r1, [r3, #16]
 8006b8a:	4b3d      	ldr	r3, [pc, #244]	; (8006c80 <HAL_ADC_PollForConversion+0x200>)
 8006b8c:	400b      	ands	r3, r1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_ADC_PollForConversion+0x120>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68d9      	ldr	r1, [r3, #12]
 8006b98:	4b3a      	ldr	r3, [pc, #232]	; (8006c84 <HAL_ADC_PollForConversion+0x204>)
 8006b9a:	400b      	ands	r3, r1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <HAL_ADC_PollForConversion+0x13c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6919      	ldr	r1, [r3, #16]
 8006ba6:	4b38      	ldr	r3, [pc, #224]	; (8006c88 <HAL_ADC_PollForConversion+0x208>)
 8006ba8:	400b      	ands	r3, r1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d108      	bne.n	8006bc0 <HAL_ADC_PollForConversion+0x140>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68d9      	ldr	r1, [r3, #12]
 8006bb4:	4b34      	ldr	r3, [pc, #208]	; (8006c88 <HAL_ADC_PollForConversion+0x208>)
 8006bb6:	400b      	ands	r3, r1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_ADC_PollForConversion+0x140>
 8006bbc:	2354      	movs	r3, #84	; 0x54
 8006bbe:	e000      	b.n	8006bc2 <HAL_ADC_PollForConversion+0x142>
 8006bc0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8006bc2:	fb02 f303 	mul.w	r3, r2, r3
 8006bc6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006bc8:	e021      	b.n	8006c0e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd0:	d01a      	beq.n	8006c08 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <HAL_ADC_PollForConversion+0x168>
 8006bd8:	f7ff fd96 	bl	8006708 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d20f      	bcs.n	8006c08 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d90b      	bls.n	8006c08 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	f043 0204 	orr.w	r2, r3, #4
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e030      	b.n	8006c6a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d8d9      	bhi.n	8006bca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f06f 0212 	mvn.w	r2, #18
 8006c1e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006c36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006c3a:	d115      	bne.n	8006c68 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d111      	bne.n	8006c68 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d105      	bne.n	8006c68 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c60:	f043 0201 	orr.w	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd90      	pop	{r4, r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000000 	.word	0x20000000
 8006c78:	24924924 	.word	0x24924924
 8006c7c:	00924924 	.word	0x00924924
 8006c80:	12492492 	.word	0x12492492
 8006c84:	00492492 	.word	0x00492492
 8006c88:	00249249 	.word	0x00249249

08006c8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_ADC_ConfigChannel+0x20>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e0dc      	b.n	8006e7e <HAL_ADC_ConfigChannel+0x1da>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b06      	cmp	r3, #6
 8006cd2:	d81c      	bhi.n	8006d0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3b05      	subs	r3, #5
 8006ce6:	221f      	movs	r2, #31
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	43db      	mvns	r3, r3
 8006cee:	4019      	ands	r1, r3
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3b05      	subs	r3, #5
 8006d00:	fa00 f203 	lsl.w	r2, r0, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	635a      	str	r2, [r3, #52]	; 0x34
 8006d0c:	e03c      	b.n	8006d88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2b0c      	cmp	r3, #12
 8006d14:	d81c      	bhi.n	8006d50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	4613      	mov	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	3b23      	subs	r3, #35	; 0x23
 8006d28:	221f      	movs	r2, #31
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	4019      	ands	r1, r3
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	3b23      	subs	r3, #35	; 0x23
 8006d42:	fa00 f203 	lsl.w	r2, r0, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d4e:	e01b      	b.n	8006d88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	3b41      	subs	r3, #65	; 0x41
 8006d62:	221f      	movs	r2, #31
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	4019      	ands	r1, r3
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	3b41      	subs	r3, #65	; 0x41
 8006d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b09      	cmp	r3, #9
 8006d8e:	d91c      	bls.n	8006dca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68d9      	ldr	r1, [r3, #12]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	4413      	add	r3, r2
 8006da0:	3b1e      	subs	r3, #30
 8006da2:	2207      	movs	r2, #7
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	4019      	ands	r1, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6898      	ldr	r0, [r3, #8]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	4413      	add	r3, r2
 8006dba:	3b1e      	subs	r3, #30
 8006dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	60da      	str	r2, [r3, #12]
 8006dc8:	e019      	b.n	8006dfe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6919      	ldr	r1, [r3, #16]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	4413      	add	r3, r2
 8006dda:	2207      	movs	r2, #7
 8006ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8006de0:	43db      	mvns	r3, r3
 8006de2:	4019      	ands	r1, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6898      	ldr	r0, [r3, #8]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4613      	mov	r3, r2
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	4413      	add	r3, r2
 8006df2:	fa00 f203 	lsl.w	r2, r0, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d003      	beq.n	8006e0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006e0a:	2b11      	cmp	r3, #17
 8006e0c:	d132      	bne.n	8006e74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1d      	ldr	r2, [pc, #116]	; (8006e88 <HAL_ADC_ConfigChannel+0x1e4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d125      	bne.n	8006e64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d126      	bne.n	8006e74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006e34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	d11a      	bne.n	8006e74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006e3e:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <HAL_ADC_ConfigChannel+0x1e8>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a13      	ldr	r2, [pc, #76]	; (8006e90 <HAL_ADC_ConfigChannel+0x1ec>)
 8006e44:	fba2 2303 	umull	r2, r3, r2, r3
 8006e48:	0c9a      	lsrs	r2, r3, #18
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006e54:	e002      	b.n	8006e5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f9      	bne.n	8006e56 <HAL_ADC_ConfigChannel+0x1b2>
 8006e62:	e007      	b.n	8006e74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	f043 0220 	orr.w	r2, r3, #32
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr
 8006e88:	40012400 	.word	0x40012400
 8006e8c:	20000000 	.word	0x20000000
 8006e90:	431bde83 	.word	0x431bde83

08006e94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d040      	beq.n	8006f34 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0201 	orr.w	r2, r2, #1
 8006ec0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006ec2:	4b1f      	ldr	r3, [pc, #124]	; (8006f40 <ADC_Enable+0xac>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a1f      	ldr	r2, [pc, #124]	; (8006f44 <ADC_Enable+0xb0>)
 8006ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ecc:	0c9b      	lsrs	r3, r3, #18
 8006ece:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006ed0:	e002      	b.n	8006ed8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f9      	bne.n	8006ed2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ede:	f7ff fc13 	bl	8006708 <HAL_GetTick>
 8006ee2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006ee4:	e01f      	b.n	8006f26 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006ee6:	f7ff fc0f 	bl	8006708 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d918      	bls.n	8006f26 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d011      	beq.n	8006f26 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	f043 0210 	orr.w	r2, r3, #16
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	f043 0201 	orr.w	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e007      	b.n	8006f36 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d1d8      	bne.n	8006ee6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000000 	.word	0x20000000
 8006f44:	431bde83 	.word	0x431bde83

08006f48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d12e      	bne.n	8006fc0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006f72:	f7ff fbc9 	bl	8006708 <HAL_GetTick>
 8006f76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006f78:	e01b      	b.n	8006fb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006f7a:	f7ff fbc5 	bl	8006708 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d914      	bls.n	8006fb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d10d      	bne.n	8006fb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9a:	f043 0210 	orr.w	r2, r3, #16
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	f043 0201 	orr.w	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e007      	b.n	8006fc2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d0dc      	beq.n	8006f7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <__NVIC_SetPriorityGrouping+0x44>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fe8:	4013      	ands	r3, r2
 8006fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ffe:	4a04      	ldr	r2, [pc, #16]	; (8007010 <__NVIC_SetPriorityGrouping+0x44>)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	60d3      	str	r3, [r2, #12]
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	e000ed00 	.word	0xe000ed00

08007014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007018:	4b04      	ldr	r3, [pc, #16]	; (800702c <__NVIC_GetPriorityGrouping+0x18>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	f003 0307 	and.w	r3, r3, #7
}
 8007022:	4618      	mov	r0, r3
 8007024:	46bd      	mov	sp, r7
 8007026:	bc80      	pop	{r7}
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	e000ed00 	.word	0xe000ed00

08007030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800703a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800703e:	2b00      	cmp	r3, #0
 8007040:	db0b      	blt.n	800705a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007042:	79fb      	ldrb	r3, [r7, #7]
 8007044:	f003 021f 	and.w	r2, r3, #31
 8007048:	4906      	ldr	r1, [pc, #24]	; (8007064 <__NVIC_EnableIRQ+0x34>)
 800704a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	2001      	movs	r0, #1
 8007052:	fa00 f202 	lsl.w	r2, r0, r2
 8007056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	bc80      	pop	{r7}
 8007062:	4770      	bx	lr
 8007064:	e000e100 	.word	0xe000e100

08007068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	6039      	str	r1, [r7, #0]
 8007072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007078:	2b00      	cmp	r3, #0
 800707a:	db0a      	blt.n	8007092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	b2da      	uxtb	r2, r3
 8007080:	490c      	ldr	r1, [pc, #48]	; (80070b4 <__NVIC_SetPriority+0x4c>)
 8007082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007086:	0112      	lsls	r2, r2, #4
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	440b      	add	r3, r1
 800708c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007090:	e00a      	b.n	80070a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	b2da      	uxtb	r2, r3
 8007096:	4908      	ldr	r1, [pc, #32]	; (80070b8 <__NVIC_SetPriority+0x50>)
 8007098:	79fb      	ldrb	r3, [r7, #7]
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	3b04      	subs	r3, #4
 80070a0:	0112      	lsls	r2, r2, #4
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	440b      	add	r3, r1
 80070a6:	761a      	strb	r2, [r3, #24]
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	e000e100 	.word	0xe000e100
 80070b8:	e000ed00 	.word	0xe000ed00

080070bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070bc:	b480      	push	{r7}
 80070be:	b089      	sub	sp, #36	; 0x24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f1c3 0307 	rsb	r3, r3, #7
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	bf28      	it	cs
 80070da:	2304      	movcs	r3, #4
 80070dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	3304      	adds	r3, #4
 80070e2:	2b06      	cmp	r3, #6
 80070e4:	d902      	bls.n	80070ec <NVIC_EncodePriority+0x30>
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	3b03      	subs	r3, #3
 80070ea:	e000      	b.n	80070ee <NVIC_EncodePriority+0x32>
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070f0:	f04f 32ff 	mov.w	r2, #4294967295
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	fa02 f303 	lsl.w	r3, r2, r3
 80070fa:	43da      	mvns	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	401a      	ands	r2, r3
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007104:	f04f 31ff 	mov.w	r1, #4294967295
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	fa01 f303 	lsl.w	r3, r1, r3
 800710e:	43d9      	mvns	r1, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007114:	4313      	orrs	r3, r2
         );
}
 8007116:	4618      	mov	r0, r3
 8007118:	3724      	adds	r7, #36	; 0x24
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3b01      	subs	r3, #1
 800712c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007130:	d301      	bcc.n	8007136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007132:	2301      	movs	r3, #1
 8007134:	e00f      	b.n	8007156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007136:	4a0a      	ldr	r2, [pc, #40]	; (8007160 <SysTick_Config+0x40>)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3b01      	subs	r3, #1
 800713c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800713e:	210f      	movs	r1, #15
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	f7ff ff90 	bl	8007068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <SysTick_Config+0x40>)
 800714a:	2200      	movs	r2, #0
 800714c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800714e:	4b04      	ldr	r3, [pc, #16]	; (8007160 <SysTick_Config+0x40>)
 8007150:	2207      	movs	r2, #7
 8007152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	e000e010 	.word	0xe000e010

08007164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff ff2d 	bl	8006fcc <__NVIC_SetPriorityGrouping>
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800717a:	b580      	push	{r7, lr}
 800717c:	b086      	sub	sp, #24
 800717e:	af00      	add	r7, sp, #0
 8007180:	4603      	mov	r3, r0
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800718c:	f7ff ff42 	bl	8007014 <__NVIC_GetPriorityGrouping>
 8007190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	6978      	ldr	r0, [r7, #20]
 8007198:	f7ff ff90 	bl	80070bc <NVIC_EncodePriority>
 800719c:	4602      	mov	r2, r0
 800719e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071a2:	4611      	mov	r1, r2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff ff5f 	bl	8007068 <__NVIC_SetPriority>
}
 80071aa:	bf00      	nop
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	4603      	mov	r3, r0
 80071ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff ff35 	bl	8007030 <__NVIC_EnableIRQ>
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7ff ffa2 	bl	8007120 <SysTick_Config>
 80071dc:	4603      	mov	r3, r0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d008      	beq.n	800720e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2204      	movs	r2, #4
 8007200:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e020      	b.n	8007250 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 020e 	bic.w	r2, r2, #14
 800721c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0201 	bic.w	r2, r2, #1
 800722c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007236:	2101      	movs	r1, #1
 8007238:	fa01 f202 	lsl.w	r2, r1, r2
 800723c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr
	...

0800725c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800726e:	2b02      	cmp	r3, #2
 8007270:	d005      	beq.n	800727e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2204      	movs	r2, #4
 8007276:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	73fb      	strb	r3, [r7, #15]
 800727c:	e051      	b.n	8007322 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 020e 	bic.w	r2, r2, #14
 800728c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0201 	bic.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a22      	ldr	r2, [pc, #136]	; (800732c <HAL_DMA_Abort_IT+0xd0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d029      	beq.n	80072fc <HAL_DMA_Abort_IT+0xa0>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a20      	ldr	r2, [pc, #128]	; (8007330 <HAL_DMA_Abort_IT+0xd4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d022      	beq.n	80072f8 <HAL_DMA_Abort_IT+0x9c>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1f      	ldr	r2, [pc, #124]	; (8007334 <HAL_DMA_Abort_IT+0xd8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d01a      	beq.n	80072f2 <HAL_DMA_Abort_IT+0x96>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1d      	ldr	r2, [pc, #116]	; (8007338 <HAL_DMA_Abort_IT+0xdc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d012      	beq.n	80072ec <HAL_DMA_Abort_IT+0x90>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a1c      	ldr	r2, [pc, #112]	; (800733c <HAL_DMA_Abort_IT+0xe0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00a      	beq.n	80072e6 <HAL_DMA_Abort_IT+0x8a>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a1a      	ldr	r2, [pc, #104]	; (8007340 <HAL_DMA_Abort_IT+0xe4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d102      	bne.n	80072e0 <HAL_DMA_Abort_IT+0x84>
 80072da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80072de:	e00e      	b.n	80072fe <HAL_DMA_Abort_IT+0xa2>
 80072e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072e4:	e00b      	b.n	80072fe <HAL_DMA_Abort_IT+0xa2>
 80072e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072ea:	e008      	b.n	80072fe <HAL_DMA_Abort_IT+0xa2>
 80072ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072f0:	e005      	b.n	80072fe <HAL_DMA_Abort_IT+0xa2>
 80072f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f6:	e002      	b.n	80072fe <HAL_DMA_Abort_IT+0xa2>
 80072f8:	2310      	movs	r3, #16
 80072fa:	e000      	b.n	80072fe <HAL_DMA_Abort_IT+0xa2>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4a11      	ldr	r2, [pc, #68]	; (8007344 <HAL_DMA_Abort_IT+0xe8>)
 8007300:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
    } 
  }
  return status;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	40020008 	.word	0x40020008
 8007330:	4002001c 	.word	0x4002001c
 8007334:	40020030 	.word	0x40020030
 8007338:	40020044 	.word	0x40020044
 800733c:	40020058 	.word	0x40020058
 8007340:	4002006c 	.word	0x4002006c
 8007344:	40020000 	.word	0x40020000

08007348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007348:	b480      	push	{r7}
 800734a:	b08b      	sub	sp, #44	; 0x2c
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007352:	2300      	movs	r3, #0
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007356:	2300      	movs	r3, #0
 8007358:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800735a:	e169      	b.n	8007630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800735c:	2201      	movs	r2, #1
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	4013      	ands	r3, r2
 800736e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	429a      	cmp	r2, r3
 8007376:	f040 8158 	bne.w	800762a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	4a9a      	ldr	r2, [pc, #616]	; (80075e8 <HAL_GPIO_Init+0x2a0>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d05e      	beq.n	8007442 <HAL_GPIO_Init+0xfa>
 8007384:	4a98      	ldr	r2, [pc, #608]	; (80075e8 <HAL_GPIO_Init+0x2a0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d875      	bhi.n	8007476 <HAL_GPIO_Init+0x12e>
 800738a:	4a98      	ldr	r2, [pc, #608]	; (80075ec <HAL_GPIO_Init+0x2a4>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d058      	beq.n	8007442 <HAL_GPIO_Init+0xfa>
 8007390:	4a96      	ldr	r2, [pc, #600]	; (80075ec <HAL_GPIO_Init+0x2a4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d86f      	bhi.n	8007476 <HAL_GPIO_Init+0x12e>
 8007396:	4a96      	ldr	r2, [pc, #600]	; (80075f0 <HAL_GPIO_Init+0x2a8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d052      	beq.n	8007442 <HAL_GPIO_Init+0xfa>
 800739c:	4a94      	ldr	r2, [pc, #592]	; (80075f0 <HAL_GPIO_Init+0x2a8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d869      	bhi.n	8007476 <HAL_GPIO_Init+0x12e>
 80073a2:	4a94      	ldr	r2, [pc, #592]	; (80075f4 <HAL_GPIO_Init+0x2ac>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d04c      	beq.n	8007442 <HAL_GPIO_Init+0xfa>
 80073a8:	4a92      	ldr	r2, [pc, #584]	; (80075f4 <HAL_GPIO_Init+0x2ac>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d863      	bhi.n	8007476 <HAL_GPIO_Init+0x12e>
 80073ae:	4a92      	ldr	r2, [pc, #584]	; (80075f8 <HAL_GPIO_Init+0x2b0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d046      	beq.n	8007442 <HAL_GPIO_Init+0xfa>
 80073b4:	4a90      	ldr	r2, [pc, #576]	; (80075f8 <HAL_GPIO_Init+0x2b0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d85d      	bhi.n	8007476 <HAL_GPIO_Init+0x12e>
 80073ba:	2b12      	cmp	r3, #18
 80073bc:	d82a      	bhi.n	8007414 <HAL_GPIO_Init+0xcc>
 80073be:	2b12      	cmp	r3, #18
 80073c0:	d859      	bhi.n	8007476 <HAL_GPIO_Init+0x12e>
 80073c2:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <HAL_GPIO_Init+0x80>)
 80073c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c8:	08007443 	.word	0x08007443
 80073cc:	0800741d 	.word	0x0800741d
 80073d0:	0800742f 	.word	0x0800742f
 80073d4:	08007471 	.word	0x08007471
 80073d8:	08007477 	.word	0x08007477
 80073dc:	08007477 	.word	0x08007477
 80073e0:	08007477 	.word	0x08007477
 80073e4:	08007477 	.word	0x08007477
 80073e8:	08007477 	.word	0x08007477
 80073ec:	08007477 	.word	0x08007477
 80073f0:	08007477 	.word	0x08007477
 80073f4:	08007477 	.word	0x08007477
 80073f8:	08007477 	.word	0x08007477
 80073fc:	08007477 	.word	0x08007477
 8007400:	08007477 	.word	0x08007477
 8007404:	08007477 	.word	0x08007477
 8007408:	08007477 	.word	0x08007477
 800740c:	08007425 	.word	0x08007425
 8007410:	08007439 	.word	0x08007439
 8007414:	4a79      	ldr	r2, [pc, #484]	; (80075fc <HAL_GPIO_Init+0x2b4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800741a:	e02c      	b.n	8007476 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	623b      	str	r3, [r7, #32]
          break;
 8007422:	e029      	b.n	8007478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	3304      	adds	r3, #4
 800742a:	623b      	str	r3, [r7, #32]
          break;
 800742c:	e024      	b.n	8007478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	3308      	adds	r3, #8
 8007434:	623b      	str	r3, [r7, #32]
          break;
 8007436:	e01f      	b.n	8007478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	330c      	adds	r3, #12
 800743e:	623b      	str	r3, [r7, #32]
          break;
 8007440:	e01a      	b.n	8007478 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d102      	bne.n	8007450 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800744a:	2304      	movs	r3, #4
 800744c:	623b      	str	r3, [r7, #32]
          break;
 800744e:	e013      	b.n	8007478 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d105      	bne.n	8007464 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007458:	2308      	movs	r3, #8
 800745a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	69fa      	ldr	r2, [r7, #28]
 8007460:	611a      	str	r2, [r3, #16]
          break;
 8007462:	e009      	b.n	8007478 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007464:	2308      	movs	r3, #8
 8007466:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	615a      	str	r2, [r3, #20]
          break;
 800746e:	e003      	b.n	8007478 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007470:	2300      	movs	r3, #0
 8007472:	623b      	str	r3, [r7, #32]
          break;
 8007474:	e000      	b.n	8007478 <HAL_GPIO_Init+0x130>
          break;
 8007476:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2bff      	cmp	r3, #255	; 0xff
 800747c:	d801      	bhi.n	8007482 <HAL_GPIO_Init+0x13a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	e001      	b.n	8007486 <HAL_GPIO_Init+0x13e>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3304      	adds	r3, #4
 8007486:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	2bff      	cmp	r3, #255	; 0xff
 800748c:	d802      	bhi.n	8007494 <HAL_GPIO_Init+0x14c>
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	e002      	b.n	800749a <HAL_GPIO_Init+0x152>
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	3b08      	subs	r3, #8
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	210f      	movs	r1, #15
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	fa01 f303 	lsl.w	r3, r1, r3
 80074a8:	43db      	mvns	r3, r3
 80074aa:	401a      	ands	r2, r3
 80074ac:	6a39      	ldr	r1, [r7, #32]
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	fa01 f303 	lsl.w	r3, r1, r3
 80074b4:	431a      	orrs	r2, r3
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 80b1 	beq.w	800762a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80074c8:	4b4d      	ldr	r3, [pc, #308]	; (8007600 <HAL_GPIO_Init+0x2b8>)
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	4a4c      	ldr	r2, [pc, #304]	; (8007600 <HAL_GPIO_Init+0x2b8>)
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	6193      	str	r3, [r2, #24]
 80074d4:	4b4a      	ldr	r3, [pc, #296]	; (8007600 <HAL_GPIO_Init+0x2b8>)
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	60bb      	str	r3, [r7, #8]
 80074de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80074e0:	4a48      	ldr	r2, [pc, #288]	; (8007604 <HAL_GPIO_Init+0x2bc>)
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	089b      	lsrs	r3, r3, #2
 80074e6:	3302      	adds	r3, #2
 80074e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	f003 0303 	and.w	r3, r3, #3
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	220f      	movs	r2, #15
 80074f8:	fa02 f303 	lsl.w	r3, r2, r3
 80074fc:	43db      	mvns	r3, r3
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4013      	ands	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a40      	ldr	r2, [pc, #256]	; (8007608 <HAL_GPIO_Init+0x2c0>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d013      	beq.n	8007534 <HAL_GPIO_Init+0x1ec>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a3f      	ldr	r2, [pc, #252]	; (800760c <HAL_GPIO_Init+0x2c4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00d      	beq.n	8007530 <HAL_GPIO_Init+0x1e8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a3e      	ldr	r2, [pc, #248]	; (8007610 <HAL_GPIO_Init+0x2c8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d007      	beq.n	800752c <HAL_GPIO_Init+0x1e4>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a3d      	ldr	r2, [pc, #244]	; (8007614 <HAL_GPIO_Init+0x2cc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d101      	bne.n	8007528 <HAL_GPIO_Init+0x1e0>
 8007524:	2303      	movs	r3, #3
 8007526:	e006      	b.n	8007536 <HAL_GPIO_Init+0x1ee>
 8007528:	2304      	movs	r3, #4
 800752a:	e004      	b.n	8007536 <HAL_GPIO_Init+0x1ee>
 800752c:	2302      	movs	r3, #2
 800752e:	e002      	b.n	8007536 <HAL_GPIO_Init+0x1ee>
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <HAL_GPIO_Init+0x1ee>
 8007534:	2300      	movs	r3, #0
 8007536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007538:	f002 0203 	and.w	r2, r2, #3
 800753c:	0092      	lsls	r2, r2, #2
 800753e:	4093      	lsls	r3, r2
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007546:	492f      	ldr	r1, [pc, #188]	; (8007604 <HAL_GPIO_Init+0x2bc>)
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	089b      	lsrs	r3, r3, #2
 800754c:	3302      	adds	r3, #2
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d006      	beq.n	800756e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007560:	4b2d      	ldr	r3, [pc, #180]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	492c      	ldr	r1, [pc, #176]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	4313      	orrs	r3, r2
 800756a:	600b      	str	r3, [r1, #0]
 800756c:	e006      	b.n	800757c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800756e:	4b2a      	ldr	r3, [pc, #168]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	43db      	mvns	r3, r3
 8007576:	4928      	ldr	r1, [pc, #160]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 8007578:	4013      	ands	r3, r2
 800757a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d006      	beq.n	8007596 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007588:	4b23      	ldr	r3, [pc, #140]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	4922      	ldr	r1, [pc, #136]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	4313      	orrs	r3, r2
 8007592:	604b      	str	r3, [r1, #4]
 8007594:	e006      	b.n	80075a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007596:	4b20      	ldr	r3, [pc, #128]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	43db      	mvns	r3, r3
 800759e:	491e      	ldr	r1, [pc, #120]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d006      	beq.n	80075be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80075b0:	4b19      	ldr	r3, [pc, #100]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	4918      	ldr	r1, [pc, #96]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	608b      	str	r3, [r1, #8]
 80075bc:	e006      	b.n	80075cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80075be:	4b16      	ldr	r3, [pc, #88]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	43db      	mvns	r3, r3
 80075c6:	4914      	ldr	r1, [pc, #80]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d021      	beq.n	800761c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80075d8:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	490e      	ldr	r1, [pc, #56]	; (8007618 <HAL_GPIO_Init+0x2d0>)
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60cb      	str	r3, [r1, #12]
 80075e4:	e021      	b.n	800762a <HAL_GPIO_Init+0x2e2>
 80075e6:	bf00      	nop
 80075e8:	10320000 	.word	0x10320000
 80075ec:	10310000 	.word	0x10310000
 80075f0:	10220000 	.word	0x10220000
 80075f4:	10210000 	.word	0x10210000
 80075f8:	10120000 	.word	0x10120000
 80075fc:	10110000 	.word	0x10110000
 8007600:	40021000 	.word	0x40021000
 8007604:	40010000 	.word	0x40010000
 8007608:	40010800 	.word	0x40010800
 800760c:	40010c00 	.word	0x40010c00
 8007610:	40011000 	.word	0x40011000
 8007614:	40011400 	.word	0x40011400
 8007618:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800761c:	4b0b      	ldr	r3, [pc, #44]	; (800764c <HAL_GPIO_Init+0x304>)
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	43db      	mvns	r3, r3
 8007624:	4909      	ldr	r1, [pc, #36]	; (800764c <HAL_GPIO_Init+0x304>)
 8007626:	4013      	ands	r3, r2
 8007628:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	3301      	adds	r3, #1
 800762e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	fa22 f303 	lsr.w	r3, r2, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	f47f ae8e 	bne.w	800735c <HAL_GPIO_Init+0x14>
  }
}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	372c      	adds	r7, #44	; 0x2c
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr
 800764c:	40010400 	.word	0x40010400

08007650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	807b      	strh	r3, [r7, #2]
 800765c:	4613      	mov	r3, r2
 800765e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007660:	787b      	ldrb	r3, [r7, #1]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007666:	887a      	ldrh	r2, [r7, #2]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800766c:	e003      	b.n	8007676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800766e:	887b      	ldrh	r3, [r7, #2]
 8007670:	041a      	lsls	r2, r3, #16
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	611a      	str	r2, [r3, #16]
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr

08007680 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007684:	4b03      	ldr	r3, [pc, #12]	; (8007694 <HAL_PWR_EnableBkUpAccess+0x14>)
 8007686:	2201      	movs	r2, #1
 8007688:	601a      	str	r2, [r3, #0]
}
 800768a:	bf00      	nop
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	420e0020 	.word	0x420e0020

08007698 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800769c:	4b03      	ldr	r3, [pc, #12]	; (80076ac <HAL_PWR_DisableBkUpAccess+0x14>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
}
 80076a2:	bf00      	nop
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	420e0020 	.word	0x420e0020

080076b0 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80076b4:	4b08      	ldr	r3, [pc, #32]	; (80076d8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a07      	ldr	r2, [pc, #28]	; (80076d8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80076ba:	f043 0302 	orr.w	r3, r3, #2
 80076be:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80076c0:	4b06      	ldr	r3, [pc, #24]	; (80076dc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	4a05      	ldr	r2, [pc, #20]	; (80076dc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80076c6:	f043 0304 	orr.w	r3, r3, #4
 80076ca:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80076cc:	bf30      	wfi
}
 80076ce:	bf00      	nop
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40007000 	.word	0x40007000
 80076dc:	e000ed00 	.word	0xe000ed00

080076e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e26c      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8087 	beq.w	800780e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007700:	4b92      	ldr	r3, [pc, #584]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f003 030c 	and.w	r3, r3, #12
 8007708:	2b04      	cmp	r3, #4
 800770a:	d00c      	beq.n	8007726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800770c:	4b8f      	ldr	r3, [pc, #572]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f003 030c 	and.w	r3, r3, #12
 8007714:	2b08      	cmp	r3, #8
 8007716:	d112      	bne.n	800773e <HAL_RCC_OscConfig+0x5e>
 8007718:	4b8c      	ldr	r3, [pc, #560]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007724:	d10b      	bne.n	800773e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007726:	4b89      	ldr	r3, [pc, #548]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d06c      	beq.n	800780c <HAL_RCC_OscConfig+0x12c>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d168      	bne.n	800780c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e246      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007746:	d106      	bne.n	8007756 <HAL_RCC_OscConfig+0x76>
 8007748:	4b80      	ldr	r3, [pc, #512]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a7f      	ldr	r2, [pc, #508]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 800774e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007752:	6013      	str	r3, [r2, #0]
 8007754:	e02e      	b.n	80077b4 <HAL_RCC_OscConfig+0xd4>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10c      	bne.n	8007778 <HAL_RCC_OscConfig+0x98>
 800775e:	4b7b      	ldr	r3, [pc, #492]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a7a      	ldr	r2, [pc, #488]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	4b78      	ldr	r3, [pc, #480]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a77      	ldr	r2, [pc, #476]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	e01d      	b.n	80077b4 <HAL_RCC_OscConfig+0xd4>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007780:	d10c      	bne.n	800779c <HAL_RCC_OscConfig+0xbc>
 8007782:	4b72      	ldr	r3, [pc, #456]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a71      	ldr	r2, [pc, #452]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	4b6f      	ldr	r3, [pc, #444]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a6e      	ldr	r2, [pc, #440]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	e00b      	b.n	80077b4 <HAL_RCC_OscConfig+0xd4>
 800779c:	4b6b      	ldr	r3, [pc, #428]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a6a      	ldr	r2, [pc, #424]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 80077a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	4b68      	ldr	r3, [pc, #416]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a67      	ldr	r2, [pc, #412]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 80077ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d013      	beq.n	80077e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077bc:	f7fe ffa4 	bl	8006708 <HAL_GetTick>
 80077c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077c2:	e008      	b.n	80077d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077c4:	f7fe ffa0 	bl	8006708 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	2b64      	cmp	r3, #100	; 0x64
 80077d0:	d901      	bls.n	80077d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e1fa      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077d6:	4b5d      	ldr	r3, [pc, #372]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0f0      	beq.n	80077c4 <HAL_RCC_OscConfig+0xe4>
 80077e2:	e014      	b.n	800780e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e4:	f7fe ff90 	bl	8006708 <HAL_GetTick>
 80077e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ea:	e008      	b.n	80077fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077ec:	f7fe ff8c 	bl	8006708 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b64      	cmp	r3, #100	; 0x64
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e1e6      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077fe:	4b53      	ldr	r3, [pc, #332]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1f0      	bne.n	80077ec <HAL_RCC_OscConfig+0x10c>
 800780a:	e000      	b.n	800780e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800780c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d063      	beq.n	80078e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800781a:	4b4c      	ldr	r3, [pc, #304]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f003 030c 	and.w	r3, r3, #12
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007826:	4b49      	ldr	r3, [pc, #292]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f003 030c 	and.w	r3, r3, #12
 800782e:	2b08      	cmp	r3, #8
 8007830:	d11c      	bne.n	800786c <HAL_RCC_OscConfig+0x18c>
 8007832:	4b46      	ldr	r3, [pc, #280]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d116      	bne.n	800786c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800783e:	4b43      	ldr	r3, [pc, #268]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b00      	cmp	r3, #0
 8007848:	d005      	beq.n	8007856 <HAL_RCC_OscConfig+0x176>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d001      	beq.n	8007856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e1ba      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007856:	4b3d      	ldr	r3, [pc, #244]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4939      	ldr	r1, [pc, #228]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007866:	4313      	orrs	r3, r2
 8007868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800786a:	e03a      	b.n	80078e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d020      	beq.n	80078b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007874:	4b36      	ldr	r3, [pc, #216]	; (8007950 <HAL_RCC_OscConfig+0x270>)
 8007876:	2201      	movs	r2, #1
 8007878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787a:	f7fe ff45 	bl	8006708 <HAL_GetTick>
 800787e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007882:	f7fe ff41 	bl	8006708 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e19b      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007894:	4b2d      	ldr	r3, [pc, #180]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0f0      	beq.n	8007882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a0:	4b2a      	ldr	r3, [pc, #168]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	4927      	ldr	r1, [pc, #156]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	600b      	str	r3, [r1, #0]
 80078b4:	e015      	b.n	80078e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078b6:	4b26      	ldr	r3, [pc, #152]	; (8007950 <HAL_RCC_OscConfig+0x270>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078bc:	f7fe ff24 	bl	8006708 <HAL_GetTick>
 80078c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078c2:	e008      	b.n	80078d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078c4:	f7fe ff20 	bl	8006708 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e17a      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078d6:	4b1d      	ldr	r3, [pc, #116]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1f0      	bne.n	80078c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0308 	and.w	r3, r3, #8
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d03a      	beq.n	8007964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d019      	beq.n	800792a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078f6:	4b17      	ldr	r3, [pc, #92]	; (8007954 <HAL_RCC_OscConfig+0x274>)
 80078f8:	2201      	movs	r2, #1
 80078fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078fc:	f7fe ff04 	bl	8006708 <HAL_GetTick>
 8007900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007902:	e008      	b.n	8007916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007904:	f7fe ff00 	bl	8006708 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e15a      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007916:	4b0d      	ldr	r3, [pc, #52]	; (800794c <HAL_RCC_OscConfig+0x26c>)
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0f0      	beq.n	8007904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007922:	2001      	movs	r0, #1
 8007924:	f000 fad8 	bl	8007ed8 <RCC_Delay>
 8007928:	e01c      	b.n	8007964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800792a:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <HAL_RCC_OscConfig+0x274>)
 800792c:	2200      	movs	r2, #0
 800792e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007930:	f7fe feea 	bl	8006708 <HAL_GetTick>
 8007934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007936:	e00f      	b.n	8007958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007938:	f7fe fee6 	bl	8006708 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b02      	cmp	r3, #2
 8007944:	d908      	bls.n	8007958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e140      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
 800794a:	bf00      	nop
 800794c:	40021000 	.word	0x40021000
 8007950:	42420000 	.word	0x42420000
 8007954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007958:	4b9e      	ldr	r3, [pc, #632]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e9      	bne.n	8007938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 80a6 	beq.w	8007abe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007972:	2300      	movs	r3, #0
 8007974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007976:	4b97      	ldr	r3, [pc, #604]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10d      	bne.n	800799e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007982:	4b94      	ldr	r3, [pc, #592]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	4a93      	ldr	r2, [pc, #588]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800798c:	61d3      	str	r3, [r2, #28]
 800798e:	4b91      	ldr	r3, [pc, #580]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007996:	60bb      	str	r3, [r7, #8]
 8007998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800799a:	2301      	movs	r3, #1
 800799c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800799e:	4b8e      	ldr	r3, [pc, #568]	; (8007bd8 <HAL_RCC_OscConfig+0x4f8>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d118      	bne.n	80079dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079aa:	4b8b      	ldr	r3, [pc, #556]	; (8007bd8 <HAL_RCC_OscConfig+0x4f8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a8a      	ldr	r2, [pc, #552]	; (8007bd8 <HAL_RCC_OscConfig+0x4f8>)
 80079b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079b6:	f7fe fea7 	bl	8006708 <HAL_GetTick>
 80079ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079bc:	e008      	b.n	80079d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079be:	f7fe fea3 	bl	8006708 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b64      	cmp	r3, #100	; 0x64
 80079ca:	d901      	bls.n	80079d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e0fd      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079d0:	4b81      	ldr	r3, [pc, #516]	; (8007bd8 <HAL_RCC_OscConfig+0x4f8>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d0f0      	beq.n	80079be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d106      	bne.n	80079f2 <HAL_RCC_OscConfig+0x312>
 80079e4:	4b7b      	ldr	r3, [pc, #492]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	4a7a      	ldr	r2, [pc, #488]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	6213      	str	r3, [r2, #32]
 80079f0:	e02d      	b.n	8007a4e <HAL_RCC_OscConfig+0x36e>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10c      	bne.n	8007a14 <HAL_RCC_OscConfig+0x334>
 80079fa:	4b76      	ldr	r3, [pc, #472]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	4a75      	ldr	r2, [pc, #468]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a00:	f023 0301 	bic.w	r3, r3, #1
 8007a04:	6213      	str	r3, [r2, #32]
 8007a06:	4b73      	ldr	r3, [pc, #460]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	4a72      	ldr	r2, [pc, #456]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a0c:	f023 0304 	bic.w	r3, r3, #4
 8007a10:	6213      	str	r3, [r2, #32]
 8007a12:	e01c      	b.n	8007a4e <HAL_RCC_OscConfig+0x36e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	2b05      	cmp	r3, #5
 8007a1a:	d10c      	bne.n	8007a36 <HAL_RCC_OscConfig+0x356>
 8007a1c:	4b6d      	ldr	r3, [pc, #436]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	4a6c      	ldr	r2, [pc, #432]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a22:	f043 0304 	orr.w	r3, r3, #4
 8007a26:	6213      	str	r3, [r2, #32]
 8007a28:	4b6a      	ldr	r3, [pc, #424]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	4a69      	ldr	r2, [pc, #420]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a2e:	f043 0301 	orr.w	r3, r3, #1
 8007a32:	6213      	str	r3, [r2, #32]
 8007a34:	e00b      	b.n	8007a4e <HAL_RCC_OscConfig+0x36e>
 8007a36:	4b67      	ldr	r3, [pc, #412]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	4a66      	ldr	r2, [pc, #408]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a3c:	f023 0301 	bic.w	r3, r3, #1
 8007a40:	6213      	str	r3, [r2, #32]
 8007a42:	4b64      	ldr	r3, [pc, #400]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	4a63      	ldr	r2, [pc, #396]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a48:	f023 0304 	bic.w	r3, r3, #4
 8007a4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d015      	beq.n	8007a82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a56:	f7fe fe57 	bl	8006708 <HAL_GetTick>
 8007a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a5c:	e00a      	b.n	8007a74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a5e:	f7fe fe53 	bl	8006708 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d901      	bls.n	8007a74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e0ab      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a74:	4b57      	ldr	r3, [pc, #348]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0ee      	beq.n	8007a5e <HAL_RCC_OscConfig+0x37e>
 8007a80:	e014      	b.n	8007aac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a82:	f7fe fe41 	bl	8006708 <HAL_GetTick>
 8007a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a88:	e00a      	b.n	8007aa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a8a:	f7fe fe3d 	bl	8006708 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e095      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa0:	4b4c      	ldr	r3, [pc, #304]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1ee      	bne.n	8007a8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d105      	bne.n	8007abe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ab2:	4b48      	ldr	r3, [pc, #288]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	4a47      	ldr	r2, [pc, #284]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007abc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 8081 	beq.w	8007bca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ac8:	4b42      	ldr	r3, [pc, #264]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f003 030c 	and.w	r3, r3, #12
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d061      	beq.n	8007b98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d146      	bne.n	8007b6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007adc:	4b3f      	ldr	r3, [pc, #252]	; (8007bdc <HAL_RCC_OscConfig+0x4fc>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae2:	f7fe fe11 	bl	8006708 <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ae8:	e008      	b.n	8007afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aea:	f7fe fe0d 	bl	8006708 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e067      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007afc:	4b35      	ldr	r3, [pc, #212]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1f0      	bne.n	8007aea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b10:	d108      	bne.n	8007b24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007b12:	4b30      	ldr	r3, [pc, #192]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	492d      	ldr	r1, [pc, #180]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b24:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a19      	ldr	r1, [r3, #32]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	430b      	orrs	r3, r1
 8007b36:	4927      	ldr	r1, [pc, #156]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b3c:	4b27      	ldr	r3, [pc, #156]	; (8007bdc <HAL_RCC_OscConfig+0x4fc>)
 8007b3e:	2201      	movs	r2, #1
 8007b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b42:	f7fe fde1 	bl	8006708 <HAL_GetTick>
 8007b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b48:	e008      	b.n	8007b5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b4a:	f7fe fddd 	bl	8006708 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e037      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b5c:	4b1d      	ldr	r3, [pc, #116]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0f0      	beq.n	8007b4a <HAL_RCC_OscConfig+0x46a>
 8007b68:	e02f      	b.n	8007bca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b6a:	4b1c      	ldr	r3, [pc, #112]	; (8007bdc <HAL_RCC_OscConfig+0x4fc>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b70:	f7fe fdca 	bl	8006708 <HAL_GetTick>
 8007b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b76:	e008      	b.n	8007b8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b78:	f7fe fdc6 	bl	8006708 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e020      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b8a:	4b12      	ldr	r3, [pc, #72]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1f0      	bne.n	8007b78 <HAL_RCC_OscConfig+0x498>
 8007b96:	e018      	b.n	8007bca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d101      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e013      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007ba4:	4b0b      	ldr	r3, [pc, #44]	; (8007bd4 <HAL_RCC_OscConfig+0x4f4>)
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d106      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d001      	beq.n	8007bca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e000      	b.n	8007bcc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40021000 	.word	0x40021000
 8007bd8:	40007000 	.word	0x40007000
 8007bdc:	42420060 	.word	0x42420060

08007be0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e0d0      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007bf4:	4b6a      	ldr	r3, [pc, #424]	; (8007da0 <HAL_RCC_ClockConfig+0x1c0>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d910      	bls.n	8007c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c02:	4b67      	ldr	r3, [pc, #412]	; (8007da0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f023 0207 	bic.w	r2, r3, #7
 8007c0a:	4965      	ldr	r1, [pc, #404]	; (8007da0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c12:	4b63      	ldr	r3, [pc, #396]	; (8007da0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0307 	and.w	r3, r3, #7
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d001      	beq.n	8007c24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e0b8      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d020      	beq.n	8007c72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c3c:	4b59      	ldr	r3, [pc, #356]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	4a58      	ldr	r2, [pc, #352]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007c46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c54:	4b53      	ldr	r3, [pc, #332]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	4a52      	ldr	r2, [pc, #328]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007c5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c60:	4b50      	ldr	r3, [pc, #320]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	494d      	ldr	r1, [pc, #308]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d040      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d107      	bne.n	8007c96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c86:	4b47      	ldr	r3, [pc, #284]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d115      	bne.n	8007cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e07f      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d107      	bne.n	8007cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c9e:	4b41      	ldr	r3, [pc, #260]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d109      	bne.n	8007cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e073      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cae:	4b3d      	ldr	r3, [pc, #244]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e06b      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cbe:	4b39      	ldr	r3, [pc, #228]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f023 0203 	bic.w	r2, r3, #3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	4936      	ldr	r1, [pc, #216]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cd0:	f7fe fd1a 	bl	8006708 <HAL_GetTick>
 8007cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cd6:	e00a      	b.n	8007cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cd8:	f7fe fd16 	bl	8006708 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e053      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cee:	4b2d      	ldr	r3, [pc, #180]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f003 020c 	and.w	r2, r3, #12
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d1eb      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d00:	4b27      	ldr	r3, [pc, #156]	; (8007da0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d210      	bcs.n	8007d30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d0e:	4b24      	ldr	r3, [pc, #144]	; (8007da0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f023 0207 	bic.w	r2, r3, #7
 8007d16:	4922      	ldr	r1, [pc, #136]	; (8007da0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d1e:	4b20      	ldr	r3, [pc, #128]	; (8007da0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d001      	beq.n	8007d30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e032      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d008      	beq.n	8007d4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d3c:	4b19      	ldr	r3, [pc, #100]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	4916      	ldr	r1, [pc, #88]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007d5a:	4b12      	ldr	r3, [pc, #72]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	490e      	ldr	r1, [pc, #56]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d6e:	f000 f821 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8007d72:	4602      	mov	r2, r0
 8007d74:	4b0b      	ldr	r3, [pc, #44]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	091b      	lsrs	r3, r3, #4
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	490a      	ldr	r1, [pc, #40]	; (8007da8 <HAL_RCC_ClockConfig+0x1c8>)
 8007d80:	5ccb      	ldrb	r3, [r1, r3]
 8007d82:	fa22 f303 	lsr.w	r3, r2, r3
 8007d86:	4a09      	ldr	r2, [pc, #36]	; (8007dac <HAL_RCC_ClockConfig+0x1cc>)
 8007d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <HAL_RCC_ClockConfig+0x1d0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe fc78 	bl	8006684 <HAL_InitTick>

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	40022000 	.word	0x40022000
 8007da4:	40021000 	.word	0x40021000
 8007da8:	0800be0c 	.word	0x0800be0c
 8007dac:	20000000 	.word	0x20000000
 8007db0:	2000007c 	.word	0x2000007c

08007db4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007db4:	b490      	push	{r4, r7}
 8007db6:	b08a      	sub	sp, #40	; 0x28
 8007db8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007dba:	4b2a      	ldr	r3, [pc, #168]	; (8007e64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007dbc:	1d3c      	adds	r4, r7, #4
 8007dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007dc4:	f240 2301 	movw	r3, #513	; 0x201
 8007dc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61fb      	str	r3, [r7, #28]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007dde:	4b22      	ldr	r3, [pc, #136]	; (8007e68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	f003 030c 	and.w	r3, r3, #12
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d002      	beq.n	8007df4 <HAL_RCC_GetSysClockFreq+0x40>
 8007dee:	2b08      	cmp	r3, #8
 8007df0:	d003      	beq.n	8007dfa <HAL_RCC_GetSysClockFreq+0x46>
 8007df2:	e02d      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007df4:	4b1d      	ldr	r3, [pc, #116]	; (8007e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007df6:	623b      	str	r3, [r7, #32]
      break;
 8007df8:	e02d      	b.n	8007e56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	0c9b      	lsrs	r3, r3, #18
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007e06:	4413      	add	r3, r2
 8007e08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007e0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d013      	beq.n	8007e40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007e18:	4b13      	ldr	r3, [pc, #76]	; (8007e68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	0c5b      	lsrs	r3, r3, #17
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007e26:	4413      	add	r3, r2
 8007e28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007e2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	4a0e      	ldr	r2, [pc, #56]	; (8007e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e32:	fb02 f203 	mul.w	r2, r2, r3
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3e:	e004      	b.n	8007e4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	4a0b      	ldr	r2, [pc, #44]	; (8007e70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007e44:	fb02 f303 	mul.w	r3, r2, r3
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	623b      	str	r3, [r7, #32]
      break;
 8007e4e:	e002      	b.n	8007e56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007e50:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e52:	623b      	str	r3, [r7, #32]
      break;
 8007e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e56:	6a3b      	ldr	r3, [r7, #32]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3728      	adds	r7, #40	; 0x28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bc90      	pop	{r4, r7}
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	0800bb38 	.word	0x0800bb38
 8007e68:	40021000 	.word	0x40021000
 8007e6c:	007a1200 	.word	0x007a1200
 8007e70:	003d0900 	.word	0x003d0900

08007e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <HAL_RCC_GetHCLKFreq+0x10>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bc80      	pop	{r7}
 8007e82:	4770      	bx	lr
 8007e84:	20000000 	.word	0x20000000

08007e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e8c:	f7ff fff2 	bl	8007e74 <HAL_RCC_GetHCLKFreq>
 8007e90:	4602      	mov	r2, r0
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	0a1b      	lsrs	r3, r3, #8
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	4903      	ldr	r1, [pc, #12]	; (8007eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e9e:	5ccb      	ldrb	r3, [r1, r3]
 8007ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40021000 	.word	0x40021000
 8007eac:	0800be1c 	.word	0x0800be1c

08007eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007eb4:	f7ff ffde 	bl	8007e74 <HAL_RCC_GetHCLKFreq>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	0adb      	lsrs	r3, r3, #11
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	4903      	ldr	r1, [pc, #12]	; (8007ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ec6:	5ccb      	ldrb	r3, [r1, r3]
 8007ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40021000 	.word	0x40021000
 8007ed4:	0800be1c 	.word	0x0800be1c

08007ed8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007ee0:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <RCC_Delay+0x34>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a0a      	ldr	r2, [pc, #40]	; (8007f10 <RCC_Delay+0x38>)
 8007ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eea:	0a5b      	lsrs	r3, r3, #9
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	fb02 f303 	mul.w	r3, r2, r3
 8007ef2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007ef4:	bf00      	nop
  }
  while (Delay --);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	1e5a      	subs	r2, r3, #1
 8007efa:	60fa      	str	r2, [r7, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1f9      	bne.n	8007ef4 <RCC_Delay+0x1c>
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr
 8007f0c:	20000000 	.word	0x20000000
 8007f10:	10624dd3 	.word	0x10624dd3

08007f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	613b      	str	r3, [r7, #16]
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d07d      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007f30:	2300      	movs	r3, #0
 8007f32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f34:	4b4f      	ldr	r3, [pc, #316]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10d      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f40:	4b4c      	ldr	r3, [pc, #304]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	4a4b      	ldr	r2, [pc, #300]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f4a:	61d3      	str	r3, [r2, #28]
 8007f4c:	4b49      	ldr	r3, [pc, #292]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f5c:	4b46      	ldr	r3, [pc, #280]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d118      	bne.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f68:	4b43      	ldr	r3, [pc, #268]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a42      	ldr	r2, [pc, #264]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f74:	f7fe fbc8 	bl	8006708 <HAL_GetTick>
 8007f78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f7a:	e008      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f7c:	f7fe fbc4 	bl	8006708 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b64      	cmp	r3, #100	; 0x64
 8007f88:	d901      	bls.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e06d      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f8e:	4b3a      	ldr	r3, [pc, #232]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0f0      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f9a:	4b36      	ldr	r3, [pc, #216]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d02e      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d027      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fb8:	4b2e      	ldr	r3, [pc, #184]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007fc2:	4b2e      	ldr	r3, [pc, #184]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007fc8:	4b2c      	ldr	r3, [pc, #176]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007fce:	4a29      	ldr	r2, [pc, #164]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d014      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fde:	f7fe fb93 	bl	8006708 <HAL_GetTick>
 8007fe2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fe4:	e00a      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fe6:	f7fe fb8f 	bl	8006708 <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d901      	bls.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e036      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ffc:	4b1d      	ldr	r3, [pc, #116]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	f003 0302 	and.w	r3, r3, #2
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0ee      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008008:	4b1a      	ldr	r3, [pc, #104]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800800a:	6a1b      	ldr	r3, [r3, #32]
 800800c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	4917      	ldr	r1, [pc, #92]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008016:	4313      	orrs	r3, r2
 8008018:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d105      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008020:	4b14      	ldr	r3, [pc, #80]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	4a13      	ldr	r2, [pc, #76]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800802a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d008      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008038:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	490b      	ldr	r1, [pc, #44]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008046:	4313      	orrs	r3, r2
 8008048:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0310 	and.w	r3, r3, #16
 8008052:	2b00      	cmp	r3, #0
 8008054:	d008      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008056:	4b07      	ldr	r3, [pc, #28]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	4904      	ldr	r1, [pc, #16]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008064:	4313      	orrs	r3, r2
 8008066:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	40021000 	.word	0x40021000
 8008078:	40007000 	.word	0x40007000
 800807c:	42420440 	.word	0x42420440

08008080 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008080:	b590      	push	{r4, r7, lr}
 8008082:	b08d      	sub	sp, #52	; 0x34
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008088:	4b5a      	ldr	r3, [pc, #360]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800808a:	f107 040c 	add.w	r4, r7, #12
 800808e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008094:	f240 2301 	movw	r3, #513	; 0x201
 8008098:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
 800809e:	2300      	movs	r3, #0
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a2:	2300      	movs	r3, #0
 80080a4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	61fb      	str	r3, [r7, #28]
 80080aa:	2300      	movs	r3, #0
 80080ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b10      	cmp	r3, #16
 80080b2:	d00a      	beq.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b10      	cmp	r3, #16
 80080b8:	f200 8091 	bhi.w	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d04c      	beq.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d07c      	beq.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80080c8:	e089      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80080ca:	4b4b      	ldr	r3, [pc, #300]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80080d0:	4b49      	ldr	r3, [pc, #292]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8082 	beq.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	0c9b      	lsrs	r3, r3, #18
 80080e2:	f003 030f 	and.w	r3, r3, #15
 80080e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80080ea:	4413      	add	r3, r2
 80080ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80080f0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d018      	beq.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80080fc:	4b3e      	ldr	r3, [pc, #248]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	0c5b      	lsrs	r3, r3, #17
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800810a:	4413      	add	r3, r2
 800810c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00d      	beq.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800811c:	4a37      	ldr	r2, [pc, #220]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	fbb2 f2f3 	udiv	r2, r2, r3
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	fb02 f303 	mul.w	r3, r2, r3
 800812a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800812c:	e004      	b.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	4a33      	ldr	r2, [pc, #204]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8008132:	fb02 f303 	mul.w	r3, r2, r3
 8008136:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008138:	4b2f      	ldr	r3, [pc, #188]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008144:	d102      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8008146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008148:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800814a:	e04a      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	4a2c      	ldr	r2, [pc, #176]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8008152:	fba2 2303 	umull	r2, r3, r2, r3
 8008156:	085b      	lsrs	r3, r3, #1
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800815a:	e042      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800815c:	4b26      	ldr	r3, [pc, #152]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816c:	d108      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8008178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800817c:	62bb      	str	r3, [r7, #40]	; 0x28
 800817e:	e01f      	b.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800818a:	d109      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800818c:	4b1a      	ldr	r3, [pc, #104]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	f003 0302 	and.w	r3, r3, #2
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8008198:	f649 4340 	movw	r3, #40000	; 0x9c40
 800819c:	62bb      	str	r3, [r7, #40]	; 0x28
 800819e:	e00f      	b.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081aa:	d11c      	bne.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80081ac:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d016      	beq.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80081b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80081bc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80081be:	e012      	b.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80081c0:	e011      	b.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80081c2:	f7ff fe75 	bl	8007eb0 <HAL_RCC_GetPCLK2Freq>
 80081c6:	4602      	mov	r2, r0
 80081c8:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	0b9b      	lsrs	r3, r3, #14
 80081ce:	f003 0303 	and.w	r3, r3, #3
 80081d2:	3301      	adds	r3, #1
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80081dc:	e004      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80081de:	bf00      	nop
 80081e0:	e002      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80081e2:	bf00      	nop
 80081e4:	e000      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80081e6:	bf00      	nop
    }
  }
  return (frequency);
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3734      	adds	r7, #52	; 0x34
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd90      	pop	{r4, r7, pc}
 80081f2:	bf00      	nop
 80081f4:	0800bb48 	.word	0x0800bb48
 80081f8:	40021000 	.word	0x40021000
 80081fc:	007a1200 	.word	0x007a1200
 8008200:	003d0900 	.word	0x003d0900
 8008204:	aaaaaaab 	.word	0xaaaaaaab

08008208 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e084      	b.n	8008328 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	7c5b      	ldrb	r3, [r3, #17]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d105      	bne.n	8008234 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7fd f90c 	bl	800544c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 faa2 	bl	8008784 <HAL_RTC_WaitForSynchro>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2204      	movs	r2, #4
 800824a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e06b      	b.n	8008328 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fb5b 	bl	800890c <RTC_EnterInitMode>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d004      	beq.n	8008266 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2204      	movs	r2, #4
 8008260:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e060      	b.n	8008328 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0207 	bic.w	r2, r2, #7
 8008274:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800827e:	4b2c      	ldr	r3, [pc, #176]	; (8008330 <HAL_RTC_Init+0x128>)
 8008280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008282:	4a2b      	ldr	r2, [pc, #172]	; (8008330 <HAL_RTC_Init+0x128>)
 8008284:	f023 0301 	bic.w	r3, r3, #1
 8008288:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800828a:	4b29      	ldr	r3, [pc, #164]	; (8008330 <HAL_RTC_Init+0x128>)
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	4926      	ldr	r1, [pc, #152]	; (8008330 <HAL_RTC_Init+0x128>)
 8008298:	4313      	orrs	r3, r2
 800829a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a4:	d003      	beq.n	80082ae <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	e00e      	b.n	80082cc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80082ae:	2001      	movs	r0, #1
 80082b0:	f7ff fee6 	bl	8008080 <HAL_RCCEx_GetPeriphCLKFreq>
 80082b4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d104      	bne.n	80082c6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2204      	movs	r2, #4
 80082c0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e030      	b.n	8008328 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f023 010f 	bic.w	r1, r3, #15
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	0c1a      	lsrs	r2, r3, #16
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	0c1b      	lsrs	r3, r3, #16
 80082ea:	041b      	lsls	r3, r3, #16
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	b291      	uxth	r1, r2
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	430b      	orrs	r3, r1
 80082f6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fb2f 	bl	800895c <RTC_ExitInitMode>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d004      	beq.n	800830e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2204      	movs	r2, #4
 8008308:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e00c      	b.n	8008328 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8008326:	2300      	movs	r3, #0
  }
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	40006c00 	.word	0x40006c00

08008334 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	2300      	movs	r3, #0
 8008346:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <HAL_RTC_SetTime+0x20>
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e080      	b.n	800845a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	7c1b      	ldrb	r3, [r3, #16]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d101      	bne.n	8008364 <HAL_RTC_SetTime+0x30>
 8008360:	2302      	movs	r3, #2
 8008362:	e07a      	b.n	800845a <HAL_RTC_SetTime+0x126>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2201      	movs	r2, #1
 8008368:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2202      	movs	r2, #2
 800836e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d113      	bne.n	800839e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008380:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	785b      	ldrb	r3, [r3, #1]
 8008388:	4619      	mov	r1, r3
 800838a:	460b      	mov	r3, r1
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	1a5b      	subs	r3, r3, r1
 8008390:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008392:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008398:	4413      	add	r3, r2
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	e01e      	b.n	80083dc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fb1f 	bl	80089e6 <RTC_Bcd2ToByte>
 80083a8:	4603      	mov	r3, r0
 80083aa:	461a      	mov	r2, r3
 80083ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80083b0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	785b      	ldrb	r3, [r3, #1]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fb14 	bl	80089e6 <RTC_Bcd2ToByte>
 80083be:	4603      	mov	r3, r0
 80083c0:	461a      	mov	r2, r3
 80083c2:	4613      	mov	r3, r2
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80083ca:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	789b      	ldrb	r3, [r3, #2]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 fb08 	bl	80089e6 <RTC_Bcd2ToByte>
 80083d6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80083d8:	4423      	add	r3, r4
 80083da:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80083dc:	6979      	ldr	r1, [r7, #20]
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 fa2d 	bl	800883e <RTC_WriteTimeCounter>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2204      	movs	r2, #4
 80083ee:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e02f      	b.n	800845a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0205 	bic.w	r2, r2, #5
 8008408:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 fa3e 	bl	800888c <RTC_ReadAlarmCounter>
 8008410:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008418:	d018      	beq.n	800844c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	429a      	cmp	r2, r3
 8008420:	d214      	bcs.n	800844c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008428:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800842c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800842e:	6939      	ldr	r1, [r7, #16]
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 fa44 	bl	80088be <RTC_WriteAlarmCounter>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d007      	beq.n	800844c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2204      	movs	r2, #4
 8008440:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e006      	b.n	800845a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2201      	movs	r2, #1
 8008450:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8008458:	2300      	movs	r3, #0
  }
}
 800845a:	4618      	mov	r0, r3
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	bd90      	pop	{r4, r7, pc}
	...

08008464 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	61bb      	str	r3, [r7, #24]
 8008474:	2300      	movs	r3, #0
 8008476:	61fb      	str	r3, [r7, #28]
 8008478:	2300      	movs	r3, #0
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	2300      	movs	r3, #0
 800847e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <HAL_RTC_GetTime+0x28>
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e0b5      	b.n	80085fc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e0ac      	b.n	80085fc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 f99b 	bl	80087de <RTC_ReadTimeCounter>
 80084a8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	4a55      	ldr	r2, [pc, #340]	; (8008604 <HAL_RTC_GetTime+0x1a0>)
 80084ae:	fba2 2303 	umull	r2, r3, r2, r3
 80084b2:	0adb      	lsrs	r3, r3, #11
 80084b4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80084b6:	69ba      	ldr	r2, [r7, #24]
 80084b8:	4b52      	ldr	r3, [pc, #328]	; (8008604 <HAL_RTC_GetTime+0x1a0>)
 80084ba:	fba3 1302 	umull	r1, r3, r3, r2
 80084be:	0adb      	lsrs	r3, r3, #11
 80084c0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80084c4:	fb01 f303 	mul.w	r3, r1, r3
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	4a4f      	ldr	r2, [pc, #316]	; (8008608 <HAL_RTC_GetTime+0x1a4>)
 80084cc:	fba2 2303 	umull	r2, r3, r2, r3
 80084d0:	095b      	lsrs	r3, r3, #5
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	4a4a      	ldr	r2, [pc, #296]	; (8008604 <HAL_RTC_GetTime+0x1a0>)
 80084dc:	fba2 1203 	umull	r1, r2, r2, r3
 80084e0:	0ad2      	lsrs	r2, r2, #11
 80084e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80084e6:	fb01 f202 	mul.w	r2, r1, r2
 80084ea:	1a9a      	subs	r2, r3, r2
 80084ec:	4b46      	ldr	r3, [pc, #280]	; (8008608 <HAL_RTC_GetTime+0x1a4>)
 80084ee:	fba3 1302 	umull	r1, r3, r3, r2
 80084f2:	0959      	lsrs	r1, r3, #5
 80084f4:	460b      	mov	r3, r1
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	1a5b      	subs	r3, r3, r1
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	1ad1      	subs	r1, r2, r3
 80084fe:	b2ca      	uxtb	r2, r1
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2b17      	cmp	r3, #23
 8008508:	d955      	bls.n	80085b6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	4a3f      	ldr	r2, [pc, #252]	; (800860c <HAL_RTC_GetTime+0x1a8>)
 800850e:	fba2 2303 	umull	r2, r3, r2, r3
 8008512:	091b      	lsrs	r3, r3, #4
 8008514:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8008516:	6939      	ldr	r1, [r7, #16]
 8008518:	4b3c      	ldr	r3, [pc, #240]	; (800860c <HAL_RTC_GetTime+0x1a8>)
 800851a:	fba3 2301 	umull	r2, r3, r3, r1
 800851e:	091a      	lsrs	r2, r3, #4
 8008520:	4613      	mov	r3, r2
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	4413      	add	r3, r2
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	1aca      	subs	r2, r1, r3
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f9ab 	bl	800888c <RTC_ReadAlarmCounter>
 8008536:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853e:	d008      	beq.n	8008552 <HAL_RTC_GetTime+0xee>
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	429a      	cmp	r2, r3
 8008546:	d904      	bls.n	8008552 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	61fb      	str	r3, [r7, #28]
 8008550:	e002      	b.n	8008558 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8008552:	f04f 33ff 	mov.w	r3, #4294967295
 8008556:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	4a2d      	ldr	r2, [pc, #180]	; (8008610 <HAL_RTC_GetTime+0x1ac>)
 800855c:	fb02 f303 	mul.w	r3, r2, r3
 8008560:	69ba      	ldr	r2, [r7, #24]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008566:	69b9      	ldr	r1, [r7, #24]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 f968 	bl	800883e <RTC_WriteTimeCounter>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e041      	b.n	80085fc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857e:	d00c      	beq.n	800859a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	4413      	add	r3, r2
 8008586:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008588:	69f9      	ldr	r1, [r7, #28]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 f997 	bl	80088be <RTC_WriteAlarmCounter>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e030      	b.n	80085fc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800859a:	69f9      	ldr	r1, [r7, #28]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f98e 	bl	80088be <RTC_WriteAlarmCounter>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e027      	b.n	80085fc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80085ac:	6979      	ldr	r1, [r7, #20]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 fa36 	bl	8008a20 <RTC_DateUpdate>
 80085b4:	e003      	b.n	80085be <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d01a      	beq.n	80085fa <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 f9ef 	bl	80089ac <RTC_ByteToBcd2>
 80085ce:	4603      	mov	r3, r0
 80085d0:	461a      	mov	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f9e6 	bl	80089ac <RTC_ByteToBcd2>
 80085e0:	4603      	mov	r3, r0
 80085e2:	461a      	mov	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	789b      	ldrb	r3, [r3, #2]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 f9dd 	bl	80089ac <RTC_ByteToBcd2>
 80085f2:	4603      	mov	r3, r0
 80085f4:	461a      	mov	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3720      	adds	r7, #32
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	91a2b3c5 	.word	0x91a2b3c5
 8008608:	88888889 	.word	0x88888889
 800860c:	aaaaaaab 	.word	0xaaaaaaab
 8008610:	00015180 	.word	0x00015180

08008614 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008614:	b590      	push	{r4, r7, lr}
 8008616:	b089      	sub	sp, #36	; 0x24
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8008620:	2300      	movs	r3, #0
 8008622:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8008624:	f107 0314 	add.w	r3, r7, #20
 8008628:	2100      	movs	r1, #0
 800862a:	460a      	mov	r2, r1
 800862c:	801a      	strh	r2, [r3, #0]
 800862e:	460a      	mov	r2, r1
 8008630:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <HAL_RTC_SetAlarm_IT+0x2a>
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e099      	b.n	8008776 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	7c1b      	ldrb	r3, [r3, #16]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d101      	bne.n	800864e <HAL_RTC_SetAlarm_IT+0x3a>
 800864a:	2302      	movs	r3, #2
 800864c:	e093      	b.n	8008776 <HAL_RTC_SetAlarm_IT+0x162>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2201      	movs	r2, #1
 8008652:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2202      	movs	r2, #2
 8008658:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800865a:	f107 0314 	add.w	r3, r7, #20
 800865e:	2200      	movs	r2, #0
 8008660:	4619      	mov	r1, r3
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f7ff fefe 	bl	8008464 <HAL_RTC_GetTime>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e081      	b.n	8008776 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8008672:	7d3b      	ldrb	r3, [r7, #20]
 8008674:	461a      	mov	r2, r3
 8008676:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800867a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800867e:	7d7b      	ldrb	r3, [r7, #21]
 8008680:	4619      	mov	r1, r3
 8008682:	460b      	mov	r3, r1
 8008684:	011b      	lsls	r3, r3, #4
 8008686:	1a5b      	subs	r3, r3, r1
 8008688:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800868a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 800868c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800868e:	4413      	add	r3, r2
 8008690:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d113      	bne.n	80086c0 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80086a2:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	785b      	ldrb	r3, [r3, #1]
 80086aa:	4619      	mov	r1, r3
 80086ac:	460b      	mov	r3, r1
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	1a5b      	subs	r3, r3, r1
 80086b2:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80086b4:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80086ba:	4413      	add	r3, r2
 80086bc:	61fb      	str	r3, [r7, #28]
 80086be:	e01e      	b.n	80086fe <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 f98e 	bl	80089e6 <RTC_Bcd2ToByte>
 80086ca:	4603      	mov	r3, r0
 80086cc:	461a      	mov	r2, r3
 80086ce:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80086d2:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	785b      	ldrb	r3, [r3, #1]
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f983 	bl	80089e6 <RTC_Bcd2ToByte>
 80086e0:	4603      	mov	r3, r0
 80086e2:	461a      	mov	r2, r3
 80086e4:	4613      	mov	r3, r2
 80086e6:	011b      	lsls	r3, r3, #4
 80086e8:	1a9b      	subs	r3, r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80086ec:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	789b      	ldrb	r3, [r3, #2]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 f977 	bl	80089e6 <RTC_Bcd2ToByte>
 80086f8:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80086fa:	4423      	add	r3, r4
 80086fc:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80086fe:	69fa      	ldr	r2, [r7, #28]
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	429a      	cmp	r2, r3
 8008704:	d205      	bcs.n	8008712 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800870c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008710:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008712:	69f9      	ldr	r1, [r7, #28]
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 f8d2 	bl	80088be <RTC_WriteAlarmCounter>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d007      	beq.n	8008730 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2204      	movs	r2, #4
 8008724:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e022      	b.n	8008776 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 0202 	bic.w	r2, r2, #2
 800873e:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0202 	orr.w	r2, r2, #2
 800874e:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008750:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <HAL_RTC_SetAlarm_IT+0x16c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a0a      	ldr	r2, [pc, #40]	; (8008780 <HAL_RTC_SetAlarm_IT+0x16c>)
 8008756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800875a:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800875c:	4b08      	ldr	r3, [pc, #32]	; (8008780 <HAL_RTC_SetAlarm_IT+0x16c>)
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	4a07      	ldr	r2, [pc, #28]	; (8008780 <HAL_RTC_SetAlarm_IT+0x16c>)
 8008762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008766:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2201      	movs	r2, #1
 800876c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8008774:	2300      	movs	r3, #0
  }
}
 8008776:	4618      	mov	r0, r3
 8008778:	3724      	adds	r7, #36	; 0x24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd90      	pop	{r4, r7, pc}
 800877e:	bf00      	nop
 8008780:	40010400 	.word	0x40010400

08008784 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800878c:	2300      	movs	r3, #0
 800878e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e01d      	b.n	80087d6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0208 	bic.w	r2, r2, #8
 80087a8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80087aa:	f7fd ffad 	bl	8006708 <HAL_GetTick>
 80087ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80087b0:	e009      	b.n	80087c6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80087b2:	f7fd ffa9 	bl	8006708 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087c0:	d901      	bls.n	80087c6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e007      	b.n	80087d6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0ee      	beq.n	80087b2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80087de:	b480      	push	{r7}
 80087e0:	b087      	sub	sp, #28
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	827b      	strh	r3, [r7, #18]
 80087ea:	2300      	movs	r3, #0
 80087ec:	823b      	strh	r3, [r7, #16]
 80087ee:	2300      	movs	r3, #0
 80087f0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800880e:	8a7a      	ldrh	r2, [r7, #18]
 8008810:	8a3b      	ldrh	r3, [r7, #16]
 8008812:	429a      	cmp	r2, r3
 8008814:	d008      	beq.n	8008828 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8008816:	8a3b      	ldrh	r3, [r7, #16]
 8008818:	041a      	lsls	r2, r3, #16
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69db      	ldr	r3, [r3, #28]
 8008820:	b29b      	uxth	r3, r3
 8008822:	4313      	orrs	r3, r2
 8008824:	617b      	str	r3, [r7, #20]
 8008826:	e004      	b.n	8008832 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8008828:	8a7b      	ldrh	r3, [r7, #18]
 800882a:	041a      	lsls	r2, r3, #16
 800882c:	89fb      	ldrh	r3, [r7, #14]
 800882e:	4313      	orrs	r3, r2
 8008830:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8008832:	697b      	ldr	r3, [r7, #20]
}
 8008834:	4618      	mov	r0, r3
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	bc80      	pop	{r7}
 800883c:	4770      	bx	lr

0800883e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f85d 	bl	800890c <RTC_EnterInitMode>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	73fb      	strb	r3, [r7, #15]
 800885c:	e011      	b.n	8008882 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	0c12      	lsrs	r2, r2, #16
 8008866:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	b292      	uxth	r2, r2
 8008870:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f872 	bl	800895c <RTC_ExitInitMode>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008882:	7bfb      	ldrb	r3, [r7, #15]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	81fb      	strh	r3, [r7, #14]
 8008898:	2300      	movs	r3, #0
 800889a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80088ac:	89fb      	ldrh	r3, [r7, #14]
 80088ae:	041a      	lsls	r2, r3, #16
 80088b0:	89bb      	ldrh	r3, [r7, #12]
 80088b2:	4313      	orrs	r3, r2
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bc80      	pop	{r7}
 80088bc:	4770      	bx	lr

080088be <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f81d 	bl	800890c <RTC_EnterInitMode>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	73fb      	strb	r3, [r7, #15]
 80088dc:	e011      	b.n	8008902 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	0c12      	lsrs	r2, r2, #16
 80088e6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	b292      	uxth	r2, r2
 80088f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f832 	bl	800895c <RTC_ExitInitMode>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8008918:	f7fd fef6 	bl	8006708 <HAL_GetTick>
 800891c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800891e:	e009      	b.n	8008934 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008920:	f7fd fef2 	bl	8006708 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800892e:	d901      	bls.n	8008934 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e00f      	b.n	8008954 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f003 0320 	and.w	r3, r3, #32
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0ee      	beq.n	8008920 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f042 0210 	orr.w	r2, r2, #16
 8008950:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f022 0210 	bic.w	r2, r2, #16
 8008976:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008978:	f7fd fec6 	bl	8006708 <HAL_GetTick>
 800897c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800897e:	e009      	b.n	8008994 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008980:	f7fd fec2 	bl	8006708 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800898e:	d901      	bls.n	8008994 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e007      	b.n	80089a4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0ee      	beq.n	8008980 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80089ba:	e005      	b.n	80089c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3301      	adds	r3, #1
 80089c0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	3b0a      	subs	r3, #10
 80089c6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	2b09      	cmp	r3, #9
 80089cc:	d8f6      	bhi.n	80089bc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	4313      	orrs	r3, r2
 80089da:	b2db      	uxtb	r3, r3
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bc80      	pop	{r7}
 80089e4:	4770      	bx	lr

080089e6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	4603      	mov	r3, r0
 80089ee:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	091b      	lsrs	r3, r3, #4
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	461a      	mov	r2, r3
 80089fc:	4613      	mov	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	f003 030f 	and.w	r3, r3, #15
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	4413      	add	r3, r2
 8008a14:	b2db      	uxtb	r3, r3
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bc80      	pop	{r7}
 8008a1e:	4770      	bx	lr

08008a20 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	7bdb      	ldrb	r3, [r3, #15]
 8008a3e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	7b5b      	ldrb	r3, [r3, #13]
 8008a44:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	7b9b      	ldrb	r3, [r3, #14]
 8008a4a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	60bb      	str	r3, [r7, #8]
 8008a50:	e06f      	b.n	8008b32 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d011      	beq.n	8008a7c <RTC_DateUpdate+0x5c>
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d00e      	beq.n	8008a7c <RTC_DateUpdate+0x5c>
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	2b05      	cmp	r3, #5
 8008a62:	d00b      	beq.n	8008a7c <RTC_DateUpdate+0x5c>
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2b07      	cmp	r3, #7
 8008a68:	d008      	beq.n	8008a7c <RTC_DateUpdate+0x5c>
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	2b08      	cmp	r3, #8
 8008a6e:	d005      	beq.n	8008a7c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	2b0a      	cmp	r3, #10
 8008a74:	d002      	beq.n	8008a7c <RTC_DateUpdate+0x5c>
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2b0c      	cmp	r3, #12
 8008a7a:	d117      	bne.n	8008aac <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b1e      	cmp	r3, #30
 8008a80:	d803      	bhi.n	8008a8a <RTC_DateUpdate+0x6a>
      {
        day++;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3301      	adds	r3, #1
 8008a86:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008a88:	e050      	b.n	8008b2c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	2b0c      	cmp	r3, #12
 8008a8e:	d005      	beq.n	8008a9c <RTC_DateUpdate+0x7c>
        {
          month++;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	3301      	adds	r3, #1
 8008a94:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008a96:	2301      	movs	r3, #1
 8008a98:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008a9a:	e047      	b.n	8008b2c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	60fb      	str	r3, [r7, #12]
          year++;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8008aaa:	e03f      	b.n	8008b2c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d008      	beq.n	8008ac4 <RTC_DateUpdate+0xa4>
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	2b06      	cmp	r3, #6
 8008ab6:	d005      	beq.n	8008ac4 <RTC_DateUpdate+0xa4>
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	2b09      	cmp	r3, #9
 8008abc:	d002      	beq.n	8008ac4 <RTC_DateUpdate+0xa4>
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	2b0b      	cmp	r3, #11
 8008ac2:	d10c      	bne.n	8008ade <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b1d      	cmp	r3, #29
 8008ac8:	d803      	bhi.n	8008ad2 <RTC_DateUpdate+0xb2>
      {
        day++;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3301      	adds	r3, #1
 8008ace:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8008ad0:	e02c      	b.n	8008b2c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8008adc:	e026      	b.n	8008b2c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d123      	bne.n	8008b2c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b1b      	cmp	r3, #27
 8008ae8:	d803      	bhi.n	8008af2 <RTC_DateUpdate+0xd2>
      {
        day++;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3301      	adds	r3, #1
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	e01c      	b.n	8008b2c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b1c      	cmp	r3, #28
 8008af6:	d111      	bne.n	8008b1c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f839 	bl	8008b74 <RTC_IsLeapYear>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <RTC_DateUpdate+0xf0>
        {
          day++;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	e00d      	b.n	8008b2c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	3301      	adds	r3, #1
 8008b14:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008b16:	2301      	movs	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	e007      	b.n	8008b2c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b1d      	cmp	r3, #29
 8008b20:	d104      	bne.n	8008b2c <RTC_DateUpdate+0x10c>
      {
        month++;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3301      	adds	r3, #1
 8008b26:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	60bb      	str	r3, [r7, #8]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d38b      	bcc.n	8008a52 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	b2d2      	uxtb	r2, r2
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6978      	ldr	r0, [r7, #20]
 8008b5e:	f000 f83b 	bl	8008bd8 <RTC_WeekDayNum>
 8008b62:	4603      	mov	r3, r0
 8008b64:	461a      	mov	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	731a      	strb	r2, [r3, #12]
}
 8008b6a:	bf00      	nop
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8008b7e:	88fb      	ldrh	r3, [r7, #6]
 8008b80:	f003 0303 	and.w	r3, r3, #3
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e01d      	b.n	8008bca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
 8008b90:	4a10      	ldr	r2, [pc, #64]	; (8008bd4 <RTC_IsLeapYear+0x60>)
 8008b92:	fba2 1203 	umull	r1, r2, r2, r3
 8008b96:	0952      	lsrs	r2, r2, #5
 8008b98:	2164      	movs	r1, #100	; 0x64
 8008b9a:	fb01 f202 	mul.w	r2, r1, r2
 8008b9e:	1a9b      	subs	r3, r3, r2
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e00f      	b.n	8008bca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8008baa:	88fb      	ldrh	r3, [r7, #6]
 8008bac:	4a09      	ldr	r2, [pc, #36]	; (8008bd4 <RTC_IsLeapYear+0x60>)
 8008bae:	fba2 1203 	umull	r1, r2, r2, r3
 8008bb2:	09d2      	lsrs	r2, r2, #7
 8008bb4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008bb8:	fb01 f202 	mul.w	r2, r1, r2
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e000      	b.n	8008bca <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8008bc8:	2300      	movs	r3, #0
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr
 8008bd4:	51eb851f 	.word	0x51eb851f

08008bd8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
 8008be4:	4613      	mov	r3, r2
 8008be6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	60bb      	str	r3, [r7, #8]
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008bf6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8008bf8:	78fb      	ldrb	r3, [r7, #3]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d82d      	bhi.n	8008c5a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4613      	mov	r3, r2
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	4413      	add	r3, r2
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	1a9b      	subs	r3, r3, r2
 8008c0a:	4a2c      	ldr	r2, [pc, #176]	; (8008cbc <RTC_WeekDayNum+0xe4>)
 8008c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c10:	085a      	lsrs	r2, r3, #1
 8008c12:	78bb      	ldrb	r3, [r7, #2]
 8008c14:	441a      	add	r2, r3
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	441a      	add	r2, r3
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	089b      	lsrs	r3, r3, #2
 8008c20:	441a      	add	r2, r3
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	4926      	ldr	r1, [pc, #152]	; (8008cc0 <RTC_WeekDayNum+0xe8>)
 8008c28:	fba1 1303 	umull	r1, r3, r1, r3
 8008c2c:	095b      	lsrs	r3, r3, #5
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	4922      	ldr	r1, [pc, #136]	; (8008cc0 <RTC_WeekDayNum+0xe8>)
 8008c36:	fba1 1303 	umull	r1, r3, r1, r3
 8008c3a:	09db      	lsrs	r3, r3, #7
 8008c3c:	4413      	add	r3, r2
 8008c3e:	1d1a      	adds	r2, r3, #4
 8008c40:	4b20      	ldr	r3, [pc, #128]	; (8008cc4 <RTC_WeekDayNum+0xec>)
 8008c42:	fba3 1302 	umull	r1, r3, r3, r2
 8008c46:	1ad1      	subs	r1, r2, r3
 8008c48:	0849      	lsrs	r1, r1, #1
 8008c4a:	440b      	add	r3, r1
 8008c4c:	0899      	lsrs	r1, r3, #2
 8008c4e:	460b      	mov	r3, r1
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	1a5b      	subs	r3, r3, r1
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	60fb      	str	r3, [r7, #12]
 8008c58:	e029      	b.n	8008cae <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	4413      	add	r3, r2
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	4a15      	ldr	r2, [pc, #84]	; (8008cbc <RTC_WeekDayNum+0xe4>)
 8008c68:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6c:	085a      	lsrs	r2, r3, #1
 8008c6e:	78bb      	ldrb	r3, [r7, #2]
 8008c70:	441a      	add	r2, r3
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	441a      	add	r2, r3
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	089b      	lsrs	r3, r3, #2
 8008c7a:	441a      	add	r2, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	4910      	ldr	r1, [pc, #64]	; (8008cc0 <RTC_WeekDayNum+0xe8>)
 8008c80:	fba1 1303 	umull	r1, r3, r1, r3
 8008c84:	095b      	lsrs	r3, r3, #5
 8008c86:	1ad2      	subs	r2, r2, r3
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	490d      	ldr	r1, [pc, #52]	; (8008cc0 <RTC_WeekDayNum+0xe8>)
 8008c8c:	fba1 1303 	umull	r1, r3, r1, r3
 8008c90:	09db      	lsrs	r3, r3, #7
 8008c92:	4413      	add	r3, r2
 8008c94:	1c9a      	adds	r2, r3, #2
 8008c96:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <RTC_WeekDayNum+0xec>)
 8008c98:	fba3 1302 	umull	r1, r3, r3, r2
 8008c9c:	1ad1      	subs	r1, r2, r3
 8008c9e:	0849      	lsrs	r1, r1, #1
 8008ca0:	440b      	add	r3, r1
 8008ca2:	0899      	lsrs	r1, r3, #2
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	1a5b      	subs	r3, r3, r1
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	b2db      	uxtb	r3, r3
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3714      	adds	r7, #20
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bc80      	pop	{r7}
 8008cba:	4770      	bx	lr
 8008cbc:	38e38e39 	.word	0x38e38e39
 8008cc0:	51eb851f 	.word	0x51eb851f
 8008cc4:	24924925 	.word	0x24924925

08008cc8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8008cd8:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <HAL_RTCEx_BKUPWrite+0x30>)
 8008cda:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	b292      	uxth	r2, r2
 8008cec:	601a      	str	r2, [r3, #0]
}
 8008cee:	bf00      	nop
 8008cf0:	371c      	adds	r7, #28
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bc80      	pop	{r7}
 8008cf6:	4770      	bx	lr
 8008cf8:	40006c00 	.word	0x40006c00

08008cfc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8008d0e:	4b08      	ldr	r3, [pc, #32]	; (8008d30 <HAL_RTCEx_BKUPRead+0x34>)
 8008d10:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	4413      	add	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8008d24:	68bb      	ldr	r3, [r7, #8]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr
 8008d30:	40006c00 	.word	0x40006c00

08008d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e041      	b.n	8008dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7fc fbe0 	bl	8005520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	f000 fd3e 	bl	80097f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d001      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e03a      	b.n	8008e62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f042 0201 	orr.w	r2, r2, #1
 8008e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a18      	ldr	r2, [pc, #96]	; (8008e6c <HAL_TIM_Base_Start_IT+0x98>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00e      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x58>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e16:	d009      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x58>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a14      	ldr	r2, [pc, #80]	; (8008e70 <HAL_TIM_Base_Start_IT+0x9c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d004      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x58>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <HAL_TIM_Base_Start_IT+0xa0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d111      	bne.n	8008e50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b06      	cmp	r3, #6
 8008e3c:	d010      	beq.n	8008e60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f042 0201 	orr.w	r2, r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e4e:	e007      	b.n	8008e60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f042 0201 	orr.w	r2, r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bc80      	pop	{r7}
 8008e6a:	4770      	bx	lr
 8008e6c:	40012c00 	.word	0x40012c00
 8008e70:	40000400 	.word	0x40000400
 8008e74:	40000800 	.word	0x40000800

08008e78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e041      	b.n	8008f0e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d106      	bne.n	8008ea4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7fc faf8 	bl	8005494 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	f000 fc9c 	bl	80097f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d104      	bne.n	8008f32 <HAL_TIM_IC_Start_IT+0x1a>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	e013      	b.n	8008f5a <HAL_TIM_IC_Start_IT+0x42>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	d104      	bne.n	8008f42 <HAL_TIM_IC_Start_IT+0x2a>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	e00b      	b.n	8008f5a <HAL_TIM_IC_Start_IT+0x42>
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d104      	bne.n	8008f52 <HAL_TIM_IC_Start_IT+0x3a>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	e003      	b.n	8008f5a <HAL_TIM_IC_Start_IT+0x42>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <HAL_TIM_IC_Start_IT+0x54>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	e013      	b.n	8008f94 <HAL_TIM_IC_Start_IT+0x7c>
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d104      	bne.n	8008f7c <HAL_TIM_IC_Start_IT+0x64>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	e00b      	b.n	8008f94 <HAL_TIM_IC_Start_IT+0x7c>
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b08      	cmp	r3, #8
 8008f80:	d104      	bne.n	8008f8c <HAL_TIM_IC_Start_IT+0x74>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	e003      	b.n	8008f94 <HAL_TIM_IC_Start_IT+0x7c>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d102      	bne.n	8008fa2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d001      	beq.n	8008fa6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e0b3      	b.n	800910e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <HAL_TIM_IC_Start_IT+0x9e>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fb4:	e013      	b.n	8008fde <HAL_TIM_IC_Start_IT+0xc6>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d104      	bne.n	8008fc6 <HAL_TIM_IC_Start_IT+0xae>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fc4:	e00b      	b.n	8008fde <HAL_TIM_IC_Start_IT+0xc6>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIM_IC_Start_IT+0xbe>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fd4:	e003      	b.n	8008fde <HAL_TIM_IC_Start_IT+0xc6>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2202      	movs	r2, #2
 8008fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <HAL_TIM_IC_Start_IT+0xd6>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fec:	e013      	b.n	8009016 <HAL_TIM_IC_Start_IT+0xfe>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d104      	bne.n	8008ffe <HAL_TIM_IC_Start_IT+0xe6>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ffc:	e00b      	b.n	8009016 <HAL_TIM_IC_Start_IT+0xfe>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b08      	cmp	r3, #8
 8009002:	d104      	bne.n	800900e <HAL_TIM_IC_Start_IT+0xf6>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2202      	movs	r2, #2
 8009008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800900c:	e003      	b.n	8009016 <HAL_TIM_IC_Start_IT+0xfe>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2202      	movs	r2, #2
 8009012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b0c      	cmp	r3, #12
 800901a:	d841      	bhi.n	80090a0 <HAL_TIM_IC_Start_IT+0x188>
 800901c:	a201      	add	r2, pc, #4	; (adr r2, 8009024 <HAL_TIM_IC_Start_IT+0x10c>)
 800901e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009022:	bf00      	nop
 8009024:	08009059 	.word	0x08009059
 8009028:	080090a1 	.word	0x080090a1
 800902c:	080090a1 	.word	0x080090a1
 8009030:	080090a1 	.word	0x080090a1
 8009034:	0800906b 	.word	0x0800906b
 8009038:	080090a1 	.word	0x080090a1
 800903c:	080090a1 	.word	0x080090a1
 8009040:	080090a1 	.word	0x080090a1
 8009044:	0800907d 	.word	0x0800907d
 8009048:	080090a1 	.word	0x080090a1
 800904c:	080090a1 	.word	0x080090a1
 8009050:	080090a1 	.word	0x080090a1
 8009054:	0800908f 	.word	0x0800908f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0202 	orr.w	r2, r2, #2
 8009066:	60da      	str	r2, [r3, #12]
      break;
 8009068:	e01b      	b.n	80090a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f042 0204 	orr.w	r2, r2, #4
 8009078:	60da      	str	r2, [r3, #12]
      break;
 800907a:	e012      	b.n	80090a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0208 	orr.w	r2, r2, #8
 800908a:	60da      	str	r2, [r3, #12]
      break;
 800908c:	e009      	b.n	80090a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0210 	orr.w	r2, r2, #16
 800909c:	60da      	str	r2, [r3, #12]
      break;
 800909e:	e000      	b.n	80090a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80090a0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2201      	movs	r2, #1
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fda7 	bl	8009bfe <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a18      	ldr	r2, [pc, #96]	; (8009118 <HAL_TIM_IC_Start_IT+0x200>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d00e      	beq.n	80090d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c2:	d009      	beq.n	80090d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a14      	ldr	r2, [pc, #80]	; (800911c <HAL_TIM_IC_Start_IT+0x204>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d004      	beq.n	80090d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a13      	ldr	r2, [pc, #76]	; (8009120 <HAL_TIM_IC_Start_IT+0x208>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d111      	bne.n	80090fc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b06      	cmp	r3, #6
 80090e8:	d010      	beq.n	800910c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f042 0201 	orr.w	r2, r2, #1
 80090f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090fa:	e007      	b.n	800910c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0201 	orr.w	r2, r2, #1
 800910a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	40012c00 	.word	0x40012c00
 800911c:	40000400 	.word	0x40000400
 8009120:	40000800 	.word	0x40000800

08009124 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b0c      	cmp	r3, #12
 8009132:	d841      	bhi.n	80091b8 <HAL_TIM_IC_Stop_IT+0x94>
 8009134:	a201      	add	r2, pc, #4	; (adr r2, 800913c <HAL_TIM_IC_Stop_IT+0x18>)
 8009136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913a:	bf00      	nop
 800913c:	08009171 	.word	0x08009171
 8009140:	080091b9 	.word	0x080091b9
 8009144:	080091b9 	.word	0x080091b9
 8009148:	080091b9 	.word	0x080091b9
 800914c:	08009183 	.word	0x08009183
 8009150:	080091b9 	.word	0x080091b9
 8009154:	080091b9 	.word	0x080091b9
 8009158:	080091b9 	.word	0x080091b9
 800915c:	08009195 	.word	0x08009195
 8009160:	080091b9 	.word	0x080091b9
 8009164:	080091b9 	.word	0x080091b9
 8009168:	080091b9 	.word	0x080091b9
 800916c:	080091a7 	.word	0x080091a7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0202 	bic.w	r2, r2, #2
 800917e:	60da      	str	r2, [r3, #12]
      break;
 8009180:	e01b      	b.n	80091ba <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68da      	ldr	r2, [r3, #12]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f022 0204 	bic.w	r2, r2, #4
 8009190:	60da      	str	r2, [r3, #12]
      break;
 8009192:	e012      	b.n	80091ba <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68da      	ldr	r2, [r3, #12]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0208 	bic.w	r2, r2, #8
 80091a2:	60da      	str	r2, [r3, #12]
      break;
 80091a4:	e009      	b.n	80091ba <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 0210 	bic.w	r2, r2, #16
 80091b4:	60da      	str	r2, [r3, #12]
      break;
 80091b6:	e000      	b.n	80091ba <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 80091b8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2200      	movs	r2, #0
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fd1b 	bl	8009bfe <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6a1a      	ldr	r2, [r3, #32]
 80091ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80091d2:	4013      	ands	r3, r2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10f      	bne.n	80091f8 <HAL_TIM_IC_Stop_IT+0xd4>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6a1a      	ldr	r2, [r3, #32]
 80091de:	f240 4344 	movw	r3, #1092	; 0x444
 80091e2:	4013      	ands	r3, r2
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d107      	bne.n	80091f8 <HAL_TIM_IC_Stop_IT+0xd4>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f022 0201 	bic.w	r2, r2, #1
 80091f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d104      	bne.n	8009208 <HAL_TIM_IC_Stop_IT+0xe4>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009206:	e013      	b.n	8009230 <HAL_TIM_IC_Stop_IT+0x10c>
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2b04      	cmp	r3, #4
 800920c:	d104      	bne.n	8009218 <HAL_TIM_IC_Stop_IT+0xf4>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009216:	e00b      	b.n	8009230 <HAL_TIM_IC_Stop_IT+0x10c>
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	2b08      	cmp	r3, #8
 800921c:	d104      	bne.n	8009228 <HAL_TIM_IC_Stop_IT+0x104>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009226:	e003      	b.n	8009230 <HAL_TIM_IC_Stop_IT+0x10c>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d104      	bne.n	8009240 <HAL_TIM_IC_Stop_IT+0x11c>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800923e:	e013      	b.n	8009268 <HAL_TIM_IC_Stop_IT+0x144>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b04      	cmp	r3, #4
 8009244:	d104      	bne.n	8009250 <HAL_TIM_IC_Stop_IT+0x12c>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800924e:	e00b      	b.n	8009268 <HAL_TIM_IC_Stop_IT+0x144>
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2b08      	cmp	r3, #8
 8009254:	d104      	bne.n	8009260 <HAL_TIM_IC_Stop_IT+0x13c>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800925e:	e003      	b.n	8009268 <HAL_TIM_IC_Stop_IT+0x144>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop

08009274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	f003 0302 	and.w	r3, r3, #2
 8009286:	2b02      	cmp	r3, #2
 8009288:	d122      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b02      	cmp	r3, #2
 8009296:	d11b      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f06f 0202 	mvn.w	r2, #2
 80092a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	f003 0303 	and.w	r3, r3, #3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7fc fe0a 	bl	8005ed0 <HAL_TIM_IC_CaptureCallback>
 80092bc:	e005      	b.n	80092ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fa7c 	bl	80097bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fa82 	bl	80097ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f003 0304 	and.w	r3, r3, #4
 80092da:	2b04      	cmp	r3, #4
 80092dc:	d122      	bne.n	8009324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d11b      	bne.n	8009324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f06f 0204 	mvn.w	r2, #4
 80092f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2202      	movs	r2, #2
 80092fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7fc fde0 	bl	8005ed0 <HAL_TIM_IC_CaptureCallback>
 8009310:	e005      	b.n	800931e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa52 	bl	80097bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fa58 	bl	80097ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f003 0308 	and.w	r3, r3, #8
 800932e:	2b08      	cmp	r3, #8
 8009330:	d122      	bne.n	8009378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	f003 0308 	and.w	r3, r3, #8
 800933c:	2b08      	cmp	r3, #8
 800933e:	d11b      	bne.n	8009378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f06f 0208 	mvn.w	r2, #8
 8009348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2204      	movs	r2, #4
 800934e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	f003 0303 	and.w	r3, r3, #3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7fc fdb6 	bl	8005ed0 <HAL_TIM_IC_CaptureCallback>
 8009364:	e005      	b.n	8009372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa28 	bl	80097bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fa2e 	bl	80097ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	f003 0310 	and.w	r3, r3, #16
 8009382:	2b10      	cmp	r3, #16
 8009384:	d122      	bne.n	80093cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f003 0310 	and.w	r3, r3, #16
 8009390:	2b10      	cmp	r3, #16
 8009392:	d11b      	bne.n	80093cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f06f 0210 	mvn.w	r2, #16
 800939c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2208      	movs	r2, #8
 80093a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7fc fd8c 	bl	8005ed0 <HAL_TIM_IC_CaptureCallback>
 80093b8:	e005      	b.n	80093c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f9fe 	bl	80097bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fa04 	bl	80097ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d10e      	bne.n	80093f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d107      	bne.n	80093f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f06f 0201 	mvn.w	r2, #1
 80093f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fb fa8b 	bl	800490e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009402:	2b80      	cmp	r3, #128	; 0x80
 8009404:	d10e      	bne.n	8009424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009410:	2b80      	cmp	r3, #128	; 0x80
 8009412:	d107      	bne.n	8009424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800941c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fc79 	bl	8009d16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942e:	2b40      	cmp	r3, #64	; 0x40
 8009430:	d10e      	bne.n	8009450 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943c:	2b40      	cmp	r3, #64	; 0x40
 800943e:	d107      	bne.n	8009450 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f9c8 	bl	80097e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	f003 0320 	and.w	r3, r3, #32
 800945a:	2b20      	cmp	r3, #32
 800945c:	d10e      	bne.n	800947c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f003 0320 	and.w	r3, r3, #32
 8009468:	2b20      	cmp	r3, #32
 800946a:	d107      	bne.n	800947c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f06f 0220 	mvn.w	r2, #32
 8009474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fc44 	bl	8009d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009496:	2b01      	cmp	r3, #1
 8009498:	d101      	bne.n	800949e <HAL_TIM_IC_ConfigChannel+0x1a>
 800949a:	2302      	movs	r3, #2
 800949c:	e082      	b.n	80095a4 <HAL_TIM_IC_ConfigChannel+0x120>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d11b      	bne.n	80094e4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6818      	ldr	r0, [r3, #0]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	6819      	ldr	r1, [r3, #0]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	f000 f9fc 	bl	80098b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f022 020c 	bic.w	r2, r2, #12
 80094ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6999      	ldr	r1, [r3, #24]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	689a      	ldr	r2, [r3, #8]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	619a      	str	r2, [r3, #24]
 80094e2:	e05a      	b.n	800959a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d11c      	bne.n	8009524 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6818      	ldr	r0, [r3, #0]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	6819      	ldr	r1, [r3, #0]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f000 fa65 	bl	80099c8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	699a      	ldr	r2, [r3, #24]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800950c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6999      	ldr	r1, [r3, #24]
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	021a      	lsls	r2, r3, #8
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	619a      	str	r2, [r3, #24]
 8009522:	e03a      	b.n	800959a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b08      	cmp	r3, #8
 8009528:	d11b      	bne.n	8009562 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6818      	ldr	r0, [r3, #0]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	6819      	ldr	r1, [r3, #0]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f000 fab0 	bl	8009a9e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 020c 	bic.w	r2, r2, #12
 800954c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69d9      	ldr	r1, [r3, #28]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	689a      	ldr	r2, [r3, #8]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	430a      	orrs	r2, r1
 800955e:	61da      	str	r2, [r3, #28]
 8009560:	e01b      	b.n	800959a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	6819      	ldr	r1, [r3, #0]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f000 facf 	bl	8009b14 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	69da      	ldr	r2, [r3, #28]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009584:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	69d9      	ldr	r1, [r3, #28]
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	021a      	lsls	r2, r3, #8
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	430a      	orrs	r2, r1
 8009598:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_TIM_ConfigClockSource+0x18>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e0b3      	b.n	800972c <HAL_TIM_ConfigClockSource+0x180>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2202      	movs	r2, #2
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095fc:	d03e      	beq.n	800967c <HAL_TIM_ConfigClockSource+0xd0>
 80095fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009602:	f200 8087 	bhi.w	8009714 <HAL_TIM_ConfigClockSource+0x168>
 8009606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960a:	f000 8085 	beq.w	8009718 <HAL_TIM_ConfigClockSource+0x16c>
 800960e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009612:	d87f      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x168>
 8009614:	2b70      	cmp	r3, #112	; 0x70
 8009616:	d01a      	beq.n	800964e <HAL_TIM_ConfigClockSource+0xa2>
 8009618:	2b70      	cmp	r3, #112	; 0x70
 800961a:	d87b      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x168>
 800961c:	2b60      	cmp	r3, #96	; 0x60
 800961e:	d050      	beq.n	80096c2 <HAL_TIM_ConfigClockSource+0x116>
 8009620:	2b60      	cmp	r3, #96	; 0x60
 8009622:	d877      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x168>
 8009624:	2b50      	cmp	r3, #80	; 0x50
 8009626:	d03c      	beq.n	80096a2 <HAL_TIM_ConfigClockSource+0xf6>
 8009628:	2b50      	cmp	r3, #80	; 0x50
 800962a:	d873      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x168>
 800962c:	2b40      	cmp	r3, #64	; 0x40
 800962e:	d058      	beq.n	80096e2 <HAL_TIM_ConfigClockSource+0x136>
 8009630:	2b40      	cmp	r3, #64	; 0x40
 8009632:	d86f      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x168>
 8009634:	2b30      	cmp	r3, #48	; 0x30
 8009636:	d064      	beq.n	8009702 <HAL_TIM_ConfigClockSource+0x156>
 8009638:	2b30      	cmp	r3, #48	; 0x30
 800963a:	d86b      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x168>
 800963c:	2b20      	cmp	r3, #32
 800963e:	d060      	beq.n	8009702 <HAL_TIM_ConfigClockSource+0x156>
 8009640:	2b20      	cmp	r3, #32
 8009642:	d867      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x168>
 8009644:	2b00      	cmp	r3, #0
 8009646:	d05c      	beq.n	8009702 <HAL_TIM_ConfigClockSource+0x156>
 8009648:	2b10      	cmp	r3, #16
 800964a:	d05a      	beq.n	8009702 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800964c:	e062      	b.n	8009714 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	6899      	ldr	r1, [r3, #8]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	f000 faaf 	bl	8009bc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009670:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	609a      	str	r2, [r3, #8]
      break;
 800967a:	e04e      	b.n	800971a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6818      	ldr	r0, [r3, #0]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	6899      	ldr	r1, [r3, #8]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	f000 fa98 	bl	8009bc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800969e:	609a      	str	r2, [r3, #8]
      break;
 80096a0:	e03b      	b.n	800971a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	6859      	ldr	r1, [r3, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f000 f95c 	bl	800996c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2150      	movs	r1, #80	; 0x50
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 fa66 	bl	8009b8c <TIM_ITRx_SetConfig>
      break;
 80096c0:	e02b      	b.n	800971a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	6859      	ldr	r1, [r3, #4]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	461a      	mov	r2, r3
 80096d0:	f000 f9b6 	bl	8009a40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2160      	movs	r1, #96	; 0x60
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fa56 	bl	8009b8c <TIM_ITRx_SetConfig>
      break;
 80096e0:	e01b      	b.n	800971a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6818      	ldr	r0, [r3, #0]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	6859      	ldr	r1, [r3, #4]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	461a      	mov	r2, r3
 80096f0:	f000 f93c 	bl	800996c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2140      	movs	r1, #64	; 0x40
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fa46 	bl	8009b8c <TIM_ITRx_SetConfig>
      break;
 8009700:	e00b      	b.n	800971a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4619      	mov	r1, r3
 800970c:	4610      	mov	r0, r2
 800970e:	f000 fa3d 	bl	8009b8c <TIM_ITRx_SetConfig>
        break;
 8009712:	e002      	b.n	800971a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009714:	bf00      	nop
 8009716:	e000      	b.n	800971a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009718:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2b0c      	cmp	r3, #12
 8009746:	d831      	bhi.n	80097ac <HAL_TIM_ReadCapturedValue+0x78>
 8009748:	a201      	add	r2, pc, #4	; (adr r2, 8009750 <HAL_TIM_ReadCapturedValue+0x1c>)
 800974a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974e:	bf00      	nop
 8009750:	08009785 	.word	0x08009785
 8009754:	080097ad 	.word	0x080097ad
 8009758:	080097ad 	.word	0x080097ad
 800975c:	080097ad 	.word	0x080097ad
 8009760:	0800978f 	.word	0x0800978f
 8009764:	080097ad 	.word	0x080097ad
 8009768:	080097ad 	.word	0x080097ad
 800976c:	080097ad 	.word	0x080097ad
 8009770:	08009799 	.word	0x08009799
 8009774:	080097ad 	.word	0x080097ad
 8009778:	080097ad 	.word	0x080097ad
 800977c:	080097ad 	.word	0x080097ad
 8009780:	080097a3 	.word	0x080097a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978a:	60fb      	str	r3, [r7, #12]

      break;
 800978c:	e00f      	b.n	80097ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009794:	60fb      	str	r3, [r7, #12]

      break;
 8009796:	e00a      	b.n	80097ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979e:	60fb      	str	r3, [r7, #12]

      break;
 80097a0:	e005      	b.n	80097ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a8:	60fb      	str	r3, [r7, #12]

      break;
 80097aa:	e000      	b.n	80097ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80097ac:	bf00      	nop
  }

  return tmpreg;
 80097ae:	68fb      	ldr	r3, [r7, #12]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bc80      	pop	{r7}
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop

080097bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bc80      	pop	{r7}
 80097cc:	4770      	bx	lr

080097ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097d6:	bf00      	nop
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	bc80      	pop	{r7}
 80097de:	4770      	bx	lr

080097e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bc80      	pop	{r7}
 80097f0:	4770      	bx	lr
	...

080097f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a29      	ldr	r2, [pc, #164]	; (80098ac <TIM_Base_SetConfig+0xb8>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d00b      	beq.n	8009824 <TIM_Base_SetConfig+0x30>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009812:	d007      	beq.n	8009824 <TIM_Base_SetConfig+0x30>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a26      	ldr	r2, [pc, #152]	; (80098b0 <TIM_Base_SetConfig+0xbc>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d003      	beq.n	8009824 <TIM_Base_SetConfig+0x30>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a25      	ldr	r2, [pc, #148]	; (80098b4 <TIM_Base_SetConfig+0xc0>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d108      	bne.n	8009836 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	4313      	orrs	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a1c      	ldr	r2, [pc, #112]	; (80098ac <TIM_Base_SetConfig+0xb8>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d00b      	beq.n	8009856 <TIM_Base_SetConfig+0x62>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009844:	d007      	beq.n	8009856 <TIM_Base_SetConfig+0x62>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a19      	ldr	r2, [pc, #100]	; (80098b0 <TIM_Base_SetConfig+0xbc>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d003      	beq.n	8009856 <TIM_Base_SetConfig+0x62>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a18      	ldr	r2, [pc, #96]	; (80098b4 <TIM_Base_SetConfig+0xc0>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d108      	bne.n	8009868 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800985c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	4313      	orrs	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	4313      	orrs	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	689a      	ldr	r2, [r3, #8]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a07      	ldr	r2, [pc, #28]	; (80098ac <TIM_Base_SetConfig+0xb8>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d103      	bne.n	800989c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	691a      	ldr	r2, [r3, #16]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	615a      	str	r2, [r3, #20]
}
 80098a2:	bf00      	nop
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bc80      	pop	{r7}
 80098aa:	4770      	bx	lr
 80098ac:	40012c00 	.word	0x40012c00
 80098b0:	40000400 	.word	0x40000400
 80098b4:	40000800 	.word	0x40000800

080098b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	f023 0201 	bic.w	r2, r3, #1
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	4a1f      	ldr	r2, [pc, #124]	; (8009960 <TIM_TI1_SetConfig+0xa8>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d00b      	beq.n	80098fe <TIM_TI1_SetConfig+0x46>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ec:	d007      	beq.n	80098fe <TIM_TI1_SetConfig+0x46>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	4a1c      	ldr	r2, [pc, #112]	; (8009964 <TIM_TI1_SetConfig+0xac>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d003      	beq.n	80098fe <TIM_TI1_SetConfig+0x46>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4a1b      	ldr	r2, [pc, #108]	; (8009968 <TIM_TI1_SetConfig+0xb0>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d101      	bne.n	8009902 <TIM_TI1_SetConfig+0x4a>
 80098fe:	2301      	movs	r3, #1
 8009900:	e000      	b.n	8009904 <TIM_TI1_SetConfig+0x4c>
 8009902:	2300      	movs	r3, #0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d008      	beq.n	800991a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	e003      	b.n	8009922 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f043 0301 	orr.w	r3, r3, #1
 8009920:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	b2db      	uxtb	r3, r3
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	4313      	orrs	r3, r2
 8009934:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f023 030a 	bic.w	r3, r3, #10
 800993c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	f003 030a 	and.w	r3, r3, #10
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	4313      	orrs	r3, r2
 8009948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	621a      	str	r2, [r3, #32]
}
 8009956:	bf00      	nop
 8009958:	371c      	adds	r7, #28
 800995a:	46bd      	mov	sp, r7
 800995c:	bc80      	pop	{r7}
 800995e:	4770      	bx	lr
 8009960:	40012c00 	.word	0x40012c00
 8009964:	40000400 	.word	0x40000400
 8009968:	40000800 	.word	0x40000800

0800996c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	f023 0201 	bic.w	r2, r3, #1
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	011b      	lsls	r3, r3, #4
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	4313      	orrs	r3, r2
 80099a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f023 030a 	bic.w	r3, r3, #10
 80099a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	621a      	str	r2, [r3, #32]
}
 80099be:	bf00      	nop
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bc80      	pop	{r7}
 80099c6:	4770      	bx	lr

080099c8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	f023 0210 	bic.w	r2, r3, #16
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	021b      	lsls	r3, r3, #8
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	031b      	lsls	r3, r3, #12
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	011b      	lsls	r3, r3, #4
 8009a20:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	621a      	str	r2, [r3, #32]
}
 8009a36:	bf00      	nop
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bc80      	pop	{r7}
 8009a3e:	4770      	bx	lr

08009a40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	f023 0210 	bic.w	r2, r3, #16
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	031b      	lsls	r3, r3, #12
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	011b      	lsls	r3, r3, #4
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	621a      	str	r2, [r3, #32]
}
 8009a94:	bf00      	nop
 8009a96:	371c      	adds	r7, #28
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bc80      	pop	{r7}
 8009a9c:	4770      	bx	lr

08009a9e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b087      	sub	sp, #28
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	60f8      	str	r0, [r7, #12]
 8009aa6:	60b9      	str	r1, [r7, #8]
 8009aa8:	607a      	str	r2, [r7, #4]
 8009aaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6a1b      	ldr	r3, [r3, #32]
 8009ab0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f023 0303 	bic.w	r3, r3, #3
 8009aca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ada:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	011b      	lsls	r3, r3, #4
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009aee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	021b      	lsls	r3, r3, #8
 8009af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	621a      	str	r2, [r3, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bc80      	pop	{r7}
 8009b12:	4770      	bx	lr

08009b14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a1b      	ldr	r3, [r3, #32]
 8009b38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	021b      	lsls	r3, r3, #8
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	031b      	lsls	r3, r3, #12
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	031b      	lsls	r3, r3, #12
 8009b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	697a      	ldr	r2, [r7, #20]
 8009b7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	621a      	str	r2, [r3, #32]
}
 8009b82:	bf00      	nop
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bc80      	pop	{r7}
 8009b8a:	4770      	bx	lr

08009b8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ba4:	683a      	ldr	r2, [r7, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	f043 0307 	orr.w	r3, r3, #7
 8009bae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	609a      	str	r2, [r3, #8]
}
 8009bb6:	bf00      	nop
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bc80      	pop	{r7}
 8009bbe:	4770      	bx	lr

08009bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	021a      	lsls	r2, r3, #8
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	431a      	orrs	r2, r3
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	609a      	str	r2, [r3, #8]
}
 8009bf4:	bf00      	nop
 8009bf6:	371c      	adds	r7, #28
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bc80      	pop	{r7}
 8009bfc:	4770      	bx	lr

08009bfe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b087      	sub	sp, #28
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f003 031f 	and.w	r3, r3, #31
 8009c10:	2201      	movs	r2, #1
 8009c12:	fa02 f303 	lsl.w	r3, r2, r3
 8009c16:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6a1a      	ldr	r2, [r3, #32]
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	43db      	mvns	r3, r3
 8009c20:	401a      	ands	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a1a      	ldr	r2, [r3, #32]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	f003 031f 	and.w	r3, r3, #31
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	fa01 f303 	lsl.w	r3, r1, r3
 8009c36:	431a      	orrs	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	621a      	str	r2, [r3, #32]
}
 8009c3c:	bf00      	nop
 8009c3e:	371c      	adds	r7, #28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bc80      	pop	{r7}
 8009c44:	4770      	bx	lr
	...

08009c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d101      	bne.n	8009c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	e046      	b.n	8009cee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a16      	ldr	r2, [pc, #88]	; (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d00e      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cac:	d009      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a12      	ldr	r2, [pc, #72]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d004      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a10      	ldr	r2, [pc, #64]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d10c      	bne.n	8009cdc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bc80      	pop	{r7}
 8009cf6:	4770      	bx	lr
 8009cf8:	40012c00 	.word	0x40012c00
 8009cfc:	40000400 	.word	0x40000400
 8009d00:	40000800 	.word	0x40000800

08009d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bc80      	pop	{r7}
 8009d14:	4770      	bx	lr

08009d16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d16:	b480      	push	{r7}
 8009d18:	b083      	sub	sp, #12
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d1e:	bf00      	nop
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bc80      	pop	{r7}
 8009d26:	4770      	bx	lr

08009d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e03f      	b.n	8009dba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d106      	bne.n	8009d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7fb fc0c 	bl	800556c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2224      	movs	r2, #36	; 0x24
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68da      	ldr	r2, [r3, #12]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fbe5 	bl	800a53c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	691a      	ldr	r2, [r3, #16]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68da      	ldr	r2, [r3, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b20      	cmp	r3, #32
 8009dda:	d130      	bne.n	8009e3e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <HAL_UART_Transmit_IT+0x26>
 8009de2:	88fb      	ldrh	r3, [r7, #6]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e029      	b.n	8009e40 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d101      	bne.n	8009dfa <HAL_UART_Transmit_IT+0x38>
 8009df6:	2302      	movs	r3, #2
 8009df8:	e022      	b.n	8009e40 <HAL_UART_Transmit_IT+0x7e>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	88fa      	ldrh	r2, [r7, #6]
 8009e0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	88fa      	ldrh	r2, [r7, #6]
 8009e12:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2221      	movs	r2, #33	; 0x21
 8009e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68da      	ldr	r2, [r3, #12]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e38:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e000      	b.n	8009e40 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009e3e:	2302      	movs	r3, #2
  }
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr

08009e4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	4613      	mov	r3, r2
 8009e56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b20      	cmp	r3, #32
 8009e62:	d11d      	bne.n	8009ea0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <HAL_UART_Receive_IT+0x26>
 8009e6a:	88fb      	ldrh	r3, [r7, #6]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e016      	b.n	8009ea2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d101      	bne.n	8009e82 <HAL_UART_Receive_IT+0x38>
 8009e7e:	2302      	movs	r3, #2
 8009e80:	e00f      	b.n	8009ea2 <HAL_UART_Receive_IT+0x58>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009e90:	88fb      	ldrh	r3, [r7, #6]
 8009e92:	461a      	mov	r2, r3
 8009e94:	68b9      	ldr	r1, [r7, #8]
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f000 f9c6 	bl	800a228 <UART_Start_Receive_IT>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	e000      	b.n	8009ea2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009ea0:	2302      	movs	r3, #2
  }
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
	...

08009eac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08a      	sub	sp, #40	; 0x28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	f003 030f 	and.w	r3, r3, #15
 8009eda:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10d      	bne.n	8009efe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	f003 0320 	and.w	r3, r3, #32
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d008      	beq.n	8009efe <HAL_UART_IRQHandler+0x52>
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	f003 0320 	and.w	r3, r3, #32
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fa76 	bl	800a3e8 <UART_Receive_IT>
      return;
 8009efc:	e17b      	b.n	800a1f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 80b1 	beq.w	800a068 <HAL_UART_IRQHandler+0x1bc>
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d105      	bne.n	8009f1c <HAL_UART_IRQHandler+0x70>
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 80a6 	beq.w	800a068 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00a      	beq.n	8009f3c <HAL_UART_IRQHandler+0x90>
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d005      	beq.n	8009f3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f34:	f043 0201 	orr.w	r2, r3, #1
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	f003 0304 	and.w	r3, r3, #4
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <HAL_UART_IRQHandler+0xb0>
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d005      	beq.n	8009f5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f54:	f043 0202 	orr.w	r2, r3, #2
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00a      	beq.n	8009f7c <HAL_UART_IRQHandler+0xd0>
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d005      	beq.n	8009f7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f74:	f043 0204 	orr.w	r2, r3, #4
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	f003 0308 	and.w	r3, r3, #8
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00f      	beq.n	8009fa6 <HAL_UART_IRQHandler+0xfa>
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	f003 0320 	and.w	r3, r3, #32
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d104      	bne.n	8009f9a <HAL_UART_IRQHandler+0xee>
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d005      	beq.n	8009fa6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9e:	f043 0208 	orr.w	r2, r3, #8
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 811e 	beq.w	800a1ec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	f003 0320 	and.w	r3, r3, #32
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d007      	beq.n	8009fca <HAL_UART_IRQHandler+0x11e>
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	f003 0320 	and.w	r3, r3, #32
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fa0f 	bl	800a3e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	bf14      	ite	ne
 8009fd8:	2301      	movne	r3, #1
 8009fda:	2300      	moveq	r3, #0
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe4:	f003 0308 	and.w	r3, r3, #8
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d102      	bne.n	8009ff2 <HAL_UART_IRQHandler+0x146>
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d031      	beq.n	800a056 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f951 	bl	800a29a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a002:	2b00      	cmp	r3, #0
 800a004:	d023      	beq.n	800a04e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	695a      	ldr	r2, [r3, #20]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a014:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d013      	beq.n	800a046 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a022:	4a76      	ldr	r2, [pc, #472]	; (800a1fc <HAL_UART_IRQHandler+0x350>)
 800a024:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fd f916 	bl	800725c <HAL_DMA_Abort_IT>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d016      	beq.n	800a064 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a040:	4610      	mov	r0, r2
 800a042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a044:	e00e      	b.n	800a064 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f8da 	bl	800a200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a04c:	e00a      	b.n	800a064 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f8d6 	bl	800a200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a054:	e006      	b.n	800a064 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f8d2 	bl	800a200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a062:	e0c3      	b.n	800a1ec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a064:	bf00      	nop
    return;
 800a066:	e0c1      	b.n	800a1ec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	f040 80a1 	bne.w	800a1b4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	f003 0310 	and.w	r3, r3, #16
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 809b 	beq.w	800a1b4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	f003 0310 	and.w	r3, r3, #16
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 8095 	beq.w	800a1b4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a08a:	2300      	movs	r3, #0
 800a08c:	60fb      	str	r3, [r7, #12]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d04e      	beq.n	800a14c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a0b8:	8a3b      	ldrh	r3, [r7, #16]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 8098 	beq.w	800a1f0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0c4:	8a3a      	ldrh	r2, [r7, #16]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	f080 8092 	bcs.w	800a1f0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	8a3a      	ldrh	r2, [r7, #16]
 800a0d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	2b20      	cmp	r3, #32
 800a0da:	d02b      	beq.n	800a134 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68da      	ldr	r2, [r3, #12]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a0ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	695a      	ldr	r2, [r3, #20]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f022 0201 	bic.w	r2, r2, #1
 800a0fa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	695a      	ldr	r2, [r3, #20]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a10a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2220      	movs	r2, #32
 800a110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68da      	ldr	r2, [r3, #12]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f022 0210 	bic.w	r2, r2, #16
 800a128:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fd f859 	bl	80071e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	b29b      	uxth	r3, r3
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f864 	bl	800a212 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a14a:	e051      	b.n	800a1f0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a154:	b29b      	uxth	r3, r3
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a15e:	b29b      	uxth	r3, r3
 800a160:	2b00      	cmp	r3, #0
 800a162:	d047      	beq.n	800a1f4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800a164:	8a7b      	ldrh	r3, [r7, #18]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d044      	beq.n	800a1f4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68da      	ldr	r2, [r3, #12]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a178:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	695a      	ldr	r2, [r3, #20]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0201 	bic.w	r2, r2, #1
 800a188:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2220      	movs	r2, #32
 800a18e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68da      	ldr	r2, [r3, #12]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0210 	bic.w	r2, r2, #16
 800a1a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1a8:	8a7b      	ldrh	r3, [r7, #18]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f830 	bl	800a212 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a1b2:	e01f      	b.n	800a1f4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d008      	beq.n	800a1d0 <HAL_UART_IRQHandler+0x324>
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d003      	beq.n	800a1d0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f8a6 	bl	800a31a <UART_Transmit_IT>
    return;
 800a1ce:	e012      	b.n	800a1f6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00d      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x34a>
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d008      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f8e7 	bl	800a3b8 <UART_EndTransmit_IT>
    return;
 800a1ea:	e004      	b.n	800a1f6 <HAL_UART_IRQHandler+0x34a>
    return;
 800a1ec:	bf00      	nop
 800a1ee:	e002      	b.n	800a1f6 <HAL_UART_IRQHandler+0x34a>
      return;
 800a1f0:	bf00      	nop
 800a1f2:	e000      	b.n	800a1f6 <HAL_UART_IRQHandler+0x34a>
      return;
 800a1f4:	bf00      	nop
  }
}
 800a1f6:	3728      	adds	r7, #40	; 0x28
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	0800a2f3 	.word	0x0800a2f3

0800a200 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bc80      	pop	{r7}
 800a210:	4770      	bx	lr

0800a212 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a212:	b480      	push	{r7}
 800a214:	b083      	sub	sp, #12
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	460b      	mov	r3, r1
 800a21c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a21e:	bf00      	nop
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	bc80      	pop	{r7}
 800a226:	4770      	bx	lr

0800a228 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	4613      	mov	r3, r2
 800a234:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	88fa      	ldrh	r2, [r7, #6]
 800a240:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	88fa      	ldrh	r2, [r7, #6]
 800a246:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2222      	movs	r2, #34	; 0x22
 800a252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68da      	ldr	r2, [r3, #12]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a26c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	695a      	ldr	r2, [r3, #20]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f042 0201 	orr.w	r2, r2, #1
 800a27c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68da      	ldr	r2, [r3, #12]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f042 0220 	orr.w	r2, r2, #32
 800a28c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	bc80      	pop	{r7}
 800a298:	4770      	bx	lr

0800a29a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b083      	sub	sp, #12
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68da      	ldr	r2, [r3, #12]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a2b0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	695a      	ldr	r2, [r3, #20]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 0201 	bic.w	r2, r2, #1
 800a2c0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d107      	bne.n	800a2da <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68da      	ldr	r2, [r3, #12]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 0210 	bic.w	r2, r2, #16
 800a2d8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2220      	movs	r2, #32
 800a2de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bc80      	pop	{r7}
 800a2f0:	4770      	bx	lr

0800a2f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f7ff ff77 	bl	800a200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a312:	bf00      	nop
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b085      	sub	sp, #20
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b21      	cmp	r3, #33	; 0x21
 800a32c:	d13e      	bne.n	800a3ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a336:	d114      	bne.n	800a362 <UART_Transmit_IT+0x48>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d110      	bne.n	800a362 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	461a      	mov	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a354:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	1c9a      	adds	r2, r3, #2
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	621a      	str	r2, [r3, #32]
 800a360:	e008      	b.n	800a374 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	1c59      	adds	r1, r3, #1
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	6211      	str	r1, [r2, #32]
 800a36c:	781a      	ldrb	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a378:	b29b      	uxth	r3, r3
 800a37a:	3b01      	subs	r3, #1
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	4619      	mov	r1, r3
 800a382:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10f      	bne.n	800a3a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68da      	ldr	r2, [r3, #12]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a396:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68da      	ldr	r2, [r3, #12]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e000      	b.n	800a3ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3ac:	2302      	movs	r3, #2
  }
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bc80      	pop	{r7}
 800a3b6:	4770      	bx	lr

0800a3b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68da      	ldr	r2, [r3, #12]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f7fa fa8f 	bl	80048fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	2b22      	cmp	r3, #34	; 0x22
 800a3fa:	f040 8099 	bne.w	800a530 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a406:	d117      	bne.n	800a438 <UART_Receive_IT+0x50>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d113      	bne.n	800a438 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a410:	2300      	movs	r3, #0
 800a412:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a418:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	b29b      	uxth	r3, r3
 800a422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a426:	b29a      	uxth	r2, r3
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a430:	1c9a      	adds	r2, r3, #2
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	629a      	str	r2, [r3, #40]	; 0x28
 800a436:	e026      	b.n	800a486 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44a:	d007      	beq.n	800a45c <UART_Receive_IT+0x74>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10a      	bne.n	800a46a <UART_Receive_IT+0x82>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d106      	bne.n	800a46a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	b2da      	uxtb	r2, r3
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	701a      	strb	r2, [r3, #0]
 800a468:	e008      	b.n	800a47c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a476:	b2da      	uxtb	r2, r3
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a480:	1c5a      	adds	r2, r3, #1
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	3b01      	subs	r3, #1
 800a48e:	b29b      	uxth	r3, r3
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	4619      	mov	r1, r3
 800a494:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a496:	2b00      	cmp	r3, #0
 800a498:	d148      	bne.n	800a52c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68da      	ldr	r2, [r3, #12]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f022 0220 	bic.w	r2, r2, #32
 800a4a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	695a      	ldr	r2, [r3, #20]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 0201 	bic.w	r2, r2, #1
 800a4c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d123      	bne.n	800a522 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 0210 	bic.w	r2, r2, #16
 800a4ee:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0310 	and.w	r3, r3, #16
 800a4fa:	2b10      	cmp	r3, #16
 800a4fc:	d10a      	bne.n	800a514 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4fe:	2300      	movs	r3, #0
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	60fb      	str	r3, [r7, #12]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	60fb      	str	r3, [r7, #12]
 800a512:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff fe79 	bl	800a212 <HAL_UARTEx_RxEventCallback>
 800a520:	e002      	b.n	800a528 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7fa f9d6 	bl	80048d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	e002      	b.n	800a532 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	e000      	b.n	800a532 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a530:	2302      	movs	r3, #2
  }
}
 800a532:	4618      	mov	r0, r3
 800a534:	3718      	adds	r7, #24
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68da      	ldr	r2, [r3, #12]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	689a      	ldr	r2, [r3, #8]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	431a      	orrs	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	4313      	orrs	r3, r2
 800a56a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a576:	f023 030c 	bic.w	r3, r3, #12
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	6812      	ldr	r2, [r2, #0]
 800a57e:	68b9      	ldr	r1, [r7, #8]
 800a580:	430b      	orrs	r3, r1
 800a582:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699a      	ldr	r2, [r3, #24]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	430a      	orrs	r2, r1
 800a598:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a2c      	ldr	r2, [pc, #176]	; (800a650 <UART_SetConfig+0x114>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d103      	bne.n	800a5ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a5a4:	f7fd fc84 	bl	8007eb0 <HAL_RCC_GetPCLK2Freq>
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	e002      	b.n	800a5b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a5ac:	f7fd fc6c 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 800a5b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	009a      	lsls	r2, r3, #2
 800a5bc:	441a      	add	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c8:	4a22      	ldr	r2, [pc, #136]	; (800a654 <UART_SetConfig+0x118>)
 800a5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ce:	095b      	lsrs	r3, r3, #5
 800a5d0:	0119      	lsls	r1, r3, #4
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	009a      	lsls	r2, r3, #2
 800a5dc:	441a      	add	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a5e8:	4b1a      	ldr	r3, [pc, #104]	; (800a654 <UART_SetConfig+0x118>)
 800a5ea:	fba3 0302 	umull	r0, r3, r3, r2
 800a5ee:	095b      	lsrs	r3, r3, #5
 800a5f0:	2064      	movs	r0, #100	; 0x64
 800a5f2:	fb00 f303 	mul.w	r3, r0, r3
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	011b      	lsls	r3, r3, #4
 800a5fa:	3332      	adds	r3, #50	; 0x32
 800a5fc:	4a15      	ldr	r2, [pc, #84]	; (800a654 <UART_SetConfig+0x118>)
 800a5fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a602:	095b      	lsrs	r3, r3, #5
 800a604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a608:	4419      	add	r1, r3
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4613      	mov	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	009a      	lsls	r2, r3, #2
 800a614:	441a      	add	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a620:	4b0c      	ldr	r3, [pc, #48]	; (800a654 <UART_SetConfig+0x118>)
 800a622:	fba3 0302 	umull	r0, r3, r3, r2
 800a626:	095b      	lsrs	r3, r3, #5
 800a628:	2064      	movs	r0, #100	; 0x64
 800a62a:	fb00 f303 	mul.w	r3, r0, r3
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	011b      	lsls	r3, r3, #4
 800a632:	3332      	adds	r3, #50	; 0x32
 800a634:	4a07      	ldr	r2, [pc, #28]	; (800a654 <UART_SetConfig+0x118>)
 800a636:	fba2 2303 	umull	r2, r3, r2, r3
 800a63a:	095b      	lsrs	r3, r3, #5
 800a63c:	f003 020f 	and.w	r2, r3, #15
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	440a      	add	r2, r1
 800a646:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a648:	bf00      	nop
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	40013800 	.word	0x40013800
 800a654:	51eb851f 	.word	0x51eb851f

0800a658 <__errno>:
 800a658:	4b01      	ldr	r3, [pc, #4]	; (800a660 <__errno+0x8>)
 800a65a:	6818      	ldr	r0, [r3, #0]
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	20000084 	.word	0x20000084

0800a664 <__libc_init_array>:
 800a664:	b570      	push	{r4, r5, r6, lr}
 800a666:	2600      	movs	r6, #0
 800a668:	4d0c      	ldr	r5, [pc, #48]	; (800a69c <__libc_init_array+0x38>)
 800a66a:	4c0d      	ldr	r4, [pc, #52]	; (800a6a0 <__libc_init_array+0x3c>)
 800a66c:	1b64      	subs	r4, r4, r5
 800a66e:	10a4      	asrs	r4, r4, #2
 800a670:	42a6      	cmp	r6, r4
 800a672:	d109      	bne.n	800a688 <__libc_init_array+0x24>
 800a674:	f001 fa22 	bl	800babc <_init>
 800a678:	2600      	movs	r6, #0
 800a67a:	4d0a      	ldr	r5, [pc, #40]	; (800a6a4 <__libc_init_array+0x40>)
 800a67c:	4c0a      	ldr	r4, [pc, #40]	; (800a6a8 <__libc_init_array+0x44>)
 800a67e:	1b64      	subs	r4, r4, r5
 800a680:	10a4      	asrs	r4, r4, #2
 800a682:	42a6      	cmp	r6, r4
 800a684:	d105      	bne.n	800a692 <__libc_init_array+0x2e>
 800a686:	bd70      	pop	{r4, r5, r6, pc}
 800a688:	f855 3b04 	ldr.w	r3, [r5], #4
 800a68c:	4798      	blx	r3
 800a68e:	3601      	adds	r6, #1
 800a690:	e7ee      	b.n	800a670 <__libc_init_array+0xc>
 800a692:	f855 3b04 	ldr.w	r3, [r5], #4
 800a696:	4798      	blx	r3
 800a698:	3601      	adds	r6, #1
 800a69a:	e7f2      	b.n	800a682 <__libc_init_array+0x1e>
 800a69c:	0800be78 	.word	0x0800be78
 800a6a0:	0800be78 	.word	0x0800be78
 800a6a4:	0800be78 	.word	0x0800be78
 800a6a8:	0800be7c 	.word	0x0800be7c

0800a6ac <memset>:
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	4402      	add	r2, r0
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d100      	bne.n	800a6b6 <memset+0xa>
 800a6b4:	4770      	bx	lr
 800a6b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a6ba:	e7f9      	b.n	800a6b0 <memset+0x4>

0800a6bc <log10>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	4604      	mov	r4, r0
 800a6c0:	460d      	mov	r5, r1
 800a6c2:	f000 f8e1 	bl	800a888 <__ieee754_log10>
 800a6c6:	4b17      	ldr	r3, [pc, #92]	; (800a724 <log10+0x68>)
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	f993 3000 	ldrsb.w	r3, [r3]
 800a6ce:	460f      	mov	r7, r1
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	d01a      	beq.n	800a70a <log10+0x4e>
 800a6d4:	4622      	mov	r2, r4
 800a6d6:	462b      	mov	r3, r5
 800a6d8:	4620      	mov	r0, r4
 800a6da:	4629      	mov	r1, r5
 800a6dc:	f7f6 f98e 	bl	80009fc <__aeabi_dcmpun>
 800a6e0:	b998      	cbnz	r0, 800a70a <log10+0x4e>
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	f7f6 f969 	bl	80009c0 <__aeabi_dcmple>
 800a6ee:	b160      	cbz	r0, 800a70a <log10+0x4e>
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	f7f6 f94e 	bl	8000998 <__aeabi_dcmpeq>
 800a6fc:	b140      	cbz	r0, 800a710 <log10+0x54>
 800a6fe:	f7ff ffab 	bl	800a658 <__errno>
 800a702:	2322      	movs	r3, #34	; 0x22
 800a704:	2600      	movs	r6, #0
 800a706:	4f08      	ldr	r7, [pc, #32]	; (800a728 <log10+0x6c>)
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	4630      	mov	r0, r6
 800a70c:	4639      	mov	r1, r7
 800a70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a710:	f7ff ffa2 	bl	800a658 <__errno>
 800a714:	2321      	movs	r3, #33	; 0x21
 800a716:	6003      	str	r3, [r0, #0]
 800a718:	4804      	ldr	r0, [pc, #16]	; (800a72c <log10+0x70>)
 800a71a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a71e:	f000 bf03 	b.w	800b528 <nan>
 800a722:	bf00      	nop
 800a724:	200000e8 	.word	0x200000e8
 800a728:	fff00000 	.word	0xfff00000
 800a72c:	0800be35 	.word	0x0800be35

0800a730 <pow>:
 800a730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a734:	461f      	mov	r7, r3
 800a736:	4680      	mov	r8, r0
 800a738:	4689      	mov	r9, r1
 800a73a:	4616      	mov	r6, r2
 800a73c:	f000 f928 	bl	800a990 <__ieee754_pow>
 800a740:	4b4d      	ldr	r3, [pc, #308]	; (800a878 <pow+0x148>)
 800a742:	4604      	mov	r4, r0
 800a744:	f993 3000 	ldrsb.w	r3, [r3]
 800a748:	460d      	mov	r5, r1
 800a74a:	3301      	adds	r3, #1
 800a74c:	d015      	beq.n	800a77a <pow+0x4a>
 800a74e:	4632      	mov	r2, r6
 800a750:	463b      	mov	r3, r7
 800a752:	4630      	mov	r0, r6
 800a754:	4639      	mov	r1, r7
 800a756:	f7f6 f951 	bl	80009fc <__aeabi_dcmpun>
 800a75a:	b970      	cbnz	r0, 800a77a <pow+0x4a>
 800a75c:	4642      	mov	r2, r8
 800a75e:	464b      	mov	r3, r9
 800a760:	4640      	mov	r0, r8
 800a762:	4649      	mov	r1, r9
 800a764:	f7f6 f94a 	bl	80009fc <__aeabi_dcmpun>
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	b148      	cbz	r0, 800a782 <pow+0x52>
 800a76e:	4630      	mov	r0, r6
 800a770:	4639      	mov	r1, r7
 800a772:	f7f6 f911 	bl	8000998 <__aeabi_dcmpeq>
 800a776:	2800      	cmp	r0, #0
 800a778:	d17b      	bne.n	800a872 <pow+0x142>
 800a77a:	4620      	mov	r0, r4
 800a77c:	4629      	mov	r1, r5
 800a77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a782:	4640      	mov	r0, r8
 800a784:	4649      	mov	r1, r9
 800a786:	f7f6 f907 	bl	8000998 <__aeabi_dcmpeq>
 800a78a:	b1e0      	cbz	r0, 800a7c6 <pow+0x96>
 800a78c:	2200      	movs	r2, #0
 800a78e:	2300      	movs	r3, #0
 800a790:	4630      	mov	r0, r6
 800a792:	4639      	mov	r1, r7
 800a794:	f7f6 f900 	bl	8000998 <__aeabi_dcmpeq>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d16a      	bne.n	800a872 <pow+0x142>
 800a79c:	4630      	mov	r0, r6
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f000 febb 	bl	800b51a <finite>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d0e8      	beq.n	800a77a <pow+0x4a>
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	f7f6 f8fc 	bl	80009ac <__aeabi_dcmplt>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d0e0      	beq.n	800a77a <pow+0x4a>
 800a7b8:	f7ff ff4e 	bl	800a658 <__errno>
 800a7bc:	2321      	movs	r3, #33	; 0x21
 800a7be:	2400      	movs	r4, #0
 800a7c0:	6003      	str	r3, [r0, #0]
 800a7c2:	4d2e      	ldr	r5, [pc, #184]	; (800a87c <pow+0x14c>)
 800a7c4:	e7d9      	b.n	800a77a <pow+0x4a>
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f000 fea6 	bl	800b51a <finite>
 800a7ce:	bba8      	cbnz	r0, 800a83c <pow+0x10c>
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	f000 fea1 	bl	800b51a <finite>
 800a7d8:	b380      	cbz	r0, 800a83c <pow+0x10c>
 800a7da:	4630      	mov	r0, r6
 800a7dc:	4639      	mov	r1, r7
 800a7de:	f000 fe9c 	bl	800b51a <finite>
 800a7e2:	b358      	cbz	r0, 800a83c <pow+0x10c>
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	462b      	mov	r3, r5
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	f7f6 f906 	bl	80009fc <__aeabi_dcmpun>
 800a7f0:	b160      	cbz	r0, 800a80c <pow+0xdc>
 800a7f2:	f7ff ff31 	bl	800a658 <__errno>
 800a7f6:	2321      	movs	r3, #33	; 0x21
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	6003      	str	r3, [r0, #0]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4610      	mov	r0, r2
 800a800:	4619      	mov	r1, r3
 800a802:	f7f5 ff8b 	bl	800071c <__aeabi_ddiv>
 800a806:	4604      	mov	r4, r0
 800a808:	460d      	mov	r5, r1
 800a80a:	e7b6      	b.n	800a77a <pow+0x4a>
 800a80c:	f7ff ff24 	bl	800a658 <__errno>
 800a810:	2322      	movs	r3, #34	; 0x22
 800a812:	2200      	movs	r2, #0
 800a814:	6003      	str	r3, [r0, #0]
 800a816:	4649      	mov	r1, r9
 800a818:	2300      	movs	r3, #0
 800a81a:	4640      	mov	r0, r8
 800a81c:	f7f6 f8c6 	bl	80009ac <__aeabi_dcmplt>
 800a820:	2400      	movs	r4, #0
 800a822:	b148      	cbz	r0, 800a838 <pow+0x108>
 800a824:	4630      	mov	r0, r6
 800a826:	4639      	mov	r1, r7
 800a828:	f000 fe84 	bl	800b534 <rint>
 800a82c:	4632      	mov	r2, r6
 800a82e:	463b      	mov	r3, r7
 800a830:	f7f6 f8b2 	bl	8000998 <__aeabi_dcmpeq>
 800a834:	2800      	cmp	r0, #0
 800a836:	d0c4      	beq.n	800a7c2 <pow+0x92>
 800a838:	4d11      	ldr	r5, [pc, #68]	; (800a880 <pow+0x150>)
 800a83a:	e79e      	b.n	800a77a <pow+0x4a>
 800a83c:	2200      	movs	r2, #0
 800a83e:	2300      	movs	r3, #0
 800a840:	4620      	mov	r0, r4
 800a842:	4629      	mov	r1, r5
 800a844:	f7f6 f8a8 	bl	8000998 <__aeabi_dcmpeq>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d096      	beq.n	800a77a <pow+0x4a>
 800a84c:	4640      	mov	r0, r8
 800a84e:	4649      	mov	r1, r9
 800a850:	f000 fe63 	bl	800b51a <finite>
 800a854:	2800      	cmp	r0, #0
 800a856:	d090      	beq.n	800a77a <pow+0x4a>
 800a858:	4630      	mov	r0, r6
 800a85a:	4639      	mov	r1, r7
 800a85c:	f000 fe5d 	bl	800b51a <finite>
 800a860:	2800      	cmp	r0, #0
 800a862:	d08a      	beq.n	800a77a <pow+0x4a>
 800a864:	f7ff fef8 	bl	800a658 <__errno>
 800a868:	2322      	movs	r3, #34	; 0x22
 800a86a:	2400      	movs	r4, #0
 800a86c:	2500      	movs	r5, #0
 800a86e:	6003      	str	r3, [r0, #0]
 800a870:	e783      	b.n	800a77a <pow+0x4a>
 800a872:	2400      	movs	r4, #0
 800a874:	4d03      	ldr	r5, [pc, #12]	; (800a884 <pow+0x154>)
 800a876:	e780      	b.n	800a77a <pow+0x4a>
 800a878:	200000e8 	.word	0x200000e8
 800a87c:	fff00000 	.word	0xfff00000
 800a880:	7ff00000 	.word	0x7ff00000
 800a884:	3ff00000 	.word	0x3ff00000

0800a888 <__ieee754_log10>:
 800a888:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a890:	4604      	mov	r4, r0
 800a892:	460d      	mov	r5, r1
 800a894:	460b      	mov	r3, r1
 800a896:	da26      	bge.n	800a8e6 <__ieee754_log10+0x5e>
 800a898:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a89c:	4302      	orrs	r2, r0
 800a89e:	d107      	bne.n	800a8b0 <__ieee754_log10+0x28>
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	4936      	ldr	r1, [pc, #216]	; (800a980 <__ieee754_log10+0xf8>)
 800a8a8:	f7f5 ff38 	bl	800071c <__aeabi_ddiv>
 800a8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b0:	2900      	cmp	r1, #0
 800a8b2:	da05      	bge.n	800a8c0 <__ieee754_log10+0x38>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	f7f5 fc4f 	bl	8000158 <__aeabi_dsub>
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e7f3      	b.n	800a8a8 <__ieee754_log10+0x20>
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	4b30      	ldr	r3, [pc, #192]	; (800a984 <__ieee754_log10+0xfc>)
 800a8c4:	f7f5 fe00 	bl	80004c8 <__aeabi_dmul>
 800a8c8:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	460d      	mov	r5, r1
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	492d      	ldr	r1, [pc, #180]	; (800a988 <__ieee754_log10+0x100>)
 800a8d4:	428b      	cmp	r3, r1
 800a8d6:	dd08      	ble.n	800a8ea <__ieee754_log10+0x62>
 800a8d8:	4622      	mov	r2, r4
 800a8da:	462b      	mov	r3, r5
 800a8dc:	4620      	mov	r0, r4
 800a8de:	4629      	mov	r1, r5
 800a8e0:	f7f5 fc3c 	bl	800015c <__adddf3>
 800a8e4:	e7e2      	b.n	800a8ac <__ieee754_log10+0x24>
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	e7f3      	b.n	800a8d2 <__ieee754_log10+0x4a>
 800a8ea:	1518      	asrs	r0, r3, #20
 800a8ec:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800a8f0:	4410      	add	r0, r2
 800a8f2:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800a8f6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800a8fa:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800a8fe:	f7f5 fd79 	bl	80003f4 <__aeabi_i2d>
 800a902:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800a906:	3303      	adds	r3, #3
 800a908:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800a90c:	4606      	mov	r6, r0
 800a90e:	460f      	mov	r7, r1
 800a910:	4620      	mov	r0, r4
 800a912:	4629      	mov	r1, r5
 800a914:	f000 ff20 	bl	800b758 <__ieee754_log>
 800a918:	a313      	add	r3, pc, #76	; (adr r3, 800a968 <__ieee754_log10+0xe0>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	4680      	mov	r8, r0
 800a920:	4689      	mov	r9, r1
 800a922:	4630      	mov	r0, r6
 800a924:	4639      	mov	r1, r7
 800a926:	f7f5 fdcf 	bl	80004c8 <__aeabi_dmul>
 800a92a:	a311      	add	r3, pc, #68	; (adr r3, 800a970 <__ieee754_log10+0xe8>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	4604      	mov	r4, r0
 800a932:	460d      	mov	r5, r1
 800a934:	4640      	mov	r0, r8
 800a936:	4649      	mov	r1, r9
 800a938:	f7f5 fdc6 	bl	80004c8 <__aeabi_dmul>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4620      	mov	r0, r4
 800a942:	4629      	mov	r1, r5
 800a944:	f7f5 fc0a 	bl	800015c <__adddf3>
 800a948:	a30b      	add	r3, pc, #44	; (adr r3, 800a978 <__ieee754_log10+0xf0>)
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	4604      	mov	r4, r0
 800a950:	460d      	mov	r5, r1
 800a952:	4630      	mov	r0, r6
 800a954:	4639      	mov	r1, r7
 800a956:	f7f5 fdb7 	bl	80004c8 <__aeabi_dmul>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	e7bd      	b.n	800a8e0 <__ieee754_log10+0x58>
 800a964:	f3af 8000 	nop.w
 800a968:	11f12b36 	.word	0x11f12b36
 800a96c:	3d59fef3 	.word	0x3d59fef3
 800a970:	1526e50e 	.word	0x1526e50e
 800a974:	3fdbcb7b 	.word	0x3fdbcb7b
 800a978:	509f6000 	.word	0x509f6000
 800a97c:	3fd34413 	.word	0x3fd34413
 800a980:	c3500000 	.word	0xc3500000
 800a984:	43500000 	.word	0x43500000
 800a988:	7fefffff 	.word	0x7fefffff
 800a98c:	00000000 	.word	0x00000000

0800a990 <__ieee754_pow>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	b093      	sub	sp, #76	; 0x4c
 800a996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a99a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a99e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a9a2:	ea55 0302 	orrs.w	r3, r5, r2
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	4688      	mov	r8, r1
 800a9aa:	f000 84bf 	beq.w	800b32c <__ieee754_pow+0x99c>
 800a9ae:	4b7e      	ldr	r3, [pc, #504]	; (800aba8 <__ieee754_pow+0x218>)
 800a9b0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a9b4:	429c      	cmp	r4, r3
 800a9b6:	4689      	mov	r9, r1
 800a9b8:	4682      	mov	sl, r0
 800a9ba:	dc09      	bgt.n	800a9d0 <__ieee754_pow+0x40>
 800a9bc:	d103      	bne.n	800a9c6 <__ieee754_pow+0x36>
 800a9be:	b978      	cbnz	r0, 800a9e0 <__ieee754_pow+0x50>
 800a9c0:	42a5      	cmp	r5, r4
 800a9c2:	dd02      	ble.n	800a9ca <__ieee754_pow+0x3a>
 800a9c4:	e00c      	b.n	800a9e0 <__ieee754_pow+0x50>
 800a9c6:	429d      	cmp	r5, r3
 800a9c8:	dc02      	bgt.n	800a9d0 <__ieee754_pow+0x40>
 800a9ca:	429d      	cmp	r5, r3
 800a9cc:	d10e      	bne.n	800a9ec <__ieee754_pow+0x5c>
 800a9ce:	b16a      	cbz	r2, 800a9ec <__ieee754_pow+0x5c>
 800a9d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a9d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a9d8:	ea54 030a 	orrs.w	r3, r4, sl
 800a9dc:	f000 84a6 	beq.w	800b32c <__ieee754_pow+0x99c>
 800a9e0:	4872      	ldr	r0, [pc, #456]	; (800abac <__ieee754_pow+0x21c>)
 800a9e2:	b013      	add	sp, #76	; 0x4c
 800a9e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	f000 bd9e 	b.w	800b528 <nan>
 800a9ec:	f1b9 0f00 	cmp.w	r9, #0
 800a9f0:	da39      	bge.n	800aa66 <__ieee754_pow+0xd6>
 800a9f2:	4b6f      	ldr	r3, [pc, #444]	; (800abb0 <__ieee754_pow+0x220>)
 800a9f4:	429d      	cmp	r5, r3
 800a9f6:	dc54      	bgt.n	800aaa2 <__ieee754_pow+0x112>
 800a9f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a9fc:	429d      	cmp	r5, r3
 800a9fe:	f340 84a6 	ble.w	800b34e <__ieee754_pow+0x9be>
 800aa02:	152b      	asrs	r3, r5, #20
 800aa04:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa08:	2b14      	cmp	r3, #20
 800aa0a:	dd0f      	ble.n	800aa2c <__ieee754_pow+0x9c>
 800aa0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800aa10:	fa22 f103 	lsr.w	r1, r2, r3
 800aa14:	fa01 f303 	lsl.w	r3, r1, r3
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	f040 8498 	bne.w	800b34e <__ieee754_pow+0x9be>
 800aa1e:	f001 0101 	and.w	r1, r1, #1
 800aa22:	f1c1 0302 	rsb	r3, r1, #2
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	b182      	cbz	r2, 800aa4c <__ieee754_pow+0xbc>
 800aa2a:	e05e      	b.n	800aaea <__ieee754_pow+0x15a>
 800aa2c:	2a00      	cmp	r2, #0
 800aa2e:	d15a      	bne.n	800aae6 <__ieee754_pow+0x156>
 800aa30:	f1c3 0314 	rsb	r3, r3, #20
 800aa34:	fa45 f103 	asr.w	r1, r5, r3
 800aa38:	fa01 f303 	lsl.w	r3, r1, r3
 800aa3c:	42ab      	cmp	r3, r5
 800aa3e:	f040 8483 	bne.w	800b348 <__ieee754_pow+0x9b8>
 800aa42:	f001 0101 	and.w	r1, r1, #1
 800aa46:	f1c1 0302 	rsb	r3, r1, #2
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	4b59      	ldr	r3, [pc, #356]	; (800abb4 <__ieee754_pow+0x224>)
 800aa4e:	429d      	cmp	r5, r3
 800aa50:	d130      	bne.n	800aab4 <__ieee754_pow+0x124>
 800aa52:	2e00      	cmp	r6, #0
 800aa54:	f280 8474 	bge.w	800b340 <__ieee754_pow+0x9b0>
 800aa58:	463a      	mov	r2, r7
 800aa5a:	4643      	mov	r3, r8
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	4955      	ldr	r1, [pc, #340]	; (800abb4 <__ieee754_pow+0x224>)
 800aa60:	f7f5 fe5c 	bl	800071c <__aeabi_ddiv>
 800aa64:	e02f      	b.n	800aac6 <__ieee754_pow+0x136>
 800aa66:	2300      	movs	r3, #0
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	2a00      	cmp	r2, #0
 800aa6c:	d13d      	bne.n	800aaea <__ieee754_pow+0x15a>
 800aa6e:	4b4e      	ldr	r3, [pc, #312]	; (800aba8 <__ieee754_pow+0x218>)
 800aa70:	429d      	cmp	r5, r3
 800aa72:	d1eb      	bne.n	800aa4c <__ieee754_pow+0xbc>
 800aa74:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aa78:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aa7c:	ea53 030a 	orrs.w	r3, r3, sl
 800aa80:	f000 8454 	beq.w	800b32c <__ieee754_pow+0x99c>
 800aa84:	4b4c      	ldr	r3, [pc, #304]	; (800abb8 <__ieee754_pow+0x228>)
 800aa86:	429c      	cmp	r4, r3
 800aa88:	dd0d      	ble.n	800aaa6 <__ieee754_pow+0x116>
 800aa8a:	2e00      	cmp	r6, #0
 800aa8c:	f280 8454 	bge.w	800b338 <__ieee754_pow+0x9a8>
 800aa90:	f04f 0b00 	mov.w	fp, #0
 800aa94:	f04f 0c00 	mov.w	ip, #0
 800aa98:	4658      	mov	r0, fp
 800aa9a:	4661      	mov	r1, ip
 800aa9c:	b013      	add	sp, #76	; 0x4c
 800aa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	e7e0      	b.n	800aa68 <__ieee754_pow+0xd8>
 800aaa6:	2e00      	cmp	r6, #0
 800aaa8:	daf2      	bge.n	800aa90 <__ieee754_pow+0x100>
 800aaaa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800aaae:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800aab2:	e7f1      	b.n	800aa98 <__ieee754_pow+0x108>
 800aab4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800aab8:	d108      	bne.n	800aacc <__ieee754_pow+0x13c>
 800aaba:	463a      	mov	r2, r7
 800aabc:	4643      	mov	r3, r8
 800aabe:	4638      	mov	r0, r7
 800aac0:	4641      	mov	r1, r8
 800aac2:	f7f5 fd01 	bl	80004c8 <__aeabi_dmul>
 800aac6:	4683      	mov	fp, r0
 800aac8:	468c      	mov	ip, r1
 800aaca:	e7e5      	b.n	800aa98 <__ieee754_pow+0x108>
 800aacc:	4b3b      	ldr	r3, [pc, #236]	; (800abbc <__ieee754_pow+0x22c>)
 800aace:	429e      	cmp	r6, r3
 800aad0:	d10b      	bne.n	800aaea <__ieee754_pow+0x15a>
 800aad2:	f1b9 0f00 	cmp.w	r9, #0
 800aad6:	db08      	blt.n	800aaea <__ieee754_pow+0x15a>
 800aad8:	4638      	mov	r0, r7
 800aada:	4641      	mov	r1, r8
 800aadc:	b013      	add	sp, #76	; 0x4c
 800aade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae2:	f000 bc6b 	b.w	800b3bc <__ieee754_sqrt>
 800aae6:	2300      	movs	r3, #0
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	4638      	mov	r0, r7
 800aaec:	4641      	mov	r1, r8
 800aaee:	f000 fd11 	bl	800b514 <fabs>
 800aaf2:	4683      	mov	fp, r0
 800aaf4:	468c      	mov	ip, r1
 800aaf6:	f1ba 0f00 	cmp.w	sl, #0
 800aafa:	d129      	bne.n	800ab50 <__ieee754_pow+0x1c0>
 800aafc:	b124      	cbz	r4, 800ab08 <__ieee754_pow+0x178>
 800aafe:	4b2d      	ldr	r3, [pc, #180]	; (800abb4 <__ieee754_pow+0x224>)
 800ab00:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d123      	bne.n	800ab50 <__ieee754_pow+0x1c0>
 800ab08:	2e00      	cmp	r6, #0
 800ab0a:	da07      	bge.n	800ab1c <__ieee754_pow+0x18c>
 800ab0c:	465a      	mov	r2, fp
 800ab0e:	4663      	mov	r3, ip
 800ab10:	2000      	movs	r0, #0
 800ab12:	4928      	ldr	r1, [pc, #160]	; (800abb4 <__ieee754_pow+0x224>)
 800ab14:	f7f5 fe02 	bl	800071c <__aeabi_ddiv>
 800ab18:	4683      	mov	fp, r0
 800ab1a:	468c      	mov	ip, r1
 800ab1c:	f1b9 0f00 	cmp.w	r9, #0
 800ab20:	daba      	bge.n	800aa98 <__ieee754_pow+0x108>
 800ab22:	9b00      	ldr	r3, [sp, #0]
 800ab24:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ab28:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ab2c:	4323      	orrs	r3, r4
 800ab2e:	d108      	bne.n	800ab42 <__ieee754_pow+0x1b2>
 800ab30:	465a      	mov	r2, fp
 800ab32:	4663      	mov	r3, ip
 800ab34:	4658      	mov	r0, fp
 800ab36:	4661      	mov	r1, ip
 800ab38:	f7f5 fb0e 	bl	8000158 <__aeabi_dsub>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	e78e      	b.n	800aa60 <__ieee754_pow+0xd0>
 800ab42:	9b00      	ldr	r3, [sp, #0]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d1a7      	bne.n	800aa98 <__ieee754_pow+0x108>
 800ab48:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800ab4c:	469c      	mov	ip, r3
 800ab4e:	e7a3      	b.n	800aa98 <__ieee754_pow+0x108>
 800ab50:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800ab54:	3b01      	subs	r3, #1
 800ab56:	930c      	str	r3, [sp, #48]	; 0x30
 800ab58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab5a:	9b00      	ldr	r3, [sp, #0]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	d104      	bne.n	800ab6a <__ieee754_pow+0x1da>
 800ab60:	463a      	mov	r2, r7
 800ab62:	4643      	mov	r3, r8
 800ab64:	4638      	mov	r0, r7
 800ab66:	4641      	mov	r1, r8
 800ab68:	e7e6      	b.n	800ab38 <__ieee754_pow+0x1a8>
 800ab6a:	4b15      	ldr	r3, [pc, #84]	; (800abc0 <__ieee754_pow+0x230>)
 800ab6c:	429d      	cmp	r5, r3
 800ab6e:	f340 80f9 	ble.w	800ad64 <__ieee754_pow+0x3d4>
 800ab72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ab76:	429d      	cmp	r5, r3
 800ab78:	4b0f      	ldr	r3, [pc, #60]	; (800abb8 <__ieee754_pow+0x228>)
 800ab7a:	dd09      	ble.n	800ab90 <__ieee754_pow+0x200>
 800ab7c:	429c      	cmp	r4, r3
 800ab7e:	dc0c      	bgt.n	800ab9a <__ieee754_pow+0x20a>
 800ab80:	2e00      	cmp	r6, #0
 800ab82:	da85      	bge.n	800aa90 <__ieee754_pow+0x100>
 800ab84:	a306      	add	r3, pc, #24	; (adr r3, 800aba0 <__ieee754_pow+0x210>)
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	4610      	mov	r0, r2
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	e798      	b.n	800aac2 <__ieee754_pow+0x132>
 800ab90:	429c      	cmp	r4, r3
 800ab92:	dbf5      	blt.n	800ab80 <__ieee754_pow+0x1f0>
 800ab94:	4b07      	ldr	r3, [pc, #28]	; (800abb4 <__ieee754_pow+0x224>)
 800ab96:	429c      	cmp	r4, r3
 800ab98:	dd14      	ble.n	800abc4 <__ieee754_pow+0x234>
 800ab9a:	2e00      	cmp	r6, #0
 800ab9c:	dcf2      	bgt.n	800ab84 <__ieee754_pow+0x1f4>
 800ab9e:	e777      	b.n	800aa90 <__ieee754_pow+0x100>
 800aba0:	8800759c 	.word	0x8800759c
 800aba4:	7e37e43c 	.word	0x7e37e43c
 800aba8:	7ff00000 	.word	0x7ff00000
 800abac:	0800be35 	.word	0x0800be35
 800abb0:	433fffff 	.word	0x433fffff
 800abb4:	3ff00000 	.word	0x3ff00000
 800abb8:	3fefffff 	.word	0x3fefffff
 800abbc:	3fe00000 	.word	0x3fe00000
 800abc0:	41e00000 	.word	0x41e00000
 800abc4:	4661      	mov	r1, ip
 800abc6:	2200      	movs	r2, #0
 800abc8:	4658      	mov	r0, fp
 800abca:	4b61      	ldr	r3, [pc, #388]	; (800ad50 <__ieee754_pow+0x3c0>)
 800abcc:	f7f5 fac4 	bl	8000158 <__aeabi_dsub>
 800abd0:	a355      	add	r3, pc, #340	; (adr r3, 800ad28 <__ieee754_pow+0x398>)
 800abd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd6:	4604      	mov	r4, r0
 800abd8:	460d      	mov	r5, r1
 800abda:	f7f5 fc75 	bl	80004c8 <__aeabi_dmul>
 800abde:	a354      	add	r3, pc, #336	; (adr r3, 800ad30 <__ieee754_pow+0x3a0>)
 800abe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe4:	4606      	mov	r6, r0
 800abe6:	460f      	mov	r7, r1
 800abe8:	4620      	mov	r0, r4
 800abea:	4629      	mov	r1, r5
 800abec:	f7f5 fc6c 	bl	80004c8 <__aeabi_dmul>
 800abf0:	2200      	movs	r2, #0
 800abf2:	4682      	mov	sl, r0
 800abf4:	468b      	mov	fp, r1
 800abf6:	4620      	mov	r0, r4
 800abf8:	4629      	mov	r1, r5
 800abfa:	4b56      	ldr	r3, [pc, #344]	; (800ad54 <__ieee754_pow+0x3c4>)
 800abfc:	f7f5 fc64 	bl	80004c8 <__aeabi_dmul>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	a14c      	add	r1, pc, #304	; (adr r1, 800ad38 <__ieee754_pow+0x3a8>)
 800ac06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac0a:	f7f5 faa5 	bl	8000158 <__aeabi_dsub>
 800ac0e:	4622      	mov	r2, r4
 800ac10:	462b      	mov	r3, r5
 800ac12:	f7f5 fc59 	bl	80004c8 <__aeabi_dmul>
 800ac16:	4602      	mov	r2, r0
 800ac18:	460b      	mov	r3, r1
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	494e      	ldr	r1, [pc, #312]	; (800ad58 <__ieee754_pow+0x3c8>)
 800ac1e:	f7f5 fa9b 	bl	8000158 <__aeabi_dsub>
 800ac22:	4622      	mov	r2, r4
 800ac24:	462b      	mov	r3, r5
 800ac26:	4680      	mov	r8, r0
 800ac28:	4689      	mov	r9, r1
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	f7f5 fc4b 	bl	80004c8 <__aeabi_dmul>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4640      	mov	r0, r8
 800ac38:	4649      	mov	r1, r9
 800ac3a:	f7f5 fc45 	bl	80004c8 <__aeabi_dmul>
 800ac3e:	a340      	add	r3, pc, #256	; (adr r3, 800ad40 <__ieee754_pow+0x3b0>)
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	f7f5 fc40 	bl	80004c8 <__aeabi_dmul>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	4659      	mov	r1, fp
 800ac50:	f7f5 fa82 	bl	8000158 <__aeabi_dsub>
 800ac54:	f04f 0a00 	mov.w	sl, #0
 800ac58:	4602      	mov	r2, r0
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	460d      	mov	r5, r1
 800ac60:	4630      	mov	r0, r6
 800ac62:	4639      	mov	r1, r7
 800ac64:	f7f5 fa7a 	bl	800015c <__adddf3>
 800ac68:	4632      	mov	r2, r6
 800ac6a:	463b      	mov	r3, r7
 800ac6c:	4650      	mov	r0, sl
 800ac6e:	468b      	mov	fp, r1
 800ac70:	f7f5 fa72 	bl	8000158 <__aeabi_dsub>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4620      	mov	r0, r4
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	f7f5 fa6c 	bl	8000158 <__aeabi_dsub>
 800ac80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ac84:	9b00      	ldr	r3, [sp, #0]
 800ac86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	f04f 0600 	mov.w	r6, #0
 800ac90:	f04f 0200 	mov.w	r2, #0
 800ac94:	bf0c      	ite	eq
 800ac96:	4b31      	ldreq	r3, [pc, #196]	; (800ad5c <__ieee754_pow+0x3cc>)
 800ac98:	4b2d      	ldrne	r3, [pc, #180]	; (800ad50 <__ieee754_pow+0x3c0>)
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	460d      	mov	r5, r1
 800ac9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca2:	e9cd 2300 	strd	r2, r3, [sp]
 800aca6:	4632      	mov	r2, r6
 800aca8:	463b      	mov	r3, r7
 800acaa:	f7f5 fa55 	bl	8000158 <__aeabi_dsub>
 800acae:	4652      	mov	r2, sl
 800acb0:	465b      	mov	r3, fp
 800acb2:	f7f5 fc09 	bl	80004c8 <__aeabi_dmul>
 800acb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acba:	4680      	mov	r8, r0
 800acbc:	4689      	mov	r9, r1
 800acbe:	4620      	mov	r0, r4
 800acc0:	4629      	mov	r1, r5
 800acc2:	f7f5 fc01 	bl	80004c8 <__aeabi_dmul>
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	4640      	mov	r0, r8
 800accc:	4649      	mov	r1, r9
 800acce:	f7f5 fa45 	bl	800015c <__adddf3>
 800acd2:	4632      	mov	r2, r6
 800acd4:	463b      	mov	r3, r7
 800acd6:	4680      	mov	r8, r0
 800acd8:	4689      	mov	r9, r1
 800acda:	4650      	mov	r0, sl
 800acdc:	4659      	mov	r1, fp
 800acde:	f7f5 fbf3 	bl	80004c8 <__aeabi_dmul>
 800ace2:	4604      	mov	r4, r0
 800ace4:	460d      	mov	r5, r1
 800ace6:	460b      	mov	r3, r1
 800ace8:	4602      	mov	r2, r0
 800acea:	4649      	mov	r1, r9
 800acec:	4640      	mov	r0, r8
 800acee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800acf2:	f7f5 fa33 	bl	800015c <__adddf3>
 800acf6:	4b1a      	ldr	r3, [pc, #104]	; (800ad60 <__ieee754_pow+0x3d0>)
 800acf8:	4682      	mov	sl, r0
 800acfa:	4299      	cmp	r1, r3
 800acfc:	460f      	mov	r7, r1
 800acfe:	460e      	mov	r6, r1
 800ad00:	f340 82ed 	ble.w	800b2de <__ieee754_pow+0x94e>
 800ad04:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ad08:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ad0c:	4303      	orrs	r3, r0
 800ad0e:	f000 81e7 	beq.w	800b0e0 <__ieee754_pow+0x750>
 800ad12:	a30d      	add	r3, pc, #52	; (adr r3, 800ad48 <__ieee754_pow+0x3b8>)
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad1c:	f7f5 fbd4 	bl	80004c8 <__aeabi_dmul>
 800ad20:	a309      	add	r3, pc, #36	; (adr r3, 800ad48 <__ieee754_pow+0x3b8>)
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	e6cc      	b.n	800aac2 <__ieee754_pow+0x132>
 800ad28:	60000000 	.word	0x60000000
 800ad2c:	3ff71547 	.word	0x3ff71547
 800ad30:	f85ddf44 	.word	0xf85ddf44
 800ad34:	3e54ae0b 	.word	0x3e54ae0b
 800ad38:	55555555 	.word	0x55555555
 800ad3c:	3fd55555 	.word	0x3fd55555
 800ad40:	652b82fe 	.word	0x652b82fe
 800ad44:	3ff71547 	.word	0x3ff71547
 800ad48:	8800759c 	.word	0x8800759c
 800ad4c:	7e37e43c 	.word	0x7e37e43c
 800ad50:	3ff00000 	.word	0x3ff00000
 800ad54:	3fd00000 	.word	0x3fd00000
 800ad58:	3fe00000 	.word	0x3fe00000
 800ad5c:	bff00000 	.word	0xbff00000
 800ad60:	408fffff 	.word	0x408fffff
 800ad64:	4bd4      	ldr	r3, [pc, #848]	; (800b0b8 <__ieee754_pow+0x728>)
 800ad66:	2200      	movs	r2, #0
 800ad68:	ea09 0303 	and.w	r3, r9, r3
 800ad6c:	b943      	cbnz	r3, 800ad80 <__ieee754_pow+0x3f0>
 800ad6e:	4658      	mov	r0, fp
 800ad70:	4661      	mov	r1, ip
 800ad72:	4bd2      	ldr	r3, [pc, #840]	; (800b0bc <__ieee754_pow+0x72c>)
 800ad74:	f7f5 fba8 	bl	80004c8 <__aeabi_dmul>
 800ad78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ad7c:	4683      	mov	fp, r0
 800ad7e:	460c      	mov	r4, r1
 800ad80:	1523      	asrs	r3, r4, #20
 800ad82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad86:	4413      	add	r3, r2
 800ad88:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad8a:	4bcd      	ldr	r3, [pc, #820]	; (800b0c0 <__ieee754_pow+0x730>)
 800ad8c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ad90:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ad94:	429c      	cmp	r4, r3
 800ad96:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ad9a:	dd08      	ble.n	800adae <__ieee754_pow+0x41e>
 800ad9c:	4bc9      	ldr	r3, [pc, #804]	; (800b0c4 <__ieee754_pow+0x734>)
 800ad9e:	429c      	cmp	r4, r3
 800ada0:	f340 819c 	ble.w	800b0dc <__ieee754_pow+0x74c>
 800ada4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ada6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800adaa:	3301      	adds	r3, #1
 800adac:	930b      	str	r3, [sp, #44]	; 0x2c
 800adae:	2600      	movs	r6, #0
 800adb0:	00f3      	lsls	r3, r6, #3
 800adb2:	930d      	str	r3, [sp, #52]	; 0x34
 800adb4:	4bc4      	ldr	r3, [pc, #784]	; (800b0c8 <__ieee754_pow+0x738>)
 800adb6:	4658      	mov	r0, fp
 800adb8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800adbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800adc0:	4629      	mov	r1, r5
 800adc2:	461a      	mov	r2, r3
 800adc4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800adc8:	4623      	mov	r3, r4
 800adca:	f7f5 f9c5 	bl	8000158 <__aeabi_dsub>
 800adce:	46da      	mov	sl, fp
 800add0:	462b      	mov	r3, r5
 800add2:	4652      	mov	r2, sl
 800add4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800add8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800addc:	f7f5 f9be 	bl	800015c <__adddf3>
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	2000      	movs	r0, #0
 800ade6:	49b9      	ldr	r1, [pc, #740]	; (800b0cc <__ieee754_pow+0x73c>)
 800ade8:	f7f5 fc98 	bl	800071c <__aeabi_ddiv>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800adf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800adf8:	f7f5 fb66 	bl	80004c8 <__aeabi_dmul>
 800adfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae00:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ae04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae08:	2300      	movs	r3, #0
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	46ab      	mov	fp, r5
 800ae0e:	106d      	asrs	r5, r5, #1
 800ae10:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ae14:	9304      	str	r3, [sp, #16]
 800ae16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ae1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ae1e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ae22:	4640      	mov	r0, r8
 800ae24:	4649      	mov	r1, r9
 800ae26:	4614      	mov	r4, r2
 800ae28:	461d      	mov	r5, r3
 800ae2a:	f7f5 fb4d 	bl	80004c8 <__aeabi_dmul>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae36:	f7f5 f98f 	bl	8000158 <__aeabi_dsub>
 800ae3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ae3e:	4606      	mov	r6, r0
 800ae40:	460f      	mov	r7, r1
 800ae42:	4620      	mov	r0, r4
 800ae44:	4629      	mov	r1, r5
 800ae46:	f7f5 f987 	bl	8000158 <__aeabi_dsub>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	4650      	mov	r0, sl
 800ae50:	4659      	mov	r1, fp
 800ae52:	f7f5 f981 	bl	8000158 <__aeabi_dsub>
 800ae56:	4642      	mov	r2, r8
 800ae58:	464b      	mov	r3, r9
 800ae5a:	f7f5 fb35 	bl	80004c8 <__aeabi_dmul>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4630      	mov	r0, r6
 800ae64:	4639      	mov	r1, r7
 800ae66:	f7f5 f977 	bl	8000158 <__aeabi_dsub>
 800ae6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae6e:	f7f5 fb2b 	bl	80004c8 <__aeabi_dmul>
 800ae72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f7f5 fb23 	bl	80004c8 <__aeabi_dmul>
 800ae82:	a37b      	add	r3, pc, #492	; (adr r3, 800b070 <__ieee754_pow+0x6e0>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	4604      	mov	r4, r0
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	f7f5 fb1c 	bl	80004c8 <__aeabi_dmul>
 800ae90:	a379      	add	r3, pc, #484	; (adr r3, 800b078 <__ieee754_pow+0x6e8>)
 800ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae96:	f7f5 f961 	bl	800015c <__adddf3>
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	462b      	mov	r3, r5
 800ae9e:	f7f5 fb13 	bl	80004c8 <__aeabi_dmul>
 800aea2:	a377      	add	r3, pc, #476	; (adr r3, 800b080 <__ieee754_pow+0x6f0>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	f7f5 f958 	bl	800015c <__adddf3>
 800aeac:	4622      	mov	r2, r4
 800aeae:	462b      	mov	r3, r5
 800aeb0:	f7f5 fb0a 	bl	80004c8 <__aeabi_dmul>
 800aeb4:	a374      	add	r3, pc, #464	; (adr r3, 800b088 <__ieee754_pow+0x6f8>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f7f5 f94f 	bl	800015c <__adddf3>
 800aebe:	4622      	mov	r2, r4
 800aec0:	462b      	mov	r3, r5
 800aec2:	f7f5 fb01 	bl	80004c8 <__aeabi_dmul>
 800aec6:	a372      	add	r3, pc, #456	; (adr r3, 800b090 <__ieee754_pow+0x700>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	f7f5 f946 	bl	800015c <__adddf3>
 800aed0:	4622      	mov	r2, r4
 800aed2:	462b      	mov	r3, r5
 800aed4:	f7f5 faf8 	bl	80004c8 <__aeabi_dmul>
 800aed8:	a36f      	add	r3, pc, #444	; (adr r3, 800b098 <__ieee754_pow+0x708>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 f93d 	bl	800015c <__adddf3>
 800aee2:	4622      	mov	r2, r4
 800aee4:	4606      	mov	r6, r0
 800aee6:	460f      	mov	r7, r1
 800aee8:	462b      	mov	r3, r5
 800aeea:	4620      	mov	r0, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7f5 faeb 	bl	80004c8 <__aeabi_dmul>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4630      	mov	r0, r6
 800aef8:	4639      	mov	r1, r7
 800aefa:	f7f5 fae5 	bl	80004c8 <__aeabi_dmul>
 800aefe:	4604      	mov	r4, r0
 800af00:	460d      	mov	r5, r1
 800af02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af06:	4642      	mov	r2, r8
 800af08:	464b      	mov	r3, r9
 800af0a:	f7f5 f927 	bl	800015c <__adddf3>
 800af0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800af12:	f7f5 fad9 	bl	80004c8 <__aeabi_dmul>
 800af16:	4622      	mov	r2, r4
 800af18:	462b      	mov	r3, r5
 800af1a:	f7f5 f91f 	bl	800015c <__adddf3>
 800af1e:	4642      	mov	r2, r8
 800af20:	4606      	mov	r6, r0
 800af22:	460f      	mov	r7, r1
 800af24:	464b      	mov	r3, r9
 800af26:	4640      	mov	r0, r8
 800af28:	4649      	mov	r1, r9
 800af2a:	f7f5 facd 	bl	80004c8 <__aeabi_dmul>
 800af2e:	2200      	movs	r2, #0
 800af30:	4b67      	ldr	r3, [pc, #412]	; (800b0d0 <__ieee754_pow+0x740>)
 800af32:	4682      	mov	sl, r0
 800af34:	468b      	mov	fp, r1
 800af36:	f7f5 f911 	bl	800015c <__adddf3>
 800af3a:	4632      	mov	r2, r6
 800af3c:	463b      	mov	r3, r7
 800af3e:	f7f5 f90d 	bl	800015c <__adddf3>
 800af42:	9c04      	ldr	r4, [sp, #16]
 800af44:	460d      	mov	r5, r1
 800af46:	4622      	mov	r2, r4
 800af48:	460b      	mov	r3, r1
 800af4a:	4640      	mov	r0, r8
 800af4c:	4649      	mov	r1, r9
 800af4e:	f7f5 fabb 	bl	80004c8 <__aeabi_dmul>
 800af52:	2200      	movs	r2, #0
 800af54:	4680      	mov	r8, r0
 800af56:	4689      	mov	r9, r1
 800af58:	4620      	mov	r0, r4
 800af5a:	4629      	mov	r1, r5
 800af5c:	4b5c      	ldr	r3, [pc, #368]	; (800b0d0 <__ieee754_pow+0x740>)
 800af5e:	f7f5 f8fb 	bl	8000158 <__aeabi_dsub>
 800af62:	4652      	mov	r2, sl
 800af64:	465b      	mov	r3, fp
 800af66:	f7f5 f8f7 	bl	8000158 <__aeabi_dsub>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4630      	mov	r0, r6
 800af70:	4639      	mov	r1, r7
 800af72:	f7f5 f8f1 	bl	8000158 <__aeabi_dsub>
 800af76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af7a:	f7f5 faa5 	bl	80004c8 <__aeabi_dmul>
 800af7e:	4622      	mov	r2, r4
 800af80:	4606      	mov	r6, r0
 800af82:	460f      	mov	r7, r1
 800af84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af88:	462b      	mov	r3, r5
 800af8a:	f7f5 fa9d 	bl	80004c8 <__aeabi_dmul>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	4630      	mov	r0, r6
 800af94:	4639      	mov	r1, r7
 800af96:	f7f5 f8e1 	bl	800015c <__adddf3>
 800af9a:	4606      	mov	r6, r0
 800af9c:	460f      	mov	r7, r1
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4640      	mov	r0, r8
 800afa4:	4649      	mov	r1, r9
 800afa6:	f7f5 f8d9 	bl	800015c <__adddf3>
 800afaa:	a33d      	add	r3, pc, #244	; (adr r3, 800b0a0 <__ieee754_pow+0x710>)
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	9c04      	ldr	r4, [sp, #16]
 800afb2:	460d      	mov	r5, r1
 800afb4:	4620      	mov	r0, r4
 800afb6:	f7f5 fa87 	bl	80004c8 <__aeabi_dmul>
 800afba:	4642      	mov	r2, r8
 800afbc:	464b      	mov	r3, r9
 800afbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800afc2:	4620      	mov	r0, r4
 800afc4:	4629      	mov	r1, r5
 800afc6:	f7f5 f8c7 	bl	8000158 <__aeabi_dsub>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	4630      	mov	r0, r6
 800afd0:	4639      	mov	r1, r7
 800afd2:	f7f5 f8c1 	bl	8000158 <__aeabi_dsub>
 800afd6:	a334      	add	r3, pc, #208	; (adr r3, 800b0a8 <__ieee754_pow+0x718>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 fa74 	bl	80004c8 <__aeabi_dmul>
 800afe0:	a333      	add	r3, pc, #204	; (adr r3, 800b0b0 <__ieee754_pow+0x720>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	4606      	mov	r6, r0
 800afe8:	460f      	mov	r7, r1
 800afea:	4620      	mov	r0, r4
 800afec:	4629      	mov	r1, r5
 800afee:	f7f5 fa6b 	bl	80004c8 <__aeabi_dmul>
 800aff2:	4602      	mov	r2, r0
 800aff4:	460b      	mov	r3, r1
 800aff6:	4630      	mov	r0, r6
 800aff8:	4639      	mov	r1, r7
 800affa:	f7f5 f8af 	bl	800015c <__adddf3>
 800affe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b000:	4b34      	ldr	r3, [pc, #208]	; (800b0d4 <__ieee754_pow+0x744>)
 800b002:	4413      	add	r3, r2
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	f7f5 f8a8 	bl	800015c <__adddf3>
 800b00c:	4680      	mov	r8, r0
 800b00e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b010:	4689      	mov	r9, r1
 800b012:	f7f5 f9ef 	bl	80003f4 <__aeabi_i2d>
 800b016:	4604      	mov	r4, r0
 800b018:	460d      	mov	r5, r1
 800b01a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b01c:	4b2e      	ldr	r3, [pc, #184]	; (800b0d8 <__ieee754_pow+0x748>)
 800b01e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b022:	4413      	add	r3, r2
 800b024:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b028:	4642      	mov	r2, r8
 800b02a:	464b      	mov	r3, r9
 800b02c:	f7f5 f896 	bl	800015c <__adddf3>
 800b030:	4632      	mov	r2, r6
 800b032:	463b      	mov	r3, r7
 800b034:	f7f5 f892 	bl	800015c <__adddf3>
 800b038:	4622      	mov	r2, r4
 800b03a:	462b      	mov	r3, r5
 800b03c:	f7f5 f88e 	bl	800015c <__adddf3>
 800b040:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b044:	4622      	mov	r2, r4
 800b046:	462b      	mov	r3, r5
 800b048:	4650      	mov	r0, sl
 800b04a:	468b      	mov	fp, r1
 800b04c:	f7f5 f884 	bl	8000158 <__aeabi_dsub>
 800b050:	4632      	mov	r2, r6
 800b052:	463b      	mov	r3, r7
 800b054:	f7f5 f880 	bl	8000158 <__aeabi_dsub>
 800b058:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b05c:	f7f5 f87c 	bl	8000158 <__aeabi_dsub>
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	4640      	mov	r0, r8
 800b066:	4649      	mov	r1, r9
 800b068:	e608      	b.n	800ac7c <__ieee754_pow+0x2ec>
 800b06a:	bf00      	nop
 800b06c:	f3af 8000 	nop.w
 800b070:	4a454eef 	.word	0x4a454eef
 800b074:	3fca7e28 	.word	0x3fca7e28
 800b078:	93c9db65 	.word	0x93c9db65
 800b07c:	3fcd864a 	.word	0x3fcd864a
 800b080:	a91d4101 	.word	0xa91d4101
 800b084:	3fd17460 	.word	0x3fd17460
 800b088:	518f264d 	.word	0x518f264d
 800b08c:	3fd55555 	.word	0x3fd55555
 800b090:	db6fabff 	.word	0xdb6fabff
 800b094:	3fdb6db6 	.word	0x3fdb6db6
 800b098:	33333303 	.word	0x33333303
 800b09c:	3fe33333 	.word	0x3fe33333
 800b0a0:	e0000000 	.word	0xe0000000
 800b0a4:	3feec709 	.word	0x3feec709
 800b0a8:	dc3a03fd 	.word	0xdc3a03fd
 800b0ac:	3feec709 	.word	0x3feec709
 800b0b0:	145b01f5 	.word	0x145b01f5
 800b0b4:	be3e2fe0 	.word	0xbe3e2fe0
 800b0b8:	7ff00000 	.word	0x7ff00000
 800b0bc:	43400000 	.word	0x43400000
 800b0c0:	0003988e 	.word	0x0003988e
 800b0c4:	000bb679 	.word	0x000bb679
 800b0c8:	0800be38 	.word	0x0800be38
 800b0cc:	3ff00000 	.word	0x3ff00000
 800b0d0:	40080000 	.word	0x40080000
 800b0d4:	0800be58 	.word	0x0800be58
 800b0d8:	0800be48 	.word	0x0800be48
 800b0dc:	2601      	movs	r6, #1
 800b0de:	e667      	b.n	800adb0 <__ieee754_pow+0x420>
 800b0e0:	a39d      	add	r3, pc, #628	; (adr r3, 800b358 <__ieee754_pow+0x9c8>)
 800b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e6:	4640      	mov	r0, r8
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	f7f5 f837 	bl	800015c <__adddf3>
 800b0ee:	4622      	mov	r2, r4
 800b0f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0f4:	462b      	mov	r3, r5
 800b0f6:	4650      	mov	r0, sl
 800b0f8:	4639      	mov	r1, r7
 800b0fa:	f7f5 f82d 	bl	8000158 <__aeabi_dsub>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b106:	f7f5 fc6f 	bl	80009e8 <__aeabi_dcmpgt>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	f47f ae01 	bne.w	800ad12 <__ieee754_pow+0x382>
 800b110:	4aa5      	ldr	r2, [pc, #660]	; (800b3a8 <__ieee754_pow+0xa18>)
 800b112:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b116:	4293      	cmp	r3, r2
 800b118:	f340 8103 	ble.w	800b322 <__ieee754_pow+0x992>
 800b11c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b120:	2000      	movs	r0, #0
 800b122:	151b      	asrs	r3, r3, #20
 800b124:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b128:	fa4a f303 	asr.w	r3, sl, r3
 800b12c:	4433      	add	r3, r6
 800b12e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b132:	4f9e      	ldr	r7, [pc, #632]	; (800b3ac <__ieee754_pow+0xa1c>)
 800b134:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b138:	4117      	asrs	r7, r2
 800b13a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b13e:	ea23 0107 	bic.w	r1, r3, r7
 800b142:	f1c2 0214 	rsb	r2, r2, #20
 800b146:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b14a:	460b      	mov	r3, r1
 800b14c:	fa4a fa02 	asr.w	sl, sl, r2
 800b150:	2e00      	cmp	r6, #0
 800b152:	4602      	mov	r2, r0
 800b154:	4629      	mov	r1, r5
 800b156:	4620      	mov	r0, r4
 800b158:	bfb8      	it	lt
 800b15a:	f1ca 0a00 	rsblt	sl, sl, #0
 800b15e:	f7f4 fffb 	bl	8000158 <__aeabi_dsub>
 800b162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b16a:	2400      	movs	r4, #0
 800b16c:	4642      	mov	r2, r8
 800b16e:	464b      	mov	r3, r9
 800b170:	f7f4 fff4 	bl	800015c <__adddf3>
 800b174:	a37a      	add	r3, pc, #488	; (adr r3, 800b360 <__ieee754_pow+0x9d0>)
 800b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17a:	4620      	mov	r0, r4
 800b17c:	460d      	mov	r5, r1
 800b17e:	f7f5 f9a3 	bl	80004c8 <__aeabi_dmul>
 800b182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b186:	4606      	mov	r6, r0
 800b188:	460f      	mov	r7, r1
 800b18a:	4620      	mov	r0, r4
 800b18c:	4629      	mov	r1, r5
 800b18e:	f7f4 ffe3 	bl	8000158 <__aeabi_dsub>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	4640      	mov	r0, r8
 800b198:	4649      	mov	r1, r9
 800b19a:	f7f4 ffdd 	bl	8000158 <__aeabi_dsub>
 800b19e:	a372      	add	r3, pc, #456	; (adr r3, 800b368 <__ieee754_pow+0x9d8>)
 800b1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a4:	f7f5 f990 	bl	80004c8 <__aeabi_dmul>
 800b1a8:	a371      	add	r3, pc, #452	; (adr r3, 800b370 <__ieee754_pow+0x9e0>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	4680      	mov	r8, r0
 800b1b0:	4689      	mov	r9, r1
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	f7f5 f987 	bl	80004c8 <__aeabi_dmul>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4640      	mov	r0, r8
 800b1c0:	4649      	mov	r1, r9
 800b1c2:	f7f4 ffcb 	bl	800015c <__adddf3>
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	460d      	mov	r5, r1
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	4639      	mov	r1, r7
 800b1d2:	f7f4 ffc3 	bl	800015c <__adddf3>
 800b1d6:	4632      	mov	r2, r6
 800b1d8:	463b      	mov	r3, r7
 800b1da:	4680      	mov	r8, r0
 800b1dc:	4689      	mov	r9, r1
 800b1de:	f7f4 ffbb 	bl	8000158 <__aeabi_dsub>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	f7f4 ffb5 	bl	8000158 <__aeabi_dsub>
 800b1ee:	4642      	mov	r2, r8
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	460f      	mov	r7, r1
 800b1f4:	464b      	mov	r3, r9
 800b1f6:	4640      	mov	r0, r8
 800b1f8:	4649      	mov	r1, r9
 800b1fa:	f7f5 f965 	bl	80004c8 <__aeabi_dmul>
 800b1fe:	a35e      	add	r3, pc, #376	; (adr r3, 800b378 <__ieee754_pow+0x9e8>)
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	4604      	mov	r4, r0
 800b206:	460d      	mov	r5, r1
 800b208:	f7f5 f95e 	bl	80004c8 <__aeabi_dmul>
 800b20c:	a35c      	add	r3, pc, #368	; (adr r3, 800b380 <__ieee754_pow+0x9f0>)
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f7f4 ffa1 	bl	8000158 <__aeabi_dsub>
 800b216:	4622      	mov	r2, r4
 800b218:	462b      	mov	r3, r5
 800b21a:	f7f5 f955 	bl	80004c8 <__aeabi_dmul>
 800b21e:	a35a      	add	r3, pc, #360	; (adr r3, 800b388 <__ieee754_pow+0x9f8>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f4 ff9a 	bl	800015c <__adddf3>
 800b228:	4622      	mov	r2, r4
 800b22a:	462b      	mov	r3, r5
 800b22c:	f7f5 f94c 	bl	80004c8 <__aeabi_dmul>
 800b230:	a357      	add	r3, pc, #348	; (adr r3, 800b390 <__ieee754_pow+0xa00>)
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	f7f4 ff8f 	bl	8000158 <__aeabi_dsub>
 800b23a:	4622      	mov	r2, r4
 800b23c:	462b      	mov	r3, r5
 800b23e:	f7f5 f943 	bl	80004c8 <__aeabi_dmul>
 800b242:	a355      	add	r3, pc, #340	; (adr r3, 800b398 <__ieee754_pow+0xa08>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f7f4 ff88 	bl	800015c <__adddf3>
 800b24c:	4622      	mov	r2, r4
 800b24e:	462b      	mov	r3, r5
 800b250:	f7f5 f93a 	bl	80004c8 <__aeabi_dmul>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4640      	mov	r0, r8
 800b25a:	4649      	mov	r1, r9
 800b25c:	f7f4 ff7c 	bl	8000158 <__aeabi_dsub>
 800b260:	4604      	mov	r4, r0
 800b262:	460d      	mov	r5, r1
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	4640      	mov	r0, r8
 800b26a:	4649      	mov	r1, r9
 800b26c:	f7f5 f92c 	bl	80004c8 <__aeabi_dmul>
 800b270:	2200      	movs	r2, #0
 800b272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b27a:	4620      	mov	r0, r4
 800b27c:	4629      	mov	r1, r5
 800b27e:	f7f4 ff6b 	bl	8000158 <__aeabi_dsub>
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b28a:	f7f5 fa47 	bl	800071c <__aeabi_ddiv>
 800b28e:	4632      	mov	r2, r6
 800b290:	4604      	mov	r4, r0
 800b292:	460d      	mov	r5, r1
 800b294:	463b      	mov	r3, r7
 800b296:	4640      	mov	r0, r8
 800b298:	4649      	mov	r1, r9
 800b29a:	f7f5 f915 	bl	80004c8 <__aeabi_dmul>
 800b29e:	4632      	mov	r2, r6
 800b2a0:	463b      	mov	r3, r7
 800b2a2:	f7f4 ff5b 	bl	800015c <__adddf3>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	f7f4 ff53 	bl	8000158 <__aeabi_dsub>
 800b2b2:	4642      	mov	r2, r8
 800b2b4:	464b      	mov	r3, r9
 800b2b6:	f7f4 ff4f 	bl	8000158 <__aeabi_dsub>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	2000      	movs	r0, #0
 800b2c0:	493b      	ldr	r1, [pc, #236]	; (800b3b0 <__ieee754_pow+0xa20>)
 800b2c2:	f7f4 ff49 	bl	8000158 <__aeabi_dsub>
 800b2c6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b2ca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b2ce:	da2b      	bge.n	800b328 <__ieee754_pow+0x998>
 800b2d0:	4652      	mov	r2, sl
 800b2d2:	f000 f9b9 	bl	800b648 <scalbn>
 800b2d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2da:	f7ff bbf2 	b.w	800aac2 <__ieee754_pow+0x132>
 800b2de:	4b35      	ldr	r3, [pc, #212]	; (800b3b4 <__ieee754_pow+0xa24>)
 800b2e0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b2e4:	429f      	cmp	r7, r3
 800b2e6:	f77f af13 	ble.w	800b110 <__ieee754_pow+0x780>
 800b2ea:	4b33      	ldr	r3, [pc, #204]	; (800b3b8 <__ieee754_pow+0xa28>)
 800b2ec:	440b      	add	r3, r1
 800b2ee:	4303      	orrs	r3, r0
 800b2f0:	d00b      	beq.n	800b30a <__ieee754_pow+0x97a>
 800b2f2:	a32b      	add	r3, pc, #172	; (adr r3, 800b3a0 <__ieee754_pow+0xa10>)
 800b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2fc:	f7f5 f8e4 	bl	80004c8 <__aeabi_dmul>
 800b300:	a327      	add	r3, pc, #156	; (adr r3, 800b3a0 <__ieee754_pow+0xa10>)
 800b302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b306:	f7ff bbdc 	b.w	800aac2 <__ieee754_pow+0x132>
 800b30a:	4622      	mov	r2, r4
 800b30c:	462b      	mov	r3, r5
 800b30e:	f7f4 ff23 	bl	8000158 <__aeabi_dsub>
 800b312:	4642      	mov	r2, r8
 800b314:	464b      	mov	r3, r9
 800b316:	f7f5 fb5d 	bl	80009d4 <__aeabi_dcmpge>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	f43f aef8 	beq.w	800b110 <__ieee754_pow+0x780>
 800b320:	e7e7      	b.n	800b2f2 <__ieee754_pow+0x962>
 800b322:	f04f 0a00 	mov.w	sl, #0
 800b326:	e71e      	b.n	800b166 <__ieee754_pow+0x7d6>
 800b328:	4621      	mov	r1, r4
 800b32a:	e7d4      	b.n	800b2d6 <__ieee754_pow+0x946>
 800b32c:	f04f 0b00 	mov.w	fp, #0
 800b330:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b3b0 <__ieee754_pow+0xa20>
 800b334:	f7ff bbb0 	b.w	800aa98 <__ieee754_pow+0x108>
 800b338:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b33c:	f7ff bbac 	b.w	800aa98 <__ieee754_pow+0x108>
 800b340:	4638      	mov	r0, r7
 800b342:	4641      	mov	r1, r8
 800b344:	f7ff bbbf 	b.w	800aac6 <__ieee754_pow+0x136>
 800b348:	9200      	str	r2, [sp, #0]
 800b34a:	f7ff bb7f 	b.w	800aa4c <__ieee754_pow+0xbc>
 800b34e:	2300      	movs	r3, #0
 800b350:	f7ff bb69 	b.w	800aa26 <__ieee754_pow+0x96>
 800b354:	f3af 8000 	nop.w
 800b358:	652b82fe 	.word	0x652b82fe
 800b35c:	3c971547 	.word	0x3c971547
 800b360:	00000000 	.word	0x00000000
 800b364:	3fe62e43 	.word	0x3fe62e43
 800b368:	fefa39ef 	.word	0xfefa39ef
 800b36c:	3fe62e42 	.word	0x3fe62e42
 800b370:	0ca86c39 	.word	0x0ca86c39
 800b374:	be205c61 	.word	0xbe205c61
 800b378:	72bea4d0 	.word	0x72bea4d0
 800b37c:	3e663769 	.word	0x3e663769
 800b380:	c5d26bf1 	.word	0xc5d26bf1
 800b384:	3ebbbd41 	.word	0x3ebbbd41
 800b388:	af25de2c 	.word	0xaf25de2c
 800b38c:	3f11566a 	.word	0x3f11566a
 800b390:	16bebd93 	.word	0x16bebd93
 800b394:	3f66c16c 	.word	0x3f66c16c
 800b398:	5555553e 	.word	0x5555553e
 800b39c:	3fc55555 	.word	0x3fc55555
 800b3a0:	c2f8f359 	.word	0xc2f8f359
 800b3a4:	01a56e1f 	.word	0x01a56e1f
 800b3a8:	3fe00000 	.word	0x3fe00000
 800b3ac:	000fffff 	.word	0x000fffff
 800b3b0:	3ff00000 	.word	0x3ff00000
 800b3b4:	4090cbff 	.word	0x4090cbff
 800b3b8:	3f6f3400 	.word	0x3f6f3400

0800b3bc <__ieee754_sqrt>:
 800b3bc:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b510 <__ieee754_sqrt+0x154>
 800b3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c4:	ea3c 0c01 	bics.w	ip, ip, r1
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	460a      	mov	r2, r1
 800b3d0:	4607      	mov	r7, r0
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	d10e      	bne.n	800b3f4 <__ieee754_sqrt+0x38>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	f7f5 f876 	bl	80004c8 <__aeabi_dmul>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	f7f4 feba 	bl	800015c <__adddf3>
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	460d      	mov	r5, r1
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f4:	2900      	cmp	r1, #0
 800b3f6:	dc0d      	bgt.n	800b414 <__ieee754_sqrt+0x58>
 800b3f8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b3fc:	ea5c 0707 	orrs.w	r7, ip, r7
 800b400:	d0f4      	beq.n	800b3ec <__ieee754_sqrt+0x30>
 800b402:	b139      	cbz	r1, 800b414 <__ieee754_sqrt+0x58>
 800b404:	4602      	mov	r2, r0
 800b406:	f7f4 fea7 	bl	8000158 <__aeabi_dsub>
 800b40a:	4602      	mov	r2, r0
 800b40c:	460b      	mov	r3, r1
 800b40e:	f7f5 f985 	bl	800071c <__aeabi_ddiv>
 800b412:	e7e9      	b.n	800b3e8 <__ieee754_sqrt+0x2c>
 800b414:	1512      	asrs	r2, r2, #20
 800b416:	d074      	beq.n	800b502 <__ieee754_sqrt+0x146>
 800b418:	2000      	movs	r0, #0
 800b41a:	07d5      	lsls	r5, r2, #31
 800b41c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b420:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800b424:	bf5e      	ittt	pl
 800b426:	0fe3      	lsrpl	r3, r4, #31
 800b428:	0064      	lslpl	r4, r4, #1
 800b42a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800b42e:	0fe3      	lsrs	r3, r4, #31
 800b430:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b434:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800b438:	2516      	movs	r5, #22
 800b43a:	4601      	mov	r1, r0
 800b43c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b440:	1076      	asrs	r6, r6, #1
 800b442:	0064      	lsls	r4, r4, #1
 800b444:	188f      	adds	r7, r1, r2
 800b446:	429f      	cmp	r7, r3
 800b448:	bfde      	ittt	le
 800b44a:	1bdb      	suble	r3, r3, r7
 800b44c:	18b9      	addle	r1, r7, r2
 800b44e:	1880      	addle	r0, r0, r2
 800b450:	005b      	lsls	r3, r3, #1
 800b452:	3d01      	subs	r5, #1
 800b454:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b458:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b45c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b460:	d1f0      	bne.n	800b444 <__ieee754_sqrt+0x88>
 800b462:	462a      	mov	r2, r5
 800b464:	f04f 0e20 	mov.w	lr, #32
 800b468:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b46c:	428b      	cmp	r3, r1
 800b46e:	eb07 0c05 	add.w	ip, r7, r5
 800b472:	dc02      	bgt.n	800b47a <__ieee754_sqrt+0xbe>
 800b474:	d113      	bne.n	800b49e <__ieee754_sqrt+0xe2>
 800b476:	45a4      	cmp	ip, r4
 800b478:	d811      	bhi.n	800b49e <__ieee754_sqrt+0xe2>
 800b47a:	f1bc 0f00 	cmp.w	ip, #0
 800b47e:	eb0c 0507 	add.w	r5, ip, r7
 800b482:	da43      	bge.n	800b50c <__ieee754_sqrt+0x150>
 800b484:	2d00      	cmp	r5, #0
 800b486:	db41      	blt.n	800b50c <__ieee754_sqrt+0x150>
 800b488:	f101 0801 	add.w	r8, r1, #1
 800b48c:	1a5b      	subs	r3, r3, r1
 800b48e:	4641      	mov	r1, r8
 800b490:	45a4      	cmp	ip, r4
 800b492:	bf88      	it	hi
 800b494:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b498:	eba4 040c 	sub.w	r4, r4, ip
 800b49c:	443a      	add	r2, r7
 800b49e:	005b      	lsls	r3, r3, #1
 800b4a0:	f1be 0e01 	subs.w	lr, lr, #1
 800b4a4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b4a8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800b4ac:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b4b0:	d1dc      	bne.n	800b46c <__ieee754_sqrt+0xb0>
 800b4b2:	4323      	orrs	r3, r4
 800b4b4:	d006      	beq.n	800b4c4 <__ieee754_sqrt+0x108>
 800b4b6:	1c54      	adds	r4, r2, #1
 800b4b8:	bf0b      	itete	eq
 800b4ba:	4672      	moveq	r2, lr
 800b4bc:	3201      	addne	r2, #1
 800b4be:	3001      	addeq	r0, #1
 800b4c0:	f022 0201 	bicne.w	r2, r2, #1
 800b4c4:	1043      	asrs	r3, r0, #1
 800b4c6:	07c1      	lsls	r1, r0, #31
 800b4c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b4cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b4d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b4d4:	bf48      	it	mi
 800b4d6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b4da:	4610      	mov	r0, r2
 800b4dc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800b4e0:	e782      	b.n	800b3e8 <__ieee754_sqrt+0x2c>
 800b4e2:	0ae3      	lsrs	r3, r4, #11
 800b4e4:	3915      	subs	r1, #21
 800b4e6:	0564      	lsls	r4, r4, #21
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d0fa      	beq.n	800b4e2 <__ieee754_sqrt+0x126>
 800b4ec:	02de      	lsls	r6, r3, #11
 800b4ee:	d50a      	bpl.n	800b506 <__ieee754_sqrt+0x14a>
 800b4f0:	f1c2 0020 	rsb	r0, r2, #32
 800b4f4:	fa24 f000 	lsr.w	r0, r4, r0
 800b4f8:	1e55      	subs	r5, r2, #1
 800b4fa:	4094      	lsls	r4, r2
 800b4fc:	4303      	orrs	r3, r0
 800b4fe:	1b4a      	subs	r2, r1, r5
 800b500:	e78a      	b.n	800b418 <__ieee754_sqrt+0x5c>
 800b502:	4611      	mov	r1, r2
 800b504:	e7f0      	b.n	800b4e8 <__ieee754_sqrt+0x12c>
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	3201      	adds	r2, #1
 800b50a:	e7ef      	b.n	800b4ec <__ieee754_sqrt+0x130>
 800b50c:	4688      	mov	r8, r1
 800b50e:	e7bd      	b.n	800b48c <__ieee754_sqrt+0xd0>
 800b510:	7ff00000 	.word	0x7ff00000

0800b514 <fabs>:
 800b514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b518:	4770      	bx	lr

0800b51a <finite>:
 800b51a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b51e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b522:	0fc0      	lsrs	r0, r0, #31
 800b524:	4770      	bx	lr
	...

0800b528 <nan>:
 800b528:	2000      	movs	r0, #0
 800b52a:	4901      	ldr	r1, [pc, #4]	; (800b530 <nan+0x8>)
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	7ff80000 	.word	0x7ff80000

0800b534 <rint>:
 800b534:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800b538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b53a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800b53e:	2f13      	cmp	r7, #19
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	460c      	mov	r4, r1
 800b546:	4605      	mov	r5, r0
 800b548:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800b54c:	dc59      	bgt.n	800b602 <rint+0xce>
 800b54e:	2f00      	cmp	r7, #0
 800b550:	da2a      	bge.n	800b5a8 <rint+0x74>
 800b552:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b556:	4301      	orrs	r1, r0
 800b558:	d022      	beq.n	800b5a0 <rint+0x6c>
 800b55a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800b55e:	4301      	orrs	r1, r0
 800b560:	424d      	negs	r5, r1
 800b562:	430d      	orrs	r5, r1
 800b564:	4936      	ldr	r1, [pc, #216]	; (800b640 <rint+0x10c>)
 800b566:	0c5c      	lsrs	r4, r3, #17
 800b568:	0b2d      	lsrs	r5, r5, #12
 800b56a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800b56e:	0464      	lsls	r4, r4, #17
 800b570:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b574:	ea45 0304 	orr.w	r3, r5, r4
 800b578:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b57c:	4620      	mov	r0, r4
 800b57e:	4629      	mov	r1, r5
 800b580:	f7f4 fdec 	bl	800015c <__adddf3>
 800b584:	e9cd 0100 	strd	r0, r1, [sp]
 800b588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b58c:	462b      	mov	r3, r5
 800b58e:	4622      	mov	r2, r4
 800b590:	f7f4 fde2 	bl	8000158 <__aeabi_dsub>
 800b594:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b598:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	b003      	add	sp, #12
 800b5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a8:	4926      	ldr	r1, [pc, #152]	; (800b644 <rint+0x110>)
 800b5aa:	4139      	asrs	r1, r7
 800b5ac:	ea03 0001 	and.w	r0, r3, r1
 800b5b0:	4310      	orrs	r0, r2
 800b5b2:	d0f5      	beq.n	800b5a0 <rint+0x6c>
 800b5b4:	084b      	lsrs	r3, r1, #1
 800b5b6:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800b5ba:	ea52 0501 	orrs.w	r5, r2, r1
 800b5be:	d00c      	beq.n	800b5da <rint+0xa6>
 800b5c0:	ea24 0303 	bic.w	r3, r4, r3
 800b5c4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800b5c8:	2f13      	cmp	r7, #19
 800b5ca:	bf0c      	ite	eq
 800b5cc:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800b5d0:	2500      	movne	r5, #0
 800b5d2:	fa44 f707 	asr.w	r7, r4, r7
 800b5d6:	ea43 0407 	orr.w	r4, r3, r7
 800b5da:	4919      	ldr	r1, [pc, #100]	; (800b640 <rint+0x10c>)
 800b5dc:	4623      	mov	r3, r4
 800b5de:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800b5e2:	462a      	mov	r2, r5
 800b5e4:	e9d6 4500 	ldrd	r4, r5, [r6]
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	f7f4 fdb6 	bl	800015c <__adddf3>
 800b5f0:	e9cd 0100 	strd	r0, r1, [sp]
 800b5f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	f7f4 fdac 	bl	8000158 <__aeabi_dsub>
 800b600:	e7cc      	b.n	800b59c <rint+0x68>
 800b602:	2f33      	cmp	r7, #51	; 0x33
 800b604:	dd05      	ble.n	800b612 <rint+0xde>
 800b606:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800b60a:	d1c9      	bne.n	800b5a0 <rint+0x6c>
 800b60c:	f7f4 fda6 	bl	800015c <__adddf3>
 800b610:	e7c4      	b.n	800b59c <rint+0x68>
 800b612:	f04f 31ff 	mov.w	r1, #4294967295
 800b616:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800b61a:	fa21 f10c 	lsr.w	r1, r1, ip
 800b61e:	4208      	tst	r0, r1
 800b620:	d0be      	beq.n	800b5a0 <rint+0x6c>
 800b622:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800b626:	bf18      	it	ne
 800b628:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800b62c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800b630:	bf1e      	ittt	ne
 800b632:	ea20 0303 	bicne.w	r3, r0, r3
 800b636:	fa45 fc0c 	asrne.w	ip, r5, ip
 800b63a:	ea43 050c 	orrne.w	r5, r3, ip
 800b63e:	e7cc      	b.n	800b5da <rint+0xa6>
 800b640:	0800be68 	.word	0x0800be68
 800b644:	000fffff 	.word	0x000fffff

0800b648 <scalbn>:
 800b648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b64e:	4604      	mov	r4, r0
 800b650:	460d      	mov	r5, r1
 800b652:	4617      	mov	r7, r2
 800b654:	460b      	mov	r3, r1
 800b656:	b996      	cbnz	r6, 800b67e <scalbn+0x36>
 800b658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b65c:	4303      	orrs	r3, r0
 800b65e:	d039      	beq.n	800b6d4 <scalbn+0x8c>
 800b660:	4b35      	ldr	r3, [pc, #212]	; (800b738 <scalbn+0xf0>)
 800b662:	2200      	movs	r2, #0
 800b664:	f7f4 ff30 	bl	80004c8 <__aeabi_dmul>
 800b668:	4b34      	ldr	r3, [pc, #208]	; (800b73c <scalbn+0xf4>)
 800b66a:	4604      	mov	r4, r0
 800b66c:	429f      	cmp	r7, r3
 800b66e:	460d      	mov	r5, r1
 800b670:	da0f      	bge.n	800b692 <scalbn+0x4a>
 800b672:	a32d      	add	r3, pc, #180	; (adr r3, 800b728 <scalbn+0xe0>)
 800b674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b678:	f7f4 ff26 	bl	80004c8 <__aeabi_dmul>
 800b67c:	e006      	b.n	800b68c <scalbn+0x44>
 800b67e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b682:	4296      	cmp	r6, r2
 800b684:	d10a      	bne.n	800b69c <scalbn+0x54>
 800b686:	4602      	mov	r2, r0
 800b688:	f7f4 fd68 	bl	800015c <__adddf3>
 800b68c:	4604      	mov	r4, r0
 800b68e:	460d      	mov	r5, r1
 800b690:	e020      	b.n	800b6d4 <scalbn+0x8c>
 800b692:	460b      	mov	r3, r1
 800b694:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b698:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b69c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b6a0:	19b9      	adds	r1, r7, r6
 800b6a2:	4291      	cmp	r1, r2
 800b6a4:	dd0e      	ble.n	800b6c4 <scalbn+0x7c>
 800b6a6:	a322      	add	r3, pc, #136	; (adr r3, 800b730 <scalbn+0xe8>)
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b6b0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b6b4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b6b8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b6bc:	4820      	ldr	r0, [pc, #128]	; (800b740 <scalbn+0xf8>)
 800b6be:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b6c2:	e7d9      	b.n	800b678 <scalbn+0x30>
 800b6c4:	2900      	cmp	r1, #0
 800b6c6:	dd08      	ble.n	800b6da <scalbn+0x92>
 800b6c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b6cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b6d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6da:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b6de:	da16      	bge.n	800b70e <scalbn+0xc6>
 800b6e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b6e4:	429f      	cmp	r7, r3
 800b6e6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b6ea:	dd08      	ble.n	800b6fe <scalbn+0xb6>
 800b6ec:	4c15      	ldr	r4, [pc, #84]	; (800b744 <scalbn+0xfc>)
 800b6ee:	4814      	ldr	r0, [pc, #80]	; (800b740 <scalbn+0xf8>)
 800b6f0:	f363 74df 	bfi	r4, r3, #31, #1
 800b6f4:	a30e      	add	r3, pc, #56	; (adr r3, 800b730 <scalbn+0xe8>)
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	4621      	mov	r1, r4
 800b6fc:	e7bc      	b.n	800b678 <scalbn+0x30>
 800b6fe:	4c12      	ldr	r4, [pc, #72]	; (800b748 <scalbn+0x100>)
 800b700:	4812      	ldr	r0, [pc, #72]	; (800b74c <scalbn+0x104>)
 800b702:	f363 74df 	bfi	r4, r3, #31, #1
 800b706:	a308      	add	r3, pc, #32	; (adr r3, 800b728 <scalbn+0xe0>)
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	e7f5      	b.n	800b6fa <scalbn+0xb2>
 800b70e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b712:	3136      	adds	r1, #54	; 0x36
 800b714:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b718:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b71c:	4620      	mov	r0, r4
 800b71e:	4629      	mov	r1, r5
 800b720:	2200      	movs	r2, #0
 800b722:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <scalbn+0x108>)
 800b724:	e7a8      	b.n	800b678 <scalbn+0x30>
 800b726:	bf00      	nop
 800b728:	c2f8f359 	.word	0xc2f8f359
 800b72c:	01a56e1f 	.word	0x01a56e1f
 800b730:	8800759c 	.word	0x8800759c
 800b734:	7e37e43c 	.word	0x7e37e43c
 800b738:	43500000 	.word	0x43500000
 800b73c:	ffff3cb0 	.word	0xffff3cb0
 800b740:	8800759c 	.word	0x8800759c
 800b744:	7e37e43c 	.word	0x7e37e43c
 800b748:	01a56e1f 	.word	0x01a56e1f
 800b74c:	c2f8f359 	.word	0xc2f8f359
 800b750:	3c900000 	.word	0x3c900000
 800b754:	00000000 	.word	0x00000000

0800b758 <__ieee754_log>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	460d      	mov	r5, r1
 800b766:	b087      	sub	sp, #28
 800b768:	da24      	bge.n	800b7b4 <__ieee754_log+0x5c>
 800b76a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b76e:	4304      	orrs	r4, r0
 800b770:	d108      	bne.n	800b784 <__ieee754_log+0x2c>
 800b772:	2200      	movs	r2, #0
 800b774:	2300      	movs	r3, #0
 800b776:	2000      	movs	r0, #0
 800b778:	49cb      	ldr	r1, [pc, #812]	; (800baa8 <__ieee754_log+0x350>)
 800b77a:	f7f4 ffcf 	bl	800071c <__aeabi_ddiv>
 800b77e:	b007      	add	sp, #28
 800b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b784:	2900      	cmp	r1, #0
 800b786:	da04      	bge.n	800b792 <__ieee754_log+0x3a>
 800b788:	f7f4 fce6 	bl	8000158 <__aeabi_dsub>
 800b78c:	2200      	movs	r2, #0
 800b78e:	2300      	movs	r3, #0
 800b790:	e7f3      	b.n	800b77a <__ieee754_log+0x22>
 800b792:	2200      	movs	r2, #0
 800b794:	4bc5      	ldr	r3, [pc, #788]	; (800baac <__ieee754_log+0x354>)
 800b796:	f7f4 fe97 	bl	80004c8 <__aeabi_dmul>
 800b79a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	460d      	mov	r5, r1
 800b7a4:	49c2      	ldr	r1, [pc, #776]	; (800bab0 <__ieee754_log+0x358>)
 800b7a6:	428d      	cmp	r5, r1
 800b7a8:	dd06      	ble.n	800b7b8 <__ieee754_log+0x60>
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	f7f4 fcd5 	bl	800015c <__adddf3>
 800b7b2:	e7e4      	b.n	800b77e <__ieee754_log+0x26>
 800b7b4:	2600      	movs	r6, #0
 800b7b6:	e7f5      	b.n	800b7a4 <__ieee754_log+0x4c>
 800b7b8:	152c      	asrs	r4, r5, #20
 800b7ba:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b7be:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800b7c2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b7c6:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800b7ca:	4426      	add	r6, r4
 800b7cc:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800b7d0:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800b7d4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800b7d8:	ea41 0305 	orr.w	r3, r1, r5
 800b7dc:	4610      	mov	r0, r2
 800b7de:	4619      	mov	r1, r3
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	4bb4      	ldr	r3, [pc, #720]	; (800bab4 <__ieee754_log+0x35c>)
 800b7e4:	f7f4 fcb8 	bl	8000158 <__aeabi_dsub>
 800b7e8:	1cab      	adds	r3, r5, #2
 800b7ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	4682      	mov	sl, r0
 800b7f2:	468b      	mov	fp, r1
 800b7f4:	f04f 0200 	mov.w	r2, #0
 800b7f8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800b7fc:	dc53      	bgt.n	800b8a6 <__ieee754_log+0x14e>
 800b7fe:	2300      	movs	r3, #0
 800b800:	f7f5 f8ca 	bl	8000998 <__aeabi_dcmpeq>
 800b804:	b1d0      	cbz	r0, 800b83c <__ieee754_log+0xe4>
 800b806:	2c00      	cmp	r4, #0
 800b808:	f000 8122 	beq.w	800ba50 <__ieee754_log+0x2f8>
 800b80c:	4620      	mov	r0, r4
 800b80e:	f7f4 fdf1 	bl	80003f4 <__aeabi_i2d>
 800b812:	a391      	add	r3, pc, #580	; (adr r3, 800ba58 <__ieee754_log+0x300>)
 800b814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b818:	4606      	mov	r6, r0
 800b81a:	460f      	mov	r7, r1
 800b81c:	f7f4 fe54 	bl	80004c8 <__aeabi_dmul>
 800b820:	a38f      	add	r3, pc, #572	; (adr r3, 800ba60 <__ieee754_log+0x308>)
 800b822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b826:	4604      	mov	r4, r0
 800b828:	460d      	mov	r5, r1
 800b82a:	4630      	mov	r0, r6
 800b82c:	4639      	mov	r1, r7
 800b82e:	f7f4 fe4b 	bl	80004c8 <__aeabi_dmul>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	4620      	mov	r0, r4
 800b838:	4629      	mov	r1, r5
 800b83a:	e7b8      	b.n	800b7ae <__ieee754_log+0x56>
 800b83c:	a38a      	add	r3, pc, #552	; (adr r3, 800ba68 <__ieee754_log+0x310>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	4650      	mov	r0, sl
 800b844:	4659      	mov	r1, fp
 800b846:	f7f4 fe3f 	bl	80004c8 <__aeabi_dmul>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	2000      	movs	r0, #0
 800b850:	4999      	ldr	r1, [pc, #612]	; (800bab8 <__ieee754_log+0x360>)
 800b852:	f7f4 fc81 	bl	8000158 <__aeabi_dsub>
 800b856:	4652      	mov	r2, sl
 800b858:	4606      	mov	r6, r0
 800b85a:	460f      	mov	r7, r1
 800b85c:	465b      	mov	r3, fp
 800b85e:	4650      	mov	r0, sl
 800b860:	4659      	mov	r1, fp
 800b862:	f7f4 fe31 	bl	80004c8 <__aeabi_dmul>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	4630      	mov	r0, r6
 800b86c:	4639      	mov	r1, r7
 800b86e:	f7f4 fe2b 	bl	80004c8 <__aeabi_dmul>
 800b872:	4606      	mov	r6, r0
 800b874:	460f      	mov	r7, r1
 800b876:	b914      	cbnz	r4, 800b87e <__ieee754_log+0x126>
 800b878:	4632      	mov	r2, r6
 800b87a:	463b      	mov	r3, r7
 800b87c:	e0a2      	b.n	800b9c4 <__ieee754_log+0x26c>
 800b87e:	4620      	mov	r0, r4
 800b880:	f7f4 fdb8 	bl	80003f4 <__aeabi_i2d>
 800b884:	a374      	add	r3, pc, #464	; (adr r3, 800ba58 <__ieee754_log+0x300>)
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	4680      	mov	r8, r0
 800b88c:	4689      	mov	r9, r1
 800b88e:	f7f4 fe1b 	bl	80004c8 <__aeabi_dmul>
 800b892:	a373      	add	r3, pc, #460	; (adr r3, 800ba60 <__ieee754_log+0x308>)
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	4604      	mov	r4, r0
 800b89a:	460d      	mov	r5, r1
 800b89c:	4640      	mov	r0, r8
 800b89e:	4649      	mov	r1, r9
 800b8a0:	f7f4 fe12 	bl	80004c8 <__aeabi_dmul>
 800b8a4:	e0a7      	b.n	800b9f6 <__ieee754_log+0x29e>
 800b8a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8aa:	f7f4 fc57 	bl	800015c <__adddf3>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4650      	mov	r0, sl
 800b8b4:	4659      	mov	r1, fp
 800b8b6:	f7f4 ff31 	bl	800071c <__aeabi_ddiv>
 800b8ba:	e9cd 0100 	strd	r0, r1, [sp]
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f7f4 fd98 	bl	80003f4 <__aeabi_i2d>
 800b8c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	f7f4 fdfa 	bl	80004c8 <__aeabi_dmul>
 800b8d4:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b8d8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b8dc:	4602      	mov	r2, r0
 800b8de:	9305      	str	r3, [sp, #20]
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	460f      	mov	r7, r1
 800b8e6:	f7f4 fdef 	bl	80004c8 <__aeabi_dmul>
 800b8ea:	a361      	add	r3, pc, #388	; (adr r3, 800ba70 <__ieee754_log+0x318>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	4680      	mov	r8, r0
 800b8f2:	4689      	mov	r9, r1
 800b8f4:	f7f4 fde8 	bl	80004c8 <__aeabi_dmul>
 800b8f8:	a35f      	add	r3, pc, #380	; (adr r3, 800ba78 <__ieee754_log+0x320>)
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	f7f4 fc2d 	bl	800015c <__adddf3>
 800b902:	4642      	mov	r2, r8
 800b904:	464b      	mov	r3, r9
 800b906:	f7f4 fddf 	bl	80004c8 <__aeabi_dmul>
 800b90a:	a35d      	add	r3, pc, #372	; (adr r3, 800ba80 <__ieee754_log+0x328>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fc24 	bl	800015c <__adddf3>
 800b914:	4642      	mov	r2, r8
 800b916:	464b      	mov	r3, r9
 800b918:	f7f4 fdd6 	bl	80004c8 <__aeabi_dmul>
 800b91c:	a35a      	add	r3, pc, #360	; (adr r3, 800ba88 <__ieee754_log+0x330>)
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	f7f4 fc1b 	bl	800015c <__adddf3>
 800b926:	4632      	mov	r2, r6
 800b928:	463b      	mov	r3, r7
 800b92a:	f7f4 fdcd 	bl	80004c8 <__aeabi_dmul>
 800b92e:	a358      	add	r3, pc, #352	; (adr r3, 800ba90 <__ieee754_log+0x338>)
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	4606      	mov	r6, r0
 800b936:	460f      	mov	r7, r1
 800b938:	4640      	mov	r0, r8
 800b93a:	4649      	mov	r1, r9
 800b93c:	f7f4 fdc4 	bl	80004c8 <__aeabi_dmul>
 800b940:	a355      	add	r3, pc, #340	; (adr r3, 800ba98 <__ieee754_log+0x340>)
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	f7f4 fc09 	bl	800015c <__adddf3>
 800b94a:	4642      	mov	r2, r8
 800b94c:	464b      	mov	r3, r9
 800b94e:	f7f4 fdbb 	bl	80004c8 <__aeabi_dmul>
 800b952:	a353      	add	r3, pc, #332	; (adr r3, 800baa0 <__ieee754_log+0x348>)
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	f7f4 fc00 	bl	800015c <__adddf3>
 800b95c:	4642      	mov	r2, r8
 800b95e:	464b      	mov	r3, r9
 800b960:	f7f4 fdb2 	bl	80004c8 <__aeabi_dmul>
 800b964:	460b      	mov	r3, r1
 800b966:	4602      	mov	r2, r0
 800b968:	4639      	mov	r1, r7
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7f4 fbf6 	bl	800015c <__adddf3>
 800b970:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b974:	9b05      	ldr	r3, [sp, #20]
 800b976:	3551      	adds	r5, #81	; 0x51
 800b978:	431d      	orrs	r5, r3
 800b97a:	2d00      	cmp	r5, #0
 800b97c:	4680      	mov	r8, r0
 800b97e:	4689      	mov	r9, r1
 800b980:	dd48      	ble.n	800ba14 <__ieee754_log+0x2bc>
 800b982:	2200      	movs	r2, #0
 800b984:	4b4c      	ldr	r3, [pc, #304]	; (800bab8 <__ieee754_log+0x360>)
 800b986:	4650      	mov	r0, sl
 800b988:	4659      	mov	r1, fp
 800b98a:	f7f4 fd9d 	bl	80004c8 <__aeabi_dmul>
 800b98e:	4652      	mov	r2, sl
 800b990:	465b      	mov	r3, fp
 800b992:	f7f4 fd99 	bl	80004c8 <__aeabi_dmul>
 800b996:	4602      	mov	r2, r0
 800b998:	460b      	mov	r3, r1
 800b99a:	4606      	mov	r6, r0
 800b99c:	460f      	mov	r7, r1
 800b99e:	4640      	mov	r0, r8
 800b9a0:	4649      	mov	r1, r9
 800b9a2:	f7f4 fbdb 	bl	800015c <__adddf3>
 800b9a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9aa:	f7f4 fd8d 	bl	80004c8 <__aeabi_dmul>
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	4689      	mov	r9, r1
 800b9b2:	b964      	cbnz	r4, 800b9ce <__ieee754_log+0x276>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	4639      	mov	r1, r7
 800b9bc:	f7f4 fbcc 	bl	8000158 <__aeabi_dsub>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4650      	mov	r0, sl
 800b9c6:	4659      	mov	r1, fp
 800b9c8:	f7f4 fbc6 	bl	8000158 <__aeabi_dsub>
 800b9cc:	e6d7      	b.n	800b77e <__ieee754_log+0x26>
 800b9ce:	a322      	add	r3, pc, #136	; (adr r3, 800ba58 <__ieee754_log+0x300>)
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9d8:	f7f4 fd76 	bl	80004c8 <__aeabi_dmul>
 800b9dc:	a320      	add	r3, pc, #128	; (adr r3, 800ba60 <__ieee754_log+0x308>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	460d      	mov	r5, r1
 800b9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ea:	f7f4 fd6d 	bl	80004c8 <__aeabi_dmul>
 800b9ee:	4642      	mov	r2, r8
 800b9f0:	464b      	mov	r3, r9
 800b9f2:	f7f4 fbb3 	bl	800015c <__adddf3>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	4639      	mov	r1, r7
 800b9fe:	f7f4 fbab 	bl	8000158 <__aeabi_dsub>
 800ba02:	4652      	mov	r2, sl
 800ba04:	465b      	mov	r3, fp
 800ba06:	f7f4 fba7 	bl	8000158 <__aeabi_dsub>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	4620      	mov	r0, r4
 800ba10:	4629      	mov	r1, r5
 800ba12:	e7d9      	b.n	800b9c8 <__ieee754_log+0x270>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	4650      	mov	r0, sl
 800ba1a:	4659      	mov	r1, fp
 800ba1c:	f7f4 fb9c 	bl	8000158 <__aeabi_dsub>
 800ba20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba24:	f7f4 fd50 	bl	80004c8 <__aeabi_dmul>
 800ba28:	4606      	mov	r6, r0
 800ba2a:	460f      	mov	r7, r1
 800ba2c:	2c00      	cmp	r4, #0
 800ba2e:	f43f af23 	beq.w	800b878 <__ieee754_log+0x120>
 800ba32:	a309      	add	r3, pc, #36	; (adr r3, 800ba58 <__ieee754_log+0x300>)
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba3c:	f7f4 fd44 	bl	80004c8 <__aeabi_dmul>
 800ba40:	a307      	add	r3, pc, #28	; (adr r3, 800ba60 <__ieee754_log+0x308>)
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	4604      	mov	r4, r0
 800ba48:	460d      	mov	r5, r1
 800ba4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba4e:	e727      	b.n	800b8a0 <__ieee754_log+0x148>
 800ba50:	2000      	movs	r0, #0
 800ba52:	2100      	movs	r1, #0
 800ba54:	e693      	b.n	800b77e <__ieee754_log+0x26>
 800ba56:	bf00      	nop
 800ba58:	fee00000 	.word	0xfee00000
 800ba5c:	3fe62e42 	.word	0x3fe62e42
 800ba60:	35793c76 	.word	0x35793c76
 800ba64:	3dea39ef 	.word	0x3dea39ef
 800ba68:	55555555 	.word	0x55555555
 800ba6c:	3fd55555 	.word	0x3fd55555
 800ba70:	df3e5244 	.word	0xdf3e5244
 800ba74:	3fc2f112 	.word	0x3fc2f112
 800ba78:	96cb03de 	.word	0x96cb03de
 800ba7c:	3fc74664 	.word	0x3fc74664
 800ba80:	94229359 	.word	0x94229359
 800ba84:	3fd24924 	.word	0x3fd24924
 800ba88:	55555593 	.word	0x55555593
 800ba8c:	3fe55555 	.word	0x3fe55555
 800ba90:	d078c69f 	.word	0xd078c69f
 800ba94:	3fc39a09 	.word	0x3fc39a09
 800ba98:	1d8e78af 	.word	0x1d8e78af
 800ba9c:	3fcc71c5 	.word	0x3fcc71c5
 800baa0:	9997fa04 	.word	0x9997fa04
 800baa4:	3fd99999 	.word	0x3fd99999
 800baa8:	c3500000 	.word	0xc3500000
 800baac:	43500000 	.word	0x43500000
 800bab0:	7fefffff 	.word	0x7fefffff
 800bab4:	3ff00000 	.word	0x3ff00000
 800bab8:	3fe00000 	.word	0x3fe00000

0800babc <_init>:
 800babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babe:	bf00      	nop
 800bac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bac2:	bc08      	pop	{r3}
 800bac4:	469e      	mov	lr, r3
 800bac6:	4770      	bx	lr

0800bac8 <_fini>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	bf00      	nop
 800bacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bace:	bc08      	pop	{r3}
 800bad0:	469e      	mov	lr, r3
 800bad2:	4770      	bx	lr
