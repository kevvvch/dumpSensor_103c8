
dumpSensor_103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a080  0800a080  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800a080  0800a080  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a080  0800a080  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a080  0800a080  0001a080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a084  0800a084  0001a084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000088  0800a110  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  0800a110  0002073c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f4f  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bdf  00000000  00000000  00036000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00039be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0003b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019554  00000000  00000000  0003c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174a0  00000000  00000000  00055acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f3d  00000000  00000000  0006cf6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fdea9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  000fdefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d2c 	.word	0x08009d2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08009d2c 	.word	0x08009d2c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <ch4Sensor_init>:




void ch4Sensor_init(ADC_HandleTypeDef *hadc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	//ADC
	ch4Hadc = hadc;
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <ch4Sensor_init+0x2c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&ch4Sensor_state, __ch4Sensor_idle);
 8000f82:	2100      	movs	r1, #0
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <ch4Sensor_init+0x30>)
 8000f86:	f000 fe01 	bl	8001b8c <fsmManager_init>

	//Flags
	flags_ch4Sensor.dword = 0;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <ch4Sensor_init+0x34>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
	flags_ch4SensorError.dword = 0;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <ch4Sensor_init+0x38>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000a4 	.word	0x200000a4
 8000fa4:	200000ac 	.word	0x200000ac
 8000fa8:	200000b8 	.word	0x200000b8
 8000fac:	200000bc 	.word	0x200000bc

08000fb0 <ch4Sensor_handler>:

void ch4Sensor_handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&ch4Sensor_state)) {
 8000fb4:	4833      	ldr	r0, [pc, #204]	; (8001084 <ch4Sensor_handler+0xd4>)
 8000fb6:	f000 fe16 	bl	8001be6 <fsmManager_getState>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <ch4Sensor_handler+0x16>
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d028      	beq.n	8001016 <ch4Sensor_handler+0x66>

				flags_ch4Sensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 8000fc4:	e05c      	b.n	8001080 <ch4Sensor_handler+0xd0>
			if(fsmManager_isStateIn(&ch4Sensor_state)) {
 8000fc6:	482f      	ldr	r0, [pc, #188]	; (8001084 <ch4Sensor_handler+0xd4>)
 8000fc8:	f000 fe18 	bl	8001bfc <fsmManager_isStateIn>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d007      	beq.n	8000fe2 <ch4Sensor_handler+0x32>
				fsmManager_stateIn(&ch4Sensor_state);
 8000fd2:	482c      	ldr	r0, [pc, #176]	; (8001084 <ch4Sensor_handler+0xd4>)
 8000fd4:	f000 fe28 	bl	8001c28 <fsmManager_stateIn>
				flags_ch4Sensor.bits.isMeasuring = 0;
 8000fd8:	4a2b      	ldr	r2, [pc, #172]	; (8001088 <ch4Sensor_handler+0xd8>)
 8000fda:	7853      	ldrb	r3, [r2, #1]
 8000fdc:	f36f 03c3 	bfc	r3, #3, #1
 8000fe0:	7053      	strb	r3, [r2, #1]
			if(flags_ch4Sensor.bits.requestMeasure) {
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <ch4Sensor_handler+0xd8>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <ch4Sensor_handler+0x52>
				flags_ch4Sensor.bits.isMeasuring = 1;
 8000ff0:	4a25      	ldr	r2, [pc, #148]	; (8001088 <ch4Sensor_handler+0xd8>)
 8000ff2:	7853      	ldrb	r3, [r2, #1]
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&ch4Sensor_state,__ch4Sensor_getAmmoniac);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4821      	ldr	r0, [pc, #132]	; (8001084 <ch4Sensor_handler+0xd4>)
 8000ffe:	f000 fddb 	bl	8001bb8 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&ch4Sensor_state)) {
 8001002:	4820      	ldr	r0, [pc, #128]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001004:	f000 fe05 	bl	8001c12 <fsmManager_isStateOut>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d035      	beq.n	800107a <ch4Sensor_handler+0xca>
				fsmManager_stateOut(&ch4Sensor_state);
 800100e:	481d      	ldr	r0, [pc, #116]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001010:	f000 fe19 	bl	8001c46 <fsmManager_stateOut>
			break;
 8001014:	e031      	b.n	800107a <ch4Sensor_handler+0xca>
			if(fsmManager_isStateIn(&ch4Sensor_state)) {
 8001016:	481b      	ldr	r0, [pc, #108]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001018:	f000 fdf0 	bl	8001bfc <fsmManager_isStateIn>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d004      	beq.n	800102c <ch4Sensor_handler+0x7c>
				fsmManager_stateIn(&ch4Sensor_state);
 8001022:	4818      	ldr	r0, [pc, #96]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001024:	f000 fe00 	bl	8001c28 <fsmManager_stateIn>
				ch4_adcStart();
 8001028:	f000 f87e 	bl	8001128 <ch4_adcStart>
			ch4Ppm = (float)ch4_adcGetValue();
 800102c:	f000 f890 	bl	8001150 <ch4_adcGetValue>
 8001030:	4603      	mov	r3, r0
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fd60 	bl	8000af8 <__aeabi_ui2f>
 8001038:	4603      	mov	r3, r0
 800103a:	4a14      	ldr	r2, [pc, #80]	; (800108c <ch4Sensor_handler+0xdc>)
 800103c:	6013      	str	r3, [r2, #0]
			if(ch4SensorCallback != NULL) {
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <ch4Sensor_handler+0xe0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <ch4Sensor_handler+0xa0>
				ch4SensorCallback(__ch4SensorEvent_okMeasuring, (float *) &ch4Ppm);
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <ch4Sensor_handler+0xe0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4910      	ldr	r1, [pc, #64]	; (800108c <ch4Sensor_handler+0xdc>)
 800104c:	2000      	movs	r0, #0
 800104e:	4798      	blx	r3
			fsmManager_gotoState(&ch4Sensor_state,__ch4Sensor_idle);
 8001050:	2100      	movs	r1, #0
 8001052:	480c      	ldr	r0, [pc, #48]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001054:	f000 fdb0 	bl	8001bb8 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&ch4Sensor_state)) {
 8001058:	480a      	ldr	r0, [pc, #40]	; (8001084 <ch4Sensor_handler+0xd4>)
 800105a:	f000 fdda 	bl	8001c12 <fsmManager_isStateOut>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00c      	beq.n	800107e <ch4Sensor_handler+0xce>
				fsmManager_stateOut(&ch4Sensor_state);
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001066:	f000 fdee 	bl	8001c46 <fsmManager_stateOut>
				ch4_adcStop();
 800106a:	f000 f87d 	bl	8001168 <ch4_adcStop>
				flags_ch4Sensor.bits.requestMeasure = 0;
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <ch4Sensor_handler+0xd8>)
 8001070:	7813      	ldrb	r3, [r2, #0]
 8001072:	f36f 0300 	bfc	r3, #0, #1
 8001076:	7013      	strb	r3, [r2, #0]
			break;
 8001078:	e001      	b.n	800107e <ch4Sensor_handler+0xce>
			break;
 800107a:	bf00      	nop
 800107c:	e000      	b.n	8001080 <ch4Sensor_handler+0xd0>
			break;
 800107e:	bf00      	nop
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200000ac 	.word	0x200000ac
 8001088:	200000b8 	.word	0x200000b8
 800108c:	200000a8 	.word	0x200000a8
 8001090:	200000c0 	.word	0x200000c0

08001094 <ch4Sensor_measure>:

void ch4Sensor_measure(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	flags_ch4Sensor.bits.requestMeasure = 1;
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <ch4Sensor_measure+0x18>)
 800109a:	7813      	ldrb	r3, [r2, #0]
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	7013      	strb	r3, [r2, #0]
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200000b8 	.word	0x200000b8

080010b0 <ch4Sensor_setCallback>:
{
	return flags_ch4Sensor.bits.isMeasuring;
}

void ch4Sensor_setCallback(void (*cb)(_ch4Sensor_event, void*))
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	ch4SensorCallback = cb;
 80010b8:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <ch4Sensor_setCallback+0x18>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	200000c0 	.word	0x200000c0

080010cc <ch4Sensor_powerOn>:

void ch4Sensor_powerOn(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	pinCh4Vdd_write(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f000 f855 	bl	8001180 <pinCh4Vdd_write>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}

080010da <ch4Sensor_powerOff>:

void ch4Sensor_powerOff(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
	pinCh4Vdd_write(0);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f84e 	bl	8001180 <pinCh4Vdd_write>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <ADC_Select_CHCh4>:



static void ADC_Select_CHCh4(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001100:	2301      	movs	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(ch4Hadc, &sConfig) != HAL_OK) {
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <ADC_Select_CHCh4+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	1d3a      	adds	r2, r7, #4
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f005 f907 	bl	8006320 <HAL_ADC_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <ADC_Select_CHCh4+0x34>
		Error_Handler();
 8001118:	f003 fb4e 	bl	80047b8 <Error_Handler>
	}
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000a4 	.word	0x200000a4

08001128 <ch4_adcStart>:

static void ch4_adcStart(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	ADC_Select_CHCh4();
 800112c:	f7ff ffdc 	bl	80010e8 <ADC_Select_CHCh4>
	HAL_ADC_Start(ch4Hadc);
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <ch4_adcStart+0x24>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f004 ff07 	bl	8005f48 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ch4Hadc, 100);
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <ch4_adcStart+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2164      	movs	r1, #100	; 0x64
 8001140:	4618      	mov	r0, r3
 8001142:	f004 ffdb 	bl	80060fc <HAL_ADC_PollForConversion>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000a4 	.word	0x200000a4

08001150 <ch4_adcGetValue>:

static uint32_t ch4_adcGetValue(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(ch4Hadc);
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <ch4_adcGetValue+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f005 f8d5 	bl	8006308 <HAL_ADC_GetValue>
 800115e:	4603      	mov	r3, r0
}
 8001160:	4618      	mov	r0, r3
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200000a4 	.word	0x200000a4

08001168 <ch4_adcStop>:

static void ch4_adcStop(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(ch4Hadc);
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <ch4_adcStop+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f004 ff97 	bl	80060a4 <HAL_ADC_Stop>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000a4 	.word	0x200000a4

08001180 <pinCh4Vdd_write>:

static void pinCh4Vdd_write(uint8_t state)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CH4_SENSOR_VDD_PORT, CH4_SENSOR_VDD_PIN, state);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	461a      	mov	r2, r3
 800118e:	2120      	movs	r1, #32
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <pinCh4Vdd_write+0x20>)
 8001192:	f005 fd9b 	bl	8006ccc <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010800 	.word	0x40010800

080011a4 <usSensorCb>:
static float calculateDistancePercentage(float dist);



void usSensorCb(_usSensor_event evt, void* payload)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <usSensorCb+0x16>
 80011b6:	2b01      	cmp	r3, #1
			flags_dumpSensor.bits.usSensor_measureDone = 1;
			break;

		case __usSensorEvent_errorEcho:;

			break;
 80011b8:	e009      	b.n	80011ce <usSensorCb+0x2a>
			distance = *(float*) payload;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <usSensorCb+0x34>)
 80011c0:	6013      	str	r3, [r2, #0]
			flags_dumpSensor.bits.usSensor_measureDone = 1;
 80011c2:	4a06      	ldr	r2, [pc, #24]	; (80011dc <usSensorCb+0x38>)
 80011c4:	7813      	ldrb	r3, [r2, #0]
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	7013      	strb	r3, [r2, #0]
			break;
 80011cc:	bf00      	nop
	}
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	200000c8 	.word	0x200000c8
 80011dc:	20000610 	.word	0x20000610

080011e0 <nh3SensorCb>:

void nh3SensorCb(_nh3Sensor_event evt, void* payload)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d109      	bne.n	8001206 <nh3SensorCb+0x26>
	{
		case __nh3SensorEvent_okMeasuring:;
			nh3Concentration = *(float*) payload;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <nh3SensorCb+0x30>)
 80011f8:	6013      	str	r3, [r2, #0]

			flags_dumpSensor.bits.nh3Sensor_measureDone = 1;
 80011fa:	4a06      	ldr	r2, [pc, #24]	; (8001214 <nh3SensorCb+0x34>)
 80011fc:	7813      	ldrb	r3, [r2, #0]
 80011fe:	f043 0308 	orr.w	r3, r3, #8
 8001202:	7013      	strb	r3, [r2, #0]
			break;
 8001204:	bf00      	nop
	}
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	200000cc 	.word	0x200000cc
 8001214:	20000610 	.word	0x20000610

08001218 <ch4SensorCb>:

void ch4SensorCb(_ch4Sensor_event evt, void* payload)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <ch4SensorCb+0x26>
	{
		case __ch4SensorEvent_okMeasuring:;
			ch4Concentration = *(float*) payload;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a06      	ldr	r2, [pc, #24]	; (8001248 <ch4SensorCb+0x30>)
 8001230:	6013      	str	r3, [r2, #0]

			flags_dumpSensor.bits.ch4Sensor_measureDone = 1;
 8001232:	4a06      	ldr	r2, [pc, #24]	; (800124c <ch4SensorCb+0x34>)
 8001234:	7813      	ldrb	r3, [r2, #0]
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	7013      	strb	r3, [r2, #0]
			break;
 800123c:	bf00      	nop
	}
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	200000d0 	.word	0x200000d0
 800124c:	20000610 	.word	0x20000610

08001250 <tempSensorCb>:

void tempSensorCb(_tempSensor_event evt, void* payload)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d113      	bne.n	800128a <tempSensorCb+0x3a>
	{
		case __tempSensorEvent_okMeasuring:;
			temperature = *(float*) payload;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <tempSensorCb+0x44>)
 8001268:	6013      	str	r3, [r2, #0]
			temperature -= 10;	//Subtract addicional temperature of the capsule
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <tempSensorCb+0x44>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	490a      	ldr	r1, [pc, #40]	; (8001298 <tempSensorCb+0x48>)
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fb8f 	bl	8000994 <__aeabi_fsub>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <tempSensorCb+0x44>)
 800127c:	601a      	str	r2, [r3, #0]

			flags_dumpSensor.bits.tempSensor_measureDone = 1;
 800127e:	4a07      	ldr	r2, [pc, #28]	; (800129c <tempSensorCb+0x4c>)
 8001280:	7813      	ldrb	r3, [r2, #0]
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	7013      	strb	r3, [r2, #0]
			break;
 8001288:	bf00      	nop
	}
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000d4 	.word	0x200000d4
 8001298:	41200000 	.word	0x41200000
 800129c:	20000610 	.word	0x20000610

080012a0 <dumpSensorManager_init>:


void dumpSensorManager_init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	//Wakes up from sleep
	powerMode_init(&hrtc);
 80012a4:	481a      	ldr	r0, [pc, #104]	; (8001310 <dumpSensorManager_init+0x70>)
 80012a6:	f003 fbf7 	bl	8004a98 <powerMode_init>

	//Initializes softTimer
	softTimer_init(&htim4);
 80012aa:	481a      	ldr	r0, [pc, #104]	; (8001314 <dumpSensorManager_init+0x74>)
 80012ac:	f003 fc52 	bl	8004b54 <softTimer_init>

	//Initializes ultrasonic Sensor
	usSensor_init(&htim3);
 80012b0:	4819      	ldr	r0, [pc, #100]	; (8001318 <dumpSensorManager_init+0x78>)
 80012b2:	f003 ffbf 	bl	8005234 <usSensor_init>
	usSensor_setCallback(usSensorCb);
 80012b6:	4819      	ldr	r0, [pc, #100]	; (800131c <dumpSensorManager_init+0x7c>)
 80012b8:	f004 f9ee 	bl	8005698 <usSensor_setCallback>
	usSensor_powerOff();
 80012bc:	f004 f9b7 	bl	800562e <usSensor_powerOff>

	//Initializes temperature Sensor
	tempSensor_init(&hadc1);
 80012c0:	4817      	ldr	r0, [pc, #92]	; (8001320 <dumpSensorManager_init+0x80>)
 80012c2:	f003 fe75 	bl	8004fb0 <tempSensor_init>
	tempSensor_setCallback(tempSensorCb);
 80012c6:	4817      	ldr	r0, [pc, #92]	; (8001324 <dumpSensorManager_init+0x84>)
 80012c8:	f003 ff5a 	bl	8005180 <tempSensor_setCallback>

	//Initializes NH3 Sensor
	nh3Sensor_init(&hadc1);
 80012cc:	4814      	ldr	r0, [pc, #80]	; (8001320 <dumpSensorManager_init+0x80>)
 80012ce:	f003 fa79 	bl	80047c4 <nh3Sensor_init>
	nh3Sensor_setCallback(nh3SensorCb);
 80012d2:	4815      	ldr	r0, [pc, #84]	; (8001328 <dumpSensorManager_init+0x88>)
 80012d4:	f003 fb14 	bl	8004900 <nh3Sensor_setCallback>
	nh3Sensor_powerOff();
 80012d8:	f003 fb27 	bl	800492a <nh3Sensor_powerOff>

	//Initializes CH4 Sensor
	ch4Sensor_init(&hadc1);
 80012dc:	4810      	ldr	r0, [pc, #64]	; (8001320 <dumpSensorManager_init+0x80>)
 80012de:	f7ff fe49 	bl	8000f74 <ch4Sensor_init>
	ch4Sensor_setCallback(ch4SensorCb);
 80012e2:	4812      	ldr	r0, [pc, #72]	; (800132c <dumpSensorManager_init+0x8c>)
 80012e4:	f7ff fee4 	bl	80010b0 <ch4Sensor_setCallback>
	ch4Sensor_powerOff();
 80012e8:	f7ff fef7 	bl	80010da <ch4Sensor_powerOff>

	//Initializes GSM Module
	gsmModule_init(&huart1);
 80012ec:	4810      	ldr	r0, [pc, #64]	; (8001330 <dumpSensorManager_init+0x90>)
 80012ee:	f000 fcb9 	bl	8001c64 <gsmModule_init>
	gsmModule_powerOff();
 80012f2:	f000 fd1c 	bl	8001d2e <gsmModule_powerOff>

	//Initializes NVM managment Module
	nvm_init(&hrtc);
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <dumpSensorManager_init+0x70>)
 80012f8:	f003 fb7c 	bl	80049f4 <nvm_init>

	//FSM
	fsmManager_init(&dumpSensorFsmState, __dumpSensor_idle);
 80012fc:	2100      	movs	r1, #0
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <dumpSensorManager_init+0x94>)
 8001300:	f000 fc44 	bl	8001b8c <fsmManager_init>

	//Flags
	flags_dumpSensor.dword = 0;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <dumpSensorManager_init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000071c 	.word	0x2000071c
 8001314:	20000618 	.word	0x20000618
 8001318:	20000660 	.word	0x20000660
 800131c:	080011a5 	.word	0x080011a5
 8001320:	200006a8 	.word	0x200006a8
 8001324:	08001251 	.word	0x08001251
 8001328:	080011e1 	.word	0x080011e1
 800132c:	08001219 	.word	0x08001219
 8001330:	200006d8 	.word	0x200006d8
 8001334:	20000604 	.word	0x20000604
 8001338:	20000610 	.word	0x20000610

0800133c <dumpSensorManager_handler>:

void dumpSensorManager_handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	usSensor_handler();
 8001340:	f003 ffd2 	bl	80052e8 <usSensor_handler>
	tempSensor_handler();
 8001344:	f003 fe54 	bl	8004ff0 <tempSensor_handler>
	nh3Sensor_handler();
 8001348:	f003 fa5a 	bl	8004800 <nh3Sensor_handler>
	ch4Sensor_handler();
 800134c:	f7ff fe30 	bl	8000fb0 <ch4Sensor_handler>
	gsmModule_handler();
 8001350:	f000 fde8 	bl	8001f24 <gsmModule_handler>



	if(flags_dumpSensor.bits.gsmModule_turnOn == 1) {
 8001354:	4bba      	ldr	r3, [pc, #744]	; (8001640 <dumpSensorManager_handler+0x304>)
 8001356:	785b      	ldrb	r3, [r3, #1]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d106      	bne.n	800136a <dumpSensorManager_handler+0x2e>
		flags_dumpSensor.bits.gsmModule_turnOn = 0;
 800135c:	4bb8      	ldr	r3, [pc, #736]	; (8001640 <dumpSensorManager_handler+0x304>)
 800135e:	2200      	movs	r2, #0
 8001360:	705a      	strb	r2, [r3, #1]

		gsmModule_powerOn();
 8001362:	f000 fcdd 	bl	8001d20 <gsmModule_powerOn>
		gsmModule_pwrkeyOn();
 8001366:	f000 fce9 	bl	8001d3c <gsmModule_pwrkeyOn>
	}

	switch(fsmManager_getState(&dumpSensorFsmState))
 800136a:	48b6      	ldr	r0, [pc, #728]	; (8001644 <dumpSensorManager_handler+0x308>)
 800136c:	f000 fc3b 	bl	8001be6 <fsmManager_getState>
 8001370:	4603      	mov	r3, r0
 8001372:	2b0d      	cmp	r3, #13
 8001374:	f200 833b 	bhi.w	80019ee <dumpSensorManager_handler+0x6b2>
 8001378:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <dumpSensorManager_handler+0x44>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	080013b9 	.word	0x080013b9
 8001384:	080013e9 	.word	0x080013e9
 8001388:	08001431 	.word	0x08001431
 800138c:	0800147d 	.word	0x0800147d
 8001390:	080014c5 	.word	0x080014c5
 8001394:	08001525 	.word	0x08001525
 8001398:	08001573 	.word	0x08001573
 800139c:	080015d9 	.word	0x080015d9
 80013a0:	0800166d 	.word	0x0800166d
 80013a4:	080016fb 	.word	0x080016fb
 80013a8:	08001889 	.word	0x08001889
 80013ac:	080018e7 	.word	0x080018e7
 80013b0:	0800198d 	.word	0x0800198d
 80013b4:	080019c1 	.word	0x080019c1
	{
		case __dumpSensor_idle:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80013b8:	48a2      	ldr	r0, [pc, #648]	; (8001644 <dumpSensorManager_handler+0x308>)
 80013ba:	f000 fc1f 	bl	8001bfc <fsmManager_isStateIn>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <dumpSensorManager_handler+0x8e>
				fsmManager_stateIn(&dumpSensorFsmState);
 80013c4:	489f      	ldr	r0, [pc, #636]	; (8001644 <dumpSensorManager_handler+0x308>)
 80013c6:	f000 fc2f 	bl	8001c28 <fsmManager_stateIn>
#if defined(STATUS_LED)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
#endif
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_readNvm);
 80013ca:	2101      	movs	r1, #1
 80013cc:	489d      	ldr	r0, [pc, #628]	; (8001644 <dumpSensorManager_handler+0x308>)
 80013ce:	f000 fbf3 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80013d2:	489c      	ldr	r0, [pc, #624]	; (8001644 <dumpSensorManager_handler+0x308>)
 80013d4:	f000 fc1d 	bl	8001c12 <fsmManager_isStateOut>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 831e 	beq.w	8001a1c <dumpSensorManager_handler+0x6e0>
				fsmManager_stateOut(&dumpSensorFsmState);
 80013e0:	4898      	ldr	r0, [pc, #608]	; (8001644 <dumpSensorManager_handler+0x308>)
 80013e2:	f000 fc30 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80013e6:	e319      	b.n	8001a1c <dumpSensorManager_handler+0x6e0>



		case __dumpSensor_readNvm:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80013e8:	4896      	ldr	r0, [pc, #600]	; (8001644 <dumpSensorManager_handler+0x308>)
 80013ea:	f000 fc07 	bl	8001bfc <fsmManager_isStateIn>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <dumpSensorManager_handler+0xbe>
				fsmManager_stateIn(&dumpSensorFsmState);
 80013f4:	4893      	ldr	r0, [pc, #588]	; (8001644 <dumpSensorManager_handler+0x308>)
 80013f6:	f000 fc17 	bl	8001c28 <fsmManager_stateIn>
			}

			readNvm();
 80013fa:	f000 fb6b 	bl	8001ad4 <readNvm>
			writeNvm();
 80013fe:	f000 fb87 	bl	8001b10 <writeNvm>

			//Gets product ID
			productId = (((uint32_t) reg[NVM_ID_HIGH].word) << 16) | reg[NVM_ID_LOW].word;
 8001402:	4b91      	ldr	r3, [pc, #580]	; (8001648 <dumpSensorManager_handler+0x30c>)
 8001404:	889b      	ldrh	r3, [r3, #4]
 8001406:	041b      	lsls	r3, r3, #16
 8001408:	4a8f      	ldr	r2, [pc, #572]	; (8001648 <dumpSensorManager_handler+0x30c>)
 800140a:	8852      	ldrh	r2, [r2, #2]
 800140c:	4313      	orrs	r3, r2
 800140e:	4a8f      	ldr	r2, [pc, #572]	; (800164c <dumpSensorManager_handler+0x310>)
 8001410:	6013      	str	r3, [r2, #0]

			//Gets flags


			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureBattery);
 8001412:	2102      	movs	r1, #2
 8001414:	488b      	ldr	r0, [pc, #556]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001416:	f000 fbcf 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 800141a:	488a      	ldr	r0, [pc, #552]	; (8001644 <dumpSensorManager_handler+0x308>)
 800141c:	f000 fbf9 	bl	8001c12 <fsmManager_isStateOut>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 82fc 	beq.w	8001a20 <dumpSensorManager_handler+0x6e4>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001428:	4886      	ldr	r0, [pc, #536]	; (8001644 <dumpSensorManager_handler+0x308>)
 800142a:	f000 fc0c 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 800142e:	e2f7      	b.n	8001a20 <dumpSensorManager_handler+0x6e4>



		case __dumpSensor_measureBattery:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001430:	4884      	ldr	r0, [pc, #528]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001432:	f000 fbe3 	bl	8001bfc <fsmManager_isStateIn>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <dumpSensorManager_handler+0x106>
				fsmManager_stateIn(&dumpSensorFsmState);
 800143c:	4881      	ldr	r0, [pc, #516]	; (8001644 <dumpSensorManager_handler+0x308>)
 800143e:	f000 fbf3 	bl	8001c28 <fsmManager_stateIn>
			}

			//Gets battery level percetange
			battery = 0.50;
 8001442:	4b83      	ldr	r3, [pc, #524]	; (8001650 <dumpSensorManager_handler+0x314>)
 8001444:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001448:	601a      	str	r2, [r3, #0]
			batteryPercent = battery*100;
 800144a:	4b81      	ldr	r3, [pc, #516]	; (8001650 <dumpSensorManager_handler+0x314>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4981      	ldr	r1, [pc, #516]	; (8001654 <dumpSensorManager_handler+0x318>)
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fba9 	bl	8000ba8 <__aeabi_fmul>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	4b7f      	ldr	r3, [pc, #508]	; (8001658 <dumpSensorManager_handler+0x31c>)
 800145c:	601a      	str	r2, [r3, #0]
			if(batteryPercent < DUMPSTER_BATTERY_PERC_TRIG_NEG || ) {
				flags_dumpSensor.bits.gsmModule_turnOn = 1;
			}
			*/

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureTemperature);
 800145e:	2103      	movs	r1, #3
 8001460:	4878      	ldr	r0, [pc, #480]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001462:	f000 fba9 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001466:	4877      	ldr	r0, [pc, #476]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001468:	f000 fbd3 	bl	8001c12 <fsmManager_isStateOut>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 82d8 	beq.w	8001a24 <dumpSensorManager_handler+0x6e8>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001474:	4873      	ldr	r0, [pc, #460]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001476:	f000 fbe6 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 800147a:	e2d3      	b.n	8001a24 <dumpSensorManager_handler+0x6e8>



		case __dumpSensor_measureTemperature:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 800147c:	4871      	ldr	r0, [pc, #452]	; (8001644 <dumpSensorManager_handler+0x308>)
 800147e:	f000 fbbd 	bl	8001bfc <fsmManager_isStateIn>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <dumpSensorManager_handler+0x156>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001488:	486e      	ldr	r0, [pc, #440]	; (8001644 <dumpSensorManager_handler+0x308>)
 800148a:	f000 fbcd 	bl	8001c28 <fsmManager_stateIn>

				tempSensor_measure();
 800148e:	f003 fe69 	bl	8005164 <tempSensor_measure>
			}

			if(flags_dumpSensor.bits.tempSensor_measureDone == 1) {
 8001492:	4b6b      	ldr	r3, [pc, #428]	; (8001640 <dumpSensorManager_handler+0x304>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <dumpSensorManager_handler+0x172>
				//TODO: quitar este comentario
				//fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureLevel);
				flags_dumpSensor.bits.gsmModule_turnOn = 1;
 80014a0:	4b67      	ldr	r3, [pc, #412]	; (8001640 <dumpSensorManager_handler+0x304>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	705a      	strb	r2, [r3, #1]
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_heatGasSensor);
 80014a6:	2105      	movs	r1, #5
 80014a8:	4866      	ldr	r0, [pc, #408]	; (8001644 <dumpSensorManager_handler+0x308>)
 80014aa:	f000 fb85 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80014ae:	4865      	ldr	r0, [pc, #404]	; (8001644 <dumpSensorManager_handler+0x308>)
 80014b0:	f000 fbaf 	bl	8001c12 <fsmManager_isStateOut>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 82b6 	beq.w	8001a28 <dumpSensorManager_handler+0x6ec>
				fsmManager_stateOut(&dumpSensorFsmState);
 80014bc:	4861      	ldr	r0, [pc, #388]	; (8001644 <dumpSensorManager_handler+0x308>)
 80014be:	f000 fbc2 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80014c2:	e2b1      	b.n	8001a28 <dumpSensorManager_handler+0x6ec>



		case __dumpSensor_measureLevel:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80014c4:	485f      	ldr	r0, [pc, #380]	; (8001644 <dumpSensorManager_handler+0x308>)
 80014c6:	f000 fb99 	bl	8001bfc <fsmManager_isStateIn>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d009      	beq.n	80014e4 <dumpSensorManager_handler+0x1a8>
				fsmManager_stateIn(&dumpSensorFsmState);
 80014d0:	485c      	ldr	r0, [pc, #368]	; (8001644 <dumpSensorManager_handler+0x308>)
 80014d2:	f000 fba9 	bl	8001c28 <fsmManager_stateIn>

				usSensor_powerOn();
 80014d6:	f004 f8a3 	bl	8005620 <usSensor_powerOn>
				usSensor_measure(temperature);
 80014da:	4b60      	ldr	r3, [pc, #384]	; (800165c <dumpSensorManager_handler+0x320>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 f8ac 	bl	800563c <usSensor_measure>
			}

			if(flags_dumpSensor.bits.usSensor_measureDone == 1) {
 80014e4:	4b56      	ldr	r3, [pc, #344]	; (8001640 <dumpSensorManager_handler+0x304>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <dumpSensorManager_handler+0x1ce>
				//Calculates the percentage of the level of the dumpster
				distancePercent = calculateDistancePercentage(distance);
 80014f2:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <dumpSensorManager_handler+0x324>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fab2 	bl	8001a60 <calculateDistancePercentage>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a59      	ldr	r2, [pc, #356]	; (8001664 <dumpSensorManager_handler+0x328>)
 8001500:	6013      	str	r3, [r2, #0]
#if defined PROJECT_NOLOGIC
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_heatGasSensor);
 8001502:	2105      	movs	r1, #5
 8001504:	484f      	ldr	r0, [pc, #316]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001506:	f000 fb57 	bl	8001bb8 <fsmManager_gotoState>
				else {
					fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
				}
#endif
			}
			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 800150a:	484e      	ldr	r0, [pc, #312]	; (8001644 <dumpSensorManager_handler+0x308>)
 800150c:	f000 fb81 	bl	8001c12 <fsmManager_isStateOut>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 828a 	beq.w	8001a2c <dumpSensorManager_handler+0x6f0>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001518:	484a      	ldr	r0, [pc, #296]	; (8001644 <dumpSensorManager_handler+0x308>)
 800151a:	f000 fb94 	bl	8001c46 <fsmManager_stateOut>

				usSensor_powerOff();
 800151e:	f004 f886 	bl	800562e <usSensor_powerOff>
			}
			break;
 8001522:	e283      	b.n	8001a2c <dumpSensorManager_handler+0x6f0>

		case __dumpSensor_heatGasSensor:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001524:	4847      	ldr	r0, [pc, #284]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001526:	f000 fb69 	bl	8001bfc <fsmManager_isStateIn>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <dumpSensorManager_handler+0x20c>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001530:	4844      	ldr	r0, [pc, #272]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001532:	f000 fb79 	bl	8001c28 <fsmManager_stateIn>

				ch4Sensor_powerOn();
 8001536:	f7ff fdc9 	bl	80010cc <ch4Sensor_powerOn>
				nh3Sensor_powerOn();
 800153a:	f003 f9ef 	bl	800491c <nh3Sensor_powerOn>

				softTimer_start(&timer, 6*1000);
 800153e:	f241 7170 	movw	r1, #6000	; 0x1770
 8001542:	4849      	ldr	r0, [pc, #292]	; (8001668 <dumpSensorManager_handler+0x32c>)
 8001544:	f003 fb16 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 8001548:	4847      	ldr	r0, [pc, #284]	; (8001668 <dumpSensorManager_handler+0x32c>)
 800154a:	f003 fb27 	bl	8004b9c <softTimer_expired>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <dumpSensorManager_handler+0x220>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureNh3);
 8001554:	2106      	movs	r1, #6
 8001556:	483b      	ldr	r0, [pc, #236]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001558:	f000 fb2e 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 800155c:	4839      	ldr	r0, [pc, #228]	; (8001644 <dumpSensorManager_handler+0x308>)
 800155e:	f000 fb58 	bl	8001c12 <fsmManager_isStateOut>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8263 	beq.w	8001a30 <dumpSensorManager_handler+0x6f4>
				fsmManager_stateOut(&dumpSensorFsmState);
 800156a:	4836      	ldr	r0, [pc, #216]	; (8001644 <dumpSensorManager_handler+0x308>)
 800156c:	f000 fb6b 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8001570:	e25e      	b.n	8001a30 <dumpSensorManager_handler+0x6f4>

		case __dumpSensor_measureNh3:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001572:	4834      	ldr	r0, [pc, #208]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001574:	f000 fb42 	bl	8001bfc <fsmManager_isStateIn>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <dumpSensorManager_handler+0x256>
				fsmManager_stateIn(&dumpSensorFsmState);
 800157e:	4831      	ldr	r0, [pc, #196]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001580:	f000 fb52 	bl	8001c28 <fsmManager_stateIn>

				nh3Sensor_measure();
 8001584:	f003 f9ae 	bl	80048e4 <nh3Sensor_measure>

				softTimer_start(&timer, 500);
 8001588:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800158c:	4836      	ldr	r0, [pc, #216]	; (8001668 <dumpSensorManager_handler+0x32c>)
 800158e:	f003 faf1 	bl	8004b74 <softTimer_start>
			}

			if(flags_dumpSensor.bits.nh3Sensor_measureDone == 1) {
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <dumpSensorManager_handler+0x304>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <dumpSensorManager_handler+0x26e>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureCh4);
 80015a0:	2107      	movs	r1, #7
 80015a2:	4828      	ldr	r0, [pc, #160]	; (8001644 <dumpSensorManager_handler+0x308>)
 80015a4:	f000 fb08 	bl	8001bb8 <fsmManager_gotoState>
 80015a8:	e009      	b.n	80015be <dumpSensorManager_handler+0x282>
			}
			else if(softTimer_expired(&timer)) {
 80015aa:	482f      	ldr	r0, [pc, #188]	; (8001668 <dumpSensorManager_handler+0x32c>)
 80015ac:	f003 faf6 	bl	8004b9c <softTimer_expired>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <dumpSensorManager_handler+0x282>
				//If there is not a measurement within 500 mseg, stop trying to measure
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureCh4);
 80015b6:	2107      	movs	r1, #7
 80015b8:	4822      	ldr	r0, [pc, #136]	; (8001644 <dumpSensorManager_handler+0x308>)
 80015ba:	f000 fafd 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80015be:	4821      	ldr	r0, [pc, #132]	; (8001644 <dumpSensorManager_handler+0x308>)
 80015c0:	f000 fb27 	bl	8001c12 <fsmManager_isStateOut>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8234 	beq.w	8001a34 <dumpSensorManager_handler+0x6f8>
				fsmManager_stateOut(&dumpSensorFsmState);
 80015cc:	481d      	ldr	r0, [pc, #116]	; (8001644 <dumpSensorManager_handler+0x308>)
 80015ce:	f000 fb3a 	bl	8001c46 <fsmManager_stateOut>

				nh3Sensor_powerOff();
 80015d2:	f003 f9aa 	bl	800492a <nh3Sensor_powerOff>
			}
			break;
 80015d6:	e22d      	b.n	8001a34 <dumpSensorManager_handler+0x6f8>



		case __dumpSensor_measureCh4:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80015d8:	481a      	ldr	r0, [pc, #104]	; (8001644 <dumpSensorManager_handler+0x308>)
 80015da:	f000 fb0f 	bl	8001bfc <fsmManager_isStateIn>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d009      	beq.n	80015f8 <dumpSensorManager_handler+0x2bc>
				fsmManager_stateIn(&dumpSensorFsmState);
 80015e4:	4817      	ldr	r0, [pc, #92]	; (8001644 <dumpSensorManager_handler+0x308>)
 80015e6:	f000 fb1f 	bl	8001c28 <fsmManager_stateIn>

				ch4Sensor_measure();
 80015ea:	f7ff fd53 	bl	8001094 <ch4Sensor_measure>

				softTimer_start(&timer, 500);
 80015ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015f2:	481d      	ldr	r0, [pc, #116]	; (8001668 <dumpSensorManager_handler+0x32c>)
 80015f4:	f003 fabe 	bl	8004b74 <softTimer_start>
			}

			if(flags_dumpSensor.bits.ch4Sensor_measureDone == 1) {
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <dumpSensorManager_handler+0x304>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	f003 0310 	and.w	r3, r3, #16
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <dumpSensorManager_handler+0x2d4>
				//TODO: Descomentar
				//fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_getGps);

				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sendPackage);
 8001606:	2109      	movs	r1, #9
 8001608:	480e      	ldr	r0, [pc, #56]	; (8001644 <dumpSensorManager_handler+0x308>)
 800160a:	f000 fad5 	bl	8001bb8 <fsmManager_gotoState>
 800160e:	e009      	b.n	8001624 <dumpSensorManager_handler+0x2e8>

			}
			else if(softTimer_expired(&timer)) {
 8001610:	4815      	ldr	r0, [pc, #84]	; (8001668 <dumpSensorManager_handler+0x32c>)
 8001612:	f003 fac3 	bl	8004b9c <softTimer_expired>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <dumpSensorManager_handler+0x2e8>
				//If there is not a measurement within 500 mseg, stop trying to measure
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_getGps);
 800161c:	2108      	movs	r1, #8
 800161e:	4809      	ldr	r0, [pc, #36]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001620:	f000 faca 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001626:	f000 faf4 	bl	8001c12 <fsmManager_isStateOut>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8203 	beq.w	8001a38 <dumpSensorManager_handler+0x6fc>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001632:	4804      	ldr	r0, [pc, #16]	; (8001644 <dumpSensorManager_handler+0x308>)
 8001634:	f000 fb07 	bl	8001c46 <fsmManager_stateOut>

				ch4Sensor_powerOff();
 8001638:	f7ff fd4f 	bl	80010da <ch4Sensor_powerOff>
			}
			break;
 800163c:	e1fc      	b.n	8001a38 <dumpSensorManager_handler+0x6fc>
 800163e:	bf00      	nop
 8001640:	20000610 	.word	0x20000610
 8001644:	20000604 	.word	0x20000604
 8001648:	200005f0 	.word	0x200005f0
 800164c:	200000c4 	.word	0x200000c4
 8001650:	200000d8 	.word	0x200000d8
 8001654:	42c80000 	.word	0x42c80000
 8001658:	200000e0 	.word	0x200000e0
 800165c:	200000d4 	.word	0x200000d4
 8001660:	200000c8 	.word	0x200000c8
 8001664:	200000dc 	.word	0x200000dc
 8001668:	2000017c 	.word	0x2000017c



		case __dumpSensor_getGps:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 800166c:	48b6      	ldr	r0, [pc, #728]	; (8001948 <dumpSensorManager_handler+0x60c>)
 800166e:	f000 fac5 	bl	8001bfc <fsmManager_isStateIn>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <dumpSensorManager_handler+0x34e>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001678:	48b3      	ldr	r0, [pc, #716]	; (8001948 <dumpSensorManager_handler+0x60c>)
 800167a:	f000 fad5 	bl	8001c28 <fsmManager_stateIn>

				gsmModule_gpsOn();
 800167e:	f000 fb79 	bl	8001d74 <gsmModule_gpsOn>
				softTimer_start(&timer, 20*60*1000);
 8001682:	49b2      	ldr	r1, [pc, #712]	; (800194c <dumpSensorManager_handler+0x610>)
 8001684:	48b2      	ldr	r0, [pc, #712]	; (8001950 <dumpSensorManager_handler+0x614>)
 8001686:	f003 fa75 	bl	8004b74 <softTimer_start>
			}

			if(gsmModule_isGpsFixed()) {
 800168a:	f000 fbf7 	bl	8001e7c <gsmModule_isGpsFixed>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <dumpSensorManager_handler+0x362>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sendPackage);
 8001694:	2109      	movs	r1, #9
 8001696:	48ac      	ldr	r0, [pc, #688]	; (8001948 <dumpSensorManager_handler+0x60c>)
 8001698:	f000 fa8e 	bl	8001bb8 <fsmManager_gotoState>
 800169c:	e020      	b.n	80016e0 <dumpSensorManager_handler+0x3a4>
			}
			else if(softTimer_expired(&timer)) {
 800169e:	48ac      	ldr	r0, [pc, #688]	; (8001950 <dumpSensorManager_handler+0x614>)
 80016a0:	f003 fa7c 	bl	8004b9c <softTimer_expired>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <dumpSensorManager_handler+0x378>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sendPackage);
 80016aa:	2109      	movs	r1, #9
 80016ac:	48a6      	ldr	r0, [pc, #664]	; (8001948 <dumpSensorManager_handler+0x60c>)
 80016ae:	f000 fa83 	bl	8001bb8 <fsmManager_gotoState>
 80016b2:	e015      	b.n	80016e0 <dumpSensorManager_handler+0x3a4>
			}
			else if(gsmModule_isPowered() && gsmModule_isGpsOn() && !gsmModule_isGpsFixed() && !gsmModule_requestedGpsInfo()) {
 80016b4:	f000 fbc6 	bl	8001e44 <gsmModule_isPowered>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d010      	beq.n	80016e0 <dumpSensorManager_handler+0x3a4>
 80016be:	f000 fbcf 	bl	8001e60 <gsmModule_isGpsOn>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00b      	beq.n	80016e0 <dumpSensorManager_handler+0x3a4>
 80016c8:	f000 fbd8 	bl	8001e7c <gsmModule_isGpsFixed>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d106      	bne.n	80016e0 <dumpSensorManager_handler+0x3a4>
 80016d2:	f000 fbfd 	bl	8001ed0 <gsmModule_requestedGpsInfo>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <dumpSensorManager_handler+0x3a4>
				gsmModule_gpsInfo();
 80016dc:	f000 fb58 	bl	8001d90 <gsmModule_gpsInfo>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80016e0:	4899      	ldr	r0, [pc, #612]	; (8001948 <dumpSensorManager_handler+0x60c>)
 80016e2:	f000 fa96 	bl	8001c12 <fsmManager_isStateOut>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 81a7 	beq.w	8001a3c <dumpSensorManager_handler+0x700>
				fsmManager_stateOut(&dumpSensorFsmState);
 80016ee:	4896      	ldr	r0, [pc, #600]	; (8001948 <dumpSensorManager_handler+0x60c>)
 80016f0:	f000 faa9 	bl	8001c46 <fsmManager_stateOut>

				gsmModule_gpsOff();
 80016f4:	f000 fb5a 	bl	8001dac <gsmModule_gpsOff>
			}
			break;
 80016f8:	e1a0      	b.n	8001a3c <dumpSensorManager_handler+0x700>



		case __dumpSensor_sendPackage:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80016fa:	4893      	ldr	r0, [pc, #588]	; (8001948 <dumpSensorManager_handler+0x60c>)
 80016fc:	f000 fa7e 	bl	8001bfc <fsmManager_isStateIn>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8084 	beq.w	8001810 <dumpSensorManager_handler+0x4d4>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001708:	488f      	ldr	r0, [pc, #572]	; (8001948 <dumpSensorManager_handler+0x60c>)
 800170a:	f000 fa8d 	bl	8001c28 <fsmManager_stateIn>

				gsmModule_serverConnect();
 800170e:	f000 fb5b 	bl	8001dc8 <gsmModule_serverConnect>

				payloadDataToSend[0] = '\0';
 8001712:	4b90      	ldr	r3, [pc, #576]	; (8001954 <dumpSensorManager_handler+0x618>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
				string_appendString(payloadDataToSend, (uint8_t *) "id=");
 8001718:	498f      	ldr	r1, [pc, #572]	; (8001958 <dumpSensorManager_handler+0x61c>)
 800171a:	488e      	ldr	r0, [pc, #568]	; (8001954 <dumpSensorManager_handler+0x618>)
 800171c:	f004 f937 	bl	800598e <string_appendString>
				ascii_convertNum(auxToSend, productId);
 8001720:	4b8e      	ldr	r3, [pc, #568]	; (800195c <dumpSensorManager_handler+0x620>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	488e      	ldr	r0, [pc, #568]	; (8001960 <dumpSensorManager_handler+0x624>)
 8001728:	f004 f95e 	bl	80059e8 <ascii_convertNum>
				string_appendString(payloadDataToSend, auxToSend);
 800172c:	498c      	ldr	r1, [pc, #560]	; (8001960 <dumpSensorManager_handler+0x624>)
 800172e:	4889      	ldr	r0, [pc, #548]	; (8001954 <dumpSensorManager_handler+0x618>)
 8001730:	f004 f92d 	bl	800598e <string_appendString>
				string_appendChar(payloadDataToSend, '&');
 8001734:	2126      	movs	r1, #38	; 0x26
 8001736:	4887      	ldr	r0, [pc, #540]	; (8001954 <dumpSensorManager_handler+0x618>)
 8001738:	f004 f906 	bl	8005948 <string_appendChar>

				string_appendString(payloadDataToSend, (uint8_t *) "bat=");
 800173c:	4989      	ldr	r1, [pc, #548]	; (8001964 <dumpSensorManager_handler+0x628>)
 800173e:	4885      	ldr	r0, [pc, #532]	; (8001954 <dumpSensorManager_handler+0x618>)
 8001740:	f004 f925 	bl	800598e <string_appendString>
				ascii_convertNum(auxToSend, (uint32_t) batteryPercent);
 8001744:	4b88      	ldr	r3, [pc, #544]	; (8001968 <dumpSensorManager_handler+0x62c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fbf3 	bl	8000f34 <__aeabi_f2uiz>
 800174e:	4603      	mov	r3, r0
 8001750:	4619      	mov	r1, r3
 8001752:	4883      	ldr	r0, [pc, #524]	; (8001960 <dumpSensorManager_handler+0x624>)
 8001754:	f004 f948 	bl	80059e8 <ascii_convertNum>
				string_appendString(payloadDataToSend, auxToSend);
 8001758:	4981      	ldr	r1, [pc, #516]	; (8001960 <dumpSensorManager_handler+0x624>)
 800175a:	487e      	ldr	r0, [pc, #504]	; (8001954 <dumpSensorManager_handler+0x618>)
 800175c:	f004 f917 	bl	800598e <string_appendString>
				string_appendChar(payloadDataToSend, '&');
 8001760:	2126      	movs	r1, #38	; 0x26
 8001762:	487c      	ldr	r0, [pc, #496]	; (8001954 <dumpSensorManager_handler+0x618>)
 8001764:	f004 f8f0 	bl	8005948 <string_appendChar>

				string_appendString(payloadDataToSend, (uint8_t *) "level=");
 8001768:	4980      	ldr	r1, [pc, #512]	; (800196c <dumpSensorManager_handler+0x630>)
 800176a:	487a      	ldr	r0, [pc, #488]	; (8001954 <dumpSensorManager_handler+0x618>)
 800176c:	f004 f90f 	bl	800598e <string_appendString>
				ascii_convertNum(auxToSend, (uint32_t) distancePercent);
 8001770:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <dumpSensorManager_handler+0x634>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fbdd 	bl	8000f34 <__aeabi_f2uiz>
 800177a:	4603      	mov	r3, r0
 800177c:	4619      	mov	r1, r3
 800177e:	4878      	ldr	r0, [pc, #480]	; (8001960 <dumpSensorManager_handler+0x624>)
 8001780:	f004 f932 	bl	80059e8 <ascii_convertNum>
				string_appendString(payloadDataToSend, auxToSend);
 8001784:	4976      	ldr	r1, [pc, #472]	; (8001960 <dumpSensorManager_handler+0x624>)
 8001786:	4873      	ldr	r0, [pc, #460]	; (8001954 <dumpSensorManager_handler+0x618>)
 8001788:	f004 f901 	bl	800598e <string_appendString>
				string_appendChar(payloadDataToSend, '&');
 800178c:	2126      	movs	r1, #38	; 0x26
 800178e:	4871      	ldr	r0, [pc, #452]	; (8001954 <dumpSensorManager_handler+0x618>)
 8001790:	f004 f8da 	bl	8005948 <string_appendChar>

				if(flags_dumpSensor.bits.nh3Sensor_measureDone) {
 8001794:	4b77      	ldr	r3, [pc, #476]	; (8001974 <dumpSensorManager_handler+0x638>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d015      	beq.n	80017ce <dumpSensorManager_handler+0x492>
					string_appendString(payloadDataToSend, (uint8_t *) "nh3=");
 80017a2:	4975      	ldr	r1, [pc, #468]	; (8001978 <dumpSensorManager_handler+0x63c>)
 80017a4:	486b      	ldr	r0, [pc, #428]	; (8001954 <dumpSensorManager_handler+0x618>)
 80017a6:	f004 f8f2 	bl	800598e <string_appendString>
					ascii_convertNum(auxToSend, (uint32_t) nh3Concentration);
 80017aa:	4b74      	ldr	r3, [pc, #464]	; (800197c <dumpSensorManager_handler+0x640>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fbc0 	bl	8000f34 <__aeabi_f2uiz>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4619      	mov	r1, r3
 80017b8:	4869      	ldr	r0, [pc, #420]	; (8001960 <dumpSensorManager_handler+0x624>)
 80017ba:	f004 f915 	bl	80059e8 <ascii_convertNum>
					string_appendString(payloadDataToSend, auxToSend);
 80017be:	4968      	ldr	r1, [pc, #416]	; (8001960 <dumpSensorManager_handler+0x624>)
 80017c0:	4864      	ldr	r0, [pc, #400]	; (8001954 <dumpSensorManager_handler+0x618>)
 80017c2:	f004 f8e4 	bl	800598e <string_appendString>
					string_appendChar(payloadDataToSend, '&');
 80017c6:	2126      	movs	r1, #38	; 0x26
 80017c8:	4862      	ldr	r0, [pc, #392]	; (8001954 <dumpSensorManager_handler+0x618>)
 80017ca:	f004 f8bd 	bl	8005948 <string_appendChar>
				}

				if(flags_dumpSensor.bits.ch4Sensor_measureDone) {
 80017ce:	4b69      	ldr	r3, [pc, #420]	; (8001974 <dumpSensorManager_handler+0x638>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d015      	beq.n	8001808 <dumpSensorManager_handler+0x4cc>
					string_appendString(payloadDataToSend, (uint8_t *) "ch4=");
 80017dc:	4968      	ldr	r1, [pc, #416]	; (8001980 <dumpSensorManager_handler+0x644>)
 80017de:	485d      	ldr	r0, [pc, #372]	; (8001954 <dumpSensorManager_handler+0x618>)
 80017e0:	f004 f8d5 	bl	800598e <string_appendString>
					ascii_convertNum(auxToSend, (uint32_t) ch4Concentration);
 80017e4:	4b67      	ldr	r3, [pc, #412]	; (8001984 <dumpSensorManager_handler+0x648>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fba3 	bl	8000f34 <__aeabi_f2uiz>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4619      	mov	r1, r3
 80017f2:	485b      	ldr	r0, [pc, #364]	; (8001960 <dumpSensorManager_handler+0x624>)
 80017f4:	f004 f8f8 	bl	80059e8 <ascii_convertNum>
					string_appendString(payloadDataToSend, auxToSend);
 80017f8:	4959      	ldr	r1, [pc, #356]	; (8001960 <dumpSensorManager_handler+0x624>)
 80017fa:	4856      	ldr	r0, [pc, #344]	; (8001954 <dumpSensorManager_handler+0x618>)
 80017fc:	f004 f8c7 	bl	800598e <string_appendString>
					string_appendChar(payloadDataToSend, '"');
 8001800:	2122      	movs	r1, #34	; 0x22
 8001802:	4854      	ldr	r0, [pc, #336]	; (8001954 <dumpSensorManager_handler+0x618>)
 8001804:	f004 f8a0 	bl	8005948 <string_appendChar>
				}

				softTimer_start(&timer, 10*60*1000);
 8001808:	495f      	ldr	r1, [pc, #380]	; (8001988 <dumpSensorManager_handler+0x64c>)
 800180a:	4851      	ldr	r0, [pc, #324]	; (8001950 <dumpSensorManager_handler+0x614>)
 800180c:	f003 f9b2 	bl	8004b74 <softTimer_start>
			}


			if(gsmModule_isServerDataSent()) {
 8001810:	f000 fb50 	bl	8001eb4 <gsmModule_isServerDataSent>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <dumpSensorManager_handler+0x4e8>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_disconnectServer);
 800181a:	210a      	movs	r1, #10
 800181c:	484a      	ldr	r0, [pc, #296]	; (8001948 <dumpSensorManager_handler+0x60c>)
 800181e:	f000 f9cb 	bl	8001bb8 <fsmManager_gotoState>
 8001822:	e026      	b.n	8001872 <dumpSensorManager_handler+0x536>
			}
			else if(softTimer_expired(&timer) || gsmModule_errorServerSendData()) {
 8001824:	484a      	ldr	r0, [pc, #296]	; (8001950 <dumpSensorManager_handler+0x614>)
 8001826:	f003 f9b9 	bl	8004b9c <softTimer_expired>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d104      	bne.n	800183a <dumpSensorManager_handler+0x4fe>
 8001830:	f000 fb6a 	bl	8001f08 <gsmModule_errorServerSendData>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <dumpSensorManager_handler+0x508>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_disconnectServer);
 800183a:	210a      	movs	r1, #10
 800183c:	4842      	ldr	r0, [pc, #264]	; (8001948 <dumpSensorManager_handler+0x60c>)
 800183e:	f000 f9bb 	bl	8001bb8 <fsmManager_gotoState>
 8001842:	e016      	b.n	8001872 <dumpSensorManager_handler+0x536>
			}
			else if(gsmModule_isPowered() && gsmModule_isServerConnected() && !gsmModule_isServerDataSent() && !gsmModule_requestedServerDataSend()) {
 8001844:	f000 fafe 	bl	8001e44 <gsmModule_isPowered>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d011      	beq.n	8001872 <dumpSensorManager_handler+0x536>
 800184e:	f000 fb23 	bl	8001e98 <gsmModule_isServerConnected>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00c      	beq.n	8001872 <dumpSensorManager_handler+0x536>
 8001858:	f000 fb2c 	bl	8001eb4 <gsmModule_isServerDataSent>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d107      	bne.n	8001872 <dumpSensorManager_handler+0x536>
 8001862:	f000 fb43 	bl	8001eec <gsmModule_requestedServerDataSend>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <dumpSensorManager_handler+0x536>
				gsmModule_serverDataSend(payloadDataToSend);
 800186c:	4839      	ldr	r0, [pc, #228]	; (8001954 <dumpSensorManager_handler+0x618>)
 800186e:	f000 fab9 	bl	8001de4 <gsmModule_serverDataSend>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001872:	4835      	ldr	r0, [pc, #212]	; (8001948 <dumpSensorManager_handler+0x60c>)
 8001874:	f000 f9cd 	bl	8001c12 <fsmManager_isStateOut>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 80e0 	beq.w	8001a40 <dumpSensorManager_handler+0x704>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001880:	4831      	ldr	r0, [pc, #196]	; (8001948 <dumpSensorManager_handler+0x60c>)
 8001882:	f000 f9e0 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8001886:	e0db      	b.n	8001a40 <dumpSensorManager_handler+0x704>



		case __dumpSensor_disconnectServer:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001888:	482f      	ldr	r0, [pc, #188]	; (8001948 <dumpSensorManager_handler+0x60c>)
 800188a:	f000 f9b7 	bl	8001bfc <fsmManager_isStateIn>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d009      	beq.n	80018a8 <dumpSensorManager_handler+0x56c>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001894:	482c      	ldr	r0, [pc, #176]	; (8001948 <dumpSensorManager_handler+0x60c>)
 8001896:	f000 f9c7 	bl	8001c28 <fsmManager_stateIn>

				gsmModule_serverDisconnect();
 800189a:	f000 fac5 	bl	8001e28 <gsmModule_serverDisconnect>

				softTimer_start(&timer, 5*1000);
 800189e:	f241 3188 	movw	r1, #5000	; 0x1388
 80018a2:	482b      	ldr	r0, [pc, #172]	; (8001950 <dumpSensorManager_handler+0x614>)
 80018a4:	f003 f966 	bl	8004b74 <softTimer_start>
			}

			if(gsmModule_isServerConnected() == 0) {
 80018a8:	f000 faf6 	bl	8001e98 <gsmModule_isServerConnected>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <dumpSensorManager_handler+0x580>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGsmModule);
 80018b2:	210b      	movs	r1, #11
 80018b4:	4824      	ldr	r0, [pc, #144]	; (8001948 <dumpSensorManager_handler+0x60c>)
 80018b6:	f000 f97f 	bl	8001bb8 <fsmManager_gotoState>
 80018ba:	e009      	b.n	80018d0 <dumpSensorManager_handler+0x594>
			}
			else if(softTimer_expired(&timer)) {
 80018bc:	4824      	ldr	r0, [pc, #144]	; (8001950 <dumpSensorManager_handler+0x614>)
 80018be:	f003 f96d 	bl	8004b9c <softTimer_expired>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <dumpSensorManager_handler+0x594>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGsmModule);
 80018c8:	210b      	movs	r1, #11
 80018ca:	481f      	ldr	r0, [pc, #124]	; (8001948 <dumpSensorManager_handler+0x60c>)
 80018cc:	f000 f974 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80018d0:	481d      	ldr	r0, [pc, #116]	; (8001948 <dumpSensorManager_handler+0x60c>)
 80018d2:	f000 f99e 	bl	8001c12 <fsmManager_isStateOut>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80b3 	beq.w	8001a44 <dumpSensorManager_handler+0x708>
				fsmManager_stateOut(&dumpSensorFsmState);
 80018de:	481a      	ldr	r0, [pc, #104]	; (8001948 <dumpSensorManager_handler+0x60c>)
 80018e0:	f000 f9b1 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80018e4:	e0ae      	b.n	8001a44 <dumpSensorManager_handler+0x708>



		case __dumpSensor_turnOffGsmModule:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80018e6:	4818      	ldr	r0, [pc, #96]	; (8001948 <dumpSensorManager_handler+0x60c>)
 80018e8:	f000 f988 	bl	8001bfc <fsmManager_isStateIn>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00b      	beq.n	800190a <dumpSensorManager_handler+0x5ce>
				fsmManager_stateIn(&dumpSensorFsmState);
 80018f2:	4815      	ldr	r0, [pc, #84]	; (8001948 <dumpSensorManager_handler+0x60c>)
 80018f4:	f000 f998 	bl	8001c28 <fsmManager_stateIn>

				gsmModule_powerOff();
 80018f8:	f000 fa19 	bl	8001d2e <gsmModule_powerOff>
				gsmModule_pwrkeyOff();
 80018fc:	f000 fa2c 	bl	8001d58 <gsmModule_pwrkeyOff>

				softTimer_start(&timer, 10*1000);
 8001900:	f242 7110 	movw	r1, #10000	; 0x2710
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <dumpSensorManager_handler+0x614>)
 8001906:	f003 f935 	bl	8004b74 <softTimer_start>
			}

			if(gsmModule_isPowered() == 0) {
 800190a:	f000 fa9b 	bl	8001e44 <gsmModule_isPowered>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d104      	bne.n	800191e <dumpSensorManager_handler+0x5e2>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
 8001914:	210c      	movs	r1, #12
 8001916:	480c      	ldr	r0, [pc, #48]	; (8001948 <dumpSensorManager_handler+0x60c>)
 8001918:	f000 f94e 	bl	8001bb8 <fsmManager_gotoState>
 800191c:	e009      	b.n	8001932 <dumpSensorManager_handler+0x5f6>
			}
			else if(softTimer_expired(&timer)) {
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <dumpSensorManager_handler+0x614>)
 8001920:	f003 f93c 	bl	8004b9c <softTimer_expired>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <dumpSensorManager_handler+0x5f6>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
 800192a:	210c      	movs	r1, #12
 800192c:	4806      	ldr	r0, [pc, #24]	; (8001948 <dumpSensorManager_handler+0x60c>)
 800192e:	f000 f943 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <dumpSensorManager_handler+0x60c>)
 8001934:	f000 f96d 	bl	8001c12 <fsmManager_isStateOut>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8084 	beq.w	8001a48 <dumpSensorManager_handler+0x70c>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001940:	4801      	ldr	r0, [pc, #4]	; (8001948 <dumpSensorManager_handler+0x60c>)
 8001942:	f000 f980 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8001946:	e07f      	b.n	8001a48 <dumpSensorManager_handler+0x70c>
 8001948:	20000604 	.word	0x20000604
 800194c:	00124f80 	.word	0x00124f80
 8001950:	2000017c 	.word	0x2000017c
 8001954:	200000e4 	.word	0x200000e4
 8001958:	08009d44 	.word	0x08009d44
 800195c:	200000c4 	.word	0x200000c4
 8001960:	20000148 	.word	0x20000148
 8001964:	08009d48 	.word	0x08009d48
 8001968:	200000e0 	.word	0x200000e0
 800196c:	08009d50 	.word	0x08009d50
 8001970:	200000dc 	.word	0x200000dc
 8001974:	20000610 	.word	0x20000610
 8001978:	08009d58 	.word	0x08009d58
 800197c:	200000cc 	.word	0x200000cc
 8001980:	08009d60 	.word	0x08009d60
 8001984:	200000d0 	.word	0x200000d0
 8001988:	000927c0 	.word	0x000927c0



		case __dumpSensor_sleep:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 800198c:	4833      	ldr	r0, [pc, #204]	; (8001a5c <dumpSensorManager_handler+0x720>)
 800198e:	f000 f935 	bl	8001bfc <fsmManager_isStateIn>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <dumpSensorManager_handler+0x662>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001998:	4830      	ldr	r0, [pc, #192]	; (8001a5c <dumpSensorManager_handler+0x720>)
 800199a:	f000 f945 	bl	8001c28 <fsmManager_stateIn>
			}

			//Enters standby mode
			powerMode_enterStandbyMode(1*10);
 800199e:	200a      	movs	r0, #10
 80019a0:	f003 f89c 	bl	8004adc <powerMode_enterStandbyMode>

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 80019a4:	2100      	movs	r1, #0
 80019a6:	482d      	ldr	r0, [pc, #180]	; (8001a5c <dumpSensorManager_handler+0x720>)
 80019a8:	f000 f906 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80019ac:	482b      	ldr	r0, [pc, #172]	; (8001a5c <dumpSensorManager_handler+0x720>)
 80019ae:	f000 f930 	bl	8001c12 <fsmManager_isStateOut>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d049      	beq.n	8001a4c <dumpSensorManager_handler+0x710>
				fsmManager_stateOut(&dumpSensorFsmState);
 80019b8:	4828      	ldr	r0, [pc, #160]	; (8001a5c <dumpSensorManager_handler+0x720>)
 80019ba:	f000 f944 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80019be:	e045      	b.n	8001a4c <dumpSensorManager_handler+0x710>



		case __dumpSensor_error:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80019c0:	4826      	ldr	r0, [pc, #152]	; (8001a5c <dumpSensorManager_handler+0x720>)
 80019c2:	f000 f91b 	bl	8001bfc <fsmManager_isStateIn>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <dumpSensorManager_handler+0x696>
				fsmManager_stateIn(&dumpSensorFsmState);
 80019cc:	4823      	ldr	r0, [pc, #140]	; (8001a5c <dumpSensorManager_handler+0x720>)
 80019ce:	f000 f92b 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 80019d2:	2100      	movs	r1, #0
 80019d4:	4821      	ldr	r0, [pc, #132]	; (8001a5c <dumpSensorManager_handler+0x720>)
 80019d6:	f000 f8ef 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80019da:	4820      	ldr	r0, [pc, #128]	; (8001a5c <dumpSensorManager_handler+0x720>)
 80019dc:	f000 f919 	bl	8001c12 <fsmManager_isStateOut>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d034      	beq.n	8001a50 <dumpSensorManager_handler+0x714>
				fsmManager_stateOut(&dumpSensorFsmState);
 80019e6:	481d      	ldr	r0, [pc, #116]	; (8001a5c <dumpSensorManager_handler+0x720>)
 80019e8:	f000 f92d 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80019ec:	e030      	b.n	8001a50 <dumpSensorManager_handler+0x714>



		default:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80019ee:	481b      	ldr	r0, [pc, #108]	; (8001a5c <dumpSensorManager_handler+0x720>)
 80019f0:	f000 f904 	bl	8001bfc <fsmManager_isStateIn>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <dumpSensorManager_handler+0x6c4>
				fsmManager_stateIn(&dumpSensorFsmState);
 80019fa:	4818      	ldr	r0, [pc, #96]	; (8001a5c <dumpSensorManager_handler+0x720>)
 80019fc:	f000 f914 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 8001a00:	2100      	movs	r1, #0
 8001a02:	4816      	ldr	r0, [pc, #88]	; (8001a5c <dumpSensorManager_handler+0x720>)
 8001a04:	f000 f8d8 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001a08:	4814      	ldr	r0, [pc, #80]	; (8001a5c <dumpSensorManager_handler+0x720>)
 8001a0a:	f000 f902 	bl	8001c12 <fsmManager_isStateOut>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01f      	beq.n	8001a54 <dumpSensorManager_handler+0x718>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001a14:	4811      	ldr	r0, [pc, #68]	; (8001a5c <dumpSensorManager_handler+0x720>)
 8001a16:	f000 f916 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8001a1a:	e01b      	b.n	8001a54 <dumpSensorManager_handler+0x718>
			break;
 8001a1c:	bf00      	nop
 8001a1e:	e01a      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a20:	bf00      	nop
 8001a22:	e018      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a24:	bf00      	nop
 8001a26:	e016      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a28:	bf00      	nop
 8001a2a:	e014      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a2c:	bf00      	nop
 8001a2e:	e012      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a30:	bf00      	nop
 8001a32:	e010      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a34:	bf00      	nop
 8001a36:	e00e      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a38:	bf00      	nop
 8001a3a:	e00c      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a3c:	bf00      	nop
 8001a3e:	e00a      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a40:	bf00      	nop
 8001a42:	e008      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a44:	bf00      	nop
 8001a46:	e006      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a48:	bf00      	nop
 8001a4a:	e004      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a4c:	bf00      	nop
 8001a4e:	e002      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a50:	bf00      	nop
 8001a52:	e000      	b.n	8001a56 <dumpSensorManager_handler+0x71a>
			break;
 8001a54:	bf00      	nop
	}
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000604 	.word	0x20000604

08001a60 <calculateDistancePercentage>:

static float calculateDistancePercentage(float dist)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	float distPerc = 0;
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]

	distPerc = (DUMPSTER_DISTANCE_MAX-distance)*100/DUMPSTER_DISTANCE_MAX;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <calculateDistancePercentage+0x68>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4815      	ldr	r0, [pc, #84]	; (8001acc <calculateDistancePercentage+0x6c>)
 8001a76:	f7fe ff8d 	bl	8000994 <__aeabi_fsub>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4914      	ldr	r1, [pc, #80]	; (8001ad0 <calculateDistancePercentage+0x70>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff f892 	bl	8000ba8 <__aeabi_fmul>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4911      	ldr	r1, [pc, #68]	; (8001acc <calculateDistancePercentage+0x6c>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f941 	bl	8000d10 <__aeabi_fdiv>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	60fb      	str	r3, [r7, #12]
	if(distPerc > 100) {
 8001a92:	490f      	ldr	r1, [pc, #60]	; (8001ad0 <calculateDistancePercentage+0x70>)
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7ff fa43 	bl	8000f20 <__aeabi_fcmpgt>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <calculateDistancePercentage+0x46>
		distPerc = 100;
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <calculateDistancePercentage+0x70>)
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	e00a      	b.n	8001abc <calculateDistancePercentage+0x5c>
	}
	else if(distPerc < 0) {
 8001aa6:	f04f 0100 	mov.w	r1, #0
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff fa1a 	bl	8000ee4 <__aeabi_fcmplt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <calculateDistancePercentage+0x5c>
		distPerc = 0;
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
	}

	return distPerc;
 8001abc:	68fb      	ldr	r3, [r7, #12]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200000c8 	.word	0x200000c8
 8001acc:	44e10000 	.word	0x44e10000
 8001ad0:	42c80000 	.word	0x42c80000

08001ad4 <readNvm>:

static void readNvm(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	e00d      	b.n	8001afc <readNvm+0x28>
		reg[i].word = nvm_readWord(NVM_REGISTER1+i);
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f002 ff93 	bl	8004a10 <nvm_readWord>
 8001aea:	4602      	mov	r2, r0
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	b291      	uxth	r1, r2
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <readNvm+0x38>)
 8001af2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	3301      	adds	r3, #1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b09      	cmp	r3, #9
 8001b00:	d9ee      	bls.n	8001ae0 <readNvm+0xc>
	}
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200005f0 	.word	0x200005f0

08001b10 <writeNvm>:

//https://docs.google.com/spreadsheets/d/1n-ANLwi3L4sAhEEs7HliKyX1nLDQ-HLQLX-bY1MBAcw/edit#gid=0
static void writeNvm(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	//If it is needed to write to nvm, toggle the value of reg[NVM_FLAGS0].bits.bit0
	if(reg[NVM_FLAGS0].bits.bit0 != 1) {
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <writeNvm+0x78>)
 8001b18:	7a1b      	ldrb	r3, [r3, #8]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d12c      	bne.n	8001b7e <writeNvm+0x6e>
		reg[NVM_FLAGS0].bits.bit0 = 1;
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <writeNvm+0x78>)
 8001b26:	7a13      	ldrb	r3, [r2, #8]
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	7213      	strb	r3, [r2, #8]

		reg[NVM_ID_HIGH].word = 0x4095;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <writeNvm+0x78>)
 8001b30:	f244 0295 	movw	r2, #16533	; 0x4095
 8001b34:	809a      	strh	r2, [r3, #4]
		reg[NVM_ID_LOW].word = 0x5621;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <writeNvm+0x78>)
 8001b38:	f245 6221 	movw	r2, #22049	; 0x5621
 8001b3c:	805a      	strh	r2, [r3, #2]

		reg[NVM_COUNTER_DAY].word = 0;
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <writeNvm+0x78>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	80da      	strh	r2, [r3, #6]

		reg[NVM_FLAGS0].bits.bit1 = 0;
 8001b44:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <writeNvm+0x78>)
 8001b46:	7a13      	ldrb	r3, [r2, #8]
 8001b48:	f36f 0341 	bfc	r3, #1, #1
 8001b4c:	7213      	strb	r3, [r2, #8]
		reg[NVM_FLAGS0].bits.bit2 = 0;
 8001b4e:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <writeNvm+0x78>)
 8001b50:	7a13      	ldrb	r3, [r2, #8]
 8001b52:	f36f 0382 	bfc	r3, #2, #1
 8001b56:	7213      	strb	r3, [r2, #8]

		for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001b58:	2300      	movs	r3, #0
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	e00c      	b.n	8001b78 <writeNvm+0x68>
			nvm_writeWord(NVM_REGISTER1+i, reg[i].word);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4908      	ldr	r1, [pc, #32]	; (8001b88 <writeNvm+0x78>)
 8001b66:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f002 ff5b 	bl	8004a28 <nvm_writeWord>
		for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	3301      	adds	r3, #1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	2b09      	cmp	r3, #9
 8001b7c:	d9ef      	bls.n	8001b5e <writeNvm+0x4e>
		}
	}
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200005f0 	.word	0x200005f0

08001b8c <fsmManager_init>:
#include "fsmManager.h"

void fsmManager_init(fsm_t *fsm, uint32_t fsmStateInit)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
    fsm->fsmStatePrev = fsmStateInit;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
	fsm->fsmState = fsmStateInit;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
	
	fsm->stateIn = 1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	721a      	strb	r2, [r3, #8]
	fsm->stateOut = 0;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	725a      	strb	r2, [r3, #9]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <fsmManager_gotoState>:

void fsmManager_gotoState(fsm_t *fsm, uint32_t fsmStateNext)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
    fsm->fsmStatePrev = fsm->fsmState;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	605a      	str	r2, [r3, #4]
	fsm->fsmState = fsmStateNext;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	601a      	str	r2, [r3, #0]
	
	fsm->stateIn = 0;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	721a      	strb	r2, [r3, #8]
	fsm->stateOut = 1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	725a      	strb	r2, [r3, #9]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <fsmManager_getState>:
	fsm->stateIn = 0;
	fsm->stateOut = 1;
}

uint32_t fsmManager_getState(fsm_t *fsm)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
    return fsm->fsmState;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <fsmManager_isStateIn>:
{
    return fsm->fsmState == fsmState;
}

uint8_t fsmManager_isStateIn(fsm_t *fsm)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    return fsm->stateIn;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7a1b      	ldrb	r3, [r3, #8]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <fsmManager_isStateOut>:

uint8_t fsmManager_isStateOut(fsm_t *fsm)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
    return fsm->stateOut;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7a5b      	ldrb	r3, [r3, #9]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <fsmManager_stateIn>:

void fsmManager_stateIn(fsm_t *fsm)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
    fsm->stateIn = 0;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	721a      	strb	r2, [r3, #8]
    fsm->stateOut = 0;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	725a      	strb	r2, [r3, #9]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <fsmManager_stateOut>:

void fsmManager_stateOut(fsm_t *fsm)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
    fsm->stateIn = 1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	721a      	strb	r2, [r3, #8]
    fsm->stateOut = 0;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	725a      	strb	r2, [r3, #9]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <gsmModule_init>:




void gsmModule_init(UART_HandleTypeDef *huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	//FSM
	fsmManager_init(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	481e      	ldr	r0, [pc, #120]	; (8001ce8 <gsmModule_init+0x84>)
 8001c70:	f7ff ff8c 	bl	8001b8c <fsmManager_init>
	fsmManager_init(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 8001c74:	2100      	movs	r1, #0
 8001c76:	481d      	ldr	r0, [pc, #116]	; (8001cec <gsmModule_init+0x88>)
 8001c78:	f7ff ff88 	bl	8001b8c <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	481c      	ldr	r0, [pc, #112]	; (8001cf0 <gsmModule_init+0x8c>)
 8001c80:	f7ff ff84 	bl	8001b8c <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8001c84:	2100      	movs	r1, #0
 8001c86:	481b      	ldr	r0, [pc, #108]	; (8001cf4 <gsmModule_init+0x90>)
 8001c88:	f7ff ff80 	bl	8001b8c <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_idle);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	481a      	ldr	r0, [pc, #104]	; (8001cf8 <gsmModule_init+0x94>)
 8001c90:	f7ff ff7c 	bl	8001b8c <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 8001c94:	2100      	movs	r1, #0
 8001c96:	4819      	ldr	r0, [pc, #100]	; (8001cfc <gsmModule_init+0x98>)
 8001c98:	f7ff ff78 	bl	8001b8c <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4818      	ldr	r0, [pc, #96]	; (8001d00 <gsmModule_init+0x9c>)
 8001ca0:	f7ff ff74 	bl	8001b8c <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDataReceive_state, __gsmModule_requestServerDataReceive_idle);
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4817      	ldr	r0, [pc, #92]	; (8001d04 <gsmModule_init+0xa0>)
 8001ca8:	f7ff ff70 	bl	8001b8c <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 8001cac:	2100      	movs	r1, #0
 8001cae:	4816      	ldr	r0, [pc, #88]	; (8001d08 <gsmModule_init+0xa4>)
 8001cb0:	f7ff ff6c 	bl	8001b8c <fsmManager_init>

	//UART
	gsmHuart = huart;
 8001cb4:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <gsmModule_init+0xa8>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
	//pinGsmUartRx_receive();

	//Flags
	flags_gsmModule.dword = 0;
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <gsmModule_init+0xac>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
	flags_gsmModuleError.dword = 0;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <gsmModule_init+0xb0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
	flags_gsmModuleUnsolicited.dword = 0;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <gsmModule_init+0xb4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

	//Pin
	pinGsmVdd_write(0);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f002 fabb 	bl	8004248 <pinGsmVdd_write>
	pinGsmPwrkey_write(0);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f002 faca 	bl	800426c <pinGsmPwrkey_write>

	//Variables
	gsmModule_operator = __gsmModule_operator_unknown;
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <gsmModule_init+0xb8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200004dc 	.word	0x200004dc
 8001cec:	200004e8 	.word	0x200004e8
 8001cf0:	200004f4 	.word	0x200004f4
 8001cf4:	20000500 	.word	0x20000500
 8001cf8:	2000050c 	.word	0x2000050c
 8001cfc:	20000518 	.word	0x20000518
 8001d00:	20000524 	.word	0x20000524
 8001d04:	20000530 	.word	0x20000530
 8001d08:	2000053c 	.word	0x2000053c
 8001d0c:	20000188 	.word	0x20000188
 8001d10:	200004b8 	.word	0x200004b8
 8001d14:	200004bc 	.word	0x200004bc
 8001d18:	200004c0 	.word	0x200004c0
 8001d1c:	20000614 	.word	0x20000614

08001d20 <gsmModule_powerOn>:

void gsmModule_powerOn(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	pinGsmVdd_write(1);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f002 fa8f 	bl	8004248 <pinGsmVdd_write>
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <gsmModule_powerOff>:


void gsmModule_powerOff(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
	pinGsmVdd_write(0);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f002 fa88 	bl	8004248 <pinGsmVdd_write>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <gsmModule_pwrkeyOn>:

void gsmModule_pwrkeyOn(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestPowerOn = 1;
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <gsmModule_pwrkeyOn+0x18>)
 8001d42:	7813      	ldrb	r3, [r2, #0]
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	7013      	strb	r3, [r2, #0]
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	200004b8 	.word	0x200004b8

08001d58 <gsmModule_pwrkeyOff>:

void gsmModule_pwrkeyOff(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestPowerOff = 1;
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <gsmModule_pwrkeyOff+0x18>)
 8001d5e:	7813      	ldrb	r3, [r2, #0]
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	7013      	strb	r3, [r2, #0]
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	200004b8 	.word	0x200004b8

08001d74 <gsmModule_gpsOn>:

void gsmModule_gpsOn(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestGpsOn = 1;
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <gsmModule_gpsOn+0x18>)
 8001d7a:	7813      	ldrb	r3, [r2, #0]
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	7013      	strb	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	200004b8 	.word	0x200004b8

08001d90 <gsmModule_gpsInfo>:

void gsmModule_gpsInfo(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestGpsInfo = 1;
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <gsmModule_gpsInfo+0x18>)
 8001d96:	7813      	ldrb	r3, [r2, #0]
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	7013      	strb	r3, [r2, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200004b8 	.word	0x200004b8

08001dac <gsmModule_gpsOff>:

void gsmModule_gpsOff(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestGpsOff = 1;
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <gsmModule_gpsOff+0x18>)
 8001db2:	7813      	ldrb	r3, [r2, #0]
 8001db4:	f043 0310 	orr.w	r3, r3, #16
 8001db8:	7013      	strb	r3, [r2, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	200004b8 	.word	0x200004b8

08001dc8 <gsmModule_serverConnect>:

void gsmModule_serverConnect(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestServerConnection = 1;
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <gsmModule_serverConnect+0x18>)
 8001dce:	7813      	ldrb	r3, [r2, #0]
 8001dd0:	f043 0320 	orr.w	r3, r3, #32
 8001dd4:	7013      	strb	r3, [r2, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	200004b8 	.word	0x200004b8

08001de4 <gsmModule_serverDataSend>:

void gsmModule_serverDataSend(uint8_t *data)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	string_appendString(dataToSend, (uint8_t *) gsmModule_command_httppara_url);
 8001dec:	490a      	ldr	r1, [pc, #40]	; (8001e18 <gsmModule_serverDataSend+0x34>)
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <gsmModule_serverDataSend+0x38>)
 8001df0:	f003 fdcd 	bl	800598e <string_appendString>
	string_appendString(dataToSend, data);
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4809      	ldr	r0, [pc, #36]	; (8001e1c <gsmModule_serverDataSend+0x38>)
 8001df8:	f003 fdc9 	bl	800598e <string_appendString>
	string_appendString(dataToSend, (uint8_t *) "\r\n");
 8001dfc:	4908      	ldr	r1, [pc, #32]	; (8001e20 <gsmModule_serverDataSend+0x3c>)
 8001dfe:	4807      	ldr	r0, [pc, #28]	; (8001e1c <gsmModule_serverDataSend+0x38>)
 8001e00:	f003 fdc5 	bl	800598e <string_appendString>

	flags_gsmModule.bits.requestServerDataSend = 1;
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <gsmModule_serverDataSend+0x40>)
 8001e06:	7813      	ldrb	r3, [r2, #0]
 8001e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e0c:	7013      	strb	r3, [r2, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	08009f5c 	.word	0x08009f5c
 8001e1c:	200003f0 	.word	0x200003f0
 8001e20:	08009d68 	.word	0x08009d68
 8001e24:	200004b8 	.word	0x200004b8

08001e28 <gsmModule_serverDisconnect>:
{
	flags_gsmModule.bits.requestServerDataReceive = 1;
}

void gsmModule_serverDisconnect(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestServerDisconnection = 1;
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <gsmModule_serverDisconnect+0x18>)
 8001e2e:	7853      	ldrb	r3, [r2, #1]
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	7053      	strb	r3, [r2, #1]
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200004b8 	.word	0x200004b8

08001e44 <gsmModule_isPowered>:

uint8_t gsmModule_isPowered(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isPowered;
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <gsmModule_isPowered+0x18>)
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e50:	b2db      	uxtb	r3, r3
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	200004b8 	.word	0x200004b8

08001e60 <gsmModule_isGpsOn>:

uint8_t gsmModule_isGpsOn(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isGpsOn;
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <gsmModule_isGpsOn+0x18>)
 8001e66:	785b      	ldrb	r3, [r3, #1]
 8001e68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e6c:	b2db      	uxtb	r3, r3
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200004b8 	.word	0x200004b8

08001e7c <gsmModule_isGpsFixed>:

uint8_t gsmModule_isGpsFixed(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isGpsFixed;
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <gsmModule_isGpsFixed+0x18>)
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e88:	b2db      	uxtb	r3, r3
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	200004b8 	.word	0x200004b8

08001e98 <gsmModule_isServerConnected>:

uint8_t gsmModule_isServerConnected(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isServerConnected;
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <gsmModule_isServerConnected+0x18>)
 8001e9e:	785b      	ldrb	r3, [r3, #1]
 8001ea0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ea4:	b2db      	uxtb	r3, r3
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200004b8 	.word	0x200004b8

08001eb4 <gsmModule_isServerDataSent>:

uint8_t gsmModule_isServerDataSent(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isServerDataSent;
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <gsmModule_isServerDataSent+0x18>)
 8001eba:	785b      	ldrb	r3, [r3, #1]
 8001ebc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ec0:	b2db      	uxtb	r3, r3
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	200004b8 	.word	0x200004b8

08001ed0 <gsmModule_requestedGpsInfo>:
{
	return flags_gsmModule.bits.requestGpsOn;
}

uint8_t gsmModule_requestedGpsInfo(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.requestGpsInfo;
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <gsmModule_requestedGpsInfo+0x18>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001edc:	b2db      	uxtb	r3, r3
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200004b8 	.word	0x200004b8

08001eec <gsmModule_requestedServerDataSend>:
{
	return flags_gsmModule.bits.requestServerConnection;
}

uint8_t gsmModule_requestedServerDataSend(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.requestServerDataSend;
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <gsmModule_requestedServerDataSend+0x18>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ef8:	b2db      	uxtb	r3, r3
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	200004b8 	.word	0x200004b8

08001f08 <gsmModule_errorServerSendData>:
}



uint8_t gsmModule_errorServerSendData(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
	return flags_gsmModuleError.bits.serverSendData;
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <gsmModule_errorServerSendData+0x18>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001f14:	b2db      	uxtb	r3, r3
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	200004bc 	.word	0x200004bc

08001f24 <gsmModule_handler>:



void gsmModule_handler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af02      	add	r7, sp, #8
	if(gsmRxPtrInPrev != gsmRxPtrIn) {
 8001f2a:	4b45      	ldr	r3, [pc, #276]	; (8002040 <gsmModule_handler+0x11c>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b45      	ldr	r3, [pc, #276]	; (8002044 <gsmModule_handler+0x120>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d027      	beq.n	8001f86 <gsmModule_handler+0x62>
		gsmRxPtrInPrev = gsmRxPtrIn;
 8001f36:	4b43      	ldr	r3, [pc, #268]	; (8002044 <gsmModule_handler+0x120>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a41      	ldr	r2, [pc, #260]	; (8002040 <gsmModule_handler+0x11c>)
 8001f3c:	6013      	str	r3, [r2, #0]
		gsmRxDataChunkLen = ringBufferOfUint8_popChunk(gsmRxData, gsmRxPtrOut, gsmRxPtrIn, '\n', GSMRXDATA_LENGTH, gsmRxDataChunk);
 8001f3e:	4b42      	ldr	r3, [pc, #264]	; (8002048 <gsmModule_handler+0x124>)
 8001f40:	6819      	ldr	r1, [r3, #0]
 8001f42:	4b40      	ldr	r3, [pc, #256]	; (8002044 <gsmModule_handler+0x120>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <gsmModule_handler+0x128>)
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	230a      	movs	r3, #10
 8001f52:	483f      	ldr	r0, [pc, #252]	; (8002050 <gsmModule_handler+0x12c>)
 8001f54:	f003 fe53 	bl	8005bfe <ringBufferOfUint8_popChunk>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4a3e      	ldr	r2, [pc, #248]	; (8002054 <gsmModule_handler+0x130>)
 8001f5c:	6013      	str	r3, [r2, #0]
		gsmRxPtrOut+=gsmRxDataChunkLen;
 8001f5e:	4b3a      	ldr	r3, [pc, #232]	; (8002048 <gsmModule_handler+0x124>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4b3c      	ldr	r3, [pc, #240]	; (8002054 <gsmModule_handler+0x130>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	4a37      	ldr	r2, [pc, #220]	; (8002048 <gsmModule_handler+0x124>)
 8001f6a:	6013      	str	r3, [r2, #0]
		gsmRxPtrOut%=GSMRXDATA_LENGTH;
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <gsmModule_handler+0x124>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <gsmModule_handler+0x134>)
 8001f72:	fba3 1302 	umull	r1, r3, r3, r2
 8001f76:	09db      	lsrs	r3, r3, #7
 8001f78:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	4a31      	ldr	r2, [pc, #196]	; (8002048 <gsmModule_handler+0x124>)
 8001f84:	6013      	str	r3, [r2, #0]
	}

	if(flags_gsmModule.bits.requestPowerOn) {
 8001f86:	4b35      	ldr	r3, [pc, #212]	; (800205c <gsmModule_handler+0x138>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <gsmModule_handler+0x76>
		handle_requestPowerOn();
 8001f94:	f000 f8a4 	bl	80020e0 <handle_requestPowerOn>
 8001f98:	e04a      	b.n	8002030 <gsmModule_handler+0x10c>
	}
	else if(flags_gsmModule.bits.requestPowerOff) {
 8001f9a:	4b30      	ldr	r3, [pc, #192]	; (800205c <gsmModule_handler+0x138>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <gsmModule_handler+0x8a>
		handle_requestPowerOff();
 8001fa8:	f000 f9e8 	bl	800237c <handle_requestPowerOff>
 8001fac:	e040      	b.n	8002030 <gsmModule_handler+0x10c>
	}
	else {
		if(flags_gsmModule.bits.requestGpsOn) {
 8001fae:	4b2b      	ldr	r3, [pc, #172]	; (800205c <gsmModule_handler+0x138>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <gsmModule_handler+0x9e>
			handle_requestGpsOn();
 8001fbc:	f000 fafe 	bl	80025bc <handle_requestGpsOn>
 8001fc0:	e012      	b.n	8001fe8 <gsmModule_handler+0xc4>
		}
		else if(flags_gsmModule.bits.requestGpsInfo) {
 8001fc2:	4b26      	ldr	r3, [pc, #152]	; (800205c <gsmModule_handler+0x138>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <gsmModule_handler+0xb2>
			handle_requestGpsInfo();
 8001fd0:	f000 fc30 	bl	8002834 <handle_requestGpsInfo>
 8001fd4:	e008      	b.n	8001fe8 <gsmModule_handler+0xc4>
		}
		else if(flags_gsmModule.bits.requestGpsOff) {
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <gsmModule_handler+0x138>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <gsmModule_handler+0xc4>
			handle_requestGpsOff();
 8001fe4:	f000 fd6a 	bl	8002abc <handle_requestGpsOff>
		}

		if(flags_gsmModule.bits.requestServerConnection) {
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <gsmModule_handler+0x138>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <gsmModule_handler+0xd8>
			handle_requestServerConnection();
 8001ff6:	f000 fefd 	bl	8002df4 <handle_requestServerConnection>
 8001ffa:	e019      	b.n	8002030 <gsmModule_handler+0x10c>
		}
		else if(flags_gsmModule.bits.requestServerDataSend) {
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <gsmModule_handler+0x138>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <gsmModule_handler+0xec>
			handle_requestServerDataSend();
 800200a:	f001 fe1b 	bl	8003c44 <handle_requestServerDataSend>
 800200e:	e00f      	b.n	8002030 <gsmModule_handler+0x10c>
		}
		else if(flags_gsmModule.bits.requestServerDataReceive) {
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <gsmModule_handler+0x138>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d108      	bne.n	8002030 <gsmModule_handler+0x10c>
			//handle_requestServerDataReceive();
		}
		else if(flags_gsmModule.bits.requestServerDisconnection) {
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <gsmModule_handler+0x138>)
 8002020:	785b      	ldrb	r3, [r3, #1]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <gsmModule_handler+0x10c>
			handle_requestServerDisconnection();
 800202c:	f001 ff60 	bl	8003ef0 <handle_requestServerDisconnection>
		}
	}

	handle_unsolicitedMessages();
 8002030:	f000 f816 	bl	8002060 <handle_unsolicitedMessages>
	gsmRxDataChunkLen = 0;
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <gsmModule_handler+0x130>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200003e4 	.word	0x200003e4
 8002044:	20000000 	.word	0x20000000
 8002048:	200003e8 	.word	0x200003e8
 800204c:	2000031c 	.word	0x2000031c
 8002050:	2000018c 	.word	0x2000018c
 8002054:	200003ec 	.word	0x200003ec
 8002058:	51eb851f 	.word	0x51eb851f
 800205c:	200004b8 	.word	0x200004b8

08002060 <handle_unsolicitedMessages>:

static void handle_unsolicitedMessages(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg0, gsmRxDataChunkLen)) {
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <handle_unsolicitedMessages+0x68>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4918      	ldr	r1, [pc, #96]	; (80020cc <handle_unsolicitedMessages+0x6c>)
 800206c:	4818      	ldr	r0, [pc, #96]	; (80020d0 <handle_unsolicitedMessages+0x70>)
 800206e:	f003 fc1e 	bl	80058ae <string_containsWithinLength>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <handle_unsolicitedMessages+0x24>
		flags_gsmModuleUnsolicited.bits.creg0 = 1;
 8002078:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <handle_unsolicitedMessages+0x74>)
 800207a:	7813      	ldrb	r3, [r2, #0]
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	7013      	strb	r3, [r2, #0]
		flags_gsmModuleUnsolicited.bits.creg1 = 1;
	}
	else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg2, gsmRxDataChunkLen)) {
		flags_gsmModuleUnsolicited.bits.creg2 = 1;
	}
}
 8002082:	e01e      	b.n	80020c2 <handle_unsolicitedMessages+0x62>
	else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg1, gsmRxDataChunkLen)) {
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <handle_unsolicitedMessages+0x68>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4913      	ldr	r1, [pc, #76]	; (80020d8 <handle_unsolicitedMessages+0x78>)
 800208c:	4810      	ldr	r0, [pc, #64]	; (80020d0 <handle_unsolicitedMessages+0x70>)
 800208e:	f003 fc0e 	bl	80058ae <string_containsWithinLength>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <handle_unsolicitedMessages+0x44>
		flags_gsmModuleUnsolicited.bits.creg1 = 1;
 8002098:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <handle_unsolicitedMessages+0x74>)
 800209a:	7813      	ldrb	r3, [r2, #0]
 800209c:	f043 0310 	orr.w	r3, r3, #16
 80020a0:	7013      	strb	r3, [r2, #0]
}
 80020a2:	e00e      	b.n	80020c2 <handle_unsolicitedMessages+0x62>
	else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg2, gsmRxDataChunkLen)) {
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <handle_unsolicitedMessages+0x68>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	490c      	ldr	r1, [pc, #48]	; (80020dc <handle_unsolicitedMessages+0x7c>)
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <handle_unsolicitedMessages+0x70>)
 80020ae:	f003 fbfe 	bl	80058ae <string_containsWithinLength>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d004      	beq.n	80020c2 <handle_unsolicitedMessages+0x62>
		flags_gsmModuleUnsolicited.bits.creg2 = 1;
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <handle_unsolicitedMessages+0x74>)
 80020ba:	7813      	ldrb	r3, [r2, #0]
 80020bc:	f043 0320 	orr.w	r3, r3, #32
 80020c0:	7013      	strb	r3, [r2, #0]
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200003ec 	.word	0x200003ec
 80020cc:	0800a044 	.word	0x0800a044
 80020d0:	2000031c 	.word	0x2000031c
 80020d4:	200004c0 	.word	0x200004c0
 80020d8:	0800a050 	.word	0x0800a050
 80020dc:	0800a05c 	.word	0x0800a05c

080020e0 <handle_requestPowerOn>:

static void handle_requestPowerOn(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestPowerOn_state)) {
 80020e4:	489c      	ldr	r0, [pc, #624]	; (8002358 <handle_requestPowerOn+0x278>)
 80020e6:	f7ff fd7e 	bl	8001be6 <fsmManager_getState>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	f200 8105 	bhi.w	80022fc <handle_requestPowerOn+0x21c>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <handle_requestPowerOn+0x18>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002115 	.word	0x08002115
 80020fc:	08002145 	.word	0x08002145
 8002100:	0800217b 	.word	0x0800217b
 8002104:	080021c1 	.word	0x080021c1
 8002108:	080021f7 	.word	0x080021f7
 800210c:	08002243 	.word	0x08002243
 8002110:	080022bb 	.word	0x080022bb
		case __gsmModule_requestPowerOn_idle:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002114:	4890      	ldr	r0, [pc, #576]	; (8002358 <handle_requestPowerOn+0x278>)
 8002116:	f7ff fd71 	bl	8001bfc <fsmManager_isStateIn>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <handle_requestPowerOn+0x46>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 8002120:	488d      	ldr	r0, [pc, #564]	; (8002358 <handle_requestPowerOn+0x278>)
 8002122:	f7ff fd81 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOn);
 8002126:	2101      	movs	r1, #1
 8002128:	488b      	ldr	r0, [pc, #556]	; (8002358 <handle_requestPowerOn+0x278>)
 800212a:	f7ff fd45 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 800212e:	488a      	ldr	r0, [pc, #552]	; (8002358 <handle_requestPowerOn+0x278>)
 8002130:	f7ff fd6f 	bl	8001c12 <fsmManager_isStateOut>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80fc 	beq.w	8002334 <handle_requestPowerOn+0x254>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 800213c:	4886      	ldr	r0, [pc, #536]	; (8002358 <handle_requestPowerOn+0x278>)
 800213e:	f7ff fd82 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002142:	e0f7      	b.n	8002334 <handle_requestPowerOn+0x254>



		case __gsmModule_requestPowerOn_pwrKeyOn:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002144:	4884      	ldr	r0, [pc, #528]	; (8002358 <handle_requestPowerOn+0x278>)
 8002146:	f7ff fd59 	bl	8001bfc <fsmManager_isStateIn>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <handle_requestPowerOn+0x76>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 8002150:	4881      	ldr	r0, [pc, #516]	; (8002358 <handle_requestPowerOn+0x278>)
 8002152:	f7ff fd69 	bl	8001c28 <fsmManager_stateIn>
			}

			pinGsmPwrkey_write(1);
 8002156:	2001      	movs	r0, #1
 8002158:	f002 f888 	bl	800426c <pinGsmPwrkey_write>
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOnWait);
 800215c:	2102      	movs	r1, #2
 800215e:	487e      	ldr	r0, [pc, #504]	; (8002358 <handle_requestPowerOn+0x278>)
 8002160:	f7ff fd2a 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002164:	487c      	ldr	r0, [pc, #496]	; (8002358 <handle_requestPowerOn+0x278>)
 8002166:	f7ff fd54 	bl	8001c12 <fsmManager_isStateOut>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80e3 	beq.w	8002338 <handle_requestPowerOn+0x258>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 8002172:	4879      	ldr	r0, [pc, #484]	; (8002358 <handle_requestPowerOn+0x278>)
 8002174:	f7ff fd67 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002178:	e0de      	b.n	8002338 <handle_requestPowerOn+0x258>



		case __gsmModule_requestPowerOn_pwrKeyOnWait:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 800217a:	4877      	ldr	r0, [pc, #476]	; (8002358 <handle_requestPowerOn+0x278>)
 800217c:	f7ff fd3e 	bl	8001bfc <fsmManager_isStateIn>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <handle_requestPowerOn+0xb6>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 8002186:	4874      	ldr	r0, [pc, #464]	; (8002358 <handle_requestPowerOn+0x278>)
 8002188:	f7ff fd4e 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timer, 1500);
 800218c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002190:	4872      	ldr	r0, [pc, #456]	; (800235c <handle_requestPowerOn+0x27c>)
 8002192:	f002 fcef 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 8002196:	4871      	ldr	r0, [pc, #452]	; (800235c <handle_requestPowerOn+0x27c>)
 8002198:	f002 fd00 	bl	8004b9c <softTimer_expired>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <handle_requestPowerOn+0xca>
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOff);
 80021a2:	2103      	movs	r1, #3
 80021a4:	486c      	ldr	r0, [pc, #432]	; (8002358 <handle_requestPowerOn+0x278>)
 80021a6:	f7ff fd07 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 80021aa:	486b      	ldr	r0, [pc, #428]	; (8002358 <handle_requestPowerOn+0x278>)
 80021ac:	f7ff fd31 	bl	8001c12 <fsmManager_isStateOut>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80c2 	beq.w	800233c <handle_requestPowerOn+0x25c>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80021b8:	4867      	ldr	r0, [pc, #412]	; (8002358 <handle_requestPowerOn+0x278>)
 80021ba:	f7ff fd44 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80021be:	e0bd      	b.n	800233c <handle_requestPowerOn+0x25c>



		case __gsmModule_requestPowerOn_pwrKeyOff:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80021c0:	4865      	ldr	r0, [pc, #404]	; (8002358 <handle_requestPowerOn+0x278>)
 80021c2:	f7ff fd1b 	bl	8001bfc <fsmManager_isStateIn>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <handle_requestPowerOn+0xf2>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80021cc:	4862      	ldr	r0, [pc, #392]	; (8002358 <handle_requestPowerOn+0x278>)
 80021ce:	f7ff fd2b 	bl	8001c28 <fsmManager_stateIn>
			}

			pinGsmPwrkey_write(0);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f002 f84a 	bl	800426c <pinGsmPwrkey_write>
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_send_at);
 80021d8:	2104      	movs	r1, #4
 80021da:	485f      	ldr	r0, [pc, #380]	; (8002358 <handle_requestPowerOn+0x278>)
 80021dc:	f7ff fcec 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 80021e0:	485d      	ldr	r0, [pc, #372]	; (8002358 <handle_requestPowerOn+0x278>)
 80021e2:	f7ff fd16 	bl	8001c12 <fsmManager_isStateOut>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a9 	beq.w	8002340 <handle_requestPowerOn+0x260>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80021ee:	485a      	ldr	r0, [pc, #360]	; (8002358 <handle_requestPowerOn+0x278>)
 80021f0:	f7ff fd29 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80021f4:	e0a4      	b.n	8002340 <handle_requestPowerOn+0x260>



		case __gsmModule_requestPowerOn_send_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80021f6:	4858      	ldr	r0, [pc, #352]	; (8002358 <handle_requestPowerOn+0x278>)
 80021f8:	f7ff fd00 	bl	8001bfc <fsmManager_isStateIn>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <handle_requestPowerOn+0x132>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 8002202:	4855      	ldr	r0, [pc, #340]	; (8002358 <handle_requestPowerOn+0x278>)
 8002204:	f7ff fd10 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 4000);
 8002208:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800220c:	4854      	ldr	r0, [pc, #336]	; (8002360 <handle_requestPowerOn+0x280>)
 800220e:	f002 fcb1 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002212:	4853      	ldr	r0, [pc, #332]	; (8002360 <handle_requestPowerOn+0x280>)
 8002214:	f002 fcc2 	bl	8004b9c <softTimer_expired>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <handle_requestPowerOn+0x14c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_at);
 800221e:	4851      	ldr	r0, [pc, #324]	; (8002364 <handle_requestPowerOn+0x284>)
 8002220:	f002 f836 	bl	8004290 <pinGsmUartTx_transmit>

				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_check_at);
 8002224:	2105      	movs	r1, #5
 8002226:	484c      	ldr	r0, [pc, #304]	; (8002358 <handle_requestPowerOn+0x278>)
 8002228:	f7ff fcc6 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 800222c:	484a      	ldr	r0, [pc, #296]	; (8002358 <handle_requestPowerOn+0x278>)
 800222e:	f7ff fcf0 	bl	8001c12 <fsmManager_isStateOut>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8085 	beq.w	8002344 <handle_requestPowerOn+0x264>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 800223a:	4847      	ldr	r0, [pc, #284]	; (8002358 <handle_requestPowerOn+0x278>)
 800223c:	f7ff fd03 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002240:	e080      	b.n	8002344 <handle_requestPowerOn+0x264>



		case __gsmModule_requestPowerOn_check_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002242:	4845      	ldr	r0, [pc, #276]	; (8002358 <handle_requestPowerOn+0x278>)
 8002244:	f7ff fcda 	bl	8001bfc <fsmManager_isStateIn>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <handle_requestPowerOn+0x180>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 800224e:	4842      	ldr	r0, [pc, #264]	; (8002358 <handle_requestPowerOn+0x278>)
 8002250:	f7ff fcea 	bl	8001c28 <fsmManager_stateIn>

				pinGsmUartRx_receive();
 8002254:	f002 f85a 	bl	800430c <pinGsmUartRx_receive>
				softTimer_start(&timeout, 100);
 8002258:	2164      	movs	r1, #100	; 0x64
 800225a:	4841      	ldr	r0, [pc, #260]	; (8002360 <handle_requestPowerOn+0x280>)
 800225c:	f002 fc8a 	bl	8004b74 <softTimer_start>
			}


			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002260:	4b41      	ldr	r3, [pc, #260]	; (8002368 <handle_requestPowerOn+0x288>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4941      	ldr	r1, [pc, #260]	; (800236c <handle_requestPowerOn+0x28c>)
 8002268:	4841      	ldr	r0, [pc, #260]	; (8002370 <handle_requestPowerOn+0x290>)
 800226a:	f003 fb20 	bl	80058ae <string_containsWithinLength>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00e      	beq.n	8002292 <handle_requestPowerOn+0x1b2>
				flags_gsmModule.bits.isPowered = 1;
 8002274:	4a3f      	ldr	r2, [pc, #252]	; (8002374 <handle_requestPowerOn+0x294>)
 8002276:	7853      	ldrb	r3, [r2, #1]
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestPowerOn = 0;
 800227e:	4a3d      	ldr	r2, [pc, #244]	; (8002374 <handle_requestPowerOn+0x294>)
 8002280:	7813      	ldrb	r3, [r2, #0]
 8002282:	f36f 0300 	bfc	r3, #0, #1
 8002286:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8002288:	2100      	movs	r1, #0
 800228a:	4833      	ldr	r0, [pc, #204]	; (8002358 <handle_requestPowerOn+0x278>)
 800228c:	f7ff fc94 	bl	8001bb8 <fsmManager_gotoState>
 8002290:	e009      	b.n	80022a6 <handle_requestPowerOn+0x1c6>
			}
			else if(softTimer_expired(&timeout)) {
 8002292:	4833      	ldr	r0, [pc, #204]	; (8002360 <handle_requestPowerOn+0x280>)
 8002294:	f002 fc82 	bl	8004b9c <softTimer_expired>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <handle_requestPowerOn+0x1c6>
				//The module is powered off
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 800229e:	2100      	movs	r1, #0
 80022a0:	482d      	ldr	r0, [pc, #180]	; (8002358 <handle_requestPowerOn+0x278>)
 80022a2:	f7ff fc89 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 80022a6:	482c      	ldr	r0, [pc, #176]	; (8002358 <handle_requestPowerOn+0x278>)
 80022a8:	f7ff fcb3 	bl	8001c12 <fsmManager_isStateOut>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d04a      	beq.n	8002348 <handle_requestPowerOn+0x268>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80022b2:	4829      	ldr	r0, [pc, #164]	; (8002358 <handle_requestPowerOn+0x278>)
 80022b4:	f7ff fcc7 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80022b8:	e046      	b.n	8002348 <handle_requestPowerOn+0x268>



		case __gsmModule_requestPowerOn_error:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80022ba:	4827      	ldr	r0, [pc, #156]	; (8002358 <handle_requestPowerOn+0x278>)
 80022bc:	f7ff fc9e 	bl	8001bfc <fsmManager_isStateIn>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <handle_requestPowerOn+0x1ec>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80022c6:	4824      	ldr	r0, [pc, #144]	; (8002358 <handle_requestPowerOn+0x278>)
 80022c8:	f7ff fcae 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestPowerOn = 0;
 80022cc:	4a29      	ldr	r2, [pc, #164]	; (8002374 <handle_requestPowerOn+0x294>)
 80022ce:	7813      	ldrb	r3, [r2, #0]
 80022d0:	f36f 0300 	bfc	r3, #0, #1
 80022d4:	7013      	strb	r3, [r2, #0]
			flags_gsmModuleError.bits.powerOn = 1;
 80022d6:	4a28      	ldr	r2, [pc, #160]	; (8002378 <handle_requestPowerOn+0x298>)
 80022d8:	7813      	ldrb	r3, [r2, #0]
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 80022e0:	2100      	movs	r1, #0
 80022e2:	481d      	ldr	r0, [pc, #116]	; (8002358 <handle_requestPowerOn+0x278>)
 80022e4:	f7ff fc68 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 80022e8:	481b      	ldr	r0, [pc, #108]	; (8002358 <handle_requestPowerOn+0x278>)
 80022ea:	f7ff fc92 	bl	8001c12 <fsmManager_isStateOut>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d02b      	beq.n	800234c <handle_requestPowerOn+0x26c>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80022f4:	4818      	ldr	r0, [pc, #96]	; (8002358 <handle_requestPowerOn+0x278>)
 80022f6:	f7ff fca6 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80022fa:	e027      	b.n	800234c <handle_requestPowerOn+0x26c>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80022fc:	4816      	ldr	r0, [pc, #88]	; (8002358 <handle_requestPowerOn+0x278>)
 80022fe:	f7ff fc7d 	bl	8001bfc <fsmManager_isStateIn>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <handle_requestPowerOn+0x22e>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 8002308:	4813      	ldr	r0, [pc, #76]	; (8002358 <handle_requestPowerOn+0x278>)
 800230a:	f7ff fc8d 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestPowerOn = 0;
 800230e:	4a19      	ldr	r2, [pc, #100]	; (8002374 <handle_requestPowerOn+0x294>)
 8002310:	7813      	ldrb	r3, [r2, #0]
 8002312:	f36f 0300 	bfc	r3, #0, #1
 8002316:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8002318:	2100      	movs	r1, #0
 800231a:	480f      	ldr	r0, [pc, #60]	; (8002358 <handle_requestPowerOn+0x278>)
 800231c:	f7ff fc4c 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <handle_requestPowerOn+0x278>)
 8002322:	f7ff fc76 	bl	8001c12 <fsmManager_isStateOut>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d011      	beq.n	8002350 <handle_requestPowerOn+0x270>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 800232c:	480a      	ldr	r0, [pc, #40]	; (8002358 <handle_requestPowerOn+0x278>)
 800232e:	f7ff fc8a 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002332:	e00d      	b.n	8002350 <handle_requestPowerOn+0x270>
			break;
 8002334:	bf00      	nop
 8002336:	e00c      	b.n	8002352 <handle_requestPowerOn+0x272>
			break;
 8002338:	bf00      	nop
 800233a:	e00a      	b.n	8002352 <handle_requestPowerOn+0x272>
			break;
 800233c:	bf00      	nop
 800233e:	e008      	b.n	8002352 <handle_requestPowerOn+0x272>
			break;
 8002340:	bf00      	nop
 8002342:	e006      	b.n	8002352 <handle_requestPowerOn+0x272>
			break;
 8002344:	bf00      	nop
 8002346:	e004      	b.n	8002352 <handle_requestPowerOn+0x272>
			break;
 8002348:	bf00      	nop
 800234a:	e002      	b.n	8002352 <handle_requestPowerOn+0x272>
			break;
 800234c:	bf00      	nop
 800234e:	e000      	b.n	8002352 <handle_requestPowerOn+0x272>
			break;
 8002350:	bf00      	nop
	}
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	200004dc 	.word	0x200004dc
 800235c:	200004c4 	.word	0x200004c4
 8002360:	200004d0 	.word	0x200004d0
 8002364:	08009db4 	.word	0x08009db4
 8002368:	200003ec 	.word	0x200003ec
 800236c:	08009fc0 	.word	0x08009fc0
 8002370:	2000031c 	.word	0x2000031c
 8002374:	200004b8 	.word	0x200004b8
 8002378:	200004bc 	.word	0x200004bc

0800237c <handle_requestPowerOff>:

static void handle_requestPowerOff(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestPowerOff_state)) {
 8002380:	4883      	ldr	r0, [pc, #524]	; (8002590 <handle_requestPowerOff+0x214>)
 8002382:	f7ff fc30 	bl	8001be6 <fsmManager_getState>
 8002386:	4603      	mov	r3, r0
 8002388:	2b05      	cmp	r3, #5
 800238a:	f200 80ff 	bhi.w	800258c <handle_requestPowerOff+0x210>
 800238e:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <handle_requestPowerOff+0x18>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	080023ad 	.word	0x080023ad
 8002398:	080023dd 	.word	0x080023dd
 800239c:	08002413 	.word	0x08002413
 80023a0:	08002479 	.word	0x08002479
 80023a4:	080024c1 	.word	0x080024c1
 80023a8:	08002535 	.word	0x08002535
		case __gsmModule_requestPowerOff_idle:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 80023ac:	4878      	ldr	r0, [pc, #480]	; (8002590 <handle_requestPowerOff+0x214>)
 80023ae:	f7ff fc25 	bl	8001bfc <fsmManager_isStateIn>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <handle_requestPowerOff+0x42>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 80023b8:	4875      	ldr	r0, [pc, #468]	; (8002590 <handle_requestPowerOff+0x214>)
 80023ba:	f7ff fc35 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_send_atCpowd1);
 80023be:	2101      	movs	r1, #1
 80023c0:	4873      	ldr	r0, [pc, #460]	; (8002590 <handle_requestPowerOff+0x214>)
 80023c2:	f7ff fbf9 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 80023c6:	4872      	ldr	r0, [pc, #456]	; (8002590 <handle_requestPowerOff+0x214>)
 80023c8:	f7ff fc23 	bl	8001c12 <fsmManager_isStateOut>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80d1 	beq.w	8002576 <handle_requestPowerOff+0x1fa>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 80023d4:	486e      	ldr	r0, [pc, #440]	; (8002590 <handle_requestPowerOff+0x214>)
 80023d6:	f7ff fc36 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80023da:	e0cc      	b.n	8002576 <handle_requestPowerOff+0x1fa>



		case __gsmModule_requestPowerOff_send_atCpowd1:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 80023dc:	486c      	ldr	r0, [pc, #432]	; (8002590 <handle_requestPowerOff+0x214>)
 80023de:	f7ff fc0d 	bl	8001bfc <fsmManager_isStateIn>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <handle_requestPowerOff+0x72>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 80023e8:	4869      	ldr	r0, [pc, #420]	; (8002590 <handle_requestPowerOff+0x214>)
 80023ea:	f7ff fc1d 	bl	8001c28 <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cpowd1);
 80023ee:	4869      	ldr	r0, [pc, #420]	; (8002594 <handle_requestPowerOff+0x218>)
 80023f0:	f001 ff4e 	bl	8004290 <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_check_atCpowd1);
 80023f4:	2102      	movs	r1, #2
 80023f6:	4866      	ldr	r0, [pc, #408]	; (8002590 <handle_requestPowerOff+0x214>)
 80023f8:	f7ff fbde 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 80023fc:	4864      	ldr	r0, [pc, #400]	; (8002590 <handle_requestPowerOff+0x214>)
 80023fe:	f7ff fc08 	bl	8001c12 <fsmManager_isStateOut>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80b8 	beq.w	800257a <handle_requestPowerOff+0x1fe>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 800240a:	4861      	ldr	r0, [pc, #388]	; (8002590 <handle_requestPowerOff+0x214>)
 800240c:	f7ff fc1b 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002410:	e0b3      	b.n	800257a <handle_requestPowerOff+0x1fe>



		case __gsmModule_requestPowerOff_check_atCpowd1:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002412:	485f      	ldr	r0, [pc, #380]	; (8002590 <handle_requestPowerOff+0x214>)
 8002414:	f7ff fbf2 	bl	8001bfc <fsmManager_isStateIn>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <handle_requestPowerOff+0xb4>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 800241e:	485c      	ldr	r0, [pc, #368]	; (8002590 <handle_requestPowerOff+0x214>)
 8002420:	f7ff fc02 	bl	8001c28 <fsmManager_stateIn>

				pinGsmUartRx_receive();
 8002424:	f001 ff72 	bl	800430c <pinGsmUartRx_receive>
				softTimer_start(&timeout, 100);
 8002428:	2164      	movs	r1, #100	; 0x64
 800242a:	485b      	ldr	r0, [pc, #364]	; (8002598 <handle_requestPowerOff+0x21c>)
 800242c:	f002 fba2 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_normal_powerdown, gsmRxDataChunkLen)) {
 8002430:	4b5a      	ldr	r3, [pc, #360]	; (800259c <handle_requestPowerOff+0x220>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	495a      	ldr	r1, [pc, #360]	; (80025a0 <handle_requestPowerOff+0x224>)
 8002438:	485a      	ldr	r0, [pc, #360]	; (80025a4 <handle_requestPowerOff+0x228>)
 800243a:	f003 fa38 	bl	80058ae <string_containsWithinLength>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <handle_requestPowerOff+0xd2>
				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_send_at);
 8002444:	2103      	movs	r1, #3
 8002446:	4852      	ldr	r0, [pc, #328]	; (8002590 <handle_requestPowerOff+0x214>)
 8002448:	f7ff fbb6 	bl	8001bb8 <fsmManager_gotoState>
 800244c:	e009      	b.n	8002462 <handle_requestPowerOff+0xe6>
			}
			else if(softTimer_expired(&timeout)) {
 800244e:	4852      	ldr	r0, [pc, #328]	; (8002598 <handle_requestPowerOff+0x21c>)
 8002450:	f002 fba4 	bl	8004b9c <softTimer_expired>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <handle_requestPowerOff+0xe6>
				//The module is powered off
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOff_idle);
 800245a:	2100      	movs	r1, #0
 800245c:	4852      	ldr	r0, [pc, #328]	; (80025a8 <handle_requestPowerOff+0x22c>)
 800245e:	f7ff fbab 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 8002462:	484b      	ldr	r0, [pc, #300]	; (8002590 <handle_requestPowerOff+0x214>)
 8002464:	f7ff fbd5 	bl	8001c12 <fsmManager_isStateOut>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8087 	beq.w	800257e <handle_requestPowerOff+0x202>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 8002470:	4847      	ldr	r0, [pc, #284]	; (8002590 <handle_requestPowerOff+0x214>)
 8002472:	f7ff fbe8 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002476:	e082      	b.n	800257e <handle_requestPowerOff+0x202>



		case __gsmModule_requestPowerOff_send_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002478:	4845      	ldr	r0, [pc, #276]	; (8002590 <handle_requestPowerOff+0x214>)
 800247a:	f7ff fbbf 	bl	8001bfc <fsmManager_isStateIn>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d006      	beq.n	8002492 <handle_requestPowerOff+0x116>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 8002484:	4842      	ldr	r0, [pc, #264]	; (8002590 <handle_requestPowerOff+0x214>)
 8002486:	f7ff fbcf 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 800248a:	2164      	movs	r1, #100	; 0x64
 800248c:	4842      	ldr	r0, [pc, #264]	; (8002598 <handle_requestPowerOff+0x21c>)
 800248e:	f002 fb71 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002492:	4841      	ldr	r0, [pc, #260]	; (8002598 <handle_requestPowerOff+0x21c>)
 8002494:	f002 fb82 	bl	8004b9c <softTimer_expired>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <handle_requestPowerOff+0x130>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_at);
 800249e:	4843      	ldr	r0, [pc, #268]	; (80025ac <handle_requestPowerOff+0x230>)
 80024a0:	f001 fef6 	bl	8004290 <pinGsmUartTx_transmit>

				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_check_at);
 80024a4:	2104      	movs	r1, #4
 80024a6:	483a      	ldr	r0, [pc, #232]	; (8002590 <handle_requestPowerOff+0x214>)
 80024a8:	f7ff fb86 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 80024ac:	4838      	ldr	r0, [pc, #224]	; (8002590 <handle_requestPowerOff+0x214>)
 80024ae:	f7ff fbb0 	bl	8001c12 <fsmManager_isStateOut>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d064      	beq.n	8002582 <handle_requestPowerOff+0x206>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 80024b8:	4835      	ldr	r0, [pc, #212]	; (8002590 <handle_requestPowerOff+0x214>)
 80024ba:	f7ff fbc4 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80024be:	e060      	b.n	8002582 <handle_requestPowerOff+0x206>



		case __gsmModule_requestPowerOff_check_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 80024c0:	4833      	ldr	r0, [pc, #204]	; (8002590 <handle_requestPowerOff+0x214>)
 80024c2:	f7ff fb9b 	bl	8001bfc <fsmManager_isStateIn>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d006      	beq.n	80024da <handle_requestPowerOff+0x15e>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 80024cc:	4830      	ldr	r0, [pc, #192]	; (8002590 <handle_requestPowerOff+0x214>)
 80024ce:	f7ff fbab 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80024d2:	2164      	movs	r1, #100	; 0x64
 80024d4:	4830      	ldr	r0, [pc, #192]	; (8002598 <handle_requestPowerOff+0x21c>)
 80024d6:	f002 fb4d 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <handle_requestPowerOff+0x220>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	4933      	ldr	r1, [pc, #204]	; (80025b0 <handle_requestPowerOff+0x234>)
 80024e2:	4830      	ldr	r0, [pc, #192]	; (80025a4 <handle_requestPowerOff+0x228>)
 80024e4:	f003 f9e3 	bl	80058ae <string_containsWithinLength>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d004      	beq.n	80024f8 <handle_requestPowerOff+0x17c>
				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_error);
 80024ee:	2105      	movs	r1, #5
 80024f0:	4827      	ldr	r0, [pc, #156]	; (8002590 <handle_requestPowerOff+0x214>)
 80024f2:	f7ff fb61 	bl	8001bb8 <fsmManager_gotoState>
 80024f6:	e013      	b.n	8002520 <handle_requestPowerOff+0x1a4>
			}
			else if(softTimer_expired(&timeout)) {
 80024f8:	4827      	ldr	r0, [pc, #156]	; (8002598 <handle_requestPowerOff+0x21c>)
 80024fa:	f002 fb4f 	bl	8004b9c <softTimer_expired>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <handle_requestPowerOff+0x1a4>
				flags_gsmModule.bits.requestPowerOff = 0;
 8002504:	4a2b      	ldr	r2, [pc, #172]	; (80025b4 <handle_requestPowerOff+0x238>)
 8002506:	7813      	ldrb	r3, [r2, #0]
 8002508:	f36f 0341 	bfc	r3, #1, #1
 800250c:	7013      	strb	r3, [r2, #0]
				flags_gsmModule.bits.isPowered = 0;
 800250e:	4a29      	ldr	r2, [pc, #164]	; (80025b4 <handle_requestPowerOff+0x238>)
 8002510:	7853      	ldrb	r3, [r2, #1]
 8002512:	f36f 0382 	bfc	r3, #2, #1
 8002516:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 8002518:	2100      	movs	r1, #0
 800251a:	481d      	ldr	r0, [pc, #116]	; (8002590 <handle_requestPowerOff+0x214>)
 800251c:	f7ff fb4c 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 8002520:	481b      	ldr	r0, [pc, #108]	; (8002590 <handle_requestPowerOff+0x214>)
 8002522:	f7ff fb76 	bl	8001c12 <fsmManager_isStateOut>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02c      	beq.n	8002586 <handle_requestPowerOff+0x20a>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 800252c:	4818      	ldr	r0, [pc, #96]	; (8002590 <handle_requestPowerOff+0x214>)
 800252e:	f7ff fb8a 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002532:	e028      	b.n	8002586 <handle_requestPowerOff+0x20a>



		case __gsmModule_requestPowerOff_error:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002534:	4816      	ldr	r0, [pc, #88]	; (8002590 <handle_requestPowerOff+0x214>)
 8002536:	f7ff fb61 	bl	8001bfc <fsmManager_isStateIn>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <handle_requestPowerOff+0x1ca>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 8002540:	4813      	ldr	r0, [pc, #76]	; (8002590 <handle_requestPowerOff+0x214>)
 8002542:	f7ff fb71 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.powerOff = 1;
 8002546:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <handle_requestPowerOff+0x23c>)
 8002548:	7813      	ldrb	r3, [r2, #0]
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestPowerOff = 0;
 8002550:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <handle_requestPowerOff+0x238>)
 8002552:	7813      	ldrb	r3, [r2, #0]
 8002554:	f36f 0341 	bfc	r3, #1, #1
 8002558:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 800255a:	2100      	movs	r1, #0
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <handle_requestPowerOff+0x214>)
 800255e:	f7ff fb2b 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 8002562:	480b      	ldr	r0, [pc, #44]	; (8002590 <handle_requestPowerOff+0x214>)
 8002564:	f7ff fb55 	bl	8001c12 <fsmManager_isStateOut>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00d      	beq.n	800258a <handle_requestPowerOff+0x20e>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 800256e:	4808      	ldr	r0, [pc, #32]	; (8002590 <handle_requestPowerOff+0x214>)
 8002570:	f7ff fb69 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002574:	e009      	b.n	800258a <handle_requestPowerOff+0x20e>
			break;
 8002576:	bf00      	nop
 8002578:	e008      	b.n	800258c <handle_requestPowerOff+0x210>
			break;
 800257a:	bf00      	nop
 800257c:	e006      	b.n	800258c <handle_requestPowerOff+0x210>
			break;
 800257e:	bf00      	nop
 8002580:	e004      	b.n	800258c <handle_requestPowerOff+0x210>
			break;
 8002582:	bf00      	nop
 8002584:	e002      	b.n	800258c <handle_requestPowerOff+0x210>
			break;
 8002586:	bf00      	nop
 8002588:	e000      	b.n	800258c <handle_requestPowerOff+0x210>
			break;
 800258a:	bf00      	nop
	}


}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	200004e8 	.word	0x200004e8
 8002594:	08009dbc 	.word	0x08009dbc
 8002598:	200004d0 	.word	0x200004d0
 800259c:	200003ec 	.word	0x200003ec
 80025a0:	08009fc4 	.word	0x08009fc4
 80025a4:	2000031c 	.word	0x2000031c
 80025a8:	200004dc 	.word	0x200004dc
 80025ac:	08009db4 	.word	0x08009db4
 80025b0:	08009fc0 	.word	0x08009fc0
 80025b4:	200004b8 	.word	0x200004b8
 80025b8:	200004bc 	.word	0x200004bc

080025bc <handle_requestGpsOn>:

static void handle_requestGpsOn(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsOn_state)) {
 80025c0:	4893      	ldr	r0, [pc, #588]	; (8002810 <handle_requestGpsOn+0x254>)
 80025c2:	f7ff fb10 	bl	8001be6 <fsmManager_getState>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	f200 80f5 	bhi.w	80027b8 <handle_requestGpsOn+0x1fc>
 80025ce:	a201      	add	r2, pc, #4	; (adr r2, 80025d4 <handle_requestGpsOn+0x18>)
 80025d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d4:	080025ed 	.word	0x080025ed
 80025d8:	0800261d 	.word	0x0800261d
 80025dc:	08002653 	.word	0x08002653
 80025e0:	080026b7 	.word	0x080026b7
 80025e4:	08002703 	.word	0x08002703
 80025e8:	08002777 	.word	0x08002777
		case __gsmModule_requestGpsOn_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 80025ec:	4888      	ldr	r0, [pc, #544]	; (8002810 <handle_requestGpsOn+0x254>)
 80025ee:	f7ff fb05 	bl	8001bfc <fsmManager_isStateIn>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <handle_requestGpsOn+0x42>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 80025f8:	4885      	ldr	r0, [pc, #532]	; (8002810 <handle_requestGpsOn+0x254>)
 80025fa:	f7ff fb15 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpspwr1);
 80025fe:	2101      	movs	r1, #1
 8002600:	4883      	ldr	r0, [pc, #524]	; (8002810 <handle_requestGpsOn+0x254>)
 8002602:	f7ff fad9 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002606:	4882      	ldr	r0, [pc, #520]	; (8002810 <handle_requestGpsOn+0x254>)
 8002608:	f7ff fb03 	bl	8001c12 <fsmManager_isStateOut>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 80ee 	beq.w	80027f0 <handle_requestGpsOn+0x234>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002614:	487e      	ldr	r0, [pc, #504]	; (8002810 <handle_requestGpsOn+0x254>)
 8002616:	f7ff fb16 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 800261a:	e0e9      	b.n	80027f0 <handle_requestGpsOn+0x234>



		case __gsmModule_requestGpsOn_send_atCgpspwr1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 800261c:	487c      	ldr	r0, [pc, #496]	; (8002810 <handle_requestGpsOn+0x254>)
 800261e:	f7ff faed 	bl	8001bfc <fsmManager_isStateIn>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <handle_requestGpsOn+0x72>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002628:	4879      	ldr	r0, [pc, #484]	; (8002810 <handle_requestGpsOn+0x254>)
 800262a:	f7ff fafd 	bl	8001c28 <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpspwr1);
 800262e:	4879      	ldr	r0, [pc, #484]	; (8002814 <handle_requestGpsOn+0x258>)
 8002630:	f001 fe2e 	bl	8004290 <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_waitOk_atCgpspwr1);
 8002634:	2102      	movs	r1, #2
 8002636:	4876      	ldr	r0, [pc, #472]	; (8002810 <handle_requestGpsOn+0x254>)
 8002638:	f7ff fabe 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 800263c:	4874      	ldr	r0, [pc, #464]	; (8002810 <handle_requestGpsOn+0x254>)
 800263e:	f7ff fae8 	bl	8001c12 <fsmManager_isStateOut>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80d5 	beq.w	80027f4 <handle_requestGpsOn+0x238>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 800264a:	4871      	ldr	r0, [pc, #452]	; (8002810 <handle_requestGpsOn+0x254>)
 800264c:	f7ff fafb 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002650:	e0d0      	b.n	80027f4 <handle_requestGpsOn+0x238>



		case __gsmModule_requestGpsOn_waitOk_atCgpspwr1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002652:	486f      	ldr	r0, [pc, #444]	; (8002810 <handle_requestGpsOn+0x254>)
 8002654:	f7ff fad2 	bl	8001bfc <fsmManager_isStateIn>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <handle_requestGpsOn+0xb2>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 800265e:	486c      	ldr	r0, [pc, #432]	; (8002810 <handle_requestGpsOn+0x254>)
 8002660:	f7ff fae2 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002664:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002668:	486b      	ldr	r0, [pc, #428]	; (8002818 <handle_requestGpsOn+0x25c>)
 800266a:	f002 fa83 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800266e:	4b6b      	ldr	r3, [pc, #428]	; (800281c <handle_requestGpsOn+0x260>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	496a      	ldr	r1, [pc, #424]	; (8002820 <handle_requestGpsOn+0x264>)
 8002676:	486b      	ldr	r0, [pc, #428]	; (8002824 <handle_requestGpsOn+0x268>)
 8002678:	f003 f919 	bl	80058ae <string_containsWithinLength>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d004      	beq.n	800268c <handle_requestGpsOn+0xd0>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpsrst0);
 8002682:	2103      	movs	r1, #3
 8002684:	4862      	ldr	r0, [pc, #392]	; (8002810 <handle_requestGpsOn+0x254>)
 8002686:	f7ff fa97 	bl	8001bb8 <fsmManager_gotoState>
 800268a:	e009      	b.n	80026a0 <handle_requestGpsOn+0xe4>
			}
			else if(softTimer_expired(&timeout)) {
 800268c:	4862      	ldr	r0, [pc, #392]	; (8002818 <handle_requestGpsOn+0x25c>)
 800268e:	f002 fa85 	bl	8004b9c <softTimer_expired>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <handle_requestGpsOn+0xe4>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpspwr1);
 8002698:	2101      	movs	r1, #1
 800269a:	485d      	ldr	r0, [pc, #372]	; (8002810 <handle_requestGpsOn+0x254>)
 800269c:	f7ff fa8c 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 80026a0:	485b      	ldr	r0, [pc, #364]	; (8002810 <handle_requestGpsOn+0x254>)
 80026a2:	f7ff fab6 	bl	8001c12 <fsmManager_isStateOut>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a5 	beq.w	80027f8 <handle_requestGpsOn+0x23c>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 80026ae:	4858      	ldr	r0, [pc, #352]	; (8002810 <handle_requestGpsOn+0x254>)
 80026b0:	f7ff fac9 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80026b4:	e0a0      	b.n	80027f8 <handle_requestGpsOn+0x23c>



		case __gsmModule_requestGpsOn_send_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 80026b6:	4856      	ldr	r0, [pc, #344]	; (8002810 <handle_requestGpsOn+0x254>)
 80026b8:	f7ff faa0 	bl	8001bfc <fsmManager_isStateIn>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <handle_requestGpsOn+0x116>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 80026c2:	4853      	ldr	r0, [pc, #332]	; (8002810 <handle_requestGpsOn+0x254>)
 80026c4:	f7ff fab0 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 80026c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026cc:	4852      	ldr	r0, [pc, #328]	; (8002818 <handle_requestGpsOn+0x25c>)
 80026ce:	f002 fa51 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80026d2:	4851      	ldr	r0, [pc, #324]	; (8002818 <handle_requestGpsOn+0x25c>)
 80026d4:	f002 fa62 	bl	8004b9c <softTimer_expired>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <handle_requestGpsOn+0x130>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst0);
 80026de:	4852      	ldr	r0, [pc, #328]	; (8002828 <handle_requestGpsOn+0x26c>)
 80026e0:	f001 fdd6 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_waitOk_atCgpsrst0);
 80026e4:	2104      	movs	r1, #4
 80026e6:	484a      	ldr	r0, [pc, #296]	; (8002810 <handle_requestGpsOn+0x254>)
 80026e8:	f7ff fa66 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 80026ec:	4848      	ldr	r0, [pc, #288]	; (8002810 <handle_requestGpsOn+0x254>)
 80026ee:	f7ff fa90 	bl	8001c12 <fsmManager_isStateOut>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8081 	beq.w	80027fc <handle_requestGpsOn+0x240>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 80026fa:	4845      	ldr	r0, [pc, #276]	; (8002810 <handle_requestGpsOn+0x254>)
 80026fc:	f7ff faa3 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002700:	e07c      	b.n	80027fc <handle_requestGpsOn+0x240>



		case __gsmModule_requestGpsOn_waitOk_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002702:	4843      	ldr	r0, [pc, #268]	; (8002810 <handle_requestGpsOn+0x254>)
 8002704:	f7ff fa7a 	bl	8001bfc <fsmManager_isStateIn>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <handle_requestGpsOn+0x160>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 800270e:	4840      	ldr	r0, [pc, #256]	; (8002810 <handle_requestGpsOn+0x254>)
 8002710:	f7ff fa8a 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002714:	2164      	movs	r1, #100	; 0x64
 8002716:	4840      	ldr	r0, [pc, #256]	; (8002818 <handle_requestGpsOn+0x25c>)
 8002718:	f002 fa2c 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800271c:	4b3f      	ldr	r3, [pc, #252]	; (800281c <handle_requestGpsOn+0x260>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	493f      	ldr	r1, [pc, #252]	; (8002820 <handle_requestGpsOn+0x264>)
 8002724:	483f      	ldr	r0, [pc, #252]	; (8002824 <handle_requestGpsOn+0x268>)
 8002726:	f003 f8c2 	bl	80058ae <string_containsWithinLength>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00e      	beq.n	800274e <handle_requestGpsOn+0x192>
				flags_gsmModule.bits.isGpsOn = 1;
 8002730:	4a3e      	ldr	r2, [pc, #248]	; (800282c <handle_requestGpsOn+0x270>)
 8002732:	7853      	ldrb	r3, [r2, #1]
 8002734:	f043 0308 	orr.w	r3, r3, #8
 8002738:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestGpsOn = 0;
 800273a:	4a3c      	ldr	r2, [pc, #240]	; (800282c <handle_requestGpsOn+0x270>)
 800273c:	7813      	ldrb	r3, [r2, #0]
 800273e:	f36f 0382 	bfc	r3, #2, #1
 8002742:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8002744:	2100      	movs	r1, #0
 8002746:	4832      	ldr	r0, [pc, #200]	; (8002810 <handle_requestGpsOn+0x254>)
 8002748:	f7ff fa36 	bl	8001bb8 <fsmManager_gotoState>
 800274c:	e009      	b.n	8002762 <handle_requestGpsOn+0x1a6>
			}
			else if(softTimer_expired(&timeout)) {
 800274e:	4832      	ldr	r0, [pc, #200]	; (8002818 <handle_requestGpsOn+0x25c>)
 8002750:	f002 fa24 	bl	8004b9c <softTimer_expired>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <handle_requestGpsOn+0x1a6>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpsrst0);
 800275a:	2103      	movs	r1, #3
 800275c:	482c      	ldr	r0, [pc, #176]	; (8002810 <handle_requestGpsOn+0x254>)
 800275e:	f7ff fa2b 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002762:	482b      	ldr	r0, [pc, #172]	; (8002810 <handle_requestGpsOn+0x254>)
 8002764:	f7ff fa55 	bl	8001c12 <fsmManager_isStateOut>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d048      	beq.n	8002800 <handle_requestGpsOn+0x244>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 800276e:	4828      	ldr	r0, [pc, #160]	; (8002810 <handle_requestGpsOn+0x254>)
 8002770:	f7ff fa69 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002774:	e044      	b.n	8002800 <handle_requestGpsOn+0x244>

		case __gsmModule_requestGpsOn_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002776:	4826      	ldr	r0, [pc, #152]	; (8002810 <handle_requestGpsOn+0x254>)
 8002778:	f7ff fa40 	bl	8001bfc <fsmManager_isStateIn>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <handle_requestGpsOn+0x1cc>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002782:	4823      	ldr	r0, [pc, #140]	; (8002810 <handle_requestGpsOn+0x254>)
 8002784:	f7ff fa50 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.gpsOn = 1;
 8002788:	4a29      	ldr	r2, [pc, #164]	; (8002830 <handle_requestGpsOn+0x274>)
 800278a:	7813      	ldrb	r3, [r2, #0]
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestGpsOn = 0;
 8002792:	4a26      	ldr	r2, [pc, #152]	; (800282c <handle_requestGpsOn+0x270>)
 8002794:	7813      	ldrb	r3, [r2, #0]
 8002796:	f36f 0382 	bfc	r3, #2, #1
 800279a:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 800279c:	2100      	movs	r1, #0
 800279e:	481c      	ldr	r0, [pc, #112]	; (8002810 <handle_requestGpsOn+0x254>)
 80027a0:	f7ff fa0a 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 80027a4:	481a      	ldr	r0, [pc, #104]	; (8002810 <handle_requestGpsOn+0x254>)
 80027a6:	f7ff fa34 	bl	8001c12 <fsmManager_isStateOut>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d029      	beq.n	8002804 <handle_requestGpsOn+0x248>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 80027b0:	4817      	ldr	r0, [pc, #92]	; (8002810 <handle_requestGpsOn+0x254>)
 80027b2:	f7ff fa48 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80027b6:	e025      	b.n	8002804 <handle_requestGpsOn+0x248>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 80027b8:	4815      	ldr	r0, [pc, #84]	; (8002810 <handle_requestGpsOn+0x254>)
 80027ba:	f7ff fa1f 	bl	8001bfc <fsmManager_isStateIn>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <handle_requestGpsOn+0x20e>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 80027c4:	4812      	ldr	r0, [pc, #72]	; (8002810 <handle_requestGpsOn+0x254>)
 80027c6:	f7ff fa2f 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestGpsOn = 0;
 80027ca:	4a18      	ldr	r2, [pc, #96]	; (800282c <handle_requestGpsOn+0x270>)
 80027cc:	7813      	ldrb	r3, [r2, #0]
 80027ce:	f36f 0382 	bfc	r3, #2, #1
 80027d2:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 80027d4:	2100      	movs	r1, #0
 80027d6:	480e      	ldr	r0, [pc, #56]	; (8002810 <handle_requestGpsOn+0x254>)
 80027d8:	f7ff f9ee 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 80027dc:	480c      	ldr	r0, [pc, #48]	; (8002810 <handle_requestGpsOn+0x254>)
 80027de:	f7ff fa18 	bl	8001c12 <fsmManager_isStateOut>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00f      	beq.n	8002808 <handle_requestGpsOn+0x24c>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 80027e8:	4809      	ldr	r0, [pc, #36]	; (8002810 <handle_requestGpsOn+0x254>)
 80027ea:	f7ff fa2c 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80027ee:	e00b      	b.n	8002808 <handle_requestGpsOn+0x24c>
			break;
 80027f0:	bf00      	nop
 80027f2:	e00a      	b.n	800280a <handle_requestGpsOn+0x24e>
			break;
 80027f4:	bf00      	nop
 80027f6:	e008      	b.n	800280a <handle_requestGpsOn+0x24e>
			break;
 80027f8:	bf00      	nop
 80027fa:	e006      	b.n	800280a <handle_requestGpsOn+0x24e>
			break;
 80027fc:	bf00      	nop
 80027fe:	e004      	b.n	800280a <handle_requestGpsOn+0x24e>
			break;
 8002800:	bf00      	nop
 8002802:	e002      	b.n	800280a <handle_requestGpsOn+0x24e>
			break;
 8002804:	bf00      	nop
 8002806:	e000      	b.n	800280a <handle_requestGpsOn+0x24e>
			break;
 8002808:	bf00      	nop
	}
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200004f4 	.word	0x200004f4
 8002814:	08009dcc 	.word	0x08009dcc
 8002818:	200004d0 	.word	0x200004d0
 800281c:	200003ec 	.word	0x200003ec
 8002820:	08009fc0 	.word	0x08009fc0
 8002824:	2000031c 	.word	0x2000031c
 8002828:	08009ddc 	.word	0x08009ddc
 800282c:	200004b8 	.word	0x200004b8
 8002830:	200004bc 	.word	0x200004bc

08002834 <handle_requestGpsInfo>:

static void handle_requestGpsInfo(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsInfo_state)) {
 8002838:	4895      	ldr	r0, [pc, #596]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 800283a:	f7ff f9d4 	bl	8001be6 <fsmManager_getState>
 800283e:	4603      	mov	r3, r0
 8002840:	2b05      	cmp	r3, #5
 8002842:	f200 80ff 	bhi.w	8002a44 <handle_requestGpsInfo+0x210>
 8002846:	a201      	add	r2, pc, #4	; (adr r2, 800284c <handle_requestGpsInfo+0x18>)
 8002848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284c:	08002865 	.word	0x08002865
 8002850:	08002895 	.word	0x08002895
 8002854:	080028e1 	.word	0x080028e1
 8002858:	08002963 	.word	0x08002963
 800285c:	08002997 	.word	0x08002997
 8002860:	08002a03 	.word	0x08002a03
		case __gsmModule_requestGpsInfo_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002864:	488a      	ldr	r0, [pc, #552]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002866:	f7ff f9c9 	bl	8001bfc <fsmManager_isStateIn>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <handle_requestGpsInfo+0x42>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002870:	4887      	ldr	r0, [pc, #540]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002872:	f7ff f9d9 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsstatus);
 8002876:	2101      	movs	r1, #1
 8002878:	4885      	ldr	r0, [pc, #532]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 800287a:	f7ff f99d 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 800287e:	4884      	ldr	r0, [pc, #528]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002880:	f7ff f9c7 	bl	8001c12 <fsmManager_isStateOut>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80f3 	beq.w	8002a72 <handle_requestGpsInfo+0x23e>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 800288c:	4880      	ldr	r0, [pc, #512]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 800288e:	f7ff f9da 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002892:	e0ee      	b.n	8002a72 <handle_requestGpsInfo+0x23e>



		case __gsmModule_requestGpsInfo_send_atCgpsstatus:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002894:	487e      	ldr	r0, [pc, #504]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002896:	f7ff f9b1 	bl	8001bfc <fsmManager_isStateIn>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <handle_requestGpsInfo+0x7c>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 80028a0:	487b      	ldr	r0, [pc, #492]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 80028a2:	f7ff f9c1 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 10000);
 80028a6:	f242 7110 	movw	r1, #10000	; 0x2710
 80028aa:	487a      	ldr	r0, [pc, #488]	; (8002a94 <handle_requestGpsInfo+0x260>)
 80028ac:	f002 f962 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80028b0:	4878      	ldr	r0, [pc, #480]	; (8002a94 <handle_requestGpsInfo+0x260>)
 80028b2:	f002 f973 	bl	8004b9c <softTimer_expired>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <handle_requestGpsInfo+0x96>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsstatus);
 80028bc:	4876      	ldr	r0, [pc, #472]	; (8002a98 <handle_requestGpsInfo+0x264>)
 80028be:	f001 fce7 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_check_atCgpsstatus);
 80028c2:	2102      	movs	r1, #2
 80028c4:	4872      	ldr	r0, [pc, #456]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 80028c6:	f7ff f977 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 80028ca:	4871      	ldr	r0, [pc, #452]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 80028cc:	f7ff f9a1 	bl	8001c12 <fsmManager_isStateOut>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80cf 	beq.w	8002a76 <handle_requestGpsInfo+0x242>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 80028d8:	486d      	ldr	r0, [pc, #436]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 80028da:	f7ff f9b4 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80028de:	e0ca      	b.n	8002a76 <handle_requestGpsInfo+0x242>



		case __gsmModule_requestGpsInfo_check_atCgpsstatus:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 80028e0:	486b      	ldr	r0, [pc, #428]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 80028e2:	f7ff f98b 	bl	8001bfc <fsmManager_isStateIn>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <handle_requestGpsInfo+0xc8>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 80028ec:	4868      	ldr	r0, [pc, #416]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 80028ee:	f7ff f99b 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 80028f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028f6:	4867      	ldr	r0, [pc, #412]	; (8002a94 <handle_requestGpsInfo+0x260>)
 80028f8:	f002 f93c 	bl	8004b74 <softTimer_start>
			}


			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps2dFix, gsmRxDataChunkLen) ||
 80028fc:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <handle_requestGpsInfo+0x268>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4967      	ldr	r1, [pc, #412]	; (8002aa0 <handle_requestGpsInfo+0x26c>)
 8002904:	4867      	ldr	r0, [pc, #412]	; (8002aa4 <handle_requestGpsInfo+0x270>)
 8002906:	f002 ffd2 	bl	80058ae <string_containsWithinLength>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <handle_requestGpsInfo+0xf0>
			   string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps3dFix, gsmRxDataChunkLen)) {
 8002910:	4b62      	ldr	r3, [pc, #392]	; (8002a9c <handle_requestGpsInfo+0x268>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4964      	ldr	r1, [pc, #400]	; (8002aa8 <handle_requestGpsInfo+0x274>)
 8002918:	4862      	ldr	r0, [pc, #392]	; (8002aa4 <handle_requestGpsInfo+0x270>)
 800291a:	f002 ffc8 	bl	80058ae <string_containsWithinLength>
 800291e:	4603      	mov	r3, r0
			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps2dFix, gsmRxDataChunkLen) ||
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <handle_requestGpsInfo+0x104>
				flags_gsmModule.bits.isGpsFixed = 1;
 8002924:	4a61      	ldr	r2, [pc, #388]	; (8002aac <handle_requestGpsInfo+0x278>)
 8002926:	7853      	ldrb	r3, [r2, #1]
 8002928:	f043 0310 	orr.w	r3, r3, #16
 800292c:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsinf2);
 800292e:	2103      	movs	r1, #3
 8002930:	4857      	ldr	r0, [pc, #348]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002932:	f7ff f941 	bl	8001bb8 <fsmManager_gotoState>
 8002936:	e009      	b.n	800294c <handle_requestGpsInfo+0x118>
			}
			else if(softTimer_expired(&timeout)) {
 8002938:	4856      	ldr	r0, [pc, #344]	; (8002a94 <handle_requestGpsInfo+0x260>)
 800293a:	f002 f92f 	bl	8004b9c <softTimer_expired>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <handle_requestGpsInfo+0x118>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsstatus);
 8002944:	2101      	movs	r1, #1
 8002946:	4852      	ldr	r0, [pc, #328]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002948:	f7ff f936 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 800294c:	4850      	ldr	r0, [pc, #320]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 800294e:	f7ff f960 	bl	8001c12 <fsmManager_isStateOut>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8090 	beq.w	8002a7a <handle_requestGpsInfo+0x246>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 800295a:	484d      	ldr	r0, [pc, #308]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 800295c:	f7ff f973 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002960:	e08b      	b.n	8002a7a <handle_requestGpsInfo+0x246>



		case __gsmModule_requestGpsInfo_send_atCgpsinf2:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002962:	484b      	ldr	r0, [pc, #300]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002964:	f7ff f94a 	bl	8001bfc <fsmManager_isStateIn>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <handle_requestGpsInfo+0x140>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 800296e:	4848      	ldr	r0, [pc, #288]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002970:	f7ff f95a 	bl	8001c28 <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsinf2);
 8002974:	484e      	ldr	r0, [pc, #312]	; (8002ab0 <handle_requestGpsInfo+0x27c>)
 8002976:	f001 fc8b 	bl	8004290 <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_get_atCgpsinf2);
 800297a:	2104      	movs	r1, #4
 800297c:	4844      	ldr	r0, [pc, #272]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 800297e:	f7ff f91b 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002982:	4843      	ldr	r0, [pc, #268]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002984:	f7ff f945 	bl	8001c12 <fsmManager_isStateOut>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d077      	beq.n	8002a7e <handle_requestGpsInfo+0x24a>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 800298e:	4840      	ldr	r0, [pc, #256]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002990:	f7ff f959 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002994:	e073      	b.n	8002a7e <handle_requestGpsInfo+0x24a>



		case __gsmModule_requestGpsInfo_get_atCgpsinf2:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002996:	483e      	ldr	r0, [pc, #248]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002998:	f7ff f930 	bl	8001bfc <fsmManager_isStateIn>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <handle_requestGpsInfo+0x17e>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 80029a2:	483b      	ldr	r0, [pc, #236]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 80029a4:	f7ff f940 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 80029a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029ac:	4839      	ldr	r0, [pc, #228]	; (8002a94 <handle_requestGpsInfo+0x260>)
 80029ae:	f002 f8e1 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gpsInf2, gsmRxDataChunkLen)) {
 80029b2:	4b3a      	ldr	r3, [pc, #232]	; (8002a9c <handle_requestGpsInfo+0x268>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	493e      	ldr	r1, [pc, #248]	; (8002ab4 <handle_requestGpsInfo+0x280>)
 80029ba:	483a      	ldr	r0, [pc, #232]	; (8002aa4 <handle_requestGpsInfo+0x270>)
 80029bc:	f002 ff77 	bl	80058ae <string_containsWithinLength>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <handle_requestGpsInfo+0x1a6>
				flags_gsmModule.bits.requestGpsInfo = 0;
 80029c6:	4a39      	ldr	r2, [pc, #228]	; (8002aac <handle_requestGpsInfo+0x278>)
 80029c8:	7813      	ldrb	r3, [r2, #0]
 80029ca:	f36f 03c3 	bfc	r3, #3, #1
 80029ce:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 80029d0:	2100      	movs	r1, #0
 80029d2:	482f      	ldr	r0, [pc, #188]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 80029d4:	f7ff f8f0 	bl	8001bb8 <fsmManager_gotoState>
 80029d8:	e009      	b.n	80029ee <handle_requestGpsInfo+0x1ba>
			}
			else if(softTimer_expired(&timeout)) {
 80029da:	482e      	ldr	r0, [pc, #184]	; (8002a94 <handle_requestGpsInfo+0x260>)
 80029dc:	f002 f8de 	bl	8004b9c <softTimer_expired>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <handle_requestGpsInfo+0x1ba>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsinf2);
 80029e6:	2103      	movs	r1, #3
 80029e8:	4829      	ldr	r0, [pc, #164]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 80029ea:	f7ff f8e5 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 80029ee:	4828      	ldr	r0, [pc, #160]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 80029f0:	f7ff f90f 	bl	8001c12 <fsmManager_isStateOut>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d043      	beq.n	8002a82 <handle_requestGpsInfo+0x24e>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 80029fa:	4825      	ldr	r0, [pc, #148]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 80029fc:	f7ff f923 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002a00:	e03f      	b.n	8002a82 <handle_requestGpsInfo+0x24e>



		case __gsmModule_requestGpsInfo_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002a02:	4823      	ldr	r0, [pc, #140]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002a04:	f7ff f8fa 	bl	8001bfc <fsmManager_isStateIn>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <handle_requestGpsInfo+0x1e0>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002a0e:	4820      	ldr	r0, [pc, #128]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002a10:	f7ff f90a 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestGpsInfo = 0;
 8002a14:	4a25      	ldr	r2, [pc, #148]	; (8002aac <handle_requestGpsInfo+0x278>)
 8002a16:	7813      	ldrb	r3, [r2, #0]
 8002a18:	f36f 03c3 	bfc	r3, #3, #1
 8002a1c:	7013      	strb	r3, [r2, #0]
			flags_gsmModuleError.bits.gpsInfo = 1;
 8002a1e:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <handle_requestGpsInfo+0x284>)
 8002a20:	7813      	ldrb	r3, [r2, #0]
 8002a22:	f043 0308 	orr.w	r3, r3, #8
 8002a26:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4819      	ldr	r0, [pc, #100]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002a2c:	f7ff f8c4 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002a30:	4817      	ldr	r0, [pc, #92]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002a32:	f7ff f8ee 	bl	8001c12 <fsmManager_isStateOut>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d024      	beq.n	8002a86 <handle_requestGpsInfo+0x252>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002a3c:	4814      	ldr	r0, [pc, #80]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002a3e:	f7ff f902 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002a42:	e020      	b.n	8002a86 <handle_requestGpsInfo+0x252>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002a44:	4812      	ldr	r0, [pc, #72]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002a46:	f7ff f8d9 	bl	8001bfc <fsmManager_isStateIn>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <handle_requestGpsInfo+0x222>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002a50:	480f      	ldr	r0, [pc, #60]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002a52:	f7ff f8e9 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8002a56:	2100      	movs	r1, #0
 8002a58:	480d      	ldr	r0, [pc, #52]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002a5a:	f7ff f8ad 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002a5e:	480c      	ldr	r0, [pc, #48]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002a60:	f7ff f8d7 	bl	8001c12 <fsmManager_isStateOut>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00f      	beq.n	8002a8a <handle_requestGpsInfo+0x256>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002a6a:	4809      	ldr	r0, [pc, #36]	; (8002a90 <handle_requestGpsInfo+0x25c>)
 8002a6c:	f7ff f8eb 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002a70:	e00b      	b.n	8002a8a <handle_requestGpsInfo+0x256>
			break;
 8002a72:	bf00      	nop
 8002a74:	e00a      	b.n	8002a8c <handle_requestGpsInfo+0x258>
			break;
 8002a76:	bf00      	nop
 8002a78:	e008      	b.n	8002a8c <handle_requestGpsInfo+0x258>
			break;
 8002a7a:	bf00      	nop
 8002a7c:	e006      	b.n	8002a8c <handle_requestGpsInfo+0x258>
			break;
 8002a7e:	bf00      	nop
 8002a80:	e004      	b.n	8002a8c <handle_requestGpsInfo+0x258>
			break;
 8002a82:	bf00      	nop
 8002a84:	e002      	b.n	8002a8c <handle_requestGpsInfo+0x258>
			break;
 8002a86:	bf00      	nop
 8002a88:	e000      	b.n	8002a8c <handle_requestGpsInfo+0x258>
			break;
 8002a8a:	bf00      	nop
	}
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000500 	.word	0x20000500
 8002a94:	200004d0 	.word	0x200004d0
 8002a98:	08009dfc 	.word	0x08009dfc
 8002a9c:	200003ec 	.word	0x200003ec
 8002aa0:	0800a024 	.word	0x0800a024
 8002aa4:	2000031c 	.word	0x2000031c
 8002aa8:	0800a02c 	.word	0x0800a02c
 8002aac:	200004b8 	.word	0x200004b8
 8002ab0:	08009e10 	.word	0x08009e10
 8002ab4:	0800a034 	.word	0x0800a034
 8002ab8:	200004bc 	.word	0x200004bc

08002abc <handle_requestGpsOff>:

static void handle_requestGpsOff(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsOff_state)) {
 8002ac0:	48bf      	ldr	r0, [pc, #764]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002ac2:	f7ff f890 	bl	8001be6 <fsmManager_getState>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b07      	cmp	r3, #7
 8002aca:	f200 8154 	bhi.w	8002d76 <handle_requestGpsOff+0x2ba>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <handle_requestGpsOff+0x18>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002af5 	.word	0x08002af5
 8002ad8:	08002b25 	.word	0x08002b25
 8002adc:	08002b71 	.word	0x08002b71
 8002ae0:	08002bd3 	.word	0x08002bd3
 8002ae4:	08002c1f 	.word	0x08002c1f
 8002ae8:	08002c81 	.word	0x08002c81
 8002aec:	08002ccb 	.word	0x08002ccb
 8002af0:	08002d35 	.word	0x08002d35
		case __gsmModule_requestGpsOff_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002af4:	48b2      	ldr	r0, [pc, #712]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002af6:	f7ff f881 	bl	8001bfc <fsmManager_isStateIn>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <handle_requestGpsOff+0x4a>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002b00:	48af      	ldr	r0, [pc, #700]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002b02:	f7ff f891 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst0);
 8002b06:	2101      	movs	r1, #1
 8002b08:	48ad      	ldr	r0, [pc, #692]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002b0a:	f7ff f855 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002b0e:	48ac      	ldr	r0, [pc, #688]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002b10:	f7ff f87f 	bl	8001c12 <fsmManager_isStateOut>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8144 	beq.w	8002da4 <handle_requestGpsOff+0x2e8>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002b1c:	48a8      	ldr	r0, [pc, #672]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002b1e:	f7ff f892 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002b22:	e13f      	b.n	8002da4 <handle_requestGpsOff+0x2e8>



		case __gsmModule_requestGpsOff_send_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002b24:	48a6      	ldr	r0, [pc, #664]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002b26:	f7ff f869 	bl	8001bfc <fsmManager_isStateIn>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <handle_requestGpsOff+0x84>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002b30:	48a3      	ldr	r0, [pc, #652]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002b32:	f7ff f879 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002b36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b3a:	48a2      	ldr	r0, [pc, #648]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002b3c:	f002 f81a 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002b40:	48a0      	ldr	r0, [pc, #640]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002b42:	f002 f82b 	bl	8004b9c <softTimer_expired>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d006      	beq.n	8002b5a <handle_requestGpsOff+0x9e>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst0);
 8002b4c:	489e      	ldr	r0, [pc, #632]	; (8002dc8 <handle_requestGpsOff+0x30c>)
 8002b4e:	f001 fb9f 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpsrst0);
 8002b52:	2102      	movs	r1, #2
 8002b54:	489a      	ldr	r0, [pc, #616]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002b56:	f7ff f82f 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002b5a:	4899      	ldr	r0, [pc, #612]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002b5c:	f7ff f859 	bl	8001c12 <fsmManager_isStateOut>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 8120 	beq.w	8002da8 <handle_requestGpsOff+0x2ec>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002b68:	4895      	ldr	r0, [pc, #596]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002b6a:	f7ff f86c 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002b6e:	e11b      	b.n	8002da8 <handle_requestGpsOff+0x2ec>



		case __gsmModule_requestGpsOff_waitOk_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002b70:	4893      	ldr	r0, [pc, #588]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002b72:	f7ff f843 	bl	8001bfc <fsmManager_isStateIn>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <handle_requestGpsOff+0xce>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002b7c:	4890      	ldr	r0, [pc, #576]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002b7e:	f7ff f853 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002b82:	2164      	movs	r1, #100	; 0x64
 8002b84:	488f      	ldr	r0, [pc, #572]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002b86:	f001 fff5 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002b8a:	4b90      	ldr	r3, [pc, #576]	; (8002dcc <handle_requestGpsOff+0x310>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	498f      	ldr	r1, [pc, #572]	; (8002dd0 <handle_requestGpsOff+0x314>)
 8002b92:	4890      	ldr	r0, [pc, #576]	; (8002dd4 <handle_requestGpsOff+0x318>)
 8002b94:	f002 fe8b 	bl	80058ae <string_containsWithinLength>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <handle_requestGpsOff+0xec>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst1);
 8002b9e:	2103      	movs	r1, #3
 8002ba0:	4887      	ldr	r0, [pc, #540]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002ba2:	f7ff f809 	bl	8001bb8 <fsmManager_gotoState>
 8002ba6:	e009      	b.n	8002bbc <handle_requestGpsOff+0x100>
			}
			else if(softTimer_expired(&timeout)) {
 8002ba8:	4886      	ldr	r0, [pc, #536]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002baa:	f001 fff7 	bl	8004b9c <softTimer_expired>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <handle_requestGpsOff+0x100>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst0);
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	4882      	ldr	r0, [pc, #520]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002bb8:	f7fe fffe 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002bbc:	4880      	ldr	r0, [pc, #512]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002bbe:	f7ff f828 	bl	8001c12 <fsmManager_isStateOut>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80f1 	beq.w	8002dac <handle_requestGpsOff+0x2f0>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002bca:	487d      	ldr	r0, [pc, #500]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002bcc:	f7ff f83b 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002bd0:	e0ec      	b.n	8002dac <handle_requestGpsOff+0x2f0>



		case __gsmModule_requestGpsOff_send_atCgpsrst1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002bd2:	487b      	ldr	r0, [pc, #492]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002bd4:	f7ff f812 	bl	8001bfc <fsmManager_isStateIn>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <handle_requestGpsOff+0x132>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002bde:	4878      	ldr	r0, [pc, #480]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002be0:	f7ff f822 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002be4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002be8:	4876      	ldr	r0, [pc, #472]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002bea:	f001 ffc3 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002bee:	4875      	ldr	r0, [pc, #468]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002bf0:	f001 ffd4 	bl	8004b9c <softTimer_expired>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <handle_requestGpsOff+0x14c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst1);
 8002bfa:	4877      	ldr	r0, [pc, #476]	; (8002dd8 <handle_requestGpsOff+0x31c>)
 8002bfc:	f001 fb48 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpsrst1);
 8002c00:	2104      	movs	r1, #4
 8002c02:	486f      	ldr	r0, [pc, #444]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002c04:	f7fe ffd8 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002c08:	486d      	ldr	r0, [pc, #436]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002c0a:	f7ff f802 	bl	8001c12 <fsmManager_isStateOut>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80cd 	beq.w	8002db0 <handle_requestGpsOff+0x2f4>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002c16:	486a      	ldr	r0, [pc, #424]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002c18:	f7ff f815 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002c1c:	e0c8      	b.n	8002db0 <handle_requestGpsOff+0x2f4>



		case __gsmModule_requestGpsOff_waitOk_atCgpsrst1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002c1e:	4868      	ldr	r0, [pc, #416]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002c20:	f7fe ffec 	bl	8001bfc <fsmManager_isStateIn>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d006      	beq.n	8002c38 <handle_requestGpsOff+0x17c>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002c2a:	4865      	ldr	r0, [pc, #404]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002c2c:	f7fe fffc 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002c30:	2164      	movs	r1, #100	; 0x64
 8002c32:	4864      	ldr	r0, [pc, #400]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002c34:	f001 ff9e 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002c38:	4b64      	ldr	r3, [pc, #400]	; (8002dcc <handle_requestGpsOff+0x310>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4964      	ldr	r1, [pc, #400]	; (8002dd0 <handle_requestGpsOff+0x314>)
 8002c40:	4864      	ldr	r0, [pc, #400]	; (8002dd4 <handle_requestGpsOff+0x318>)
 8002c42:	f002 fe34 	bl	80058ae <string_containsWithinLength>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <handle_requestGpsOff+0x19a>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpspwr0);
 8002c4c:	2105      	movs	r1, #5
 8002c4e:	485c      	ldr	r0, [pc, #368]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002c50:	f7fe ffb2 	bl	8001bb8 <fsmManager_gotoState>
 8002c54:	e009      	b.n	8002c6a <handle_requestGpsOff+0x1ae>
			}
			else if(softTimer_expired(&timeout)) {
 8002c56:	485b      	ldr	r0, [pc, #364]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002c58:	f001 ffa0 	bl	8004b9c <softTimer_expired>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <handle_requestGpsOff+0x1ae>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst1);
 8002c62:	2103      	movs	r1, #3
 8002c64:	4856      	ldr	r0, [pc, #344]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002c66:	f7fe ffa7 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002c6a:	4855      	ldr	r0, [pc, #340]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002c6c:	f7fe ffd1 	bl	8001c12 <fsmManager_isStateOut>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 809e 	beq.w	8002db4 <handle_requestGpsOff+0x2f8>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002c78:	4851      	ldr	r0, [pc, #324]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002c7a:	f7fe ffe4 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002c7e:	e099      	b.n	8002db4 <handle_requestGpsOff+0x2f8>



		case __gsmModule_requestGpsOff_send_atCgpspwr0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002c80:	484f      	ldr	r0, [pc, #316]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002c82:	f7fe ffbb 	bl	8001bfc <fsmManager_isStateIn>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <handle_requestGpsOff+0x1e0>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002c8c:	484c      	ldr	r0, [pc, #304]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002c8e:	f7fe ffcb 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002c92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c96:	484b      	ldr	r0, [pc, #300]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002c98:	f001 ff6c 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002c9c:	4849      	ldr	r0, [pc, #292]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002c9e:	f001 ff7d 	bl	8004b9c <softTimer_expired>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d006      	beq.n	8002cb6 <handle_requestGpsOff+0x1fa>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpspwr1);
 8002ca8:	484c      	ldr	r0, [pc, #304]	; (8002ddc <handle_requestGpsOff+0x320>)
 8002caa:	f001 faf1 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpspwr0);
 8002cae:	2106      	movs	r1, #6
 8002cb0:	4843      	ldr	r0, [pc, #268]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002cb2:	f7fe ff81 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002cb6:	4842      	ldr	r0, [pc, #264]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002cb8:	f7fe ffab 	bl	8001c12 <fsmManager_isStateOut>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d07a      	beq.n	8002db8 <handle_requestGpsOff+0x2fc>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002cc2:	483f      	ldr	r0, [pc, #252]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002cc4:	f7fe ffbf 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002cc8:	e076      	b.n	8002db8 <handle_requestGpsOff+0x2fc>



		case __gsmModule_requestGpsOff_waitOk_atCgpspwr0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002cca:	483d      	ldr	r0, [pc, #244]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002ccc:	f7fe ff96 	bl	8001bfc <fsmManager_isStateIn>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d006      	beq.n	8002ce4 <handle_requestGpsOff+0x228>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002cd6:	483a      	ldr	r0, [pc, #232]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002cd8:	f7fe ffa6 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002cdc:	2164      	movs	r1, #100	; 0x64
 8002cde:	4839      	ldr	r0, [pc, #228]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002ce0:	f001 ff48 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002ce4:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <handle_requestGpsOff+0x310>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4939      	ldr	r1, [pc, #228]	; (8002dd0 <handle_requestGpsOff+0x314>)
 8002cec:	4839      	ldr	r0, [pc, #228]	; (8002dd4 <handle_requestGpsOff+0x318>)
 8002cee:	f002 fdde 	bl	80058ae <string_containsWithinLength>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <handle_requestGpsOff+0x250>
				flags_gsmModule.bits.requestGpsOff = 0;
 8002cf8:	4a39      	ldr	r2, [pc, #228]	; (8002de0 <handle_requestGpsOff+0x324>)
 8002cfa:	7813      	ldrb	r3, [r2, #0]
 8002cfc:	f36f 1304 	bfc	r3, #4, #1
 8002d00:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_idle);
 8002d02:	2100      	movs	r1, #0
 8002d04:	482e      	ldr	r0, [pc, #184]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d06:	f7fe ff57 	bl	8001bb8 <fsmManager_gotoState>
 8002d0a:	e009      	b.n	8002d20 <handle_requestGpsOff+0x264>
			}
			else if(softTimer_expired(&timeout)) {
 8002d0c:	482d      	ldr	r0, [pc, #180]	; (8002dc4 <handle_requestGpsOff+0x308>)
 8002d0e:	f001 ff45 	bl	8004b9c <softTimer_expired>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <handle_requestGpsOff+0x264>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpspwr0);
 8002d18:	2105      	movs	r1, #5
 8002d1a:	4829      	ldr	r0, [pc, #164]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d1c:	f7fe ff4c 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002d20:	4827      	ldr	r0, [pc, #156]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d22:	f7fe ff76 	bl	8001c12 <fsmManager_isStateOut>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d047      	beq.n	8002dbc <handle_requestGpsOff+0x300>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002d2c:	4824      	ldr	r0, [pc, #144]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d2e:	f7fe ff8a 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002d32:	e043      	b.n	8002dbc <handle_requestGpsOff+0x300>



		case __gsmModule_requestGpsOff_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002d34:	4822      	ldr	r0, [pc, #136]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d36:	f7fe ff61 	bl	8001bfc <fsmManager_isStateIn>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <handle_requestGpsOff+0x28a>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002d40:	481f      	ldr	r0, [pc, #124]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d42:	f7fe ff71 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.gpsOff = 1;
 8002d46:	4a27      	ldr	r2, [pc, #156]	; (8002de4 <handle_requestGpsOff+0x328>)
 8002d48:	7813      	ldrb	r3, [r2, #0]
 8002d4a:	f043 0310 	orr.w	r3, r3, #16
 8002d4e:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestGpsOff = 0;
 8002d50:	4a23      	ldr	r2, [pc, #140]	; (8002de0 <handle_requestGpsOff+0x324>)
 8002d52:	7813      	ldrb	r3, [r2, #0]
 8002d54:	f36f 1304 	bfc	r3, #4, #1
 8002d58:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOn_idle);
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4818      	ldr	r0, [pc, #96]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d5e:	f7fe ff2b 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002d62:	4817      	ldr	r0, [pc, #92]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d64:	f7fe ff55 	bl	8001c12 <fsmManager_isStateOut>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d03c      	beq.n	8002de8 <handle_requestGpsOff+0x32c>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002d6e:	4814      	ldr	r0, [pc, #80]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d70:	f7fe ff69 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002d74:	e038      	b.n	8002de8 <handle_requestGpsOff+0x32c>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002d76:	4812      	ldr	r0, [pc, #72]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d78:	f7fe ff40 	bl	8001bfc <fsmManager_isStateIn>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <handle_requestGpsOff+0x2cc>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002d82:	480f      	ldr	r0, [pc, #60]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d84:	f7fe ff50 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOn_idle);
 8002d88:	2100      	movs	r1, #0
 8002d8a:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d8c:	f7fe ff14 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002d90:	480b      	ldr	r0, [pc, #44]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d92:	f7fe ff3e 	bl	8001c12 <fsmManager_isStateOut>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d027      	beq.n	8002dec <handle_requestGpsOff+0x330>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002d9c:	4808      	ldr	r0, [pc, #32]	; (8002dc0 <handle_requestGpsOff+0x304>)
 8002d9e:	f7fe ff52 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002da2:	e023      	b.n	8002dec <handle_requestGpsOff+0x330>
			break;
 8002da4:	bf00      	nop
 8002da6:	e022      	b.n	8002dee <handle_requestGpsOff+0x332>
			break;
 8002da8:	bf00      	nop
 8002daa:	e020      	b.n	8002dee <handle_requestGpsOff+0x332>
			break;
 8002dac:	bf00      	nop
 8002dae:	e01e      	b.n	8002dee <handle_requestGpsOff+0x332>
			break;
 8002db0:	bf00      	nop
 8002db2:	e01c      	b.n	8002dee <handle_requestGpsOff+0x332>
			break;
 8002db4:	bf00      	nop
 8002db6:	e01a      	b.n	8002dee <handle_requestGpsOff+0x332>
			break;
 8002db8:	bf00      	nop
 8002dba:	e018      	b.n	8002dee <handle_requestGpsOff+0x332>
			break;
 8002dbc:	bf00      	nop
 8002dbe:	e016      	b.n	8002dee <handle_requestGpsOff+0x332>
 8002dc0:	2000050c 	.word	0x2000050c
 8002dc4:	200004d0 	.word	0x200004d0
 8002dc8:	08009ddc 	.word	0x08009ddc
 8002dcc:	200003ec 	.word	0x200003ec
 8002dd0:	08009fc0 	.word	0x08009fc0
 8002dd4:	2000031c 	.word	0x2000031c
 8002dd8:	08009dec 	.word	0x08009dec
 8002ddc:	08009dcc 	.word	0x08009dcc
 8002de0:	200004b8 	.word	0x200004b8
 8002de4:	200004bc 	.word	0x200004bc
			break;
 8002de8:	bf00      	nop
 8002dea:	e000      	b.n	8002dee <handle_requestGpsOff+0x332>
			break;
 8002dec:	bf00      	nop
	}
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop

08002df4 <handle_requestServerConnection>:

static void handle_requestServerConnection(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerConnection_state)) {
 8002df8:	48c8      	ldr	r0, [pc, #800]	; (800311c <handle_requestServerConnection+0x328>)
 8002dfa:	f7fe fef4 	bl	8001be6 <fsmManager_getState>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b22      	cmp	r3, #34	; 0x22
 8002e02:	f200 86ac 	bhi.w	8003b5e <handle_requestServerConnection+0xd6a>
 8002e06:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <handle_requestServerConnection+0x18>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e99 	.word	0x08002e99
 8002e10:	08002ecb 	.word	0x08002ecb
 8002e14:	08002f03 	.word	0x08002f03
 8002e18:	08002f67 	.word	0x08002f67
 8002e1c:	08002fb5 	.word	0x08002fb5
 8002e20:	0800301b 	.word	0x0800301b
 8002e24:	08003069 	.word	0x08003069
 8002e28:	080030cf 	.word	0x080030cf
 8002e2c:	08003141 	.word	0x08003141
 8002e30:	080031a7 	.word	0x080031a7
 8002e34:	080031f5 	.word	0x080031f5
 8002e38:	0800325b 	.word	0x0800325b
 8002e3c:	08003b5f 	.word	0x08003b5f
 8002e40:	080032a9 	.word	0x080032a9
 8002e44:	0800330f 	.word	0x0800330f
 8002e48:	0800335d 	.word	0x0800335d
 8002e4c:	080033df 	.word	0x080033df
 8002e50:	0800345d 	.word	0x0800345d
 8002e54:	08003515 	.word	0x08003515
 8002e58:	08003561 	.word	0x08003561
 8002e5c:	080035c5 	.word	0x080035c5
 8002e60:	08003619 	.word	0x08003619
 8002e64:	0800367d 	.word	0x0800367d
 8002e68:	080036d1 	.word	0x080036d1
 8002e6c:	08003765 	.word	0x08003765
 8002e70:	080037b9 	.word	0x080037b9
 8002e74:	0800381d 	.word	0x0800381d
 8002e78:	08003869 	.word	0x08003869
 8002e7c:	080038cd 	.word	0x080038cd
 8002e80:	08003919 	.word	0x08003919
 8002e84:	0800397d 	.word	0x0800397d
 8002e88:	080039c9 	.word	0x080039c9
 8002e8c:	08003a59 	.word	0x08003a59
 8002e90:	08003aa5 	.word	0x08003aa5
 8002e94:	08003b1d 	.word	0x08003b1d
		case __gsmModule_requestServerConnection_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002e98:	48a0      	ldr	r0, [pc, #640]	; (800311c <handle_requestServerConnection+0x328>)
 8002e9a:	f7fe feaf 	bl	8001bfc <fsmManager_isStateIn>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <handle_requestServerConnection+0xb6>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002ea4:	489d      	ldr	r0, [pc, #628]	; (800311c <handle_requestServerConnection+0x328>)
 8002ea6:	f7fe febf 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCmee1);
 8002eaa:	2101      	movs	r1, #1
 8002eac:	489b      	ldr	r0, [pc, #620]	; (800311c <handle_requestServerConnection+0x328>)
 8002eae:	f7fe fe83 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8002eb2:	489a      	ldr	r0, [pc, #616]	; (800311c <handle_requestServerConnection+0x328>)
 8002eb4:	f7fe fead 	bl	8001c12 <fsmManager_isStateOut>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 866b 	beq.w	8003b96 <handle_requestServerConnection+0xda2>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8002ec0:	4896      	ldr	r0, [pc, #600]	; (800311c <handle_requestServerConnection+0x328>)
 8002ec2:	f7fe fec0 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002ec6:	f000 be66 	b.w	8003b96 <handle_requestServerConnection+0xda2>



		case __gsmModule_requestServerConnection_send_atCmee1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002eca:	4894      	ldr	r0, [pc, #592]	; (800311c <handle_requestServerConnection+0x328>)
 8002ecc:	f7fe fe96 	bl	8001bfc <fsmManager_isStateIn>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <handle_requestServerConnection+0xe8>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002ed6:	4891      	ldr	r0, [pc, #580]	; (800311c <handle_requestServerConnection+0x328>)
 8002ed8:	f7fe fea6 	bl	8001c28 <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_atcmee1);
 8002edc:	4890      	ldr	r0, [pc, #576]	; (8003120 <handle_requestServerConnection+0x32c>)
 8002ede:	f001 f9d7 	bl	8004290 <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCmee1);
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	488d      	ldr	r0, [pc, #564]	; (800311c <handle_requestServerConnection+0x328>)
 8002ee6:	f7fe fe67 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8002eea:	488c      	ldr	r0, [pc, #560]	; (800311c <handle_requestServerConnection+0x328>)
 8002eec:	f7fe fe91 	bl	8001c12 <fsmManager_isStateOut>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8651 	beq.w	8003b9a <handle_requestServerConnection+0xda6>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8002ef8:	4888      	ldr	r0, [pc, #544]	; (800311c <handle_requestServerConnection+0x328>)
 8002efa:	f7fe fea4 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002efe:	f000 be4c 	b.w	8003b9a <handle_requestServerConnection+0xda6>



		case __gsmModule_requestServerConnection_waitOk_atCmee1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002f02:	4886      	ldr	r0, [pc, #536]	; (800311c <handle_requestServerConnection+0x328>)
 8002f04:	f7fe fe7a 	bl	8001bfc <fsmManager_isStateIn>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <handle_requestServerConnection+0x128>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002f0e:	4883      	ldr	r0, [pc, #524]	; (800311c <handle_requestServerConnection+0x328>)
 8002f10:	f7fe fe8a 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002f14:	2164      	movs	r1, #100	; 0x64
 8002f16:	4883      	ldr	r0, [pc, #524]	; (8003124 <handle_requestServerConnection+0x330>)
 8002f18:	f001 fe2c 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002f1c:	4b82      	ldr	r3, [pc, #520]	; (8003128 <handle_requestServerConnection+0x334>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4982      	ldr	r1, [pc, #520]	; (800312c <handle_requestServerConnection+0x338>)
 8002f24:	4882      	ldr	r0, [pc, #520]	; (8003130 <handle_requestServerConnection+0x33c>)
 8002f26:	f002 fcc2 	bl	80058ae <string_containsWithinLength>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <handle_requestServerConnection+0x146>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun0);
 8002f30:	2103      	movs	r1, #3
 8002f32:	487a      	ldr	r0, [pc, #488]	; (800311c <handle_requestServerConnection+0x328>)
 8002f34:	f7fe fe40 	bl	8001bb8 <fsmManager_gotoState>
 8002f38:	e009      	b.n	8002f4e <handle_requestServerConnection+0x15a>
			}
			else if(softTimer_expired(&timeout)) {
 8002f3a:	487a      	ldr	r0, [pc, #488]	; (8003124 <handle_requestServerConnection+0x330>)
 8002f3c:	f001 fe2e 	bl	8004b9c <softTimer_expired>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <handle_requestServerConnection+0x15a>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun0);
 8002f46:	2103      	movs	r1, #3
 8002f48:	4874      	ldr	r0, [pc, #464]	; (800311c <handle_requestServerConnection+0x328>)
 8002f4a:	f7fe fe35 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8002f4e:	4873      	ldr	r0, [pc, #460]	; (800311c <handle_requestServerConnection+0x328>)
 8002f50:	f7fe fe5f 	bl	8001c12 <fsmManager_isStateOut>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8621 	beq.w	8003b9e <handle_requestServerConnection+0xdaa>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8002f5c:	486f      	ldr	r0, [pc, #444]	; (800311c <handle_requestServerConnection+0x328>)
 8002f5e:	f7fe fe72 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002f62:	f000 be1c 	b.w	8003b9e <handle_requestServerConnection+0xdaa>



		case __gsmModule_requestServerConnection_send_atCfun0:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002f66:	486d      	ldr	r0, [pc, #436]	; (800311c <handle_requestServerConnection+0x328>)
 8002f68:	f7fe fe48 	bl	8001bfc <fsmManager_isStateIn>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <handle_requestServerConnection+0x18e>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002f72:	486a      	ldr	r0, [pc, #424]	; (800311c <handle_requestServerConnection+0x328>)
 8002f74:	f7fe fe58 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 3000);
 8002f78:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002f7c:	4869      	ldr	r0, [pc, #420]	; (8003124 <handle_requestServerConnection+0x330>)
 8002f7e:	f001 fdf9 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002f82:	4868      	ldr	r0, [pc, #416]	; (8003124 <handle_requestServerConnection+0x330>)
 8002f84:	f001 fe0a 	bl	8004b9c <softTimer_expired>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <handle_requestServerConnection+0x1a8>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cfun0);
 8002f8e:	4869      	ldr	r0, [pc, #420]	; (8003134 <handle_requestServerConnection+0x340>)
 8002f90:	f001 f97e 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCfun0);
 8002f94:	2104      	movs	r1, #4
 8002f96:	4861      	ldr	r0, [pc, #388]	; (800311c <handle_requestServerConnection+0x328>)
 8002f98:	f7fe fe0e 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8002f9c:	485f      	ldr	r0, [pc, #380]	; (800311c <handle_requestServerConnection+0x328>)
 8002f9e:	f7fe fe38 	bl	8001c12 <fsmManager_isStateOut>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 85fc 	beq.w	8003ba2 <handle_requestServerConnection+0xdae>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8002faa:	485c      	ldr	r0, [pc, #368]	; (800311c <handle_requestServerConnection+0x328>)
 8002fac:	f7fe fe4b 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8002fb0:	f000 bdf7 	b.w	8003ba2 <handle_requestServerConnection+0xdae>



		case __gsmModule_requestServerConnection_waitOk_atCfun0:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002fb4:	4859      	ldr	r0, [pc, #356]	; (800311c <handle_requestServerConnection+0x328>)
 8002fb6:	f7fe fe21 	bl	8001bfc <fsmManager_isStateIn>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <handle_requestServerConnection+0x1dc>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002fc0:	4856      	ldr	r0, [pc, #344]	; (800311c <handle_requestServerConnection+0x328>)
 8002fc2:	f7fe fe31 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 10*1000);
 8002fc6:	f242 7110 	movw	r1, #10000	; 0x2710
 8002fca:	4856      	ldr	r0, [pc, #344]	; (8003124 <handle_requestServerConnection+0x330>)
 8002fcc:	f001 fdd2 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002fd0:	4b55      	ldr	r3, [pc, #340]	; (8003128 <handle_requestServerConnection+0x334>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4955      	ldr	r1, [pc, #340]	; (800312c <handle_requestServerConnection+0x338>)
 8002fd8:	4855      	ldr	r0, [pc, #340]	; (8003130 <handle_requestServerConnection+0x33c>)
 8002fda:	f002 fc68 	bl	80058ae <string_containsWithinLength>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <handle_requestServerConnection+0x1fa>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun1);
 8002fe4:	2105      	movs	r1, #5
 8002fe6:	484d      	ldr	r0, [pc, #308]	; (800311c <handle_requestServerConnection+0x328>)
 8002fe8:	f7fe fde6 	bl	8001bb8 <fsmManager_gotoState>
 8002fec:	e009      	b.n	8003002 <handle_requestServerConnection+0x20e>
			}
			else if(softTimer_expired(&timeout)) {
 8002fee:	484d      	ldr	r0, [pc, #308]	; (8003124 <handle_requestServerConnection+0x330>)
 8002ff0:	f001 fdd4 	bl	8004b9c <softTimer_expired>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <handle_requestServerConnection+0x20e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun0);
 8002ffa:	2103      	movs	r1, #3
 8002ffc:	4847      	ldr	r0, [pc, #284]	; (800311c <handle_requestServerConnection+0x328>)
 8002ffe:	f7fe fddb 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003002:	4846      	ldr	r0, [pc, #280]	; (800311c <handle_requestServerConnection+0x328>)
 8003004:	f7fe fe05 	bl	8001c12 <fsmManager_isStateOut>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 85cb 	beq.w	8003ba6 <handle_requestServerConnection+0xdb2>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003010:	4842      	ldr	r0, [pc, #264]	; (800311c <handle_requestServerConnection+0x328>)
 8003012:	f7fe fe18 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003016:	f000 bdc6 	b.w	8003ba6 <handle_requestServerConnection+0xdb2>



		case __gsmModule_requestServerConnection_send_atCfun1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800301a:	4840      	ldr	r0, [pc, #256]	; (800311c <handle_requestServerConnection+0x328>)
 800301c:	f7fe fdee 	bl	8001bfc <fsmManager_isStateIn>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <handle_requestServerConnection+0x242>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003026:	483d      	ldr	r0, [pc, #244]	; (800311c <handle_requestServerConnection+0x328>)
 8003028:	f7fe fdfe 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 3000);
 800302c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003030:	483c      	ldr	r0, [pc, #240]	; (8003124 <handle_requestServerConnection+0x330>)
 8003032:	f001 fd9f 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003036:	483b      	ldr	r0, [pc, #236]	; (8003124 <handle_requestServerConnection+0x330>)
 8003038:	f001 fdb0 	bl	8004b9c <softTimer_expired>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <handle_requestServerConnection+0x25c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cfun1);
 8003042:	483d      	ldr	r0, [pc, #244]	; (8003138 <handle_requestServerConnection+0x344>)
 8003044:	f001 f924 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCfun1);
 8003048:	2106      	movs	r1, #6
 800304a:	4834      	ldr	r0, [pc, #208]	; (800311c <handle_requestServerConnection+0x328>)
 800304c:	f7fe fdb4 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003050:	4832      	ldr	r0, [pc, #200]	; (800311c <handle_requestServerConnection+0x328>)
 8003052:	f7fe fdde 	bl	8001c12 <fsmManager_isStateOut>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 85a6 	beq.w	8003baa <handle_requestServerConnection+0xdb6>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800305e:	482f      	ldr	r0, [pc, #188]	; (800311c <handle_requestServerConnection+0x328>)
 8003060:	f7fe fdf1 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003064:	f000 bda1 	b.w	8003baa <handle_requestServerConnection+0xdb6>



		case __gsmModule_requestServerConnection_waitOk_atCfun1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003068:	482c      	ldr	r0, [pc, #176]	; (800311c <handle_requestServerConnection+0x328>)
 800306a:	f7fe fdc7 	bl	8001bfc <fsmManager_isStateIn>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <handle_requestServerConnection+0x290>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003074:	4829      	ldr	r0, [pc, #164]	; (800311c <handle_requestServerConnection+0x328>)
 8003076:	f7fe fdd7 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 10*1000);
 800307a:	f242 7110 	movw	r1, #10000	; 0x2710
 800307e:	4829      	ldr	r0, [pc, #164]	; (8003124 <handle_requestServerConnection+0x330>)
 8003080:	f001 fd78 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003084:	4b28      	ldr	r3, [pc, #160]	; (8003128 <handle_requestServerConnection+0x334>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4928      	ldr	r1, [pc, #160]	; (800312c <handle_requestServerConnection+0x338>)
 800308c:	4828      	ldr	r0, [pc, #160]	; (8003130 <handle_requestServerConnection+0x33c>)
 800308e:	f002 fc0e 	bl	80058ae <string_containsWithinLength>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <handle_requestServerConnection+0x2ae>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCpin);
 8003098:	2107      	movs	r1, #7
 800309a:	4820      	ldr	r0, [pc, #128]	; (800311c <handle_requestServerConnection+0x328>)
 800309c:	f7fe fd8c 	bl	8001bb8 <fsmManager_gotoState>
 80030a0:	e009      	b.n	80030b6 <handle_requestServerConnection+0x2c2>
			}
			else if(softTimer_expired(&timeout)) {
 80030a2:	4820      	ldr	r0, [pc, #128]	; (8003124 <handle_requestServerConnection+0x330>)
 80030a4:	f001 fd7a 	bl	8004b9c <softTimer_expired>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <handle_requestServerConnection+0x2c2>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun1);
 80030ae:	2105      	movs	r1, #5
 80030b0:	481a      	ldr	r0, [pc, #104]	; (800311c <handle_requestServerConnection+0x328>)
 80030b2:	f7fe fd81 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80030b6:	4819      	ldr	r0, [pc, #100]	; (800311c <handle_requestServerConnection+0x328>)
 80030b8:	f7fe fdab 	bl	8001c12 <fsmManager_isStateOut>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8575 	beq.w	8003bae <handle_requestServerConnection+0xdba>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80030c4:	4815      	ldr	r0, [pc, #84]	; (800311c <handle_requestServerConnection+0x328>)
 80030c6:	f7fe fdbe 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80030ca:	f000 bd70 	b.w	8003bae <handle_requestServerConnection+0xdba>



		case __gsmModule_requestServerConnection_send_atCpin:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80030ce:	4813      	ldr	r0, [pc, #76]	; (800311c <handle_requestServerConnection+0x328>)
 80030d0:	f7fe fd94 	bl	8001bfc <fsmManager_isStateIn>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d007      	beq.n	80030ea <handle_requestServerConnection+0x2f6>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80030da:	4810      	ldr	r0, [pc, #64]	; (800311c <handle_requestServerConnection+0x328>)
 80030dc:	f7fe fda4 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 500);
 80030e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80030e4:	480f      	ldr	r0, [pc, #60]	; (8003124 <handle_requestServerConnection+0x330>)
 80030e6:	f001 fd45 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80030ea:	480e      	ldr	r0, [pc, #56]	; (8003124 <handle_requestServerConnection+0x330>)
 80030ec:	f001 fd56 	bl	8004b9c <softTimer_expired>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <handle_requestServerConnection+0x310>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cpin);
 80030f6:	4811      	ldr	r0, [pc, #68]	; (800313c <handle_requestServerConnection+0x348>)
 80030f8:	f001 f8ca 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atCpin);
 80030fc:	2108      	movs	r1, #8
 80030fe:	4807      	ldr	r0, [pc, #28]	; (800311c <handle_requestServerConnection+0x328>)
 8003100:	f7fe fd5a 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003104:	4805      	ldr	r0, [pc, #20]	; (800311c <handle_requestServerConnection+0x328>)
 8003106:	f7fe fd84 	bl	8001c12 <fsmManager_isStateOut>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8550 	beq.w	8003bb2 <handle_requestServerConnection+0xdbe>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003112:	4802      	ldr	r0, [pc, #8]	; (800311c <handle_requestServerConnection+0x328>)
 8003114:	f7fe fd97 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003118:	f000 bd4b 	b.w	8003bb2 <handle_requestServerConnection+0xdbe>
 800311c:	20000518 	.word	0x20000518
 8003120:	08009e20 	.word	0x08009e20
 8003124:	200004d0 	.word	0x200004d0
 8003128:	200003ec 	.word	0x200003ec
 800312c:	08009fc0 	.word	0x08009fc0
 8003130:	2000031c 	.word	0x2000031c
 8003134:	08009e2c 	.word	0x08009e2c
 8003138:	08009e38 	.word	0x08009e38
 800313c:	08009e44 	.word	0x08009e44



		case __gsmModule_requestServerConnection_check_atCpin:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003140:	48ba      	ldr	r0, [pc, #744]	; (800342c <handle_requestServerConnection+0x638>)
 8003142:	f7fe fd5b 	bl	8001bfc <fsmManager_isStateIn>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <handle_requestServerConnection+0x368>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800314c:	48b7      	ldr	r0, [pc, #732]	; (800342c <handle_requestServerConnection+0x638>)
 800314e:	f7fe fd6b 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 5*1000);
 8003152:	f241 3188 	movw	r1, #5000	; 0x1388
 8003156:	48b6      	ldr	r0, [pc, #728]	; (8003430 <handle_requestServerConnection+0x63c>)
 8003158:	f001 fd0c 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_cpinReady, gsmRxDataChunkLen)) {
 800315c:	4bb5      	ldr	r3, [pc, #724]	; (8003434 <handle_requestServerConnection+0x640>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	49b5      	ldr	r1, [pc, #724]	; (8003438 <handle_requestServerConnection+0x644>)
 8003164:	48b5      	ldr	r0, [pc, #724]	; (800343c <handle_requestServerConnection+0x648>)
 8003166:	f002 fba2 	bl	80058ae <string_containsWithinLength>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <handle_requestServerConnection+0x386>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCband);
 8003170:	2109      	movs	r1, #9
 8003172:	48ae      	ldr	r0, [pc, #696]	; (800342c <handle_requestServerConnection+0x638>)
 8003174:	f7fe fd20 	bl	8001bb8 <fsmManager_gotoState>
 8003178:	e009      	b.n	800318e <handle_requestServerConnection+0x39a>
			}
			else if(softTimer_expired(&timeout)) {
 800317a:	48ad      	ldr	r0, [pc, #692]	; (8003430 <handle_requestServerConnection+0x63c>)
 800317c:	f001 fd0e 	bl	8004b9c <softTimer_expired>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <handle_requestServerConnection+0x39a>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCpin);
 8003186:	2107      	movs	r1, #7
 8003188:	48a8      	ldr	r0, [pc, #672]	; (800342c <handle_requestServerConnection+0x638>)
 800318a:	f7fe fd15 	bl	8001bb8 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800318e:	48a7      	ldr	r0, [pc, #668]	; (800342c <handle_requestServerConnection+0x638>)
 8003190:	f7fe fd3f 	bl	8001c12 <fsmManager_isStateOut>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 850d 	beq.w	8003bb6 <handle_requestServerConnection+0xdc2>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800319c:	48a3      	ldr	r0, [pc, #652]	; (800342c <handle_requestServerConnection+0x638>)
 800319e:	f7fe fd52 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80031a2:	f000 bd08 	b.w	8003bb6 <handle_requestServerConnection+0xdc2>



		case __gsmModule_requestServerConnection_send_atCband:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80031a6:	48a1      	ldr	r0, [pc, #644]	; (800342c <handle_requestServerConnection+0x638>)
 80031a8:	f7fe fd28 	bl	8001bfc <fsmManager_isStateIn>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <handle_requestServerConnection+0x3ce>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80031b2:	489e      	ldr	r0, [pc, #632]	; (800342c <handle_requestServerConnection+0x638>)
 80031b4:	f7fe fd38 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 80031b8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80031bc:	489c      	ldr	r0, [pc, #624]	; (8003430 <handle_requestServerConnection+0x63c>)
 80031be:	f001 fcd9 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80031c2:	489b      	ldr	r0, [pc, #620]	; (8003430 <handle_requestServerConnection+0x63c>)
 80031c4:	f001 fcea 	bl	8004b9c <softTimer_expired>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d006      	beq.n	80031dc <handle_requestServerConnection+0x3e8>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cband_allBand);
 80031ce:	489c      	ldr	r0, [pc, #624]	; (8003440 <handle_requestServerConnection+0x64c>)
 80031d0:	f001 f85e 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCband);
 80031d4:	210a      	movs	r1, #10
 80031d6:	4895      	ldr	r0, [pc, #596]	; (800342c <handle_requestServerConnection+0x638>)
 80031d8:	f7fe fcee 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80031dc:	4893      	ldr	r0, [pc, #588]	; (800342c <handle_requestServerConnection+0x638>)
 80031de:	f7fe fd18 	bl	8001c12 <fsmManager_isStateOut>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 84e8 	beq.w	8003bba <handle_requestServerConnection+0xdc6>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80031ea:	4890      	ldr	r0, [pc, #576]	; (800342c <handle_requestServerConnection+0x638>)
 80031ec:	f7fe fd2b 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80031f0:	f000 bce3 	b.w	8003bba <handle_requestServerConnection+0xdc6>



		case __gsmModule_requestServerConnection_waitOk_atCband:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80031f4:	488d      	ldr	r0, [pc, #564]	; (800342c <handle_requestServerConnection+0x638>)
 80031f6:	f7fe fd01 	bl	8001bfc <fsmManager_isStateIn>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <handle_requestServerConnection+0x41c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003200:	488a      	ldr	r0, [pc, #552]	; (800342c <handle_requestServerConnection+0x638>)
 8003202:	f7fe fd11 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 5000);
 8003206:	f241 3188 	movw	r1, #5000	; 0x1388
 800320a:	4889      	ldr	r0, [pc, #548]	; (8003430 <handle_requestServerConnection+0x63c>)
 800320c:	f001 fcb2 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003210:	4b88      	ldr	r3, [pc, #544]	; (8003434 <handle_requestServerConnection+0x640>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	498b      	ldr	r1, [pc, #556]	; (8003444 <handle_requestServerConnection+0x650>)
 8003218:	4888      	ldr	r0, [pc, #544]	; (800343c <handle_requestServerConnection+0x648>)
 800321a:	f002 fb48 	bl	80058ae <string_containsWithinLength>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <handle_requestServerConnection+0x43a>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 8003224:	210b      	movs	r1, #11
 8003226:	4881      	ldr	r0, [pc, #516]	; (800342c <handle_requestServerConnection+0x638>)
 8003228:	f7fe fcc6 	bl	8001bb8 <fsmManager_gotoState>
 800322c:	e009      	b.n	8003242 <handle_requestServerConnection+0x44e>
			}
			else if(softTimer_expired(&timeout)) {
 800322e:	4880      	ldr	r0, [pc, #512]	; (8003430 <handle_requestServerConnection+0x63c>)
 8003230:	f001 fcb4 	bl	8004b9c <softTimer_expired>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <handle_requestServerConnection+0x44e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCband);
 800323a:	2109      	movs	r1, #9
 800323c:	487b      	ldr	r0, [pc, #492]	; (800342c <handle_requestServerConnection+0x638>)
 800323e:	f7fe fcbb 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003242:	487a      	ldr	r0, [pc, #488]	; (800342c <handle_requestServerConnection+0x638>)
 8003244:	f7fe fce5 	bl	8001c12 <fsmManager_isStateOut>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 84b7 	beq.w	8003bbe <handle_requestServerConnection+0xdca>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003250:	4876      	ldr	r0, [pc, #472]	; (800342c <handle_requestServerConnection+0x638>)
 8003252:	f7fe fcf8 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003256:	f000 bcb2 	b.w	8003bbe <handle_requestServerConnection+0xdca>



		case __gsmModule_requestServerConnection_send_atCreg1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800325a:	4874      	ldr	r0, [pc, #464]	; (800342c <handle_requestServerConnection+0x638>)
 800325c:	f7fe fcce 	bl	8001bfc <fsmManager_isStateIn>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <handle_requestServerConnection+0x482>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003266:	4871      	ldr	r0, [pc, #452]	; (800342c <handle_requestServerConnection+0x638>)
 8003268:	f7fe fcde 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 800326c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003270:	486f      	ldr	r0, [pc, #444]	; (8003430 <handle_requestServerConnection+0x63c>)
 8003272:	f001 fc7f 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003276:	486e      	ldr	r0, [pc, #440]	; (8003430 <handle_requestServerConnection+0x63c>)
 8003278:	f001 fc90 	bl	8004b9c <softTimer_expired>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <handle_requestServerConnection+0x49c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_creg1);
 8003282:	4871      	ldr	r0, [pc, #452]	; (8003448 <handle_requestServerConnection+0x654>)
 8003284:	f001 f804 	bl	8004290 <pinGsmUartTx_transmit>
				//fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atCreg1);
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCreg1);
 8003288:	210d      	movs	r1, #13
 800328a:	4868      	ldr	r0, [pc, #416]	; (800342c <handle_requestServerConnection+0x638>)
 800328c:	f7fe fc94 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003290:	4866      	ldr	r0, [pc, #408]	; (800342c <handle_requestServerConnection+0x638>)
 8003292:	f7fe fcbe 	bl	8001c12 <fsmManager_isStateOut>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8492 	beq.w	8003bc2 <handle_requestServerConnection+0xdce>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800329e:	4863      	ldr	r0, [pc, #396]	; (800342c <handle_requestServerConnection+0x638>)
 80032a0:	f7fe fcd1 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80032a4:	f000 bc8d 	b.w	8003bc2 <handle_requestServerConnection+0xdce>
			break;
*/


		case __gsmModule_requestServerConnection_waitOk_atCreg1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80032a8:	4860      	ldr	r0, [pc, #384]	; (800342c <handle_requestServerConnection+0x638>)
 80032aa:	f7fe fca7 	bl	8001bfc <fsmManager_isStateIn>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <handle_requestServerConnection+0x4d0>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80032b4:	485d      	ldr	r0, [pc, #372]	; (800342c <handle_requestServerConnection+0x638>)
 80032b6:	f7fe fcb7 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 80032ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80032be:	485c      	ldr	r0, [pc, #368]	; (8003430 <handle_requestServerConnection+0x63c>)
 80032c0:	f001 fc58 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80032c4:	4b5b      	ldr	r3, [pc, #364]	; (8003434 <handle_requestServerConnection+0x640>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	495e      	ldr	r1, [pc, #376]	; (8003444 <handle_requestServerConnection+0x650>)
 80032cc:	485b      	ldr	r0, [pc, #364]	; (800343c <handle_requestServerConnection+0x648>)
 80032ce:	f002 faee 	bl	80058ae <string_containsWithinLength>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <handle_requestServerConnection+0x4ee>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg);
 80032d8:	210e      	movs	r1, #14
 80032da:	4854      	ldr	r0, [pc, #336]	; (800342c <handle_requestServerConnection+0x638>)
 80032dc:	f7fe fc6c 	bl	8001bb8 <fsmManager_gotoState>
 80032e0:	e009      	b.n	80032f6 <handle_requestServerConnection+0x502>
			}
			else if(softTimer_expired(&timeout)) {
 80032e2:	4853      	ldr	r0, [pc, #332]	; (8003430 <handle_requestServerConnection+0x63c>)
 80032e4:	f001 fc5a 	bl	8004b9c <softTimer_expired>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <handle_requestServerConnection+0x502>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 80032ee:	210b      	movs	r1, #11
 80032f0:	484e      	ldr	r0, [pc, #312]	; (800342c <handle_requestServerConnection+0x638>)
 80032f2:	f7fe fc61 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80032f6:	484d      	ldr	r0, [pc, #308]	; (800342c <handle_requestServerConnection+0x638>)
 80032f8:	f7fe fc8b 	bl	8001c12 <fsmManager_isStateOut>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8461 	beq.w	8003bc6 <handle_requestServerConnection+0xdd2>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003304:	4849      	ldr	r0, [pc, #292]	; (800342c <handle_requestServerConnection+0x638>)
 8003306:	f7fe fc9e 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 800330a:	f000 bc5c 	b.w	8003bc6 <handle_requestServerConnection+0xdd2>



		case __gsmModule_requestServerConnection_send_atCreg:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800330e:	4847      	ldr	r0, [pc, #284]	; (800342c <handle_requestServerConnection+0x638>)
 8003310:	f7fe fc74 	bl	8001bfc <fsmManager_isStateIn>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <handle_requestServerConnection+0x536>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800331a:	4844      	ldr	r0, [pc, #272]	; (800342c <handle_requestServerConnection+0x638>)
 800331c:	f7fe fc84 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003320:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003324:	4842      	ldr	r0, [pc, #264]	; (8003430 <handle_requestServerConnection+0x63c>)
 8003326:	f001 fc25 	bl	8004b74 <softTimer_start>
			}


			if(softTimer_expired(&timeout)) {
 800332a:	4841      	ldr	r0, [pc, #260]	; (8003430 <handle_requestServerConnection+0x63c>)
 800332c:	f001 fc36 	bl	8004b9c <softTimer_expired>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <handle_requestServerConnection+0x550>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_creg);
 8003336:	4845      	ldr	r0, [pc, #276]	; (800344c <handle_requestServerConnection+0x658>)
 8003338:	f000 ffaa 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atCreg);
 800333c:	210f      	movs	r1, #15
 800333e:	483b      	ldr	r0, [pc, #236]	; (800342c <handle_requestServerConnection+0x638>)
 8003340:	f7fe fc3a 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003344:	4839      	ldr	r0, [pc, #228]	; (800342c <handle_requestServerConnection+0x638>)
 8003346:	f7fe fc64 	bl	8001c12 <fsmManager_isStateOut>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 843c 	beq.w	8003bca <handle_requestServerConnection+0xdd6>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003352:	4836      	ldr	r0, [pc, #216]	; (800342c <handle_requestServerConnection+0x638>)
 8003354:	f7fe fc77 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003358:	f000 bc37 	b.w	8003bca <handle_requestServerConnection+0xdd6>



		case __gsmModule_requestServerConnection_check_atCreg:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800335c:	4833      	ldr	r0, [pc, #204]	; (800342c <handle_requestServerConnection+0x638>)
 800335e:	f7fe fc4d 	bl	8001bfc <fsmManager_isStateIn>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <handle_requestServerConnection+0x584>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003368:	4830      	ldr	r0, [pc, #192]	; (800342c <handle_requestServerConnection+0x638>)
 800336a:	f7fe fc5d 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 5*1000);
 800336e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003372:	482f      	ldr	r0, [pc, #188]	; (8003430 <handle_requestServerConnection+0x63c>)
 8003374:	f001 fbfe 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_creg1_1, gsmRxDataChunkLen)) {
 8003378:	4b2e      	ldr	r3, [pc, #184]	; (8003434 <handle_requestServerConnection+0x640>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4934      	ldr	r1, [pc, #208]	; (8003450 <handle_requestServerConnection+0x65c>)
 8003380:	482e      	ldr	r0, [pc, #184]	; (800343c <handle_requestServerConnection+0x648>)
 8003382:	f002 fa94 	bl	80058ae <string_containsWithinLength>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <handle_requestServerConnection+0x5a2>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCops);
 800338c:	2110      	movs	r1, #16
 800338e:	4827      	ldr	r0, [pc, #156]	; (800342c <handle_requestServerConnection+0x638>)
 8003390:	f7fe fc12 	bl	8001bb8 <fsmManager_gotoState>
 8003394:	e018      	b.n	80033c8 <handle_requestServerConnection+0x5d4>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_creg1_2, gsmRxDataChunkLen)) {
 8003396:	4b27      	ldr	r3, [pc, #156]	; (8003434 <handle_requestServerConnection+0x640>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	492d      	ldr	r1, [pc, #180]	; (8003454 <handle_requestServerConnection+0x660>)
 800339e:	4827      	ldr	r0, [pc, #156]	; (800343c <handle_requestServerConnection+0x648>)
 80033a0:	f002 fa85 	bl	80058ae <string_containsWithinLength>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d004      	beq.n	80033b4 <handle_requestServerConnection+0x5c0>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 80033aa:	210b      	movs	r1, #11
 80033ac:	481f      	ldr	r0, [pc, #124]	; (800342c <handle_requestServerConnection+0x638>)
 80033ae:	f7fe fc03 	bl	8001bb8 <fsmManager_gotoState>
 80033b2:	e009      	b.n	80033c8 <handle_requestServerConnection+0x5d4>
			}
			else if(softTimer_expired(&timeout)) {
 80033b4:	481e      	ldr	r0, [pc, #120]	; (8003430 <handle_requestServerConnection+0x63c>)
 80033b6:	f001 fbf1 	bl	8004b9c <softTimer_expired>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <handle_requestServerConnection+0x5d4>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg);
 80033c0:	210e      	movs	r1, #14
 80033c2:	481a      	ldr	r0, [pc, #104]	; (800342c <handle_requestServerConnection+0x638>)
 80033c4:	f7fe fbf8 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80033c8:	4818      	ldr	r0, [pc, #96]	; (800342c <handle_requestServerConnection+0x638>)
 80033ca:	f7fe fc22 	bl	8001c12 <fsmManager_isStateOut>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 83fc 	beq.w	8003bce <handle_requestServerConnection+0xdda>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80033d6:	4815      	ldr	r0, [pc, #84]	; (800342c <handle_requestServerConnection+0x638>)
 80033d8:	f7fe fc35 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80033dc:	e3f7      	b.n	8003bce <handle_requestServerConnection+0xdda>



		case __gsmModule_requestServerConnection_send_atCops:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80033de:	4813      	ldr	r0, [pc, #76]	; (800342c <handle_requestServerConnection+0x638>)
 80033e0:	f7fe fc0c 	bl	8001bfc <fsmManager_isStateIn>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <handle_requestServerConnection+0x606>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80033ea:	4810      	ldr	r0, [pc, #64]	; (800342c <handle_requestServerConnection+0x638>)
 80033ec:	f7fe fc1c 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 3*1000);
 80033f0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80033f4:	480e      	ldr	r0, [pc, #56]	; (8003430 <handle_requestServerConnection+0x63c>)
 80033f6:	f001 fbbd 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80033fa:	480d      	ldr	r0, [pc, #52]	; (8003430 <handle_requestServerConnection+0x63c>)
 80033fc:	f001 fbce 	bl	8004b9c <softTimer_expired>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <handle_requestServerConnection+0x620>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cops);
 8003406:	4814      	ldr	r0, [pc, #80]	; (8003458 <handle_requestServerConnection+0x664>)
 8003408:	f000 ff42 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_get_atCops);
 800340c:	2111      	movs	r1, #17
 800340e:	4807      	ldr	r0, [pc, #28]	; (800342c <handle_requestServerConnection+0x638>)
 8003410:	f7fe fbd2 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003414:	4805      	ldr	r0, [pc, #20]	; (800342c <handle_requestServerConnection+0x638>)
 8003416:	f7fe fbfc 	bl	8001c12 <fsmManager_isStateOut>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 83d8 	beq.w	8003bd2 <handle_requestServerConnection+0xdde>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003422:	4802      	ldr	r0, [pc, #8]	; (800342c <handle_requestServerConnection+0x638>)
 8003424:	f7fe fc0f 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003428:	e3d3      	b.n	8003bd2 <handle_requestServerConnection+0xdde>
 800342a:	bf00      	nop
 800342c:	20000518 	.word	0x20000518
 8003430:	200004d0 	.word	0x200004d0
 8003434:	200003ec 	.word	0x200003ec
 8003438:	08009fd8 	.word	0x08009fd8
 800343c:	2000031c 	.word	0x2000031c
 8003440:	08009e50 	.word	0x08009e50
 8003444:	08009fc0 	.word	0x08009fc0
 8003448:	08009e68 	.word	0x08009e68
 800344c:	08009e74 	.word	0x08009e74
 8003450:	08009fe8 	.word	0x08009fe8
 8003454:	08009ff4 	.word	0x08009ff4
 8003458:	08009f28 	.word	0x08009f28



		case __gsmModule_requestServerConnection_get_atCops:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800345c:	48b5      	ldr	r0, [pc, #724]	; (8003734 <handle_requestServerConnection+0x940>)
 800345e:	f7fe fbcd 	bl	8001bfc <fsmManager_isStateIn>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <handle_requestServerConnection+0x684>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003468:	48b2      	ldr	r0, [pc, #712]	; (8003734 <handle_requestServerConnection+0x940>)
 800346a:	f7fe fbdd 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 45*1000);
 800346e:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8003472:	48b1      	ldr	r0, [pc, #708]	; (8003738 <handle_requestServerConnection+0x944>)
 8003474:	f001 fb7e 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "PERSONAL", gsmRxDataChunkLen)) {
 8003478:	4bb0      	ldr	r3, [pc, #704]	; (800373c <handle_requestServerConnection+0x948>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	49b0      	ldr	r1, [pc, #704]	; (8003740 <handle_requestServerConnection+0x94c>)
 8003480:	48b0      	ldr	r0, [pc, #704]	; (8003744 <handle_requestServerConnection+0x950>)
 8003482:	f002 fa14 	bl	80058ae <string_containsWithinLength>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <handle_requestServerConnection+0x6a8>
				gsmModule_operator = __gsmModule_operator_personal;
 800348c:	4bae      	ldr	r3, [pc, #696]	; (8003748 <handle_requestServerConnection+0x954>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 8003492:	2112      	movs	r1, #18
 8003494:	48a7      	ldr	r0, [pc, #668]	; (8003734 <handle_requestServerConnection+0x940>)
 8003496:	f7fe fb8f 	bl	8001bb8 <fsmManager_gotoState>
 800349a:	e030      	b.n	80034fe <handle_requestServerConnection+0x70a>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "CLARO", gsmRxDataChunkLen)) {
 800349c:	4ba7      	ldr	r3, [pc, #668]	; (800373c <handle_requestServerConnection+0x948>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	49aa      	ldr	r1, [pc, #680]	; (800374c <handle_requestServerConnection+0x958>)
 80034a4:	48a7      	ldr	r0, [pc, #668]	; (8003744 <handle_requestServerConnection+0x950>)
 80034a6:	f002 fa02 	bl	80058ae <string_containsWithinLength>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <handle_requestServerConnection+0x6cc>
				gsmModule_operator = __gsmModule_operator_claro;
 80034b0:	4ba5      	ldr	r3, [pc, #660]	; (8003748 <handle_requestServerConnection+0x954>)
 80034b2:	2202      	movs	r2, #2
 80034b4:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 80034b6:	2112      	movs	r1, #18
 80034b8:	489e      	ldr	r0, [pc, #632]	; (8003734 <handle_requestServerConnection+0x940>)
 80034ba:	f7fe fb7d 	bl	8001bb8 <fsmManager_gotoState>
 80034be:	e01e      	b.n	80034fe <handle_requestServerConnection+0x70a>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "MOVISTAR", gsmRxDataChunkLen)) {
 80034c0:	4b9e      	ldr	r3, [pc, #632]	; (800373c <handle_requestServerConnection+0x948>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	49a2      	ldr	r1, [pc, #648]	; (8003750 <handle_requestServerConnection+0x95c>)
 80034c8:	489e      	ldr	r0, [pc, #632]	; (8003744 <handle_requestServerConnection+0x950>)
 80034ca:	f002 f9f0 	bl	80058ae <string_containsWithinLength>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <handle_requestServerConnection+0x6f0>
				gsmModule_operator = __gsmModule_operator_movistar;
 80034d4:	4b9c      	ldr	r3, [pc, #624]	; (8003748 <handle_requestServerConnection+0x954>)
 80034d6:	2203      	movs	r2, #3
 80034d8:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 80034da:	2112      	movs	r1, #18
 80034dc:	4895      	ldr	r0, [pc, #596]	; (8003734 <handle_requestServerConnection+0x940>)
 80034de:	f7fe fb6b 	bl	8001bb8 <fsmManager_gotoState>
 80034e2:	e00c      	b.n	80034fe <handle_requestServerConnection+0x70a>
			}
			else if(softTimer_expired(&timeout)) {
 80034e4:	4894      	ldr	r0, [pc, #592]	; (8003738 <handle_requestServerConnection+0x944>)
 80034e6:	f001 fb59 	bl	8004b9c <softTimer_expired>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d006      	beq.n	80034fe <handle_requestServerConnection+0x70a>
				gsmModule_operator = __gsmModule_operator_unknown;
 80034f0:	4b95      	ldr	r3, [pc, #596]	; (8003748 <handle_requestServerConnection+0x954>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCops);
 80034f6:	2110      	movs	r1, #16
 80034f8:	488e      	ldr	r0, [pc, #568]	; (8003734 <handle_requestServerConnection+0x940>)
 80034fa:	f7fe fb5d 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80034fe:	488d      	ldr	r0, [pc, #564]	; (8003734 <handle_requestServerConnection+0x940>)
 8003500:	f7fe fb87 	bl	8001c12 <fsmManager_isStateOut>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8365 	beq.w	8003bd6 <handle_requestServerConnection+0xde2>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800350c:	4889      	ldr	r0, [pc, #548]	; (8003734 <handle_requestServerConnection+0x940>)
 800350e:	f7fe fb9a 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003512:	e360      	b.n	8003bd6 <handle_requestServerConnection+0xde2>



		case __gsmModule_requestServerConnection_send_atSapbr3_contype:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003514:	4887      	ldr	r0, [pc, #540]	; (8003734 <handle_requestServerConnection+0x940>)
 8003516:	f7fe fb71 	bl	8001bfc <fsmManager_isStateIn>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <handle_requestServerConnection+0x73c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003520:	4884      	ldr	r0, [pc, #528]	; (8003734 <handle_requestServerConnection+0x940>)
 8003522:	f7fe fb81 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003526:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800352a:	4883      	ldr	r0, [pc, #524]	; (8003738 <handle_requestServerConnection+0x944>)
 800352c:	f001 fb22 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003530:	4881      	ldr	r0, [pc, #516]	; (8003738 <handle_requestServerConnection+0x944>)
 8003532:	f001 fb33 	bl	8004b9c <softTimer_expired>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d006      	beq.n	800354a <handle_requestServerConnection+0x756>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3contype);
 800353c:	4885      	ldr	r0, [pc, #532]	; (8003754 <handle_requestServerConnection+0x960>)
 800353e:	f000 fea7 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_contype);
 8003542:	2113      	movs	r1, #19
 8003544:	487b      	ldr	r0, [pc, #492]	; (8003734 <handle_requestServerConnection+0x940>)
 8003546:	f7fe fb37 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800354a:	487a      	ldr	r0, [pc, #488]	; (8003734 <handle_requestServerConnection+0x940>)
 800354c:	f7fe fb61 	bl	8001c12 <fsmManager_isStateOut>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8341 	beq.w	8003bda <handle_requestServerConnection+0xde6>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003558:	4876      	ldr	r0, [pc, #472]	; (8003734 <handle_requestServerConnection+0x940>)
 800355a:	f7fe fb74 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 800355e:	e33c      	b.n	8003bda <handle_requestServerConnection+0xde6>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_contype:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003560:	4874      	ldr	r0, [pc, #464]	; (8003734 <handle_requestServerConnection+0x940>)
 8003562:	f7fe fb4b 	bl	8001bfc <fsmManager_isStateIn>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <handle_requestServerConnection+0x788>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800356c:	4871      	ldr	r0, [pc, #452]	; (8003734 <handle_requestServerConnection+0x940>)
 800356e:	f7fe fb5b 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1*1000);
 8003572:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003576:	4870      	ldr	r0, [pc, #448]	; (8003738 <handle_requestServerConnection+0x944>)
 8003578:	f001 fafc 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <handle_requestServerConnection+0x948>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	4975      	ldr	r1, [pc, #468]	; (8003758 <handle_requestServerConnection+0x964>)
 8003584:	486f      	ldr	r0, [pc, #444]	; (8003744 <handle_requestServerConnection+0x950>)
 8003586:	f002 f992 	bl	80058ae <string_containsWithinLength>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <handle_requestServerConnection+0x7a6>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_apn);
 8003590:	2114      	movs	r1, #20
 8003592:	4868      	ldr	r0, [pc, #416]	; (8003734 <handle_requestServerConnection+0x940>)
 8003594:	f7fe fb10 	bl	8001bb8 <fsmManager_gotoState>
 8003598:	e009      	b.n	80035ae <handle_requestServerConnection+0x7ba>
			}
			else if(softTimer_expired(&timeout)) {
 800359a:	4867      	ldr	r0, [pc, #412]	; (8003738 <handle_requestServerConnection+0x944>)
 800359c:	f001 fafe 	bl	8004b9c <softTimer_expired>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <handle_requestServerConnection+0x7ba>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 80035a6:	2112      	movs	r1, #18
 80035a8:	4862      	ldr	r0, [pc, #392]	; (8003734 <handle_requestServerConnection+0x940>)
 80035aa:	f7fe fb05 	bl	8001bb8 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80035ae:	4861      	ldr	r0, [pc, #388]	; (8003734 <handle_requestServerConnection+0x940>)
 80035b0:	f7fe fb2f 	bl	8001c12 <fsmManager_isStateOut>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8311 	beq.w	8003bde <handle_requestServerConnection+0xdea>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80035bc:	485d      	ldr	r0, [pc, #372]	; (8003734 <handle_requestServerConnection+0x940>)
 80035be:	f7fe fb42 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80035c2:	e30c      	b.n	8003bde <handle_requestServerConnection+0xdea>



		case __gsmModule_requestServerConnection_send_atSapbr3_apn:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80035c4:	485b      	ldr	r0, [pc, #364]	; (8003734 <handle_requestServerConnection+0x940>)
 80035c6:	f7fe fb19 	bl	8001bfc <fsmManager_isStateIn>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <handle_requestServerConnection+0x7ec>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80035d0:	4858      	ldr	r0, [pc, #352]	; (8003734 <handle_requestServerConnection+0x940>)
 80035d2:	f7fe fb29 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 80035d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80035da:	4857      	ldr	r0, [pc, #348]	; (8003738 <handle_requestServerConnection+0x944>)
 80035dc:	f001 faca 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80035e0:	4855      	ldr	r0, [pc, #340]	; (8003738 <handle_requestServerConnection+0x944>)
 80035e2:	f001 fadb 	bl	8004b9c <softTimer_expired>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <handle_requestServerConnection+0x80e>
				if(gsmModule_operator == __gsmModule_operator_personal) {
 80035ec:	4b56      	ldr	r3, [pc, #344]	; (8003748 <handle_requestServerConnection+0x954>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d106      	bne.n	8003602 <handle_requestServerConnection+0x80e>
					pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3apnPersonal);
 80035f4:	4859      	ldr	r0, [pc, #356]	; (800375c <handle_requestServerConnection+0x968>)
 80035f6:	f000 fe4b 	bl	8004290 <pinGsmUartTx_transmit>
					fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_apn);
 80035fa:	2115      	movs	r1, #21
 80035fc:	484d      	ldr	r0, [pc, #308]	; (8003734 <handle_requestServerConnection+0x940>)
 80035fe:	f7fe fadb 	bl	8001bb8 <fsmManager_gotoState>
				}
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003602:	484c      	ldr	r0, [pc, #304]	; (8003734 <handle_requestServerConnection+0x940>)
 8003604:	f7fe fb05 	bl	8001c12 <fsmManager_isStateOut>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 82e9 	beq.w	8003be2 <handle_requestServerConnection+0xdee>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003610:	4848      	ldr	r0, [pc, #288]	; (8003734 <handle_requestServerConnection+0x940>)
 8003612:	f7fe fb18 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003616:	e2e4      	b.n	8003be2 <handle_requestServerConnection+0xdee>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_apn:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003618:	4846      	ldr	r0, [pc, #280]	; (8003734 <handle_requestServerConnection+0x940>)
 800361a:	f7fe faef 	bl	8001bfc <fsmManager_isStateIn>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <handle_requestServerConnection+0x840>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003624:	4843      	ldr	r0, [pc, #268]	; (8003734 <handle_requestServerConnection+0x940>)
 8003626:	f7fe faff 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 800362a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800362e:	4842      	ldr	r0, [pc, #264]	; (8003738 <handle_requestServerConnection+0x944>)
 8003630:	f001 faa0 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003634:	4b41      	ldr	r3, [pc, #260]	; (800373c <handle_requestServerConnection+0x948>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	4947      	ldr	r1, [pc, #284]	; (8003758 <handle_requestServerConnection+0x964>)
 800363c:	4841      	ldr	r0, [pc, #260]	; (8003744 <handle_requestServerConnection+0x950>)
 800363e:	f002 f936 	bl	80058ae <string_containsWithinLength>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d004      	beq.n	8003652 <handle_requestServerConnection+0x85e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_user);
 8003648:	2116      	movs	r1, #22
 800364a:	483a      	ldr	r0, [pc, #232]	; (8003734 <handle_requestServerConnection+0x940>)
 800364c:	f7fe fab4 	bl	8001bb8 <fsmManager_gotoState>
 8003650:	e009      	b.n	8003666 <handle_requestServerConnection+0x872>
			}
			else if(softTimer_expired(&timeout)) {
 8003652:	4839      	ldr	r0, [pc, #228]	; (8003738 <handle_requestServerConnection+0x944>)
 8003654:	f001 faa2 	bl	8004b9c <softTimer_expired>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <handle_requestServerConnection+0x872>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_apn);
 800365e:	2114      	movs	r1, #20
 8003660:	4834      	ldr	r0, [pc, #208]	; (8003734 <handle_requestServerConnection+0x940>)
 8003662:	f7fe faa9 	bl	8001bb8 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003666:	4833      	ldr	r0, [pc, #204]	; (8003734 <handle_requestServerConnection+0x940>)
 8003668:	f7fe fad3 	bl	8001c12 <fsmManager_isStateOut>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 82b9 	beq.w	8003be6 <handle_requestServerConnection+0xdf2>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003674:	482f      	ldr	r0, [pc, #188]	; (8003734 <handle_requestServerConnection+0x940>)
 8003676:	f7fe fae6 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 800367a:	e2b4      	b.n	8003be6 <handle_requestServerConnection+0xdf2>



		case __gsmModule_requestServerConnection_send_atSapbr3_user:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800367c:	482d      	ldr	r0, [pc, #180]	; (8003734 <handle_requestServerConnection+0x940>)
 800367e:	f7fe fabd 	bl	8001bfc <fsmManager_isStateIn>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <handle_requestServerConnection+0x8a4>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003688:	482a      	ldr	r0, [pc, #168]	; (8003734 <handle_requestServerConnection+0x940>)
 800368a:	f7fe facd 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 800368e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003692:	4829      	ldr	r0, [pc, #164]	; (8003738 <handle_requestServerConnection+0x944>)
 8003694:	f001 fa6e 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003698:	4827      	ldr	r0, [pc, #156]	; (8003738 <handle_requestServerConnection+0x944>)
 800369a:	f001 fa7f 	bl	8004b9c <softTimer_expired>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <handle_requestServerConnection+0x8c6>
				if(gsmModule_operator == __gsmModule_operator_personal) {
 80036a4:	4b28      	ldr	r3, [pc, #160]	; (8003748 <handle_requestServerConnection+0x954>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d106      	bne.n	80036ba <handle_requestServerConnection+0x8c6>
					pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3userPersonal);
 80036ac:	482c      	ldr	r0, [pc, #176]	; (8003760 <handle_requestServerConnection+0x96c>)
 80036ae:	f000 fdef 	bl	8004290 <pinGsmUartTx_transmit>
					fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_user);
 80036b2:	2117      	movs	r1, #23
 80036b4:	481f      	ldr	r0, [pc, #124]	; (8003734 <handle_requestServerConnection+0x940>)
 80036b6:	f7fe fa7f 	bl	8001bb8 <fsmManager_gotoState>
				}
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80036ba:	481e      	ldr	r0, [pc, #120]	; (8003734 <handle_requestServerConnection+0x940>)
 80036bc:	f7fe faa9 	bl	8001c12 <fsmManager_isStateOut>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8291 	beq.w	8003bea <handle_requestServerConnection+0xdf6>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80036c8:	481a      	ldr	r0, [pc, #104]	; (8003734 <handle_requestServerConnection+0x940>)
 80036ca:	f7fe fabc 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80036ce:	e28c      	b.n	8003bea <handle_requestServerConnection+0xdf6>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_user:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80036d0:	4818      	ldr	r0, [pc, #96]	; (8003734 <handle_requestServerConnection+0x940>)
 80036d2:	f7fe fa93 	bl	8001bfc <fsmManager_isStateIn>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <handle_requestServerConnection+0x8f8>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80036dc:	4815      	ldr	r0, [pc, #84]	; (8003734 <handle_requestServerConnection+0x940>)
 80036de:	f7fe faa3 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 80036e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036e6:	4814      	ldr	r0, [pc, #80]	; (8003738 <handle_requestServerConnection+0x944>)
 80036e8:	f001 fa44 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <handle_requestServerConnection+0x948>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	4919      	ldr	r1, [pc, #100]	; (8003758 <handle_requestServerConnection+0x964>)
 80036f4:	4813      	ldr	r0, [pc, #76]	; (8003744 <handle_requestServerConnection+0x950>)
 80036f6:	f002 f8da 	bl	80058ae <string_containsWithinLength>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <handle_requestServerConnection+0x916>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_pwd);
 8003700:	2118      	movs	r1, #24
 8003702:	480c      	ldr	r0, [pc, #48]	; (8003734 <handle_requestServerConnection+0x940>)
 8003704:	f7fe fa58 	bl	8001bb8 <fsmManager_gotoState>
 8003708:	e009      	b.n	800371e <handle_requestServerConnection+0x92a>
			}
			else if(softTimer_expired(&timeout)) {
 800370a:	480b      	ldr	r0, [pc, #44]	; (8003738 <handle_requestServerConnection+0x944>)
 800370c:	f001 fa46 	bl	8004b9c <softTimer_expired>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <handle_requestServerConnection+0x92a>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_user);
 8003716:	2116      	movs	r1, #22
 8003718:	4806      	ldr	r0, [pc, #24]	; (8003734 <handle_requestServerConnection+0x940>)
 800371a:	f7fe fa4d 	bl	8001bb8 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800371e:	4805      	ldr	r0, [pc, #20]	; (8003734 <handle_requestServerConnection+0x940>)
 8003720:	f7fe fa77 	bl	8001c12 <fsmManager_isStateOut>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8261 	beq.w	8003bee <handle_requestServerConnection+0xdfa>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800372c:	4801      	ldr	r0, [pc, #4]	; (8003734 <handle_requestServerConnection+0x940>)
 800372e:	f7fe fa8a 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003732:	e25c      	b.n	8003bee <handle_requestServerConnection+0xdfa>
 8003734:	20000518 	.word	0x20000518
 8003738:	200004d0 	.word	0x200004d0
 800373c:	200003ec 	.word	0x200003ec
 8003740:	08009d6c 	.word	0x08009d6c
 8003744:	2000031c 	.word	0x2000031c
 8003748:	20000614 	.word	0x20000614
 800374c:	08009d78 	.word	0x08009d78
 8003750:	08009d80 	.word	0x08009d80
 8003754:	08009e80 	.word	0x08009e80
 8003758:	08009fc0 	.word	0x08009fc0
 800375c:	08009ea0 	.word	0x08009ea0
 8003760:	08009ecc 	.word	0x08009ecc



		case __gsmModule_requestServerConnection_send_atSapbr3_pwd:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003764:	48b1      	ldr	r0, [pc, #708]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003766:	f7fe fa49 	bl	8001bfc <fsmManager_isStateIn>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <handle_requestServerConnection+0x98c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003770:	48ae      	ldr	r0, [pc, #696]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003772:	f7fe fa59 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003776:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800377a:	48ad      	ldr	r0, [pc, #692]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 800377c:	f001 f9fa 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003780:	48ab      	ldr	r0, [pc, #684]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 8003782:	f001 fa0b 	bl	8004b9c <softTimer_expired>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <handle_requestServerConnection+0x9ae>
				if(gsmModule_operator == __gsmModule_operator_personal) {
 800378c:	4ba9      	ldr	r3, [pc, #676]	; (8003a34 <handle_requestServerConnection+0xc40>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d106      	bne.n	80037a2 <handle_requestServerConnection+0x9ae>
					pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3pwdPersonal);
 8003794:	48a8      	ldr	r0, [pc, #672]	; (8003a38 <handle_requestServerConnection+0xc44>)
 8003796:	f000 fd7b 	bl	8004290 <pinGsmUartTx_transmit>
					fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_pwd);
 800379a:	2119      	movs	r1, #25
 800379c:	48a3      	ldr	r0, [pc, #652]	; (8003a2c <handle_requestServerConnection+0xc38>)
 800379e:	f7fe fa0b 	bl	8001bb8 <fsmManager_gotoState>
				}
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80037a2:	48a2      	ldr	r0, [pc, #648]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80037a4:	f7fe fa35 	bl	8001c12 <fsmManager_isStateOut>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8221 	beq.w	8003bf2 <handle_requestServerConnection+0xdfe>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80037b0:	489e      	ldr	r0, [pc, #632]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80037b2:	f7fe fa48 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80037b6:	e21c      	b.n	8003bf2 <handle_requestServerConnection+0xdfe>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_pwd:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80037b8:	489c      	ldr	r0, [pc, #624]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80037ba:	f7fe fa1f 	bl	8001bfc <fsmManager_isStateIn>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <handle_requestServerConnection+0x9e0>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80037c4:	4899      	ldr	r0, [pc, #612]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80037c6:	f7fe fa2f 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 3*1000);
 80037ca:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80037ce:	4898      	ldr	r0, [pc, #608]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 80037d0:	f001 f9d0 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80037d4:	4b99      	ldr	r3, [pc, #612]	; (8003a3c <handle_requestServerConnection+0xc48>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4999      	ldr	r1, [pc, #612]	; (8003a40 <handle_requestServerConnection+0xc4c>)
 80037dc:	4899      	ldr	r0, [pc, #612]	; (8003a44 <handle_requestServerConnection+0xc50>)
 80037de:	f002 f866 	bl	80058ae <string_containsWithinLength>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <handle_requestServerConnection+0x9fe>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr1);
 80037e8:	211a      	movs	r1, #26
 80037ea:	4890      	ldr	r0, [pc, #576]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80037ec:	f7fe f9e4 	bl	8001bb8 <fsmManager_gotoState>
 80037f0:	e009      	b.n	8003806 <handle_requestServerConnection+0xa12>
			}
			else if(softTimer_expired(&timeout)) {
 80037f2:	488f      	ldr	r0, [pc, #572]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 80037f4:	f001 f9d2 	bl	8004b9c <softTimer_expired>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <handle_requestServerConnection+0xa12>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_pwd);
 80037fe:	2118      	movs	r1, #24
 8003800:	488a      	ldr	r0, [pc, #552]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003802:	f7fe f9d9 	bl	8001bb8 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003806:	4889      	ldr	r0, [pc, #548]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003808:	f7fe fa03 	bl	8001c12 <fsmManager_isStateOut>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 81f1 	beq.w	8003bf6 <handle_requestServerConnection+0xe02>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003814:	4885      	ldr	r0, [pc, #532]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003816:	f7fe fa16 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 800381a:	e1ec      	b.n	8003bf6 <handle_requestServerConnection+0xe02>



		case __gsmModule_requestServerConnection_send_atSapbr1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800381c:	4883      	ldr	r0, [pc, #524]	; (8003a2c <handle_requestServerConnection+0xc38>)
 800381e:	f7fe f9ed 	bl	8001bfc <fsmManager_isStateIn>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <handle_requestServerConnection+0xa44>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003828:	4880      	ldr	r0, [pc, #512]	; (8003a2c <handle_requestServerConnection+0xc38>)
 800382a:	f7fe f9fd 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 800382e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003832:	487f      	ldr	r0, [pc, #508]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 8003834:	f001 f99e 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003838:	487d      	ldr	r0, [pc, #500]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 800383a:	f001 f9af 	bl	8004b9c <softTimer_expired>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d006      	beq.n	8003852 <handle_requestServerConnection+0xa5e>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr1);
 8003844:	4880      	ldr	r0, [pc, #512]	; (8003a48 <handle_requestServerConnection+0xc54>)
 8003846:	f000 fd23 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr1);
 800384a:	211b      	movs	r1, #27
 800384c:	4877      	ldr	r0, [pc, #476]	; (8003a2c <handle_requestServerConnection+0xc38>)
 800384e:	f7fe f9b3 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003852:	4876      	ldr	r0, [pc, #472]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003854:	f7fe f9dd 	bl	8001c12 <fsmManager_isStateOut>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 81cd 	beq.w	8003bfa <handle_requestServerConnection+0xe06>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003860:	4872      	ldr	r0, [pc, #456]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003862:	f7fe f9f0 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003866:	e1c8      	b.n	8003bfa <handle_requestServerConnection+0xe06>



		case __gsmModule_requestServerConnection_waitOk_atSapbr1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003868:	4870      	ldr	r0, [pc, #448]	; (8003a2c <handle_requestServerConnection+0xc38>)
 800386a:	f7fe f9c7 	bl	8001bfc <fsmManager_isStateIn>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <handle_requestServerConnection+0xa90>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003874:	486d      	ldr	r0, [pc, #436]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003876:	f7fe f9d7 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 20*1000);
 800387a:	f644 6120 	movw	r1, #20000	; 0x4e20
 800387e:	486c      	ldr	r0, [pc, #432]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 8003880:	f001 f978 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003884:	4b6d      	ldr	r3, [pc, #436]	; (8003a3c <handle_requestServerConnection+0xc48>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	496d      	ldr	r1, [pc, #436]	; (8003a40 <handle_requestServerConnection+0xc4c>)
 800388c:	486d      	ldr	r0, [pc, #436]	; (8003a44 <handle_requestServerConnection+0xc50>)
 800388e:	f002 f80e 	bl	80058ae <string_containsWithinLength>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <handle_requestServerConnection+0xaae>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr2);
 8003898:	211c      	movs	r1, #28
 800389a:	4864      	ldr	r0, [pc, #400]	; (8003a2c <handle_requestServerConnection+0xc38>)
 800389c:	f7fe f98c 	bl	8001bb8 <fsmManager_gotoState>
 80038a0:	e009      	b.n	80038b6 <handle_requestServerConnection+0xac2>
			}
			else if(softTimer_expired(&timeout)) {
 80038a2:	4863      	ldr	r0, [pc, #396]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 80038a4:	f001 f97a 	bl	8004b9c <softTimer_expired>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <handle_requestServerConnection+0xac2>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr1);
 80038ae:	211a      	movs	r1, #26
 80038b0:	485e      	ldr	r0, [pc, #376]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80038b2:	f7fe f981 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80038b6:	485d      	ldr	r0, [pc, #372]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80038b8:	f7fe f9ab 	bl	8001c12 <fsmManager_isStateOut>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 819d 	beq.w	8003bfe <handle_requestServerConnection+0xe0a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80038c4:	4859      	ldr	r0, [pc, #356]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80038c6:	f7fe f9be 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80038ca:	e198      	b.n	8003bfe <handle_requestServerConnection+0xe0a>



		case __gsmModule_requestServerConnection_send_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80038cc:	4857      	ldr	r0, [pc, #348]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80038ce:	f7fe f995 	bl	8001bfc <fsmManager_isStateIn>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <handle_requestServerConnection+0xaf4>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80038d8:	4854      	ldr	r0, [pc, #336]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80038da:	f7fe f9a5 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 80038de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80038e2:	4853      	ldr	r0, [pc, #332]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 80038e4:	f001 f946 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80038e8:	4851      	ldr	r0, [pc, #324]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 80038ea:	f001 f957 	bl	8004b9c <softTimer_expired>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d006      	beq.n	8003902 <handle_requestServerConnection+0xb0e>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr2);
 80038f4:	4855      	ldr	r0, [pc, #340]	; (8003a4c <handle_requestServerConnection+0xc58>)
 80038f6:	f000 fccb 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atSapbr2);
 80038fa:	211d      	movs	r1, #29
 80038fc:	484b      	ldr	r0, [pc, #300]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80038fe:	f7fe f95b 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003902:	484a      	ldr	r0, [pc, #296]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003904:	f7fe f985 	bl	8001c12 <fsmManager_isStateOut>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8179 	beq.w	8003c02 <handle_requestServerConnection+0xe0e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003910:	4846      	ldr	r0, [pc, #280]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003912:	f7fe f998 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003916:	e174      	b.n	8003c02 <handle_requestServerConnection+0xe0e>



		case __gsmModule_requestServerConnection_check_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003918:	4844      	ldr	r0, [pc, #272]	; (8003a2c <handle_requestServerConnection+0xc38>)
 800391a:	f7fe f96f 	bl	8001bfc <fsmManager_isStateIn>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <handle_requestServerConnection+0xb40>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003924:	4841      	ldr	r0, [pc, #260]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003926:	f7fe f97f 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 800392a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800392e:	4840      	ldr	r0, [pc, #256]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 8003930:	f001 f920 	bl	8004b74 <softTimer_start>
			}

			if(!string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "0.0.0.0", gsmRxDataChunkLen)) {
 8003934:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <handle_requestServerConnection+0xc48>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	4945      	ldr	r1, [pc, #276]	; (8003a50 <handle_requestServerConnection+0xc5c>)
 800393c:	4841      	ldr	r0, [pc, #260]	; (8003a44 <handle_requestServerConnection+0xc50>)
 800393e:	f001 ffb6 	bl	80058ae <string_containsWithinLength>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <handle_requestServerConnection+0xb5e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttpinit);
 8003948:	211e      	movs	r1, #30
 800394a:	4838      	ldr	r0, [pc, #224]	; (8003a2c <handle_requestServerConnection+0xc38>)
 800394c:	f7fe f934 	bl	8001bb8 <fsmManager_gotoState>
 8003950:	e009      	b.n	8003966 <handle_requestServerConnection+0xb72>
			}
			else if(softTimer_expired(&timeout)) {
 8003952:	4837      	ldr	r0, [pc, #220]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 8003954:	f001 f922 	bl	8004b9c <softTimer_expired>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <handle_requestServerConnection+0xb72>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr2);
 800395e:	211c      	movs	r1, #28
 8003960:	4832      	ldr	r0, [pc, #200]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003962:	f7fe f929 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003966:	4831      	ldr	r0, [pc, #196]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003968:	f7fe f953 	bl	8001c12 <fsmManager_isStateOut>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8149 	beq.w	8003c06 <handle_requestServerConnection+0xe12>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003974:	482d      	ldr	r0, [pc, #180]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003976:	f7fe f966 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 800397a:	e144      	b.n	8003c06 <handle_requestServerConnection+0xe12>



		case __gsmModule_requestServerConnection_send_atHttpinit:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800397c:	482b      	ldr	r0, [pc, #172]	; (8003a2c <handle_requestServerConnection+0xc38>)
 800397e:	f7fe f93d 	bl	8001bfc <fsmManager_isStateIn>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <handle_requestServerConnection+0xba4>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003988:	4828      	ldr	r0, [pc, #160]	; (8003a2c <handle_requestServerConnection+0xc38>)
 800398a:	f7fe f94d 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 800398e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003992:	4827      	ldr	r0, [pc, #156]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 8003994:	f001 f8ee 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003998:	4825      	ldr	r0, [pc, #148]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 800399a:	f001 f8ff 	bl	8004b9c <softTimer_expired>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <handle_requestServerConnection+0xbbe>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpinit);
 80039a4:	482b      	ldr	r0, [pc, #172]	; (8003a54 <handle_requestServerConnection+0xc60>)
 80039a6:	f000 fc73 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atHttpinit);
 80039aa:	211f      	movs	r1, #31
 80039ac:	481f      	ldr	r0, [pc, #124]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80039ae:	f7fe f903 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80039b2:	481e      	ldr	r0, [pc, #120]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80039b4:	f7fe f92d 	bl	8001c12 <fsmManager_isStateOut>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8125 	beq.w	8003c0a <handle_requestServerConnection+0xe16>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80039c0:	481a      	ldr	r0, [pc, #104]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80039c2:	f7fe f940 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80039c6:	e120      	b.n	8003c0a <handle_requestServerConnection+0xe16>



		case __gsmModule_requestServerConnection_waitOk_atHttpinit:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80039c8:	4818      	ldr	r0, [pc, #96]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80039ca:	f7fe f917 	bl	8001bfc <fsmManager_isStateIn>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d006      	beq.n	80039e2 <handle_requestServerConnection+0xbee>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80039d4:	4815      	ldr	r0, [pc, #84]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80039d6:	f7fe f927 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80039da:	2164      	movs	r1, #100	; 0x64
 80039dc:	4814      	ldr	r0, [pc, #80]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 80039de:	f001 f8c9 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80039e2:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <handle_requestServerConnection+0xc48>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	4915      	ldr	r1, [pc, #84]	; (8003a40 <handle_requestServerConnection+0xc4c>)
 80039ea:	4816      	ldr	r0, [pc, #88]	; (8003a44 <handle_requestServerConnection+0xc50>)
 80039ec:	f001 ff5f 	bl	80058ae <string_containsWithinLength>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d004      	beq.n	8003a00 <handle_requestServerConnection+0xc0c>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttppara_cid);
 80039f6:	2120      	movs	r1, #32
 80039f8:	480c      	ldr	r0, [pc, #48]	; (8003a2c <handle_requestServerConnection+0xc38>)
 80039fa:	f7fe f8dd 	bl	8001bb8 <fsmManager_gotoState>
 80039fe:	e009      	b.n	8003a14 <handle_requestServerConnection+0xc20>
			}
			else if(softTimer_expired(&timeout)) {
 8003a00:	480b      	ldr	r0, [pc, #44]	; (8003a30 <handle_requestServerConnection+0xc3c>)
 8003a02:	f001 f8cb 	bl	8004b9c <softTimer_expired>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <handle_requestServerConnection+0xc20>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttpinit);
 8003a0c:	211e      	movs	r1, #30
 8003a0e:	4807      	ldr	r0, [pc, #28]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003a10:	f7fe f8d2 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003a14:	4805      	ldr	r0, [pc, #20]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003a16:	f7fe f8fc 	bl	8001c12 <fsmManager_isStateOut>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80f6 	beq.w	8003c0e <handle_requestServerConnection+0xe1a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003a22:	4802      	ldr	r0, [pc, #8]	; (8003a2c <handle_requestServerConnection+0xc38>)
 8003a24:	f7fe f90f 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003a28:	e0f1      	b.n	8003c0e <handle_requestServerConnection+0xe1a>
 8003a2a:	bf00      	nop
 8003a2c:	20000518 	.word	0x20000518
 8003a30:	200004d0 	.word	0x200004d0
 8003a34:	20000614 	.word	0x20000614
 8003a38:	08009eec 	.word	0x08009eec
 8003a3c:	200003ec 	.word	0x200003ec
 8003a40:	08009fc0 	.word	0x08009fc0
 8003a44:	2000031c 	.word	0x2000031c
 8003a48:	08009f08 	.word	0x08009f08
 8003a4c:	08009f18 	.word	0x08009f18
 8003a50:	08009d8c 	.word	0x08009d8c
 8003a54:	08009f34 	.word	0x08009f34



		case __gsmModule_requestServerConnection_send_atHttppara_cid:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003a58:	4872      	ldr	r0, [pc, #456]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003a5a:	f7fe f8cf 	bl	8001bfc <fsmManager_isStateIn>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <handle_requestServerConnection+0xc80>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003a64:	486f      	ldr	r0, [pc, #444]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003a66:	f7fe f8df 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1*1000);
 8003a6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a6e:	486e      	ldr	r0, [pc, #440]	; (8003c28 <handle_requestServerConnection+0xe34>)
 8003a70:	f001 f880 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003a74:	486c      	ldr	r0, [pc, #432]	; (8003c28 <handle_requestServerConnection+0xe34>)
 8003a76:	f001 f891 	bl	8004b9c <softTimer_expired>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d006      	beq.n	8003a8e <handle_requestServerConnection+0xc9a>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httppara_cid);
 8003a80:	486a      	ldr	r0, [pc, #424]	; (8003c2c <handle_requestServerConnection+0xe38>)
 8003a82:	f000 fc05 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atHttppara_cid);
 8003a86:	2121      	movs	r1, #33	; 0x21
 8003a88:	4866      	ldr	r0, [pc, #408]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003a8a:	f7fe f895 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003a8e:	4865      	ldr	r0, [pc, #404]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003a90:	f7fe f8bf 	bl	8001c12 <fsmManager_isStateOut>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80bb 	beq.w	8003c12 <handle_requestServerConnection+0xe1e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003a9c:	4861      	ldr	r0, [pc, #388]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003a9e:	f7fe f8d2 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003aa2:	e0b6      	b.n	8003c12 <handle_requestServerConnection+0xe1e>



		case __gsmModule_requestServerConnection_waitOk_atHttppara_cid:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003aa4:	485f      	ldr	r0, [pc, #380]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003aa6:	f7fe f8a9 	bl	8001bfc <fsmManager_isStateIn>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <handle_requestServerConnection+0xccc>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003ab0:	485c      	ldr	r0, [pc, #368]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003ab2:	f7fe f8b9 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003ab6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003aba:	485b      	ldr	r0, [pc, #364]	; (8003c28 <handle_requestServerConnection+0xe34>)
 8003abc:	f001 f85a 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003ac0:	4b5b      	ldr	r3, [pc, #364]	; (8003c30 <handle_requestServerConnection+0xe3c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	495b      	ldr	r1, [pc, #364]	; (8003c34 <handle_requestServerConnection+0xe40>)
 8003ac8:	485b      	ldr	r0, [pc, #364]	; (8003c38 <handle_requestServerConnection+0xe44>)
 8003aca:	f001 fef0 	bl	80058ae <string_containsWithinLength>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <handle_requestServerConnection+0xcfe>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4853      	ldr	r0, [pc, #332]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003ad8:	f7fe f86e 	bl	8001bb8 <fsmManager_gotoState>

				flags_gsmModule.bits.isServerConnected = 1;
 8003adc:	4a57      	ldr	r2, [pc, #348]	; (8003c3c <handle_requestServerConnection+0xe48>)
 8003ade:	7853      	ldrb	r3, [r2, #1]
 8003ae0:	f043 0320 	orr.w	r3, r3, #32
 8003ae4:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerConnection = 0;
 8003ae6:	4a55      	ldr	r2, [pc, #340]	; (8003c3c <handle_requestServerConnection+0xe48>)
 8003ae8:	7813      	ldrb	r3, [r2, #0]
 8003aea:	f36f 1345 	bfc	r3, #5, #1
 8003aee:	7013      	strb	r3, [r2, #0]
 8003af0:	e009      	b.n	8003b06 <handle_requestServerConnection+0xd12>
			}
			else if(softTimer_expired(&timeout)) {
 8003af2:	484d      	ldr	r0, [pc, #308]	; (8003c28 <handle_requestServerConnection+0xe34>)
 8003af4:	f001 f852 	bl	8004b9c <softTimer_expired>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <handle_requestServerConnection+0xd12>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttppara_cid);
 8003afe:	2120      	movs	r1, #32
 8003b00:	4848      	ldr	r0, [pc, #288]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b02:	f7fe f859 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003b06:	4847      	ldr	r0, [pc, #284]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b08:	f7fe f883 	bl	8001c12 <fsmManager_isStateOut>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8081 	beq.w	8003c16 <handle_requestServerConnection+0xe22>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003b14:	4843      	ldr	r0, [pc, #268]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b16:	f7fe f896 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003b1a:	e07c      	b.n	8003c16 <handle_requestServerConnection+0xe22>



		case __gsmModule_requestServerConnection_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003b1c:	4841      	ldr	r0, [pc, #260]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b1e:	f7fe f86d 	bl	8001bfc <fsmManager_isStateIn>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <handle_requestServerConnection+0xd3a>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003b28:	483e      	ldr	r0, [pc, #248]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b2a:	f7fe f87d 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverConnection = 1;
 8003b2e:	4a44      	ldr	r2, [pc, #272]	; (8003c40 <handle_requestServerConnection+0xe4c>)
 8003b30:	7813      	ldrb	r3, [r2, #0]
 8003b32:	f043 0320 	orr.w	r3, r3, #32
 8003b36:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerConnection = 0;
 8003b38:	4a40      	ldr	r2, [pc, #256]	; (8003c3c <handle_requestServerConnection+0xe48>)
 8003b3a:	7813      	ldrb	r3, [r2, #0]
 8003b3c:	f36f 1345 	bfc	r3, #5, #1
 8003b40:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 8003b42:	2100      	movs	r1, #0
 8003b44:	4837      	ldr	r0, [pc, #220]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b46:	f7fe f837 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003b4a:	4836      	ldr	r0, [pc, #216]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b4c:	f7fe f861 	bl	8001c12 <fsmManager_isStateOut>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d061      	beq.n	8003c1a <handle_requestServerConnection+0xe26>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003b56:	4833      	ldr	r0, [pc, #204]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b58:	f7fe f875 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003b5c:	e05d      	b.n	8003c1a <handle_requestServerConnection+0xe26>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003b5e:	4831      	ldr	r0, [pc, #196]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b60:	f7fe f84c 	bl	8001bfc <fsmManager_isStateIn>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <handle_requestServerConnection+0xd7c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003b6a:	482e      	ldr	r0, [pc, #184]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b6c:	f7fe f85c 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestServerConnection = 0;
 8003b70:	4a32      	ldr	r2, [pc, #200]	; (8003c3c <handle_requestServerConnection+0xe48>)
 8003b72:	7813      	ldrb	r3, [r2, #0]
 8003b74:	f36f 1345 	bfc	r3, #5, #1
 8003b78:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4829      	ldr	r0, [pc, #164]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b7e:	f7fe f81b 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003b82:	4828      	ldr	r0, [pc, #160]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b84:	f7fe f845 	bl	8001c12 <fsmManager_isStateOut>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d047      	beq.n	8003c1e <handle_requestServerConnection+0xe2a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003b8e:	4825      	ldr	r0, [pc, #148]	; (8003c24 <handle_requestServerConnection+0xe30>)
 8003b90:	f7fe f859 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003b94:	e043      	b.n	8003c1e <handle_requestServerConnection+0xe2a>
			break;
 8003b96:	bf00      	nop
 8003b98:	e042      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003b9a:	bf00      	nop
 8003b9c:	e040      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003b9e:	bf00      	nop
 8003ba0:	e03e      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003ba2:	bf00      	nop
 8003ba4:	e03c      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003ba6:	bf00      	nop
 8003ba8:	e03a      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003baa:	bf00      	nop
 8003bac:	e038      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bae:	bf00      	nop
 8003bb0:	e036      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bb2:	bf00      	nop
 8003bb4:	e034      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bb6:	bf00      	nop
 8003bb8:	e032      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bba:	bf00      	nop
 8003bbc:	e030      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bbe:	bf00      	nop
 8003bc0:	e02e      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bc2:	bf00      	nop
 8003bc4:	e02c      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bc6:	bf00      	nop
 8003bc8:	e02a      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bca:	bf00      	nop
 8003bcc:	e028      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bce:	bf00      	nop
 8003bd0:	e026      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bd2:	bf00      	nop
 8003bd4:	e024      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bd6:	bf00      	nop
 8003bd8:	e022      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bda:	bf00      	nop
 8003bdc:	e020      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bde:	bf00      	nop
 8003be0:	e01e      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003be2:	bf00      	nop
 8003be4:	e01c      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003be6:	bf00      	nop
 8003be8:	e01a      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bea:	bf00      	nop
 8003bec:	e018      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bee:	bf00      	nop
 8003bf0:	e016      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bf2:	bf00      	nop
 8003bf4:	e014      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bf6:	bf00      	nop
 8003bf8:	e012      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bfa:	bf00      	nop
 8003bfc:	e010      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003bfe:	bf00      	nop
 8003c00:	e00e      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003c02:	bf00      	nop
 8003c04:	e00c      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003c06:	bf00      	nop
 8003c08:	e00a      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003c0a:	bf00      	nop
 8003c0c:	e008      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003c0e:	bf00      	nop
 8003c10:	e006      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003c12:	bf00      	nop
 8003c14:	e004      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003c16:	bf00      	nop
 8003c18:	e002      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003c1a:	bf00      	nop
 8003c1c:	e000      	b.n	8003c20 <handle_requestServerConnection+0xe2c>
			break;
 8003c1e:	bf00      	nop
	}
}
 8003c20:	bf00      	nop
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000518 	.word	0x20000518
 8003c28:	200004d0 	.word	0x200004d0
 8003c2c:	08009f44 	.word	0x08009f44
 8003c30:	200003ec 	.word	0x200003ec
 8003c34:	08009fc0 	.word	0x08009fc0
 8003c38:	2000031c 	.word	0x2000031c
 8003c3c:	200004b8 	.word	0x200004b8
 8003c40:	200004bc 	.word	0x200004bc

08003c44 <handle_requestServerDataSend>:

static void handle_requestServerDataSend(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerDataSend_state)) {
 8003c48:	489d      	ldr	r0, [pc, #628]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003c4a:	f7fd ffcc 	bl	8001be6 <fsmManager_getState>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b05      	cmp	r3, #5
 8003c52:	f200 810f 	bhi.w	8003e74 <handle_requestServerDataSend+0x230>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <handle_requestServerDataSend+0x18>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003c75 	.word	0x08003c75
 8003c60:	08003ca5 	.word	0x08003ca5
 8003c64:	08003cf1 	.word	0x08003cf1
 8003c68:	08003d55 	.word	0x08003d55
 8003c6c:	08003da1 	.word	0x08003da1
 8003c70:	08003e33 	.word	0x08003e33
		case __gsmModule_requestServerDataSend_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003c74:	4892      	ldr	r0, [pc, #584]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003c76:	f7fd ffc1 	bl	8001bfc <fsmManager_isStateIn>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <handle_requestServerDataSend+0x42>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003c80:	488f      	ldr	r0, [pc, #572]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003c82:	f7fd ffd1 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_send_atHttppara_url);
 8003c86:	2101      	movs	r1, #1
 8003c88:	488d      	ldr	r0, [pc, #564]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003c8a:	f7fd ff95 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003c8e:	488c      	ldr	r0, [pc, #560]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003c90:	f7fd ffbf 	bl	8001c12 <fsmManager_isStateOut>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8103 	beq.w	8003ea2 <handle_requestServerDataSend+0x25e>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003c9c:	4888      	ldr	r0, [pc, #544]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003c9e:	f7fd ffd2 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003ca2:	e0fe      	b.n	8003ea2 <handle_requestServerDataSend+0x25e>

		case __gsmModule_requestServerDataSend_send_atHttppara_url:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003ca4:	4886      	ldr	r0, [pc, #536]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003ca6:	f7fd ffa9 	bl	8001bfc <fsmManager_isStateIn>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <handle_requestServerDataSend+0x7c>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003cb0:	4883      	ldr	r0, [pc, #524]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003cb2:	f7fd ffb9 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 3*1000);
 8003cb6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003cba:	4882      	ldr	r0, [pc, #520]	; (8003ec4 <handle_requestServerDataSend+0x280>)
 8003cbc:	f000 ff5a 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003cc0:	4880      	ldr	r0, [pc, #512]	; (8003ec4 <handle_requestServerDataSend+0x280>)
 8003cc2:	f000 ff6b 	bl	8004b9c <softTimer_expired>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d006      	beq.n	8003cda <handle_requestServerDataSend+0x96>
				pinGsmUartTx_transmit((uint8_t *) dataToSend);
 8003ccc:	487e      	ldr	r0, [pc, #504]	; (8003ec8 <handle_requestServerDataSend+0x284>)
 8003cce:	f000 fadf 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_waitOk_atHttppara_url);
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	487a      	ldr	r0, [pc, #488]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003cd6:	f7fd ff6f 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003cda:	4879      	ldr	r0, [pc, #484]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003cdc:	f7fd ff99 	bl	8001c12 <fsmManager_isStateOut>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80df 	beq.w	8003ea6 <handle_requestServerDataSend+0x262>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003ce8:	4875      	ldr	r0, [pc, #468]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003cea:	f7fd ffac 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003cee:	e0da      	b.n	8003ea6 <handle_requestServerDataSend+0x262>

		case __gsmModule_requestServerDataSend_waitOk_atHttppara_url:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003cf0:	4873      	ldr	r0, [pc, #460]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003cf2:	f7fd ff83 	bl	8001bfc <fsmManager_isStateIn>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <handle_requestServerDataSend+0xc8>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003cfc:	4870      	ldr	r0, [pc, #448]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003cfe:	f7fd ff93 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 5*1000);
 8003d02:	f241 3188 	movw	r1, #5000	; 0x1388
 8003d06:	486f      	ldr	r0, [pc, #444]	; (8003ec4 <handle_requestServerDataSend+0x280>)
 8003d08:	f000 ff34 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003d0c:	4b6f      	ldr	r3, [pc, #444]	; (8003ecc <handle_requestServerDataSend+0x288>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	496f      	ldr	r1, [pc, #444]	; (8003ed0 <handle_requestServerDataSend+0x28c>)
 8003d14:	486f      	ldr	r0, [pc, #444]	; (8003ed4 <handle_requestServerDataSend+0x290>)
 8003d16:	f001 fdca 	bl	80058ae <string_containsWithinLength>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <handle_requestServerDataSend+0xe6>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_send_atHttpaction1);
 8003d20:	2103      	movs	r1, #3
 8003d22:	4867      	ldr	r0, [pc, #412]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003d24:	f7fd ff48 	bl	8001bb8 <fsmManager_gotoState>
 8003d28:	e009      	b.n	8003d3e <handle_requestServerDataSend+0xfa>
			}
			else if(softTimer_expired(&timeout)) {
 8003d2a:	4866      	ldr	r0, [pc, #408]	; (8003ec4 <handle_requestServerDataSend+0x280>)
 8003d2c:	f000 ff36 	bl	8004b9c <softTimer_expired>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <handle_requestServerDataSend+0xfa>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_send_atHttppara_url);
 8003d36:	2101      	movs	r1, #1
 8003d38:	4861      	ldr	r0, [pc, #388]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003d3a:	f7fd ff3d 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003d3e:	4860      	ldr	r0, [pc, #384]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003d40:	f7fd ff67 	bl	8001c12 <fsmManager_isStateOut>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80af 	beq.w	8003eaa <handle_requestServerDataSend+0x266>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003d4c:	485c      	ldr	r0, [pc, #368]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003d4e:	f7fd ff7a 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003d52:	e0aa      	b.n	8003eaa <handle_requestServerDataSend+0x266>

		case __gsmModule_requestServerDataSend_send_atHttpaction1:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003d54:	485a      	ldr	r0, [pc, #360]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003d56:	f7fd ff51 	bl	8001bfc <fsmManager_isStateIn>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <handle_requestServerDataSend+0x12c>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003d60:	4857      	ldr	r0, [pc, #348]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003d62:	f7fd ff61 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 3*1000);
 8003d66:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003d6a:	4856      	ldr	r0, [pc, #344]	; (8003ec4 <handle_requestServerDataSend+0x280>)
 8003d6c:	f000 ff02 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003d70:	4854      	ldr	r0, [pc, #336]	; (8003ec4 <handle_requestServerDataSend+0x280>)
 8003d72:	f000 ff13 	bl	8004b9c <softTimer_expired>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d006      	beq.n	8003d8a <handle_requestServerDataSend+0x146>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpaction1);
 8003d7c:	4856      	ldr	r0, [pc, #344]	; (8003ed8 <handle_requestServerDataSend+0x294>)
 8003d7e:	f000 fa87 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_waitOk_atHttpaction1);
 8003d82:	2104      	movs	r1, #4
 8003d84:	484e      	ldr	r0, [pc, #312]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003d86:	f7fd ff17 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003d8a:	484d      	ldr	r0, [pc, #308]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003d8c:	f7fd ff41 	bl	8001c12 <fsmManager_isStateOut>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 808b 	beq.w	8003eae <handle_requestServerDataSend+0x26a>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003d98:	4849      	ldr	r0, [pc, #292]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003d9a:	f7fd ff54 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003d9e:	e086      	b.n	8003eae <handle_requestServerDataSend+0x26a>

		case __gsmModule_requestServerDataSend_waitOk_atHttpaction1:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003da0:	4847      	ldr	r0, [pc, #284]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003da2:	f7fd ff2b 	bl	8001bfc <fsmManager_isStateIn>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d006      	beq.n	8003dba <handle_requestServerDataSend+0x176>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003dac:	4844      	ldr	r0, [pc, #272]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003dae:	f7fd ff3b 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 120*1000);
 8003db2:	494a      	ldr	r1, [pc, #296]	; (8003edc <handle_requestServerDataSend+0x298>)
 8003db4:	4843      	ldr	r0, [pc, #268]	; (8003ec4 <handle_requestServerDataSend+0x280>)
 8003db6:	f000 fedd 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_httpaction1_200, gsmRxDataChunkLen)) {
 8003dba:	4b44      	ldr	r3, [pc, #272]	; (8003ecc <handle_requestServerDataSend+0x288>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4947      	ldr	r1, [pc, #284]	; (8003ee0 <handle_requestServerDataSend+0x29c>)
 8003dc2:	4844      	ldr	r0, [pc, #272]	; (8003ed4 <handle_requestServerDataSend+0x290>)
 8003dc4:	f001 fd73 	bl	80058ae <string_containsWithinLength>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00e      	beq.n	8003dec <handle_requestServerDataSend+0x1a8>
				flags_gsmModule.bits.isServerDataSent = 1;
 8003dce:	4a45      	ldr	r2, [pc, #276]	; (8003ee4 <handle_requestServerDataSend+0x2a0>)
 8003dd0:	7853      	ldrb	r3, [r2, #1]
 8003dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dd6:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerDataSend = 0;
 8003dd8:	4a42      	ldr	r2, [pc, #264]	; (8003ee4 <handle_requestServerDataSend+0x2a0>)
 8003dda:	7813      	ldrb	r3, [r2, #0]
 8003ddc:	f36f 1386 	bfc	r3, #6, #1
 8003de0:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 8003de2:	2100      	movs	r1, #0
 8003de4:	4836      	ldr	r0, [pc, #216]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003de6:	f7fd fee7 	bl	8001bb8 <fsmManager_gotoState>
 8003dea:	e018      	b.n	8003e1e <handle_requestServerDataSend+0x1da>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_httpaction1_err, gsmRxDataChunkLen)) {
 8003dec:	4b37      	ldr	r3, [pc, #220]	; (8003ecc <handle_requestServerDataSend+0x288>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	493d      	ldr	r1, [pc, #244]	; (8003ee8 <handle_requestServerDataSend+0x2a4>)
 8003df4:	4837      	ldr	r0, [pc, #220]	; (8003ed4 <handle_requestServerDataSend+0x290>)
 8003df6:	f001 fd5a 	bl	80058ae <string_containsWithinLength>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <handle_requestServerDataSend+0x1c6>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_error);
 8003e00:	2105      	movs	r1, #5
 8003e02:	482f      	ldr	r0, [pc, #188]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e04:	f7fd fed8 	bl	8001bb8 <fsmManager_gotoState>
 8003e08:	e009      	b.n	8003e1e <handle_requestServerDataSend+0x1da>
			}
			else if(softTimer_expired(&timeout)) {
 8003e0a:	482e      	ldr	r0, [pc, #184]	; (8003ec4 <handle_requestServerDataSend+0x280>)
 8003e0c:	f000 fec6 	bl	8004b9c <softTimer_expired>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <handle_requestServerDataSend+0x1da>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_waitOk_atHttpaction1);
 8003e16:	2104      	movs	r1, #4
 8003e18:	4829      	ldr	r0, [pc, #164]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e1a:	f7fd fecd 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003e1e:	4828      	ldr	r0, [pc, #160]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e20:	f7fd fef7 	bl	8001c12 <fsmManager_isStateOut>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d043      	beq.n	8003eb2 <handle_requestServerDataSend+0x26e>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003e2a:	4825      	ldr	r0, [pc, #148]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e2c:	f7fd ff0b 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003e30:	e03f      	b.n	8003eb2 <handle_requestServerDataSend+0x26e>

		case __gsmModule_requestServerDataSend_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003e32:	4823      	ldr	r0, [pc, #140]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e34:	f7fd fee2 	bl	8001bfc <fsmManager_isStateIn>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <handle_requestServerDataSend+0x200>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003e3e:	4820      	ldr	r0, [pc, #128]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e40:	f7fd fef2 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverSendData = 1;
 8003e44:	4a29      	ldr	r2, [pc, #164]	; (8003eec <handle_requestServerDataSend+0x2a8>)
 8003e46:	7813      	ldrb	r3, [r2, #0]
 8003e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e4c:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerDataSend = 0;
 8003e4e:	4a25      	ldr	r2, [pc, #148]	; (8003ee4 <handle_requestServerDataSend+0x2a0>)
 8003e50:	7813      	ldrb	r3, [r2, #0]
 8003e52:	f36f 1386 	bfc	r3, #6, #1
 8003e56:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4819      	ldr	r0, [pc, #100]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e5c:	f7fd feac 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003e60:	4817      	ldr	r0, [pc, #92]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e62:	f7fd fed6 	bl	8001c12 <fsmManager_isStateOut>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d024      	beq.n	8003eb6 <handle_requestServerDataSend+0x272>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003e6c:	4814      	ldr	r0, [pc, #80]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e6e:	f7fd feea 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003e72:	e020      	b.n	8003eb6 <handle_requestServerDataSend+0x272>

		default:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003e74:	4812      	ldr	r0, [pc, #72]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e76:	f7fd fec1 	bl	8001bfc <fsmManager_isStateIn>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <handle_requestServerDataSend+0x242>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003e80:	480f      	ldr	r0, [pc, #60]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e82:	f7fd fed1 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 8003e86:	2100      	movs	r1, #0
 8003e88:	480d      	ldr	r0, [pc, #52]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e8a:	f7fd fe95 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003e8e:	480c      	ldr	r0, [pc, #48]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e90:	f7fd febf 	bl	8001c12 <fsmManager_isStateOut>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00f      	beq.n	8003eba <handle_requestServerDataSend+0x276>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003e9a:	4809      	ldr	r0, [pc, #36]	; (8003ec0 <handle_requestServerDataSend+0x27c>)
 8003e9c:	f7fd fed3 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003ea0:	e00b      	b.n	8003eba <handle_requestServerDataSend+0x276>
			break;
 8003ea2:	bf00      	nop
 8003ea4:	e00a      	b.n	8003ebc <handle_requestServerDataSend+0x278>
			break;
 8003ea6:	bf00      	nop
 8003ea8:	e008      	b.n	8003ebc <handle_requestServerDataSend+0x278>
			break;
 8003eaa:	bf00      	nop
 8003eac:	e006      	b.n	8003ebc <handle_requestServerDataSend+0x278>
			break;
 8003eae:	bf00      	nop
 8003eb0:	e004      	b.n	8003ebc <handle_requestServerDataSend+0x278>
			break;
 8003eb2:	bf00      	nop
 8003eb4:	e002      	b.n	8003ebc <handle_requestServerDataSend+0x278>
			break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <handle_requestServerDataSend+0x278>
			break;
 8003eba:	bf00      	nop
	}
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000524 	.word	0x20000524
 8003ec4:	200004d0 	.word	0x200004d0
 8003ec8:	200003f0 	.word	0x200003f0
 8003ecc:	200003ec 	.word	0x200003ec
 8003ed0:	08009fc0 	.word	0x08009fc0
 8003ed4:	2000031c 	.word	0x2000031c
 8003ed8:	08009f8c 	.word	0x08009f8c
 8003edc:	0001d4c0 	.word	0x0001d4c0
 8003ee0:	0800a000 	.word	0x0800a000
 8003ee4:	200004b8 	.word	0x200004b8
 8003ee8:	0800a014 	.word	0x0800a014
 8003eec:	200004bc 	.word	0x200004bc

08003ef0 <handle_requestServerDisconnection>:

static void handle_requestServerDisconnection(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerDisconnection_state)) {
 8003ef4:	48c1      	ldr	r0, [pc, #772]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003ef6:	f7fd fe76 	bl	8001be6 <fsmManager_getState>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b07      	cmp	r3, #7
 8003efe:	f200 815b 	bhi.w	80041b8 <handle_requestServerDisconnection+0x2c8>
 8003f02:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <handle_requestServerDisconnection+0x18>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003f29 	.word	0x08003f29
 8003f0c:	08003f59 	.word	0x08003f59
 8003f10:	08003fa5 	.word	0x08003fa5
 8003f14:	08004007 	.word	0x08004007
 8003f18:	08004053 	.word	0x08004053
 8003f1c:	080040b7 	.word	0x080040b7
 8003f20:	08004103 	.word	0x08004103
 8003f24:	08004177 	.word	0x08004177
		case __gsmModule_requestServerDisconnection_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8003f28:	48b4      	ldr	r0, [pc, #720]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003f2a:	f7fd fe67 	bl	8001bfc <fsmManager_isStateIn>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <handle_requestServerDisconnection+0x4a>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8003f34:	48b1      	ldr	r0, [pc, #708]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003f36:	f7fd fe77 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atHttpterm);
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	48af      	ldr	r0, [pc, #700]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003f3e:	f7fd fe3b 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8003f42:	48ae      	ldr	r0, [pc, #696]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003f44:	f7fd fe65 	bl	8001c12 <fsmManager_isStateOut>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8150 	beq.w	80041f0 <handle_requestServerDisconnection+0x300>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8003f50:	48aa      	ldr	r0, [pc, #680]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003f52:	f7fd fe78 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003f56:	e14b      	b.n	80041f0 <handle_requestServerDisconnection+0x300>



		case __gsmModule_requestServerDisconnection_send_atHttpterm:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8003f58:	48a8      	ldr	r0, [pc, #672]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003f5a:	f7fd fe4f 	bl	8001bfc <fsmManager_isStateIn>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <handle_requestServerDisconnection+0x84>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8003f64:	48a5      	ldr	r0, [pc, #660]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003f66:	f7fd fe5f 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8003f6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f6e:	48a4      	ldr	r0, [pc, #656]	; (8004200 <handle_requestServerDisconnection+0x310>)
 8003f70:	f000 fe00 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003f74:	48a2      	ldr	r0, [pc, #648]	; (8004200 <handle_requestServerDisconnection+0x310>)
 8003f76:	f000 fe11 	bl	8004b9c <softTimer_expired>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d006      	beq.n	8003f8e <handle_requestServerDisconnection+0x9e>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpterm);
 8003f80:	48a0      	ldr	r0, [pc, #640]	; (8004204 <handle_requestServerDisconnection+0x314>)
 8003f82:	f000 f985 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_waitOk_atHttpterm);
 8003f86:	2102      	movs	r1, #2
 8003f88:	489c      	ldr	r0, [pc, #624]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003f8a:	f7fd fe15 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8003f8e:	489b      	ldr	r0, [pc, #620]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003f90:	f7fd fe3f 	bl	8001c12 <fsmManager_isStateOut>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 812c 	beq.w	80041f4 <handle_requestServerDisconnection+0x304>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8003f9c:	4897      	ldr	r0, [pc, #604]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003f9e:	f7fd fe52 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8003fa2:	e127      	b.n	80041f4 <handle_requestServerDisconnection+0x304>



		case __gsmModule_requestServerDisconnection_waitOk_atHttpterm:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8003fa4:	4895      	ldr	r0, [pc, #596]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003fa6:	f7fd fe29 	bl	8001bfc <fsmManager_isStateIn>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d006      	beq.n	8003fbe <handle_requestServerDisconnection+0xce>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8003fb0:	4892      	ldr	r0, [pc, #584]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003fb2:	f7fd fe39 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003fb6:	2164      	movs	r1, #100	; 0x64
 8003fb8:	4891      	ldr	r0, [pc, #580]	; (8004200 <handle_requestServerDisconnection+0x310>)
 8003fba:	f000 fddb 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003fbe:	4b92      	ldr	r3, [pc, #584]	; (8004208 <handle_requestServerDisconnection+0x318>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4991      	ldr	r1, [pc, #580]	; (800420c <handle_requestServerDisconnection+0x31c>)
 8003fc6:	4892      	ldr	r0, [pc, #584]	; (8004210 <handle_requestServerDisconnection+0x320>)
 8003fc8:	f001 fc71 	bl	80058ae <string_containsWithinLength>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d004      	beq.n	8003fdc <handle_requestServerDisconnection+0xec>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr0);
 8003fd2:	2103      	movs	r1, #3
 8003fd4:	4889      	ldr	r0, [pc, #548]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003fd6:	f7fd fdef 	bl	8001bb8 <fsmManager_gotoState>
 8003fda:	e009      	b.n	8003ff0 <handle_requestServerDisconnection+0x100>
			}
			else if(softTimer_expired(&timeout)) {
 8003fdc:	4888      	ldr	r0, [pc, #544]	; (8004200 <handle_requestServerDisconnection+0x310>)
 8003fde:	f000 fddd 	bl	8004b9c <softTimer_expired>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <handle_requestServerDisconnection+0x100>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atHttpterm);
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4884      	ldr	r0, [pc, #528]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003fec:	f7fd fde4 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8003ff0:	4882      	ldr	r0, [pc, #520]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8003ff2:	f7fd fe0e 	bl	8001c12 <fsmManager_isStateOut>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80fd 	beq.w	80041f8 <handle_requestServerDisconnection+0x308>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8003ffe:	487f      	ldr	r0, [pc, #508]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004000:	f7fd fe21 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8004004:	e0f8      	b.n	80041f8 <handle_requestServerDisconnection+0x308>



		case __gsmModule_requestServerDisconnection_send_atSapbr0:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004006:	487d      	ldr	r0, [pc, #500]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004008:	f7fd fdf8 	bl	8001bfc <fsmManager_isStateIn>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <handle_requestServerDisconnection+0x132>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8004012:	487a      	ldr	r0, [pc, #488]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004014:	f7fd fe08 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8004018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800401c:	4878      	ldr	r0, [pc, #480]	; (8004200 <handle_requestServerDisconnection+0x310>)
 800401e:	f000 fda9 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8004022:	4877      	ldr	r0, [pc, #476]	; (8004200 <handle_requestServerDisconnection+0x310>)
 8004024:	f000 fdba 	bl	8004b9c <softTimer_expired>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <handle_requestServerDisconnection+0x14c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr0);
 800402e:	4879      	ldr	r0, [pc, #484]	; (8004214 <handle_requestServerDisconnection+0x324>)
 8004030:	f000 f92e 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_waitOk_atSapbr0);
 8004034:	2104      	movs	r1, #4
 8004036:	4871      	ldr	r0, [pc, #452]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004038:	f7fd fdbe 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 800403c:	486f      	ldr	r0, [pc, #444]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 800403e:	f7fd fde8 	bl	8001c12 <fsmManager_isStateOut>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80f1 	beq.w	800422c <handle_requestServerDisconnection+0x33c>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 800404a:	486c      	ldr	r0, [pc, #432]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 800404c:	f7fd fdfb 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8004050:	e0ec      	b.n	800422c <handle_requestServerDisconnection+0x33c>



		case __gsmModule_requestServerDisconnection_waitOk_atSapbr0:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004052:	486a      	ldr	r0, [pc, #424]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004054:	f7fd fdd2 	bl	8001bfc <fsmManager_isStateIn>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <handle_requestServerDisconnection+0x17e>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 800405e:	4867      	ldr	r0, [pc, #412]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004060:	f7fd fde2 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 65*1000);
 8004064:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8004068:	4865      	ldr	r0, [pc, #404]	; (8004200 <handle_requestServerDisconnection+0x310>)
 800406a:	f000 fd83 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800406e:	4b66      	ldr	r3, [pc, #408]	; (8004208 <handle_requestServerDisconnection+0x318>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	4965      	ldr	r1, [pc, #404]	; (800420c <handle_requestServerDisconnection+0x31c>)
 8004076:	4866      	ldr	r0, [pc, #408]	; (8004210 <handle_requestServerDisconnection+0x320>)
 8004078:	f001 fc19 	bl	80058ae <string_containsWithinLength>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <handle_requestServerDisconnection+0x19c>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr2);
 8004082:	2105      	movs	r1, #5
 8004084:	485d      	ldr	r0, [pc, #372]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004086:	f7fd fd97 	bl	8001bb8 <fsmManager_gotoState>
 800408a:	e009      	b.n	80040a0 <handle_requestServerDisconnection+0x1b0>
			}
			else if(softTimer_expired(&timeout)) {
 800408c:	485c      	ldr	r0, [pc, #368]	; (8004200 <handle_requestServerDisconnection+0x310>)
 800408e:	f000 fd85 	bl	8004b9c <softTimer_expired>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <handle_requestServerDisconnection+0x1b0>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr0);
 8004098:	2103      	movs	r1, #3
 800409a:	4858      	ldr	r0, [pc, #352]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 800409c:	f7fd fd8c 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 80040a0:	4856      	ldr	r0, [pc, #344]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 80040a2:	f7fd fdb6 	bl	8001c12 <fsmManager_isStateOut>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80c1 	beq.w	8004230 <handle_requestServerDisconnection+0x340>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 80040ae:	4853      	ldr	r0, [pc, #332]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 80040b0:	f7fd fdc9 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80040b4:	e0bc      	b.n	8004230 <handle_requestServerDisconnection+0x340>



		case __gsmModule_requestServerDisconnection_send_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 80040b6:	4851      	ldr	r0, [pc, #324]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 80040b8:	f7fd fda0 	bl	8001bfc <fsmManager_isStateIn>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <handle_requestServerDisconnection+0x1e2>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 80040c2:	484e      	ldr	r0, [pc, #312]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 80040c4:	f7fd fdb0 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 80040c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80040cc:	484c      	ldr	r0, [pc, #304]	; (8004200 <handle_requestServerDisconnection+0x310>)
 80040ce:	f000 fd51 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80040d2:	484b      	ldr	r0, [pc, #300]	; (8004200 <handle_requestServerDisconnection+0x310>)
 80040d4:	f000 fd62 	bl	8004b9c <softTimer_expired>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d006      	beq.n	80040ec <handle_requestServerDisconnection+0x1fc>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr2);
 80040de:	484e      	ldr	r0, [pc, #312]	; (8004218 <handle_requestServerDisconnection+0x328>)
 80040e0:	f000 f8d6 	bl	8004290 <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_check_atSapbr2);
 80040e4:	2106      	movs	r1, #6
 80040e6:	4845      	ldr	r0, [pc, #276]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 80040e8:	f7fd fd66 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 80040ec:	4843      	ldr	r0, [pc, #268]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 80040ee:	f7fd fd90 	bl	8001c12 <fsmManager_isStateOut>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 809d 	beq.w	8004234 <handle_requestServerDisconnection+0x344>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 80040fa:	4840      	ldr	r0, [pc, #256]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 80040fc:	f7fd fda3 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8004100:	e098      	b.n	8004234 <handle_requestServerDisconnection+0x344>



		case __gsmModule_requestServerDisconnection_check_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004102:	483e      	ldr	r0, [pc, #248]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004104:	f7fd fd7a 	bl	8001bfc <fsmManager_isStateIn>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d006      	beq.n	800411c <handle_requestServerDisconnection+0x22c>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 800410e:	483b      	ldr	r0, [pc, #236]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004110:	f7fd fd8a 	bl	8001c28 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8004114:	2164      	movs	r1, #100	; 0x64
 8004116:	483a      	ldr	r0, [pc, #232]	; (8004200 <handle_requestServerDisconnection+0x310>)
 8004118:	f000 fd2c 	bl	8004b74 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "0.0.0.0", gsmRxDataChunkLen)) {
 800411c:	4b3a      	ldr	r3, [pc, #232]	; (8004208 <handle_requestServerDisconnection+0x318>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	493e      	ldr	r1, [pc, #248]	; (800421c <handle_requestServerDisconnection+0x32c>)
 8004124:	483a      	ldr	r0, [pc, #232]	; (8004210 <handle_requestServerDisconnection+0x320>)
 8004126:	f001 fbc2 	bl	80058ae <string_containsWithinLength>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00e      	beq.n	800414e <handle_requestServerDisconnection+0x25e>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 8004130:	2100      	movs	r1, #0
 8004132:	4832      	ldr	r0, [pc, #200]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004134:	f7fd fd40 	bl	8001bb8 <fsmManager_gotoState>

				flags_gsmModule.bits.isServerConnected = 0;
 8004138:	4a39      	ldr	r2, [pc, #228]	; (8004220 <handle_requestServerDisconnection+0x330>)
 800413a:	7853      	ldrb	r3, [r2, #1]
 800413c:	f36f 1345 	bfc	r3, #5, #1
 8004140:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerDisconnection = 0;
 8004142:	4a37      	ldr	r2, [pc, #220]	; (8004220 <handle_requestServerDisconnection+0x330>)
 8004144:	7853      	ldrb	r3, [r2, #1]
 8004146:	f36f 0300 	bfc	r3, #0, #1
 800414a:	7053      	strb	r3, [r2, #1]
 800414c:	e009      	b.n	8004162 <handle_requestServerDisconnection+0x272>
			}
			else if(softTimer_expired(&timeout)) {
 800414e:	482c      	ldr	r0, [pc, #176]	; (8004200 <handle_requestServerDisconnection+0x310>)
 8004150:	f000 fd24 	bl	8004b9c <softTimer_expired>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <handle_requestServerDisconnection+0x272>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr2);
 800415a:	2105      	movs	r1, #5
 800415c:	4827      	ldr	r0, [pc, #156]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 800415e:	f7fd fd2b 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8004162:	4826      	ldr	r0, [pc, #152]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004164:	f7fd fd55 	bl	8001c12 <fsmManager_isStateOut>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d064      	beq.n	8004238 <handle_requestServerDisconnection+0x348>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 800416e:	4823      	ldr	r0, [pc, #140]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004170:	f7fd fd69 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8004174:	e060      	b.n	8004238 <handle_requestServerDisconnection+0x348>



		case __gsmModule_requestServerDisconnection_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004176:	4821      	ldr	r0, [pc, #132]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004178:	f7fd fd40 	bl	8001bfc <fsmManager_isStateIn>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <handle_requestServerDisconnection+0x298>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8004182:	481e      	ldr	r0, [pc, #120]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 8004184:	f7fd fd50 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverDisconnection = 1;
 8004188:	4a26      	ldr	r2, [pc, #152]	; (8004224 <handle_requestServerDisconnection+0x334>)
 800418a:	7813      	ldrb	r3, [r2, #0]
 800418c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004190:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerDisconnection = 0;
 8004192:	4a23      	ldr	r2, [pc, #140]	; (8004220 <handle_requestServerDisconnection+0x330>)
 8004194:	7853      	ldrb	r3, [r2, #1]
 8004196:	f36f 0300 	bfc	r3, #0, #1
 800419a:	7053      	strb	r3, [r2, #1]
			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 800419c:	2100      	movs	r1, #0
 800419e:	4817      	ldr	r0, [pc, #92]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 80041a0:	f7fd fd0a 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 80041a4:	4815      	ldr	r0, [pc, #84]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 80041a6:	f7fd fd34 	bl	8001c12 <fsmManager_isStateOut>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d045      	beq.n	800423c <handle_requestServerDisconnection+0x34c>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 80041b0:	4812      	ldr	r0, [pc, #72]	; (80041fc <handle_requestServerDisconnection+0x30c>)
 80041b2:	f7fd fd48 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80041b6:	e041      	b.n	800423c <handle_requestServerDisconnection+0x34c>




		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 80041b8:	481b      	ldr	r0, [pc, #108]	; (8004228 <handle_requestServerDisconnection+0x338>)
 80041ba:	f7fd fd1f 	bl	8001bfc <fsmManager_isStateIn>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <handle_requestServerDisconnection+0x2da>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 80041c4:	4818      	ldr	r0, [pc, #96]	; (8004228 <handle_requestServerDisconnection+0x338>)
 80041c6:	f7fd fd2f 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestServerDisconnection = 0;
 80041ca:	4a15      	ldr	r2, [pc, #84]	; (8004220 <handle_requestServerDisconnection+0x330>)
 80041cc:	7853      	ldrb	r3, [r2, #1]
 80041ce:	f36f 0300 	bfc	r3, #0, #1
 80041d2:	7053      	strb	r3, [r2, #1]
			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOn_idle);
 80041d4:	2100      	movs	r1, #0
 80041d6:	4814      	ldr	r0, [pc, #80]	; (8004228 <handle_requestServerDisconnection+0x338>)
 80041d8:	f7fd fcee 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 80041dc:	4812      	ldr	r0, [pc, #72]	; (8004228 <handle_requestServerDisconnection+0x338>)
 80041de:	f7fd fd18 	bl	8001c12 <fsmManager_isStateOut>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02b      	beq.n	8004240 <handle_requestServerDisconnection+0x350>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 80041e8:	480f      	ldr	r0, [pc, #60]	; (8004228 <handle_requestServerDisconnection+0x338>)
 80041ea:	f7fd fd2c 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80041ee:	e027      	b.n	8004240 <handle_requestServerDisconnection+0x350>
			break;
 80041f0:	bf00      	nop
 80041f2:	e026      	b.n	8004242 <handle_requestServerDisconnection+0x352>
			break;
 80041f4:	bf00      	nop
 80041f6:	e024      	b.n	8004242 <handle_requestServerDisconnection+0x352>
			break;
 80041f8:	bf00      	nop
 80041fa:	e022      	b.n	8004242 <handle_requestServerDisconnection+0x352>
 80041fc:	2000053c 	.word	0x2000053c
 8004200:	200004d0 	.word	0x200004d0
 8004204:	08009fb0 	.word	0x08009fb0
 8004208:	200003ec 	.word	0x200003ec
 800420c:	08009fc0 	.word	0x08009fc0
 8004210:	2000031c 	.word	0x2000031c
 8004214:	08009fa0 	.word	0x08009fa0
 8004218:	08009f18 	.word	0x08009f18
 800421c:	08009d8c 	.word	0x08009d8c
 8004220:	200004b8 	.word	0x200004b8
 8004224:	200004bc 	.word	0x200004bc
 8004228:	2000050c 	.word	0x2000050c
			break;
 800422c:	bf00      	nop
 800422e:	e008      	b.n	8004242 <handle_requestServerDisconnection+0x352>
			break;
 8004230:	bf00      	nop
 8004232:	e006      	b.n	8004242 <handle_requestServerDisconnection+0x352>
			break;
 8004234:	bf00      	nop
 8004236:	e004      	b.n	8004242 <handle_requestServerDisconnection+0x352>
			break;
 8004238:	bf00      	nop
 800423a:	e002      	b.n	8004242 <handle_requestServerDisconnection+0x352>
			break;
 800423c:	bf00      	nop
 800423e:	e000      	b.n	8004242 <handle_requestServerDisconnection+0x352>
			break;
 8004240:	bf00      	nop
	}
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop

08004248 <pinGsmVdd_write>:
	GSM_UART_TX		output			uart
	GSM_UART_RX		input			uart
*/

static void pinGsmVdd_write(uint8_t value)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GSM_VDD_GPIO_Port, GSM_VDD_Pin, value);
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	461a      	mov	r2, r3
 8004256:	2140      	movs	r1, #64	; 0x40
 8004258:	4803      	ldr	r0, [pc, #12]	; (8004268 <pinGsmVdd_write+0x20>)
 800425a:	f002 fd37 	bl	8006ccc <HAL_GPIO_WritePin>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40010c00 	.word	0x40010c00

0800426c <pinGsmPwrkey_write>:

static void pinGsmPwrkey_write(uint8_t value)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GSM_PWRKEY_GPIO_Port, GSM_PWRKEY_Pin, value);
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	461a      	mov	r2, r3
 800427a:	2108      	movs	r1, #8
 800427c:	4803      	ldr	r0, [pc, #12]	; (800428c <pinGsmPwrkey_write+0x20>)
 800427e:	f002 fd25 	bl	8006ccc <HAL_GPIO_WritePin>
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40010c00 	.word	0x40010c00

08004290 <pinGsmUartTx_transmit>:

static void pinGsmUartTx_transmit(uint8_t *gsmModule_command)
{
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(gsmHuart, UART_IT_RXNE);
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <pinGsmUartTx_transmit+0x78>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <pinGsmUartTx_transmit+0x78>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0220 	bic.w	r2, r2, #32
 80042aa:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(gsmHuart, UART_IT_TC);
 80042ac:	4b16      	ldr	r3, [pc, #88]	; (8004308 <pinGsmUartTx_transmit+0x78>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	4b14      	ldr	r3, [pc, #80]	; (8004308 <pinGsmUartTx_transmit+0x78>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042be:	60da      	str	r2, [r3, #12]
	HAL_UART_Transmit_IT(gsmHuart, gsmModule_command, string_length(gsmModule_command));
 80042c0:	4b11      	ldr	r3, [pc, #68]	; (8004308 <pinGsmUartTx_transmit+0x78>)
 80042c2:	681c      	ldr	r4, [r3, #0]
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f001 fad9 	bl	800587c <string_length>
 80042ca:	4603      	mov	r3, r0
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4620      	mov	r0, r4
 80042d4:	f005 f8b3 	bl	800943e <HAL_UART_Transmit_IT>
	__HAL_UART_DISABLE_IT(gsmHuart, UART_IT_TC);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <pinGsmUartTx_transmit+0x78>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <pinGsmUartTx_transmit+0x78>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ea:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(gsmHuart, UART_IT_RXNE);
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <pinGsmUartTx_transmit+0x78>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	4b04      	ldr	r3, [pc, #16]	; (8004308 <pinGsmUartTx_transmit+0x78>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0220 	orr.w	r2, r2, #32
 80042fe:	60da      	str	r2, [r3, #12]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bd90      	pop	{r4, r7, pc}
 8004308:	20000188 	.word	0x20000188

0800430c <pinGsmUartRx_receive>:

static void pinGsmUartRx_receive(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
	gsmRxPtrIn++;
 8004310:	4b0e      	ldr	r3, [pc, #56]	; (800434c <pinGsmUartRx_receive+0x40>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3301      	adds	r3, #1
 8004316:	4a0d      	ldr	r2, [pc, #52]	; (800434c <pinGsmUartRx_receive+0x40>)
 8004318:	6013      	str	r3, [r2, #0]
	gsmRxPtrIn%=GSMRXDATA_LENGTH;
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <pinGsmUartRx_receive+0x40>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <pinGsmUartRx_receive+0x44>)
 8004320:	fba3 1302 	umull	r1, r3, r3, r2
 8004324:	09db      	lsrs	r3, r3, #7
 8004326:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	4a06      	ldr	r2, [pc, #24]	; (800434c <pinGsmUartRx_receive+0x40>)
 8004332:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(gsmHuart, &gsmRxData[gsmRxPtrIn], 1);
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <pinGsmUartRx_receive+0x48>)
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <pinGsmUartRx_receive+0x40>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a06      	ldr	r2, [pc, #24]	; (8004358 <pinGsmUartRx_receive+0x4c>)
 800433e:	4413      	add	r3, r2
 8004340:	2201      	movs	r2, #1
 8004342:	4619      	mov	r1, r3
 8004344:	f005 f8bf 	bl	80094c6 <HAL_UART_Receive_IT>
}
 8004348:	bf00      	nop
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20000000 	.word	0x20000000
 8004350:	51eb851f 	.word	0x51eb851f
 8004354:	20000188 	.word	0x20000188
 8004358:	2000018c 	.word	0x2000018c

0800435c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	if(huart->Instance == gsmHuart->Instance) {
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_UART_RxCpltCallback+0x24>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d101      	bne.n	8004376 <HAL_UART_RxCpltCallback+0x1a>
		pinGsmUartRx_receive();
 8004372:	f7ff ffcb 	bl	800430c <pinGsmUartRx_receive>
	}
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000188 	.word	0x20000188

08004384 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
	softTimer_periodElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fc54 	bl	8004c4c <softTimer_periodElapsedCallback>
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043b0:	f001 fc90 	bl	8005cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043b4:	f000 f811 	bl	80043da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043b8:	f000 f9aa 	bl	8004710 <MX_GPIO_Init>
  MX_ADC1_Init();
 80043bc:	f000 f862 	bl	8004484 <MX_ADC1_Init>
  MX_RTC_Init();
 80043c0:	f000 f8be 	bl	8004540 <MX_RTC_Init>
  MX_TIM3_Init();
 80043c4:	f000 f8d8 	bl	8004578 <MX_TIM3_Init>
  MX_TIM4_Init();
 80043c8:	f000 f92a 	bl	8004620 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80043cc:	f000 f976 	bl	80046bc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dumpSensorManager_init();
 80043d0:	f7fc ff66 	bl	80012a0 <dumpSensorManager_init>

  while (1)
  {
	  dumpSensorManager_handler();
 80043d4:	f7fc ffb2 	bl	800133c <dumpSensorManager_handler>
 80043d8:	e7fc      	b.n	80043d4 <main+0x28>

080043da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b094      	sub	sp, #80	; 0x50
 80043de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043e4:	2228      	movs	r2, #40	; 0x28
 80043e6:	2100      	movs	r1, #0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f005 fc97 	bl	8009d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043ee:	f107 0314 	add.w	r3, r7, #20
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	605a      	str	r2, [r3, #4]
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	60da      	str	r2, [r3, #12]
 80043fc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800440a:	230a      	movs	r3, #10
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800440e:	2301      	movs	r3, #1
 8004410:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004412:	2310      	movs	r3, #16
 8004414:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004416:	2301      	movs	r3, #1
 8004418:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800441a:	2300      	movs	r3, #0
 800441c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800441e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004422:	4618      	mov	r0, r3
 8004424:	f002 fc9a 	bl	8006d5c <HAL_RCC_OscConfig>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800442e:	f000 f9c3 	bl	80047b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004432:	230f      	movs	r3, #15
 8004434:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800443e:	2300      	movs	r3, #0
 8004440:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004446:	f107 0314 	add.w	r3, r7, #20
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f002 ff05 	bl	800725c <HAL_RCC_ClockConfig>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004458:	f000 f9ae 	bl	80047b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800445c:	2303      	movs	r3, #3
 800445e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004464:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	4618      	mov	r0, r3
 800446e:	f003 f88f 	bl	8007590 <HAL_RCCEx_PeriphCLKConfig>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8004478:	f000 f99e 	bl	80047b8 <Error_Handler>
  }
}
 800447c:	bf00      	nop
 800447e:	3750      	adds	r7, #80	; 0x50
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800448a:	1d3b      	adds	r3, r7, #4
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8004494:	4b28      	ldr	r3, [pc, #160]	; (8004538 <MX_ADC1_Init+0xb4>)
 8004496:	4a29      	ldr	r2, [pc, #164]	; (800453c <MX_ADC1_Init+0xb8>)
 8004498:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800449a:	4b27      	ldr	r3, [pc, #156]	; (8004538 <MX_ADC1_Init+0xb4>)
 800449c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80044a2:	4b25      	ldr	r3, [pc, #148]	; (8004538 <MX_ADC1_Init+0xb4>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80044a8:	4b23      	ldr	r3, [pc, #140]	; (8004538 <MX_ADC1_Init+0xb4>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044ae:	4b22      	ldr	r3, [pc, #136]	; (8004538 <MX_ADC1_Init+0xb4>)
 80044b0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80044b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044b6:	4b20      	ldr	r3, [pc, #128]	; (8004538 <MX_ADC1_Init+0xb4>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80044bc:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <MX_ADC1_Init+0xb4>)
 80044be:	2203      	movs	r2, #3
 80044c0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80044c2:	481d      	ldr	r0, [pc, #116]	; (8004538 <MX_ADC1_Init+0xb4>)
 80044c4:	f001 fc68 	bl	8005d98 <HAL_ADC_Init>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80044ce:	f000 f973 	bl	80047b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80044d2:	2306      	movs	r3, #6
 80044d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80044da:	2301      	movs	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4815      	ldr	r0, [pc, #84]	; (8004538 <MX_ADC1_Init+0xb4>)
 80044e4:	f001 ff1c 	bl	8006320 <HAL_ADC_ConfigChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80044ee:	f000 f963 	bl	80047b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80044f2:	2304      	movs	r3, #4
 80044f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80044f6:	2302      	movs	r3, #2
 80044f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	4619      	mov	r1, r3
 80044fe:	480e      	ldr	r0, [pc, #56]	; (8004538 <MX_ADC1_Init+0xb4>)
 8004500:	f001 ff0e 	bl	8006320 <HAL_ADC_ConfigChannel>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800450a:	f000 f955 	bl	80047b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800450e:	2310      	movs	r3, #16
 8004510:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004512:	2303      	movs	r3, #3
 8004514:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8004516:	2304      	movs	r3, #4
 8004518:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800451a:	1d3b      	adds	r3, r7, #4
 800451c:	4619      	mov	r1, r3
 800451e:	4806      	ldr	r0, [pc, #24]	; (8004538 <MX_ADC1_Init+0xb4>)
 8004520:	f001 fefe 	bl	8006320 <HAL_ADC_ConfigChannel>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800452a:	f000 f945 	bl	80047b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	200006a8 	.word	0x200006a8
 800453c:	40012400 	.word	0x40012400

08004540 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <MX_RTC_Init+0x30>)
 8004546:	4a0b      	ldr	r2, [pc, #44]	; (8004574 <MX_RTC_Init+0x34>)
 8004548:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <MX_RTC_Init+0x30>)
 800454c:	f04f 32ff 	mov.w	r2, #4294967295
 8004550:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <MX_RTC_Init+0x30>)
 8004554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004558:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800455a:	4805      	ldr	r0, [pc, #20]	; (8004570 <MX_RTC_Init+0x30>)
 800455c:	f003 f992 	bl	8007884 <HAL_RTC_Init>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8004566:	f000 f927 	bl	80047b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800456a:	bf00      	nop
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	2000071c 	.word	0x2000071c
 8004574:	40002800 	.word	0x40002800

08004578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800457e:	f107 0310 	add.w	r3, r7, #16
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004588:	463b      	mov	r3, r7
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	609a      	str	r2, [r3, #8]
 8004592:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004594:	4b20      	ldr	r3, [pc, #128]	; (8004618 <MX_TIM3_Init+0xa0>)
 8004596:	4a21      	ldr	r2, [pc, #132]	; (800461c <MX_TIM3_Init+0xa4>)
 8004598:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 800459a:	4b1f      	ldr	r3, [pc, #124]	; (8004618 <MX_TIM3_Init+0xa0>)
 800459c:	2207      	movs	r2, #7
 800459e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045a0:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <MX_TIM3_Init+0xa0>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80045a6:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <MX_TIM3_Init+0xa0>)
 80045a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045ae:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <MX_TIM3_Init+0xa0>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045b4:	4b18      	ldr	r3, [pc, #96]	; (8004618 <MX_TIM3_Init+0xa0>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80045ba:	4817      	ldr	r0, [pc, #92]	; (8004618 <MX_TIM3_Init+0xa0>)
 80045bc:	f003 ff9a 	bl	80084f4 <HAL_TIM_IC_Init>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80045c6:	f000 f8f7 	bl	80047b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045d2:	f107 0310 	add.w	r3, r7, #16
 80045d6:	4619      	mov	r1, r3
 80045d8:	480f      	ldr	r0, [pc, #60]	; (8004618 <MX_TIM3_Init+0xa0>)
 80045da:	f004 fe73 	bl	80092c4 <HAL_TIMEx_MasterConfigSynchronization>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80045e4:	f000 f8e8 	bl	80047b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80045e8:	2300      	movs	r3, #0
 80045ea:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80045ec:	2301      	movs	r3, #1
 80045ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80045f8:	463b      	mov	r3, r7
 80045fa:	2208      	movs	r2, #8
 80045fc:	4619      	mov	r1, r3
 80045fe:	4806      	ldr	r0, [pc, #24]	; (8004618 <MX_TIM3_Init+0xa0>)
 8004600:	f004 fa7e 	bl	8008b00 <HAL_TIM_IC_ConfigChannel>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800460a:	f000 f8d5 	bl	80047b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800460e:	bf00      	nop
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000660 	.word	0x20000660
 800461c:	40000400 	.word	0x40000400

08004620 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004626:	f107 0308 	add.w	r3, r7, #8
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	605a      	str	r2, [r3, #4]
 8004630:	609a      	str	r2, [r3, #8]
 8004632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004634:	463b      	mov	r3, r7
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800463c:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <MX_TIM4_Init+0x94>)
 800463e:	4a1e      	ldr	r2, [pc, #120]	; (80046b8 <MX_TIM4_Init+0x98>)
 8004640:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 8004642:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <MX_TIM4_Init+0x94>)
 8004644:	2207      	movs	r2, #7
 8004646:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004648:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <MX_TIM4_Init+0x94>)
 800464a:	2200      	movs	r2, #0
 800464c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800464e:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <MX_TIM4_Init+0x94>)
 8004650:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004654:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004656:	4b17      	ldr	r3, [pc, #92]	; (80046b4 <MX_TIM4_Init+0x94>)
 8004658:	2200      	movs	r2, #0
 800465a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800465c:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <MX_TIM4_Init+0x94>)
 800465e:	2200      	movs	r2, #0
 8004660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004662:	4814      	ldr	r0, [pc, #80]	; (80046b4 <MX_TIM4_Init+0x94>)
 8004664:	f003 fea4 	bl	80083b0 <HAL_TIM_Base_Init>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800466e:	f000 f8a3 	bl	80047b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004676:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004678:	f107 0308 	add.w	r3, r7, #8
 800467c:	4619      	mov	r1, r3
 800467e:	480d      	ldr	r0, [pc, #52]	; (80046b4 <MX_TIM4_Init+0x94>)
 8004680:	f004 fad2 	bl	8008c28 <HAL_TIM_ConfigClockSource>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800468a:	f000 f895 	bl	80047b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800468e:	2300      	movs	r3, #0
 8004690:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004696:	463b      	mov	r3, r7
 8004698:	4619      	mov	r1, r3
 800469a:	4806      	ldr	r0, [pc, #24]	; (80046b4 <MX_TIM4_Init+0x94>)
 800469c:	f004 fe12 	bl	80092c4 <HAL_TIMEx_MasterConfigSynchronization>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80046a6:	f000 f887 	bl	80047b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000618 	.word	0x20000618
 80046b8:	40000800 	.word	0x40000800

080046bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80046c0:	4b11      	ldr	r3, [pc, #68]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046c2:	4a12      	ldr	r2, [pc, #72]	; (800470c <MX_USART1_UART_Init+0x50>)
 80046c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80046c6:	4b10      	ldr	r3, [pc, #64]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80046ce:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046dc:	2200      	movs	r2, #0
 80046de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046e2:	220c      	movs	r2, #12
 80046e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80046f2:	4805      	ldr	r0, [pc, #20]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046f4:	f004 fe56 	bl	80093a4 <HAL_UART_Init>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80046fe:	f000 f85b 	bl	80047b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004702:	bf00      	nop
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	200006d8 	.word	0x200006d8
 800470c:	40013800 	.word	0x40013800

08004710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004716:	f107 0308 	add.w	r3, r7, #8
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004724:	4b21      	ldr	r3, [pc, #132]	; (80047ac <MX_GPIO_Init+0x9c>)
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	4a20      	ldr	r2, [pc, #128]	; (80047ac <MX_GPIO_Init+0x9c>)
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	6193      	str	r3, [r2, #24]
 8004730:	4b1e      	ldr	r3, [pc, #120]	; (80047ac <MX_GPIO_Init+0x9c>)
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <MX_GPIO_Init+0x9c>)
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	4a1a      	ldr	r2, [pc, #104]	; (80047ac <MX_GPIO_Init+0x9c>)
 8004742:	f043 0308 	orr.w	r3, r3, #8
 8004746:	6193      	str	r3, [r2, #24]
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <MX_GPIO_Init+0x9c>)
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CH4_VDD_Pin|NH3_VDD_Pin, GPIO_PIN_RESET);
 8004754:	2200      	movs	r2, #0
 8004756:	21a0      	movs	r1, #160	; 0xa0
 8004758:	4815      	ldr	r0, [pc, #84]	; (80047b0 <MX_GPIO_Init+0xa0>)
 800475a:	f002 fab7 	bl	8006ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US_TRIGGER_Pin|US_VDD_Pin|GSM_PWRKEY_Pin|GSM_VDD_Pin, GPIO_PIN_RESET);
 800475e:	2200      	movs	r2, #0
 8004760:	f240 414a 	movw	r1, #1098	; 0x44a
 8004764:	4813      	ldr	r0, [pc, #76]	; (80047b4 <MX_GPIO_Init+0xa4>)
 8004766:	f002 fab1 	bl	8006ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CH4_VDD_Pin NH3_VDD_Pin */
  GPIO_InitStruct.Pin = CH4_VDD_Pin|NH3_VDD_Pin;
 800476a:	23a0      	movs	r3, #160	; 0xa0
 800476c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800476e:	2301      	movs	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004772:	2300      	movs	r3, #0
 8004774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004776:	2302      	movs	r3, #2
 8004778:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	4619      	mov	r1, r3
 8004780:	480b      	ldr	r0, [pc, #44]	; (80047b0 <MX_GPIO_Init+0xa0>)
 8004782:	f002 f91f 	bl	80069c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : US_TRIGGER_Pin US_VDD_Pin GSM_PWRKEY_Pin GSM_VDD_Pin */
  GPIO_InitStruct.Pin = US_TRIGGER_Pin|US_VDD_Pin|GSM_PWRKEY_Pin|GSM_VDD_Pin;
 8004786:	f240 434a 	movw	r3, #1098	; 0x44a
 800478a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800478c:	2301      	movs	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004794:	2302      	movs	r3, #2
 8004796:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	4619      	mov	r1, r3
 800479e:	4805      	ldr	r0, [pc, #20]	; (80047b4 <MX_GPIO_Init+0xa4>)
 80047a0:	f002 f910 	bl	80069c4 <HAL_GPIO_Init>

}
 80047a4:	bf00      	nop
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40010800 	.word	0x40010800
 80047b4:	40010c00 	.word	0x40010c00

080047b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047bc:	b672      	cpsid	i
}
 80047be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047c0:	e7fe      	b.n	80047c0 <Error_Handler+0x8>
	...

080047c4 <nh3Sensor_init>:




void nh3Sensor_init(ADC_HandleTypeDef *hadc)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	//ADC
	nh3Hadc = hadc;
 80047cc:	4a08      	ldr	r2, [pc, #32]	; (80047f0 <nh3Sensor_init+0x2c>)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&nh3Sensor_state, __nh3Sensor_idle);
 80047d2:	2100      	movs	r1, #0
 80047d4:	4807      	ldr	r0, [pc, #28]	; (80047f4 <nh3Sensor_init+0x30>)
 80047d6:	f7fd f9d9 	bl	8001b8c <fsmManager_init>

	//Flags
	flags_nh3Sensor.dword = 0;
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <nh3Sensor_init+0x34>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
	flags_nh3SensorError.dword = 0;
 80047e0:	4b06      	ldr	r3, [pc, #24]	; (80047fc <nh3Sensor_init+0x38>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000548 	.word	0x20000548
 80047f4:	20000550 	.word	0x20000550
 80047f8:	2000055c 	.word	0x2000055c
 80047fc:	20000560 	.word	0x20000560

08004800 <nh3Sensor_handler>:

void nh3Sensor_handler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&nh3Sensor_state)) {
 8004804:	4833      	ldr	r0, [pc, #204]	; (80048d4 <nh3Sensor_handler+0xd4>)
 8004806:	f7fd f9ee 	bl	8001be6 <fsmManager_getState>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <nh3Sensor_handler+0x16>
 8004810:	2b01      	cmp	r3, #1
 8004812:	d028      	beq.n	8004866 <nh3Sensor_handler+0x66>

				flags_nh3Sensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 8004814:	e05c      	b.n	80048d0 <nh3Sensor_handler+0xd0>
			if(fsmManager_isStateIn(&nh3Sensor_state)) {
 8004816:	482f      	ldr	r0, [pc, #188]	; (80048d4 <nh3Sensor_handler+0xd4>)
 8004818:	f7fd f9f0 	bl	8001bfc <fsmManager_isStateIn>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <nh3Sensor_handler+0x32>
				fsmManager_stateIn(&nh3Sensor_state);
 8004822:	482c      	ldr	r0, [pc, #176]	; (80048d4 <nh3Sensor_handler+0xd4>)
 8004824:	f7fd fa00 	bl	8001c28 <fsmManager_stateIn>
				flags_nh3Sensor.bits.isMeasuring = 0;
 8004828:	4a2b      	ldr	r2, [pc, #172]	; (80048d8 <nh3Sensor_handler+0xd8>)
 800482a:	7853      	ldrb	r3, [r2, #1]
 800482c:	f36f 03c3 	bfc	r3, #3, #1
 8004830:	7053      	strb	r3, [r2, #1]
			if(flags_nh3Sensor.bits.requestMeasure) {
 8004832:	4b29      	ldr	r3, [pc, #164]	; (80048d8 <nh3Sensor_handler+0xd8>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <nh3Sensor_handler+0x52>
				flags_nh3Sensor.bits.isMeasuring = 1;
 8004840:	4a25      	ldr	r2, [pc, #148]	; (80048d8 <nh3Sensor_handler+0xd8>)
 8004842:	7853      	ldrb	r3, [r2, #1]
 8004844:	f043 0308 	orr.w	r3, r3, #8
 8004848:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&nh3Sensor_state,__nh3Sensor_getAmmoniac);
 800484a:	2101      	movs	r1, #1
 800484c:	4821      	ldr	r0, [pc, #132]	; (80048d4 <nh3Sensor_handler+0xd4>)
 800484e:	f7fd f9b3 	bl	8001bb8 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&nh3Sensor_state)) {
 8004852:	4820      	ldr	r0, [pc, #128]	; (80048d4 <nh3Sensor_handler+0xd4>)
 8004854:	f7fd f9dd 	bl	8001c12 <fsmManager_isStateOut>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d035      	beq.n	80048ca <nh3Sensor_handler+0xca>
				fsmManager_stateOut(&nh3Sensor_state);
 800485e:	481d      	ldr	r0, [pc, #116]	; (80048d4 <nh3Sensor_handler+0xd4>)
 8004860:	f7fd f9f1 	bl	8001c46 <fsmManager_stateOut>
			break;
 8004864:	e031      	b.n	80048ca <nh3Sensor_handler+0xca>
			if(fsmManager_isStateIn(&nh3Sensor_state)) {
 8004866:	481b      	ldr	r0, [pc, #108]	; (80048d4 <nh3Sensor_handler+0xd4>)
 8004868:	f7fd f9c8 	bl	8001bfc <fsmManager_isStateIn>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d004      	beq.n	800487c <nh3Sensor_handler+0x7c>
				fsmManager_stateIn(&nh3Sensor_state);
 8004872:	4818      	ldr	r0, [pc, #96]	; (80048d4 <nh3Sensor_handler+0xd4>)
 8004874:	f7fd f9d8 	bl	8001c28 <fsmManager_stateIn>
				nh3_adcStart();
 8004878:	f000 f87e 	bl	8004978 <nh3_adcStart>
			nh3Ppm = (float)nh3_adcGetValue();
 800487c:	f000 f890 	bl	80049a0 <nh3_adcGetValue>
 8004880:	4603      	mov	r3, r0
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc f938 	bl	8000af8 <__aeabi_ui2f>
 8004888:	4603      	mov	r3, r0
 800488a:	4a14      	ldr	r2, [pc, #80]	; (80048dc <nh3Sensor_handler+0xdc>)
 800488c:	6013      	str	r3, [r2, #0]
			if(nh3SensorCallback != NULL) {
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <nh3Sensor_handler+0xe0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <nh3Sensor_handler+0xa0>
				nh3SensorCallback(__nh3SensorEvent_okMeasuring, (float *) &nh3Ppm);
 8004896:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <nh3Sensor_handler+0xe0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4910      	ldr	r1, [pc, #64]	; (80048dc <nh3Sensor_handler+0xdc>)
 800489c:	2000      	movs	r0, #0
 800489e:	4798      	blx	r3
			fsmManager_gotoState(&nh3Sensor_state,__nh3Sensor_idle);
 80048a0:	2100      	movs	r1, #0
 80048a2:	480c      	ldr	r0, [pc, #48]	; (80048d4 <nh3Sensor_handler+0xd4>)
 80048a4:	f7fd f988 	bl	8001bb8 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&nh3Sensor_state)) {
 80048a8:	480a      	ldr	r0, [pc, #40]	; (80048d4 <nh3Sensor_handler+0xd4>)
 80048aa:	f7fd f9b2 	bl	8001c12 <fsmManager_isStateOut>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00c      	beq.n	80048ce <nh3Sensor_handler+0xce>
				fsmManager_stateOut(&nh3Sensor_state);
 80048b4:	4807      	ldr	r0, [pc, #28]	; (80048d4 <nh3Sensor_handler+0xd4>)
 80048b6:	f7fd f9c6 	bl	8001c46 <fsmManager_stateOut>
				nh3_adcStop();
 80048ba:	f000 f87d 	bl	80049b8 <nh3_adcStop>
				flags_nh3Sensor.bits.requestMeasure = 0;
 80048be:	4a06      	ldr	r2, [pc, #24]	; (80048d8 <nh3Sensor_handler+0xd8>)
 80048c0:	7813      	ldrb	r3, [r2, #0]
 80048c2:	f36f 0300 	bfc	r3, #0, #1
 80048c6:	7013      	strb	r3, [r2, #0]
			break;
 80048c8:	e001      	b.n	80048ce <nh3Sensor_handler+0xce>
			break;
 80048ca:	bf00      	nop
 80048cc:	e000      	b.n	80048d0 <nh3Sensor_handler+0xd0>
			break;
 80048ce:	bf00      	nop
}
 80048d0:	bf00      	nop
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000550 	.word	0x20000550
 80048d8:	2000055c 	.word	0x2000055c
 80048dc:	2000054c 	.word	0x2000054c
 80048e0:	20000564 	.word	0x20000564

080048e4 <nh3Sensor_measure>:

void nh3Sensor_measure(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
	flags_nh3Sensor.bits.requestMeasure = 1;
 80048e8:	4a04      	ldr	r2, [pc, #16]	; (80048fc <nh3Sensor_measure+0x18>)
 80048ea:	7813      	ldrb	r3, [r2, #0]
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	7013      	strb	r3, [r2, #0]
}
 80048f2:	bf00      	nop
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	2000055c 	.word	0x2000055c

08004900 <nh3Sensor_setCallback>:
{
	return flags_nh3Sensor.bits.isMeasuring;
}

void nh3Sensor_setCallback(void (*cb)(_nh3Sensor_event, void*))
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	nh3SensorCallback = cb;
 8004908:	4a03      	ldr	r2, [pc, #12]	; (8004918 <nh3Sensor_setCallback+0x18>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6013      	str	r3, [r2, #0]
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	20000564 	.word	0x20000564

0800491c <nh3Sensor_powerOn>:

void nh3Sensor_powerOn(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
	pinNh3Vdd_write(1);
 8004920:	2001      	movs	r0, #1
 8004922:	f000 f855 	bl	80049d0 <pinNh3Vdd_write>
}
 8004926:	bf00      	nop
 8004928:	bd80      	pop	{r7, pc}

0800492a <nh3Sensor_powerOff>:

void nh3Sensor_powerOff(void)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	af00      	add	r7, sp, #0
	pinNh3Vdd_write(0);
 800492e:	2000      	movs	r0, #0
 8004930:	f000 f84e 	bl	80049d0 <pinNh3Vdd_write>
}
 8004934:	bf00      	nop
 8004936:	bd80      	pop	{r7, pc}

08004938 <ADC_Select_CHNh3>:



static void ADC_Select_CHNh3(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_6;
 8004948:	2306      	movs	r3, #6
 800494a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 800494c:	2301      	movs	r3, #1
 800494e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8004950:	2301      	movs	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(nh3Hadc, &sConfig) != HAL_OK) {
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <ADC_Select_CHNh3+0x3c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	1d3a      	adds	r2, r7, #4
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f001 fcdf 	bl	8006320 <HAL_ADC_ConfigChannel>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <ADC_Select_CHNh3+0x34>
		Error_Handler();
 8004968:	f7ff ff26 	bl	80047b8 <Error_Handler>
	}
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000548 	.word	0x20000548

08004978 <nh3_adcStart>:

static void nh3_adcStart(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
	ADC_Select_CHNh3();
 800497c:	f7ff ffdc 	bl	8004938 <ADC_Select_CHNh3>
	HAL_ADC_Start(nh3Hadc);
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <nh3_adcStart+0x24>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f001 fadf 	bl	8005f48 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(nh3Hadc, 100);
 800498a:	4b04      	ldr	r3, [pc, #16]	; (800499c <nh3_adcStart+0x24>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2164      	movs	r1, #100	; 0x64
 8004990:	4618      	mov	r0, r3
 8004992:	f001 fbb3 	bl	80060fc <HAL_ADC_PollForConversion>
}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000548 	.word	0x20000548

080049a0 <nh3_adcGetValue>:

static uint32_t nh3_adcGetValue(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(nh3Hadc);
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <nh3_adcGetValue+0x14>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f001 fcad 	bl	8006308 <HAL_ADC_GetValue>
 80049ae:	4603      	mov	r3, r0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000548 	.word	0x20000548

080049b8 <nh3_adcStop>:

static void nh3_adcStop(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(nh3Hadc);
 80049bc:	4b03      	ldr	r3, [pc, #12]	; (80049cc <nh3_adcStop+0x14>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 fb6f 	bl	80060a4 <HAL_ADC_Stop>
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20000548 	.word	0x20000548

080049d0 <pinNh3Vdd_write>:

static void pinNh3Vdd_write(uint8_t state)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NH3_SENSOR_VDD_PORT, NH3_SENSOR_VDD_PIN, state);
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	461a      	mov	r2, r3
 80049de:	2180      	movs	r1, #128	; 0x80
 80049e0:	4803      	ldr	r0, [pc, #12]	; (80049f0 <pinNh3Vdd_write+0x20>)
 80049e2:	f002 f973 	bl	8006ccc <HAL_GPIO_WritePin>
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40010800 	.word	0x40010800

080049f4 <nvm_init>:




void nvm_init(RTC_HandleTypeDef *hrtc)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	//RTC
	nvmHrtc = hrtc;
 80049fc:	4a03      	ldr	r2, [pc, #12]	; (8004a0c <nvm_init+0x18>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6013      	str	r3, [r2, #0]
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	20000568 	.word	0x20000568

08004a10 <nvm_readWord>:

uint32_t nvm_readWord(uint32_t nReg)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	return RTC_Read_BackupRegister(nReg);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f813 	bl	8004a44 <RTC_Read_BackupRegister>
 8004a1e:	4603      	mov	r3, r0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <nvm_writeWord>:

	return (wData & (1 << pos)) >> pos;
}

void nvm_writeWord(uint32_t nReg, uint32_t wData)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
	RTC_WriteWord_BackupRegister(nReg, wData);
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f817 	bl	8004a68 <RTC_WriteWord_BackupRegister>
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <RTC_Read_BackupRegister>:




static uint32_t RTC_Read_BackupRegister(uint32_t backupRegister)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
    return HAL_RTCEx_BKUPRead(nvmHrtc, backupRegister);
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <RTC_Read_BackupRegister+0x20>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f003 fc90 	bl	8008378 <HAL_RTCEx_BKUPRead>
 8004a58:	4603      	mov	r3, r0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000568 	.word	0x20000568

08004a68 <RTC_WriteWord_BackupRegister>:

static void RTC_WriteWord_BackupRegister(uint32_t backupRegister, uint32_t wData)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
    HAL_PWR_EnableBkUpAccess();
 8004a72:	f002 f943 	bl	8006cfc <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(nvmHrtc, backupRegister, (uint16_t) wData);
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <RTC_WriteWord_BackupRegister+0x2c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	b292      	uxth	r2, r2
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f003 fc5f 	bl	8008344 <HAL_RTCEx_BKUPWrite>
    HAL_PWR_DisableBkUpAccess();
 8004a86:	f002 f945 	bl	8006d14 <HAL_PWR_DisableBkUpAccess>
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000568 	.word	0x20000568

08004a98 <powerMode_init>:
static RTC_HandleTypeDef* powerHrtc;
static RTC_TimeTypeDef rtcTime;
RTC_AlarmTypeDef rtcAlarm;

void powerMode_init(RTC_HandleTypeDef* hrtc)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	powerHrtc = hrtc;
 8004aa0:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <powerMode_init+0x3c>)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6013      	str	r3, [r2, #0]

	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8004aa6:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <powerMode_init+0x40>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d10b      	bne.n	8004aca <powerMode_init+0x32>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8004ab2:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <powerMode_init+0x40>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <powerMode_init+0x40>)
 8004ab8:	f043 0308 	orr.w	r3, r3, #8
 8004abc:	6013      	str	r3, [r2, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <powerMode_init+0x40>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a05      	ldr	r2, [pc, #20]	; (8004ad8 <powerMode_init+0x40>)
 8004ac4:	f043 0304 	orr.w	r3, r3, #4
 8004ac8:	6013      	str	r3, [r2, #0]
	}
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	2000056c 	.word	0x2000056c
 8004ad8:	40007000 	.word	0x40007000

08004adc <powerMode_enterStandbyMode>:

void powerMode_enterStandbyMode(uint32_t sec)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

	// Ponemos la hora actual a 00:00:00
	HAL_RTC_WaitForSynchro(powerHrtc);
 8004ae4:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <powerMode_enterStandbyMode+0x6c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f003 f989 	bl	8007e00 <HAL_RTC_WaitForSynchro>
	rtcTime.Hours = 0;
 8004aee:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <powerMode_enterStandbyMode+0x70>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
	rtcTime.Minutes = 0;
 8004af4:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <powerMode_enterStandbyMode+0x70>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	705a      	strb	r2, [r3, #1]
	rtcTime.Seconds = 0;
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <powerMode_enterStandbyMode+0x70>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(powerHrtc, &rtcTime, RTC_FORMAT_BCD);
 8004b00:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <powerMode_enterStandbyMode+0x6c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2201      	movs	r2, #1
 8004b06:	4911      	ldr	r1, [pc, #68]	; (8004b4c <powerMode_enterStandbyMode+0x70>)
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f002 ff51 	bl	80079b0 <HAL_RTC_SetTime>

	// Configuramos la alarma a las 00:00:10
	rtcAlarm.Alarm = RTC_ALARM_A;
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <powerMode_enterStandbyMode+0x74>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	605a      	str	r2, [r3, #4]
	rtcAlarm.AlarmTime = rtcTime;
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <powerMode_enterStandbyMode+0x74>)
 8004b16:	4a0d      	ldr	r2, [pc, #52]	; (8004b4c <powerMode_enterStandbyMode+0x70>)
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	8019      	strh	r1, [r3, #0]
 8004b1e:	3302      	adds	r3, #2
 8004b20:	0c12      	lsrs	r2, r2, #16
 8004b22:	701a      	strb	r2, [r3, #0]
	rtcAlarm.AlarmTime.Seconds = sec;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <powerMode_enterStandbyMode+0x74>)
 8004b2a:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetAlarm_IT(powerHrtc, &rtcAlarm, RTC_FORMAT_BCD);
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <powerMode_enterStandbyMode+0x6c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2201      	movs	r2, #1
 8004b32:	4907      	ldr	r1, [pc, #28]	; (8004b50 <powerMode_enterStandbyMode+0x74>)
 8004b34:	4618      	mov	r0, r3
 8004b36:	f003 f8ab 	bl	8007c90 <HAL_RTC_SetAlarm_IT>

	// Entramos en Standby
	HAL_PWR_EnterSTANDBYMode();
 8004b3a:	f002 f8f7 	bl	8006d2c <HAL_PWR_EnterSTANDBYMode>
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	2000056c 	.word	0x2000056c
 8004b4c:	20000570 	.word	0x20000570
 8004b50:	20000730 	.word	0x20000730

08004b54 <softTimer_init>:




void softTimer_init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	timerHtim = htim;
 8004b5c:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <softTimer_init+0x1c>)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f003 fc74 	bl	8008450 <HAL_TIM_Base_Start_IT>
}
 8004b68:	bf00      	nop
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000574 	.word	0x20000574

08004b74 <softTimer_start>:

void softTimer_start(SoftTimer_t* timer, uint32_t interval)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
	timer->state = state_running;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	721a      	strb	r2, [r3, #8]
	timer->start = softTimer_getTicks();
 8004b84:	f000 f858 	bl	8004c38 <softTimer_getTicks>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
	timer->interval = interval;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	605a      	str	r2, [r3, #4]
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <softTimer_expired>:

uint8_t softTimer_expired(SoftTimer_t* timer)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	73fb      	strb	r3, [r7, #15]

	if(timer->state == state_running) {
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	7a1b      	ldrb	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d121      	bne.n	8004bf4 <softTimer_expired+0x58>
		if(systemTicks >= timer->start)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <softTimer_expired+0x64>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d80d      	bhi.n	8004bd8 <softTimer_expired+0x3c>
			ret = ((systemTicks - timer->start) > timer->interval) ? 1 : 0;
 8004bbc:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <softTimer_expired+0x64>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	1ad2      	subs	r2, r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	bf8c      	ite	hi
 8004bce:	2301      	movhi	r3, #1
 8004bd0:	2300      	movls	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	73fb      	strb	r3, [r7, #15]
 8004bd6:	e00d      	b.n	8004bf4 <softTimer_expired+0x58>
		else
			ret = (((0xFFFFFFFF - timer->start)+systemTicks) > timer->interval) ? 1 : 0;
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <softTimer_expired+0x64>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	1e5a      	subs	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	bf8c      	ite	hi
 8004bec:	2301      	movhi	r3, #1
 8004bee:	2300      	movls	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr
 8004c00:	20000578 	.word	0x20000578

08004c04 <softTimer_stop>:

void softTimer_stop(SoftTimer_t* timer)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	timer->state = state_stopped;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	721a      	strb	r2, [r3, #8]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <softTimer_handler>:

void softTimer_handler(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
	systemTicks++;
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <softTimer_handler+0x18>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	4a03      	ldr	r2, [pc, #12]	; (8004c34 <softTimer_handler+0x18>)
 8004c28:	6013      	str	r3, [r2, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000578 	.word	0x20000578

08004c38 <softTimer_getTicks>:

uint32_t softTimer_getTicks(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
	return systemTicks;
 8004c3c:	4b02      	ldr	r3, [pc, #8]	; (8004c48 <softTimer_getTicks+0x10>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr
 8004c48:	20000578 	.word	0x20000578

08004c4c <softTimer_periodElapsedCallback>:




void softTimer_periodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	if(htim->Instance == timerHtim->Instance) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <softTimer_periodElapsedCallback+0x24>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d101      	bne.n	8004c66 <softTimer_periodElapsedCallback+0x1a>
		softTimer_handler();
 8004c62:	f7ff ffdb 	bl	8004c1c <softTimer_handler>
	}
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000574 	.word	0x20000574

08004c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004c7a:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <HAL_MspInit+0x5c>)
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	4a14      	ldr	r2, [pc, #80]	; (8004cd0 <HAL_MspInit+0x5c>)
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	6193      	str	r3, [r2, #24]
 8004c86:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <HAL_MspInit+0x5c>)
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <HAL_MspInit+0x5c>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4a0e      	ldr	r2, [pc, #56]	; (8004cd0 <HAL_MspInit+0x5c>)
 8004c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	61d3      	str	r3, [r2, #28]
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <HAL_MspInit+0x5c>)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004caa:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <HAL_MspInit+0x60>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	4a04      	ldr	r2, [pc, #16]	; (8004cd4 <HAL_MspInit+0x60>)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cc6:	bf00      	nop
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40010000 	.word	0x40010000

08004cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce0:	f107 0310 	add.w	r3, r7, #16
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	609a      	str	r2, [r3, #8]
 8004cec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a14      	ldr	r2, [pc, #80]	; (8004d44 <HAL_ADC_MspInit+0x6c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d121      	bne.n	8004d3c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <HAL_ADC_MspInit+0x70>)
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <HAL_ADC_MspInit+0x70>)
 8004cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d02:	6193      	str	r3, [r2, #24]
 8004d04:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <HAL_ADC_MspInit+0x70>)
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d10:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <HAL_ADC_MspInit+0x70>)
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	4a0c      	ldr	r2, [pc, #48]	; (8004d48 <HAL_ADC_MspInit+0x70>)
 8004d16:	f043 0304 	orr.w	r3, r3, #4
 8004d1a:	6193      	str	r3, [r2, #24]
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <HAL_ADC_MspInit+0x70>)
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = CH4_ADC_Pin|NH3_ADC_Pin;
 8004d28:	2350      	movs	r3, #80	; 0x50
 8004d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d30:	f107 0310 	add.w	r3, r7, #16
 8004d34:	4619      	mov	r1, r3
 8004d36:	4805      	ldr	r0, [pc, #20]	; (8004d4c <HAL_ADC_MspInit+0x74>)
 8004d38:	f001 fe44 	bl	80069c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004d3c:	bf00      	nop
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40012400 	.word	0x40012400
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40010800 	.word	0x40010800

08004d50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <HAL_RTC_MspInit+0x3c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d110      	bne.n	8004d84 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8004d62:	f001 ffcb 	bl	8006cfc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004d66:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <HAL_RTC_MspInit+0x40>)
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <HAL_RTC_MspInit+0x40>)
 8004d6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d70:	61d3      	str	r3, [r2, #28]
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <HAL_RTC_MspInit+0x40>)
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RTC_MspInit+0x44>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40002800 	.word	0x40002800
 8004d90:	40021000 	.word	0x40021000
 8004d94:	4242043c 	.word	0x4242043c

08004d98 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	609a      	str	r2, [r3, #8]
 8004dac:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <HAL_TIM_IC_MspInit+0x80>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d12b      	bne.n	8004e10 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004db8:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <HAL_TIM_IC_MspInit+0x84>)
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <HAL_TIM_IC_MspInit+0x84>)
 8004dbe:	f043 0302 	orr.w	r3, r3, #2
 8004dc2:	61d3      	str	r3, [r2, #28]
 8004dc4:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <HAL_TIM_IC_MspInit+0x84>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dd0:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_TIM_IC_MspInit+0x84>)
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	4a11      	ldr	r2, [pc, #68]	; (8004e1c <HAL_TIM_IC_MspInit+0x84>)
 8004dd6:	f043 0308 	orr.w	r3, r3, #8
 8004dda:	6193      	str	r3, [r2, #24]
 8004ddc:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <HAL_TIM_IC_MspInit+0x84>)
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = US_ECHO_Pin;
 8004de8:	2301      	movs	r3, #1
 8004dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 8004df4:	f107 0310 	add.w	r3, r7, #16
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4809      	ldr	r0, [pc, #36]	; (8004e20 <HAL_TIM_IC_MspInit+0x88>)
 8004dfc:	f001 fde2 	bl	80069c4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004e00:	2200      	movs	r2, #0
 8004e02:	2100      	movs	r1, #0
 8004e04:	201d      	movs	r0, #29
 8004e06:	f001 fcf6 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e0a:	201d      	movs	r0, #29
 8004e0c:	f001 fd0f 	bl	800682e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e10:	bf00      	nop
 8004e12:	3720      	adds	r7, #32
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	40010c00 	.word	0x40010c00

08004e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0d      	ldr	r2, [pc, #52]	; (8004e68 <HAL_TIM_Base_MspInit+0x44>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d113      	bne.n	8004e5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <HAL_TIM_Base_MspInit+0x48>)
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	4a0c      	ldr	r2, [pc, #48]	; (8004e6c <HAL_TIM_Base_MspInit+0x48>)
 8004e3c:	f043 0304 	orr.w	r3, r3, #4
 8004e40:	61d3      	str	r3, [r2, #28]
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <HAL_TIM_Base_MspInit+0x48>)
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2100      	movs	r1, #0
 8004e52:	201e      	movs	r0, #30
 8004e54:	f001 fccf 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004e58:	201e      	movs	r0, #30
 8004e5a:	f001 fce8 	bl	800682e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40021000 	.word	0x40021000

08004e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e78:	f107 0310 	add.w	r3, r7, #16
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <HAL_UART_MspInit+0x9c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d139      	bne.n	8004f04 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e90:	4b1f      	ldr	r3, [pc, #124]	; (8004f10 <HAL_UART_MspInit+0xa0>)
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <HAL_UART_MspInit+0xa0>)
 8004e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e9a:	6193      	str	r3, [r2, #24]
 8004e9c:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <HAL_UART_MspInit+0xa0>)
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea8:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <HAL_UART_MspInit+0xa0>)
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <HAL_UART_MspInit+0xa0>)
 8004eae:	f043 0304 	orr.w	r3, r3, #4
 8004eb2:	6193      	str	r3, [r2, #24]
 8004eb4:	4b16      	ldr	r3, [pc, #88]	; (8004f10 <HAL_UART_MspInit+0xa0>)
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GSM_RX_Pin;
 8004ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 8004ece:	f107 0310 	add.w	r3, r7, #16
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	480f      	ldr	r0, [pc, #60]	; (8004f14 <HAL_UART_MspInit+0xa4>)
 8004ed6:	f001 fd75 	bl	80069c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_TX_Pin;
 8004eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 8004ee8:	f107 0310 	add.w	r3, r7, #16
 8004eec:	4619      	mov	r1, r3
 8004eee:	4809      	ldr	r0, [pc, #36]	; (8004f14 <HAL_UART_MspInit+0xa4>)
 8004ef0:	f001 fd68 	bl	80069c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	2025      	movs	r0, #37	; 0x25
 8004efa:	f001 fc7c 	bl	80067f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004efe:	2025      	movs	r0, #37	; 0x25
 8004f00:	f001 fc95 	bl	800682e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004f04:	bf00      	nop
 8004f06:	3720      	adds	r7, #32
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40013800 	.word	0x40013800
 8004f10:	40021000 	.word	0x40021000
 8004f14:	40010800 	.word	0x40010800

08004f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f1c:	e7fe      	b.n	8004f1c <NMI_Handler+0x4>

08004f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f22:	e7fe      	b.n	8004f22 <HardFault_Handler+0x4>

08004f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f28:	e7fe      	b.n	8004f28 <MemManage_Handler+0x4>

08004f2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f2e:	e7fe      	b.n	8004f2e <BusFault_Handler+0x4>

08004f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f34:	e7fe      	b.n	8004f34 <UsageFault_Handler+0x4>

08004f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f36:	b480      	push	{r7}
 8004f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f42:	b480      	push	{r7}
 8004f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f46:	bf00      	nop
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr

08004f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f5e:	f000 feff 	bl	8005d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f6c:	4802      	ldr	r0, [pc, #8]	; (8004f78 <TIM3_IRQHandler+0x10>)
 8004f6e:	f003 fcbf 	bl	80088f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000660 	.word	0x20000660

08004f7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004f80:	4802      	ldr	r0, [pc, #8]	; (8004f8c <TIM4_IRQHandler+0x10>)
 8004f82:	f003 fcb5 	bl	80088f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004f86:	bf00      	nop
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000618 	.word	0x20000618

08004f90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f94:	4802      	ldr	r0, [pc, #8]	; (8004fa0 <USART1_IRQHandler+0x10>)
 8004f96:	f004 fac7 	bl	8009528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	200006d8 	.word	0x200006d8

08004fa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fa8:	bf00      	nop
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <tempSensor_init>:




void tempSensor_init(ADC_HandleTypeDef *hadc)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	//ADC
	tempHadc = hadc;
 8004fb8:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <tempSensor_init+0x2c>)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&tempSensor_state, __tempSensor_idle);
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	4807      	ldr	r0, [pc, #28]	; (8004fe0 <tempSensor_init+0x30>)
 8004fc2:	f7fc fde3 	bl	8001b8c <fsmManager_init>

	//Flags
	flags_tempSensor.dword = 0;
 8004fc6:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <tempSensor_init+0x34>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
	flags_tempSensorError.dword = 0;
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <tempSensor_init+0x38>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	2000057c 	.word	0x2000057c
 8004fe0:	20000584 	.word	0x20000584
 8004fe4:	20000590 	.word	0x20000590
 8004fe8:	20000594 	.word	0x20000594
 8004fec:	00000000 	.word	0x00000000

08004ff0 <tempSensor_handler>:

void tempSensor_handler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&tempSensor_state)) {
 8004ff4:	4856      	ldr	r0, [pc, #344]	; (8005150 <tempSensor_handler+0x160>)
 8004ff6:	f7fc fdf6 	bl	8001be6 <fsmManager_getState>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <tempSensor_handler+0x16>
 8005000:	2b01      	cmp	r3, #1
 8005002:	d028      	beq.n	8005056 <tempSensor_handler+0x66>

				flags_tempSensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 8005004:	e08f      	b.n	8005126 <tempSensor_handler+0x136>
			if(fsmManager_isStateIn(&tempSensor_state)) {
 8005006:	4852      	ldr	r0, [pc, #328]	; (8005150 <tempSensor_handler+0x160>)
 8005008:	f7fc fdf8 	bl	8001bfc <fsmManager_isStateIn>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <tempSensor_handler+0x32>
				fsmManager_stateIn(&tempSensor_state);
 8005012:	484f      	ldr	r0, [pc, #316]	; (8005150 <tempSensor_handler+0x160>)
 8005014:	f7fc fe08 	bl	8001c28 <fsmManager_stateIn>
				flags_tempSensor.bits.isMeasuring = 0;
 8005018:	4a4e      	ldr	r2, [pc, #312]	; (8005154 <tempSensor_handler+0x164>)
 800501a:	7853      	ldrb	r3, [r2, #1]
 800501c:	f36f 03c3 	bfc	r3, #3, #1
 8005020:	7053      	strb	r3, [r2, #1]
			if(flags_tempSensor.bits.requestMeasure) {
 8005022:	4b4c      	ldr	r3, [pc, #304]	; (8005154 <tempSensor_handler+0x164>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <tempSensor_handler+0x52>
				flags_tempSensor.bits.isMeasuring = 1;
 8005030:	4a48      	ldr	r2, [pc, #288]	; (8005154 <tempSensor_handler+0x164>)
 8005032:	7853      	ldrb	r3, [r2, #1]
 8005034:	f043 0308 	orr.w	r3, r3, #8
 8005038:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&tempSensor_state,__tempSensor_getTemperature);
 800503a:	2101      	movs	r1, #1
 800503c:	4844      	ldr	r0, [pc, #272]	; (8005150 <tempSensor_handler+0x160>)
 800503e:	f7fc fdbb 	bl	8001bb8 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&tempSensor_state)) {
 8005042:	4843      	ldr	r0, [pc, #268]	; (8005150 <tempSensor_handler+0x160>)
 8005044:	f7fc fde5 	bl	8001c12 <fsmManager_isStateOut>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d068      	beq.n	8005120 <tempSensor_handler+0x130>
				fsmManager_stateOut(&tempSensor_state);
 800504e:	4840      	ldr	r0, [pc, #256]	; (8005150 <tempSensor_handler+0x160>)
 8005050:	f7fc fdf9 	bl	8001c46 <fsmManager_stateOut>
			break;
 8005054:	e064      	b.n	8005120 <tempSensor_handler+0x130>
			if(fsmManager_isStateIn(&tempSensor_state)) {
 8005056:	483e      	ldr	r0, [pc, #248]	; (8005150 <tempSensor_handler+0x160>)
 8005058:	f7fc fdd0 	bl	8001bfc <fsmManager_isStateIn>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d004      	beq.n	800506c <tempSensor_handler+0x7c>
				fsmManager_stateIn(&tempSensor_state);
 8005062:	483b      	ldr	r0, [pc, #236]	; (8005150 <tempSensor_handler+0x160>)
 8005064:	f7fc fde0 	bl	8001c28 <fsmManager_stateIn>
				temp_adcStart();
 8005068:	f000 f8b8 	bl	80051dc <temp_adcStart>
			tCelcius = (3.3*((float)temp_adcGetValue())/4095 - V_25)/AVG_SLOPE + 25;
 800506c:	f000 f8ca 	bl	8005204 <temp_adcGetValue>
 8005070:	4603      	mov	r3, r0
 8005072:	4618      	mov	r0, r3
 8005074:	f7fb fd40 	bl	8000af8 <__aeabi_ui2f>
 8005078:	4603      	mov	r3, r0
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb f9cc 	bl	8000418 <__aeabi_f2d>
 8005080:	a32b      	add	r3, pc, #172	; (adr r3, 8005130 <tempSensor_handler+0x140>)
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f7fb fa1f 	bl	80004c8 <__aeabi_dmul>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	a329      	add	r3, pc, #164	; (adr r3, 8005138 <tempSensor_handler+0x148>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb fb40 	bl	800071c <__aeabi_ddiv>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4610      	mov	r0, r2
 80050a2:	4619      	mov	r1, r3
 80050a4:	a326      	add	r3, pc, #152	; (adr r3, 8005140 <tempSensor_handler+0x150>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f7fb f855 	bl	8000158 <__aeabi_dsub>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4610      	mov	r0, r2
 80050b4:	4619      	mov	r1, r3
 80050b6:	a324      	add	r3, pc, #144	; (adr r3, 8005148 <tempSensor_handler+0x158>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb fb2e 	bl	800071c <__aeabi_ddiv>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4610      	mov	r0, r2
 80050c6:	4619      	mov	r1, r3
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	4b22      	ldr	r3, [pc, #136]	; (8005158 <tempSensor_handler+0x168>)
 80050ce:	f7fb f845 	bl	800015c <__adddf3>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	f7fb fc07 	bl	80008ec <__aeabi_d2f>
 80050de:	4603      	mov	r3, r0
 80050e0:	4a1e      	ldr	r2, [pc, #120]	; (800515c <tempSensor_handler+0x16c>)
 80050e2:	6013      	str	r3, [r2, #0]
			if(tempSensorCallback != NULL) {
 80050e4:	4b1e      	ldr	r3, [pc, #120]	; (8005160 <tempSensor_handler+0x170>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <tempSensor_handler+0x106>
				tempSensorCallback(__tempSensorEvent_okMeasuring, (float *) &tCelcius);
 80050ec:	4b1c      	ldr	r3, [pc, #112]	; (8005160 <tempSensor_handler+0x170>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	491a      	ldr	r1, [pc, #104]	; (800515c <tempSensor_handler+0x16c>)
 80050f2:	2000      	movs	r0, #0
 80050f4:	4798      	blx	r3
			fsmManager_gotoState(&tempSensor_state,__tempSensor_idle);
 80050f6:	2100      	movs	r1, #0
 80050f8:	4815      	ldr	r0, [pc, #84]	; (8005150 <tempSensor_handler+0x160>)
 80050fa:	f7fc fd5d 	bl	8001bb8 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&tempSensor_state)) {
 80050fe:	4814      	ldr	r0, [pc, #80]	; (8005150 <tempSensor_handler+0x160>)
 8005100:	f7fc fd87 	bl	8001c12 <fsmManager_isStateOut>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <tempSensor_handler+0x134>
				fsmManager_stateOut(&tempSensor_state);
 800510a:	4811      	ldr	r0, [pc, #68]	; (8005150 <tempSensor_handler+0x160>)
 800510c:	f7fc fd9b 	bl	8001c46 <fsmManager_stateOut>
				temp_adcStop();
 8005110:	f000 f884 	bl	800521c <temp_adcStop>
				flags_tempSensor.bits.requestMeasure = 0;
 8005114:	4a0f      	ldr	r2, [pc, #60]	; (8005154 <tempSensor_handler+0x164>)
 8005116:	7813      	ldrb	r3, [r2, #0]
 8005118:	f36f 0300 	bfc	r3, #0, #1
 800511c:	7013      	strb	r3, [r2, #0]
			break;
 800511e:	e001      	b.n	8005124 <tempSensor_handler+0x134>
			break;
 8005120:	bf00      	nop
 8005122:	e000      	b.n	8005126 <tempSensor_handler+0x136>
			break;
 8005124:	bf00      	nop
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	f3af 8000 	nop.w
 8005130:	66666666 	.word	0x66666666
 8005134:	400a6666 	.word	0x400a6666
 8005138:	00000000 	.word	0x00000000
 800513c:	40affe00 	.word	0x40affe00
 8005140:	851eb852 	.word	0x851eb852
 8005144:	3fe851eb 	.word	0x3fe851eb
 8005148:	9999999a 	.word	0x9999999a
 800514c:	3f999999 	.word	0x3f999999
 8005150:	20000584 	.word	0x20000584
 8005154:	20000590 	.word	0x20000590
 8005158:	40390000 	.word	0x40390000
 800515c:	20000580 	.word	0x20000580
 8005160:	20000598 	.word	0x20000598

08005164 <tempSensor_measure>:

void tempSensor_measure(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
	flags_tempSensor.bits.requestMeasure = 1;
 8005168:	4a04      	ldr	r2, [pc, #16]	; (800517c <tempSensor_measure+0x18>)
 800516a:	7813      	ldrb	r3, [r2, #0]
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	7013      	strb	r3, [r2, #0]
}
 8005172:	bf00      	nop
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000590 	.word	0x20000590

08005180 <tempSensor_setCallback>:
{
	return flags_tempSensor.bits.isMeasuring;
}

void tempSensor_setCallback(void (*cb)(_tempSensor_event, void*))
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	tempSensorCallback = cb;
 8005188:	4a03      	ldr	r2, [pc, #12]	; (8005198 <tempSensor_setCallback+0x18>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6013      	str	r3, [r2, #0]
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr
 8005198:	20000598 	.word	0x20000598

0800519c <ADC_Select_CHTemp>:




static void ADC_Select_CHTemp(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80051ac:	2310      	movs	r3, #16
 80051ae:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 80051b0:	2301      	movs	r3, #1
 80051b2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80051b4:	2304      	movs	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(tempHadc, &sConfig) != HAL_OK) {
 80051b8:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <ADC_Select_CHTemp+0x3c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	1d3a      	adds	r2, r7, #4
 80051be:	4611      	mov	r1, r2
 80051c0:	4618      	mov	r0, r3
 80051c2:	f001 f8ad 	bl	8006320 <HAL_ADC_ConfigChannel>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <ADC_Select_CHTemp+0x34>
		Error_Handler();
 80051cc:	f7ff faf4 	bl	80047b8 <Error_Handler>
	}
}
 80051d0:	bf00      	nop
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	2000057c 	.word	0x2000057c

080051dc <temp_adcStart>:

static void temp_adcStart(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
	ADC_Select_CHTemp();
 80051e0:	f7ff ffdc 	bl	800519c <ADC_Select_CHTemp>
	HAL_ADC_Start(tempHadc);
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <temp_adcStart+0x24>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fead 	bl	8005f48 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(tempHadc, 100);
 80051ee:	4b04      	ldr	r3, [pc, #16]	; (8005200 <temp_adcStart+0x24>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2164      	movs	r1, #100	; 0x64
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 ff81 	bl	80060fc <HAL_ADC_PollForConversion>
}
 80051fa:	bf00      	nop
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	2000057c 	.word	0x2000057c

08005204 <temp_adcGetValue>:

static uint32_t temp_adcGetValue(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(tempHadc);
 8005208:	4b03      	ldr	r3, [pc, #12]	; (8005218 <temp_adcGetValue+0x14>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f001 f87b 	bl	8006308 <HAL_ADC_GetValue>
 8005212:	4603      	mov	r3, r0
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	2000057c 	.word	0x2000057c

0800521c <temp_adcStop>:

static void temp_adcStop(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(tempHadc);
 8005220:	4b03      	ldr	r3, [pc, #12]	; (8005230 <temp_adcStop+0x14>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f000 ff3d 	bl	80060a4 <HAL_ADC_Stop>
}
 800522a:	bf00      	nop
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	2000057c 	.word	0x2000057c

08005234 <usSensor_init>:




void usSensor_init(TIM_HandleTypeDef *htim)
{
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	//Timer
	usHtim = htim;
 800523c:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <usSensor_init+0x84>)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&usSensor_state, __usSensor_idle);
 8005242:	2100      	movs	r1, #0
 8005244:	481d      	ldr	r0, [pc, #116]	; (80052bc <usSensor_init+0x88>)
 8005246:	f7fc fca1 	bl	8001b8c <fsmManager_init>

	//Pin
	pinUsVdd_write(0);
 800524a:	2000      	movs	r0, #0
 800524c:	f000 fa32 	bl	80056b4 <pinUsVdd_write>
	pinUsTrigger_write(0);
 8005250:	2000      	movs	r0, #0
 8005252:	f000 fa41 	bl	80056d8 <pinUsTrigger_write>
	pinUsEcho_inputCaptureStop();
 8005256:	f000 fa5d 	bl	8005714 <pinUsEcho_inputCaptureStop>

	//Flags
	flags_usSensor.dword = 0;
 800525a:	4b19      	ldr	r3, [pc, #100]	; (80052c0 <usSensor_init+0x8c>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
	flags_usSensorError.dword = 0;
 8005260:	4b18      	ldr	r3, [pc, #96]	; (80052c4 <usSensor_init+0x90>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

	//Variables
	echoTime = 0;
 8005266:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <usSensor_init+0x94>)
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
	usDistance = 0;
 800526e:	4b17      	ldr	r3, [pc, #92]	; (80052cc <usSensor_init+0x98>)
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
	soundSpeed = numberFloat_getLinearValue(US_SENSOR_DEFAULT_TEMPERATURE, tableTempVsSpeed, sizeof(tableTempVsSpeed)/(sizeof(float)*2));		//Default 25 celcius
 8005276:	220f      	movs	r2, #15
 8005278:	4915      	ldr	r1, [pc, #84]	; (80052d0 <usSensor_init+0x9c>)
 800527a:	4816      	ldr	r0, [pc, #88]	; (80052d4 <usSensor_init+0xa0>)
 800527c:	f000 fc0e 	bl	8005a9c <numberFloat_getLinearValue>
 8005280:	4603      	mov	r3, r0
 8005282:	4a15      	ldr	r2, [pc, #84]	; (80052d8 <usSensor_init+0xa4>)
 8005284:	6013      	str	r3, [r2, #0]

	//Callback
	usSensorCallback = NULL;
 8005286:	4b15      	ldr	r3, [pc, #84]	; (80052dc <usSensor_init+0xa8>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

	//Reference clock for Input Capture
	mFactor = 1000000*(usHtim->Init.Prescaler+1)/HAL_RCC_GetSysClockFreq();
 800528c:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <usSensor_init+0x84>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	3301      	adds	r3, #1
 8005294:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <usSensor_init+0xac>)
 8005296:	fb02 f403 	mul.w	r4, r2, r3
 800529a:	f002 f8c9 	bl	8007430 <HAL_RCC_GetSysClockFreq>
 800529e:	4603      	mov	r3, r0
 80052a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fb fc27 	bl	8000af8 <__aeabi_ui2f>
 80052aa:	4603      	mov	r3, r0
 80052ac:	4a0d      	ldr	r2, [pc, #52]	; (80052e4 <usSensor_init+0xb0>)
 80052ae:	6013      	str	r3, [r2, #0]
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd90      	pop	{r4, r7, pc}
 80052b8:	200005a0 	.word	0x200005a0
 80052bc:	200005bc 	.word	0x200005bc
 80052c0:	200005c8 	.word	0x200005c8
 80052c4:	200005cc 	.word	0x200005cc
 80052c8:	200005e0 	.word	0x200005e0
 80052cc:	200005e4 	.word	0x200005e4
 80052d0:	20000008 	.word	0x20000008
 80052d4:	41a00000 	.word	0x41a00000
 80052d8:	200005e8 	.word	0x200005e8
 80052dc:	200005ec 	.word	0x200005ec
 80052e0:	000f4240 	.word	0x000f4240
 80052e4:	200005dc 	.word	0x200005dc

080052e8 <usSensor_handler>:

void usSensor_handler(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&usSensor_state)) {
 80052ec:	48ba      	ldr	r0, [pc, #744]	; (80055d8 <usSensor_handler+0x2f0>)
 80052ee:	f7fc fc7a 	bl	8001be6 <fsmManager_getState>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b06      	cmp	r3, #6
 80052f6:	f200 8155 	bhi.w	80055a4 <usSensor_handler+0x2bc>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <usSensor_handler+0x18>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	0800531d 	.word	0x0800531d
 8005304:	0800538f 	.word	0x0800538f
 8005308:	080053e9 	.word	0x080053e9
 800530c:	08005459 	.word	0x08005459
 8005310:	080054e3 	.word	0x080054e3
 8005314:	0800552d 	.word	0x0800552d
 8005318:	08005577 	.word	0x08005577
		case __usSensor_idle:
			if(fsmManager_isStateIn(&usSensor_state)) {
 800531c:	48ae      	ldr	r0, [pc, #696]	; (80055d8 <usSensor_handler+0x2f0>)
 800531e:	f7fc fc6d 	bl	8001bfc <fsmManager_isStateIn>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d012      	beq.n	800534e <usSensor_handler+0x66>
				fsmManager_stateIn(&usSensor_state);
 8005328:	48ab      	ldr	r0, [pc, #684]	; (80055d8 <usSensor_handler+0x2f0>)
 800532a:	f7fc fc7d 	bl	8001c28 <fsmManager_stateIn>

				//Clear signals
				pinUsTrigger_write(0);
 800532e:	2000      	movs	r0, #0
 8005330:	f000 f9d2 	bl	80056d8 <pinUsTrigger_write>

				//Clear variables
				echoTime = 0;
 8005334:	4ba9      	ldr	r3, [pc, #676]	; (80055dc <usSensor_handler+0x2f4>)
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
				usDistance = 0;
 800533c:	4ba8      	ldr	r3, [pc, #672]	; (80055e0 <usSensor_handler+0x2f8>)
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
				flags_usSensor.bits.isMeasuring = 0;
 8005344:	4aa7      	ldr	r2, [pc, #668]	; (80055e4 <usSensor_handler+0x2fc>)
 8005346:	7853      	ldrb	r3, [r2, #1]
 8005348:	f36f 03c3 	bfc	r3, #3, #1
 800534c:	7053      	strb	r3, [r2, #1]
			}

			if(flags_usSensor.bits.requestMeasure) {
 800534e:	4ba5      	ldr	r3, [pc, #660]	; (80055e4 <usSensor_handler+0x2fc>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00d      	beq.n	8005378 <usSensor_handler+0x90>
				flags_usSensor.bits.requestMeasure = 0;
 800535c:	4aa1      	ldr	r2, [pc, #644]	; (80055e4 <usSensor_handler+0x2fc>)
 800535e:	7813      	ldrb	r3, [r2, #0]
 8005360:	f36f 0300 	bfc	r3, #0, #1
 8005364:	7013      	strb	r3, [r2, #0]
				flags_usSensor.bits.isMeasuring = 1;
 8005366:	4a9f      	ldr	r2, [pc, #636]	; (80055e4 <usSensor_handler+0x2fc>)
 8005368:	7853      	ldrb	r3, [r2, #1]
 800536a:	f043 0308 	orr.w	r3, r3, #8
 800536e:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&usSensor_state,__usSensor_pinUsTrigger_write);
 8005370:	2101      	movs	r1, #1
 8005372:	4899      	ldr	r0, [pc, #612]	; (80055d8 <usSensor_handler+0x2f0>)
 8005374:	f7fc fc20 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005378:	4897      	ldr	r0, [pc, #604]	; (80055d8 <usSensor_handler+0x2f0>)
 800537a:	f7fc fc4a 	bl	8001c12 <fsmManager_isStateOut>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8126 	beq.w	80055d2 <usSensor_handler+0x2ea>
				fsmManager_stateOut(&usSensor_state);
 8005386:	4894      	ldr	r0, [pc, #592]	; (80055d8 <usSensor_handler+0x2f0>)
 8005388:	f7fc fc5d 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 800538c:	e121      	b.n	80055d2 <usSensor_handler+0x2ea>



		case __usSensor_pinUsTrigger_write:
			if(fsmManager_isStateIn(&usSensor_state)) {
 800538e:	4892      	ldr	r0, [pc, #584]	; (80055d8 <usSensor_handler+0x2f0>)
 8005390:	f7fc fc34 	bl	8001bfc <fsmManager_isStateIn>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d009      	beq.n	80053ae <usSensor_handler+0xc6>
				fsmManager_stateIn(&usSensor_state);
 800539a:	488f      	ldr	r0, [pc, #572]	; (80055d8 <usSensor_handler+0x2f0>)
 800539c:	f7fc fc44 	bl	8001c28 <fsmManager_stateIn>

				//Set trigger during 1 mseg
				pinUsTrigger_write(1);
 80053a0:	2001      	movs	r0, #1
 80053a2:	f000 f999 	bl	80056d8 <pinUsTrigger_write>
				softTimer_start(&timer, 1);
 80053a6:	2101      	movs	r1, #1
 80053a8:	488f      	ldr	r0, [pc, #572]	; (80055e8 <usSensor_handler+0x300>)
 80053aa:	f7ff fbe3 	bl	8004b74 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 80053ae:	488e      	ldr	r0, [pc, #568]	; (80055e8 <usSensor_handler+0x300>)
 80053b0:	f7ff fbf4 	bl	8004b9c <softTimer_expired>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <usSensor_handler+0xea>
				softTimer_stop(&timer);
 80053ba:	488b      	ldr	r0, [pc, #556]	; (80055e8 <usSensor_handler+0x300>)
 80053bc:	f7ff fc22 	bl	8004c04 <softTimer_stop>

				//Finished setting trigger
				pinUsTrigger_write(0);
 80053c0:	2000      	movs	r0, #0
 80053c2:	f000 f989 	bl	80056d8 <pinUsTrigger_write>

				//Enable input capture for echo
				pinUsEcho_inputCaptureStart();
 80053c6:	f000 f999 	bl	80056fc <pinUsEcho_inputCaptureStart>

				fsmManager_gotoState(&usSensor_state,__usSensor_waitEcho);
 80053ca:	2102      	movs	r1, #2
 80053cc:	4882      	ldr	r0, [pc, #520]	; (80055d8 <usSensor_handler+0x2f0>)
 80053ce:	f7fc fbf3 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 80053d2:	4881      	ldr	r0, [pc, #516]	; (80055d8 <usSensor_handler+0x2f0>)
 80053d4:	f7fc fc1d 	bl	8001c12 <fsmManager_isStateOut>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8112 	beq.w	8005604 <usSensor_handler+0x31c>
				fsmManager_stateOut(&usSensor_state);
 80053e0:	487d      	ldr	r0, [pc, #500]	; (80055d8 <usSensor_handler+0x2f0>)
 80053e2:	f7fc fc30 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80053e6:	e10d      	b.n	8005604 <usSensor_handler+0x31c>



		case __usSensor_waitEcho:
			if(fsmManager_isStateIn(&usSensor_state)) {
 80053e8:	487b      	ldr	r0, [pc, #492]	; (80055d8 <usSensor_handler+0x2f0>)
 80053ea:	f7fc fc07 	bl	8001bfc <fsmManager_isStateIn>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d006      	beq.n	8005402 <usSensor_handler+0x11a>
				fsmManager_stateIn(&usSensor_state);
 80053f4:	4878      	ldr	r0, [pc, #480]	; (80055d8 <usSensor_handler+0x2f0>)
 80053f6:	f7fc fc17 	bl	8001c28 <fsmManager_stateIn>

				//Set 100mseg timeout
				softTimer_start(&timeout, 100);
 80053fa:	2164      	movs	r1, #100	; 0x64
 80053fc:	487b      	ldr	r0, [pc, #492]	; (80055ec <usSensor_handler+0x304>)
 80053fe:	f7ff fbb9 	bl	8004b74 <softTimer_start>
			}

			//Echo received
			if(flags_usSensor.bits.receivedEcho == 1) {
 8005402:	4b78      	ldr	r3, [pc, #480]	; (80055e4 <usSensor_handler+0x2fc>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <usSensor_handler+0x13c>
				flags_usSensor.bits.receivedEcho = 0;
 8005410:	4a74      	ldr	r2, [pc, #464]	; (80055e4 <usSensor_handler+0x2fc>)
 8005412:	7813      	ldrb	r3, [r2, #0]
 8005414:	f36f 1386 	bfc	r3, #6, #1
 8005418:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&usSensor_state,__usSensor_getDistance);
 800541a:	2103      	movs	r1, #3
 800541c:	486e      	ldr	r0, [pc, #440]	; (80055d8 <usSensor_handler+0x2f0>)
 800541e:	f7fc fbcb 	bl	8001bb8 <fsmManager_gotoState>
 8005422:	e00c      	b.n	800543e <usSensor_handler+0x156>
			} else if(softTimer_expired(&timeout)) {
 8005424:	4871      	ldr	r0, [pc, #452]	; (80055ec <usSensor_handler+0x304>)
 8005426:	f7ff fbb9 	bl	8004b9c <softTimer_expired>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d006      	beq.n	800543e <usSensor_handler+0x156>
				softTimer_stop(&timeout);
 8005430:	486e      	ldr	r0, [pc, #440]	; (80055ec <usSensor_handler+0x304>)
 8005432:	f7ff fbe7 	bl	8004c04 <softTimer_stop>

				fsmManager_gotoState(&usSensor_state,__usSensor_errorWaitEcho);
 8005436:	2104      	movs	r1, #4
 8005438:	4867      	ldr	r0, [pc, #412]	; (80055d8 <usSensor_handler+0x2f0>)
 800543a:	f7fc fbbd 	bl	8001bb8 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 800543e:	4866      	ldr	r0, [pc, #408]	; (80055d8 <usSensor_handler+0x2f0>)
 8005440:	f7fc fbe7 	bl	8001c12 <fsmManager_isStateOut>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 80de 	beq.w	8005608 <usSensor_handler+0x320>
				fsmManager_stateOut(&usSensor_state);
 800544c:	4862      	ldr	r0, [pc, #392]	; (80055d8 <usSensor_handler+0x2f0>)
 800544e:	f7fc fbfa 	bl	8001c46 <fsmManager_stateOut>

				pinUsEcho_inputCaptureStop();
 8005452:	f000 f95f 	bl	8005714 <pinUsEcho_inputCaptureStop>
			}
			break;
 8005456:	e0d7      	b.n	8005608 <usSensor_handler+0x320>



		case __usSensor_getDistance:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005458:	485f      	ldr	r0, [pc, #380]	; (80055d8 <usSensor_handler+0x2f0>)
 800545a:	f7fc fbcf 	bl	8001bfc <fsmManager_isStateIn>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <usSensor_handler+0x182>
				fsmManager_stateIn(&usSensor_state);
 8005464:	485c      	ldr	r0, [pc, #368]	; (80055d8 <usSensor_handler+0x2f0>)
 8005466:	f7fc fbdf 	bl	8001c28 <fsmManager_stateIn>
			}

			//Get speed of sound based on temperature
			soundSpeed = getSoundSpeed();
 800546a:	f000 f8fd 	bl	8005668 <getSoundSpeed>
 800546e:	4603      	mov	r3, r0
 8005470:	4a5f      	ldr	r2, [pc, #380]	; (80055f0 <usSensor_handler+0x308>)
 8005472:	6013      	str	r3, [r2, #0]

			//Calculate usDistance
			usDistance = (echoTime*soundSpeed/2000); //[mm]
 8005474:	4b59      	ldr	r3, [pc, #356]	; (80055dc <usSensor_handler+0x2f4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a5d      	ldr	r2, [pc, #372]	; (80055f0 <usSensor_handler+0x308>)
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	4611      	mov	r1, r2
 800547e:	4618      	mov	r0, r3
 8005480:	f7fb fb92 	bl	8000ba8 <__aeabi_fmul>
 8005484:	4603      	mov	r3, r0
 8005486:	495b      	ldr	r1, [pc, #364]	; (80055f4 <usSensor_handler+0x30c>)
 8005488:	4618      	mov	r0, r3
 800548a:	f7fb fc41 	bl	8000d10 <__aeabi_fdiv>
 800548e:	4603      	mov	r3, r0
 8005490:	461a      	mov	r2, r3
 8005492:	4b53      	ldr	r3, [pc, #332]	; (80055e0 <usSensor_handler+0x2f8>)
 8005494:	601a      	str	r2, [r3, #0]

			if(usDistance > US_SENSOR_DISTANCE_MAX_MILIMETER) {
 8005496:	4b52      	ldr	r3, [pc, #328]	; (80055e0 <usSensor_handler+0x2f8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4957      	ldr	r1, [pc, #348]	; (80055f8 <usSensor_handler+0x310>)
 800549c:	4618      	mov	r0, r3
 800549e:	f7fb fd3f 	bl	8000f20 <__aeabi_fcmpgt>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d004      	beq.n	80054b2 <usSensor_handler+0x1ca>
				fsmManager_gotoState(&usSensor_state,__usSensor_errorEchoOverflow);
 80054a8:	2105      	movs	r1, #5
 80054aa:	484b      	ldr	r0, [pc, #300]	; (80055d8 <usSensor_handler+0x2f0>)
 80054ac:	f7fc fb84 	bl	8001bb8 <fsmManager_gotoState>
 80054b0:	e00c      	b.n	80054cc <usSensor_handler+0x1e4>
			} else {
				//Informs to higher layer
				if(usSensorCallback != NULL) {
 80054b2:	4b52      	ldr	r3, [pc, #328]	; (80055fc <usSensor_handler+0x314>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <usSensor_handler+0x1dc>
					usSensorCallback(__usSensorEvent_okMeasuring, (float *) &usDistance);
 80054ba:	4b50      	ldr	r3, [pc, #320]	; (80055fc <usSensor_handler+0x314>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4948      	ldr	r1, [pc, #288]	; (80055e0 <usSensor_handler+0x2f8>)
 80054c0:	2000      	movs	r0, #0
 80054c2:	4798      	blx	r3
				}

				fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 80054c4:	2100      	movs	r1, #0
 80054c6:	4844      	ldr	r0, [pc, #272]	; (80055d8 <usSensor_handler+0x2f0>)
 80054c8:	f7fc fb76 	bl	8001bb8 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&usSensor_state)) {
 80054cc:	4842      	ldr	r0, [pc, #264]	; (80055d8 <usSensor_handler+0x2f0>)
 80054ce:	f7fc fba0 	bl	8001c12 <fsmManager_isStateOut>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8099 	beq.w	800560c <usSensor_handler+0x324>
				fsmManager_stateOut(&usSensor_state);
 80054da:	483f      	ldr	r0, [pc, #252]	; (80055d8 <usSensor_handler+0x2f0>)
 80054dc:	f7fc fbb3 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80054e0:	e094      	b.n	800560c <usSensor_handler+0x324>



		case __usSensor_errorWaitEcho:
			if(fsmManager_isStateIn(&usSensor_state)) {
 80054e2:	483d      	ldr	r0, [pc, #244]	; (80055d8 <usSensor_handler+0x2f0>)
 80054e4:	f7fc fb8a 	bl	8001bfc <fsmManager_isStateIn>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <usSensor_handler+0x20c>
				fsmManager_stateIn(&usSensor_state);
 80054ee:	483a      	ldr	r0, [pc, #232]	; (80055d8 <usSensor_handler+0x2f0>)
 80054f0:	f7fc fb9a 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_usSensorError.bits.echo = 1;
 80054f4:	4a42      	ldr	r2, [pc, #264]	; (8005600 <usSensor_handler+0x318>)
 80054f6:	7813      	ldrb	r3, [r2, #0]
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	7013      	strb	r3, [r2, #0]

			//Informs to higher layer
			if(usSensorCallback != NULL) {
 80054fe:	4b3f      	ldr	r3, [pc, #252]	; (80055fc <usSensor_handler+0x314>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <usSensor_handler+0x228>
				usSensorCallback(__usSensorEvent_errorEcho, NULL);
 8005506:	4b3d      	ldr	r3, [pc, #244]	; (80055fc <usSensor_handler+0x314>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2100      	movs	r1, #0
 800550c:	2001      	movs	r0, #1
 800550e:	4798      	blx	r3
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_error);
 8005510:	2106      	movs	r1, #6
 8005512:	4831      	ldr	r0, [pc, #196]	; (80055d8 <usSensor_handler+0x2f0>)
 8005514:	f7fc fb50 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005518:	482f      	ldr	r0, [pc, #188]	; (80055d8 <usSensor_handler+0x2f0>)
 800551a:	f7fc fb7a 	bl	8001c12 <fsmManager_isStateOut>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d075      	beq.n	8005610 <usSensor_handler+0x328>
				fsmManager_stateOut(&usSensor_state);
 8005524:	482c      	ldr	r0, [pc, #176]	; (80055d8 <usSensor_handler+0x2f0>)
 8005526:	f7fc fb8e 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 800552a:	e071      	b.n	8005610 <usSensor_handler+0x328>



		case __usSensor_errorEchoOverflow:
			if(fsmManager_isStateIn(&usSensor_state)) {
 800552c:	482a      	ldr	r0, [pc, #168]	; (80055d8 <usSensor_handler+0x2f0>)
 800552e:	f7fc fb65 	bl	8001bfc <fsmManager_isStateIn>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <usSensor_handler+0x256>
				fsmManager_stateIn(&usSensor_state);
 8005538:	4827      	ldr	r0, [pc, #156]	; (80055d8 <usSensor_handler+0x2f0>)
 800553a:	f7fc fb75 	bl	8001c28 <fsmManager_stateIn>
			}

			flags_usSensorError.bits.echo = 1;
 800553e:	4a30      	ldr	r2, [pc, #192]	; (8005600 <usSensor_handler+0x318>)
 8005540:	7813      	ldrb	r3, [r2, #0]
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	7013      	strb	r3, [r2, #0]

			//Informs to higher layer
			if(usSensorCallback != NULL) {
 8005548:	4b2c      	ldr	r3, [pc, #176]	; (80055fc <usSensor_handler+0x314>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <usSensor_handler+0x272>
				usSensorCallback(__usSensorEvent_errorEcho, NULL);
 8005550:	4b2a      	ldr	r3, [pc, #168]	; (80055fc <usSensor_handler+0x314>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2100      	movs	r1, #0
 8005556:	2001      	movs	r0, #1
 8005558:	4798      	blx	r3
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_error);
 800555a:	2106      	movs	r1, #6
 800555c:	481e      	ldr	r0, [pc, #120]	; (80055d8 <usSensor_handler+0x2f0>)
 800555e:	f7fc fb2b 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005562:	481d      	ldr	r0, [pc, #116]	; (80055d8 <usSensor_handler+0x2f0>)
 8005564:	f7fc fb55 	bl	8001c12 <fsmManager_isStateOut>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d052      	beq.n	8005614 <usSensor_handler+0x32c>
				fsmManager_stateOut(&usSensor_state);
 800556e:	481a      	ldr	r0, [pc, #104]	; (80055d8 <usSensor_handler+0x2f0>)
 8005570:	f7fc fb69 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 8005574:	e04e      	b.n	8005614 <usSensor_handler+0x32c>



		case __usSensor_error:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005576:	4818      	ldr	r0, [pc, #96]	; (80055d8 <usSensor_handler+0x2f0>)
 8005578:	f7fc fb40 	bl	8001bfc <fsmManager_isStateIn>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <usSensor_handler+0x2a0>
				fsmManager_stateIn(&usSensor_state);
 8005582:	4815      	ldr	r0, [pc, #84]	; (80055d8 <usSensor_handler+0x2f0>)
 8005584:	f7fc fb50 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 8005588:	2100      	movs	r1, #0
 800558a:	4813      	ldr	r0, [pc, #76]	; (80055d8 <usSensor_handler+0x2f0>)
 800558c:	f7fc fb14 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005590:	4811      	ldr	r0, [pc, #68]	; (80055d8 <usSensor_handler+0x2f0>)
 8005592:	f7fc fb3e 	bl	8001c12 <fsmManager_isStateOut>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d03d      	beq.n	8005618 <usSensor_handler+0x330>
				fsmManager_stateOut(&usSensor_state);
 800559c:	480e      	ldr	r0, [pc, #56]	; (80055d8 <usSensor_handler+0x2f0>)
 800559e:	f7fc fb52 	bl	8001c46 <fsmManager_stateOut>
			}
			break;
 80055a2:	e039      	b.n	8005618 <usSensor_handler+0x330>



		default:
			if(fsmManager_isStateIn(&usSensor_state)) {
 80055a4:	480c      	ldr	r0, [pc, #48]	; (80055d8 <usSensor_handler+0x2f0>)
 80055a6:	f7fc fb29 	bl	8001bfc <fsmManager_isStateIn>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <usSensor_handler+0x2ce>
				fsmManager_stateIn(&usSensor_state);
 80055b0:	4809      	ldr	r0, [pc, #36]	; (80055d8 <usSensor_handler+0x2f0>)
 80055b2:	f7fc fb39 	bl	8001c28 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 80055b6:	2100      	movs	r1, #0
 80055b8:	4807      	ldr	r0, [pc, #28]	; (80055d8 <usSensor_handler+0x2f0>)
 80055ba:	f7fc fafd 	bl	8001bb8 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 80055be:	4806      	ldr	r0, [pc, #24]	; (80055d8 <usSensor_handler+0x2f0>)
 80055c0:	f7fc fb27 	bl	8001c12 <fsmManager_isStateOut>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d027      	beq.n	800561a <usSensor_handler+0x332>
				fsmManager_stateOut(&usSensor_state);
 80055ca:	4803      	ldr	r0, [pc, #12]	; (80055d8 <usSensor_handler+0x2f0>)
 80055cc:	f7fc fb3b 	bl	8001c46 <fsmManager_stateOut>
			}
	}
}
 80055d0:	e023      	b.n	800561a <usSensor_handler+0x332>
			break;
 80055d2:	bf00      	nop
 80055d4:	e021      	b.n	800561a <usSensor_handler+0x332>
 80055d6:	bf00      	nop
 80055d8:	200005bc 	.word	0x200005bc
 80055dc:	200005e0 	.word	0x200005e0
 80055e0:	200005e4 	.word	0x200005e4
 80055e4:	200005c8 	.word	0x200005c8
 80055e8:	200005a4 	.word	0x200005a4
 80055ec:	200005b0 	.word	0x200005b0
 80055f0:	200005e8 	.word	0x200005e8
 80055f4:	44fa0000 	.word	0x44fa0000
 80055f8:	45bb8000 	.word	0x45bb8000
 80055fc:	200005ec 	.word	0x200005ec
 8005600:	200005cc 	.word	0x200005cc
			break;
 8005604:	bf00      	nop
 8005606:	e008      	b.n	800561a <usSensor_handler+0x332>
			break;
 8005608:	bf00      	nop
 800560a:	e006      	b.n	800561a <usSensor_handler+0x332>
			break;
 800560c:	bf00      	nop
 800560e:	e004      	b.n	800561a <usSensor_handler+0x332>
			break;
 8005610:	bf00      	nop
 8005612:	e002      	b.n	800561a <usSensor_handler+0x332>
			break;
 8005614:	bf00      	nop
 8005616:	e000      	b.n	800561a <usSensor_handler+0x332>
			break;
 8005618:	bf00      	nop
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop

08005620 <usSensor_powerOn>:

void usSensor_powerOn(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
	pinUsVdd_write(1);
 8005624:	2001      	movs	r0, #1
 8005626:	f000 f845 	bl	80056b4 <pinUsVdd_write>
}
 800562a:	bf00      	nop
 800562c:	bd80      	pop	{r7, pc}

0800562e <usSensor_powerOff>:

void usSensor_powerOff(void)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	af00      	add	r7, sp, #0
	pinUsVdd_write(0);
 8005632:	2000      	movs	r0, #0
 8005634:	f000 f83e 	bl	80056b4 <pinUsVdd_write>
}
 8005638:	bf00      	nop
 800563a:	bd80      	pop	{r7, pc}

0800563c <usSensor_measure>:

void usSensor_measure(float temp)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	temperature = temp;
 8005644:	4a06      	ldr	r2, [pc, #24]	; (8005660 <usSensor_measure+0x24>)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6013      	str	r3, [r2, #0]

	flags_usSensor.bits.requestMeasure = 1;
 800564a:	4a06      	ldr	r2, [pc, #24]	; (8005664 <usSensor_measure+0x28>)
 800564c:	7813      	ldrb	r3, [r2, #0]
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	7013      	strb	r3, [r2, #0]
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	2000059c 	.word	0x2000059c
 8005664:	200005c8 	.word	0x200005c8

08005668 <getSoundSpeed>:




static float getSoundSpeed(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
	float speed = 0;
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	607b      	str	r3, [r7, #4]

	speed = numberFloat_getLinearValue(temperature, tableTempVsSpeed, sizeof(tableTempVsSpeed)/(sizeof(float)*2));
 8005674:	4b06      	ldr	r3, [pc, #24]	; (8005690 <getSoundSpeed+0x28>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	220f      	movs	r2, #15
 800567a:	4906      	ldr	r1, [pc, #24]	; (8005694 <getSoundSpeed+0x2c>)
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fa0d 	bl	8005a9c <numberFloat_getLinearValue>
 8005682:	6078      	str	r0, [r7, #4]

	return speed;
 8005684:	687b      	ldr	r3, [r7, #4]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	2000059c 	.word	0x2000059c
 8005694:	20000008 	.word	0x20000008

08005698 <usSensor_setCallback>:

void usSensor_setCallback(void (*cb)(_usSensor_event, void*))
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	usSensorCallback = cb;
 80056a0:	4a03      	ldr	r2, [pc, #12]	; (80056b0 <usSensor_setCallback+0x18>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6013      	str	r3, [r2, #0]
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr
 80056b0:	200005ec 	.word	0x200005ec

080056b4 <pinUsVdd_write>:
	US_TRIGGER		input			gpio
	US_ECHO			output			input capture
*/

static void pinUsVdd_write(uint8_t state)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(US_SENSOR_VDD_PORT, US_SENSOR_VDD_PIN, state);
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	461a      	mov	r2, r3
 80056c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056c6:	4803      	ldr	r0, [pc, #12]	; (80056d4 <pinUsVdd_write+0x20>)
 80056c8:	f001 fb00 	bl	8006ccc <HAL_GPIO_WritePin>
}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40010c00 	.word	0x40010c00

080056d8 <pinUsTrigger_write>:

static void pinUsTrigger_write(uint8_t state)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(US_SENSOR_TRIGGER_PORT, US_SENSOR_TRIGGER_PIN, state);
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	461a      	mov	r2, r3
 80056e6:	2102      	movs	r1, #2
 80056e8:	4803      	ldr	r0, [pc, #12]	; (80056f8 <pinUsTrigger_write+0x20>)
 80056ea:	f001 faef 	bl	8006ccc <HAL_GPIO_WritePin>
}
 80056ee:	bf00      	nop
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40010c00 	.word	0x40010c00

080056fc <pinUsEcho_inputCaptureStart>:

static void pinUsEcho_inputCaptureStart(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005700:	4b03      	ldr	r3, [pc, #12]	; (8005710 <pinUsEcho_inputCaptureStart+0x14>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2108      	movs	r1, #8
 8005706:	4618      	mov	r0, r3
 8005708:	f002 ff44 	bl	8008594 <HAL_TIM_IC_Start_IT>
}
 800570c:	bf00      	nop
 800570e:	bd80      	pop	{r7, pc}
 8005710:	200005a0 	.word	0x200005a0

08005714 <pinUsEcho_inputCaptureStop>:

static void pinUsEcho_inputCaptureStop(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Stop_IT(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005718:	4b03      	ldr	r3, [pc, #12]	; (8005728 <pinUsEcho_inputCaptureStop+0x14>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2108      	movs	r1, #8
 800571e:	4618      	mov	r0, r3
 8005720:	f003 f83e 	bl	80087a0 <HAL_TIM_IC_Stop_IT>
}
 8005724:	bf00      	nop
 8005726:	bd80      	pop	{r7, pc}
 8005728:	200005a0 	.word	0x200005a0

0800572c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	if(htim->Instance == usHtim->Instance && htim->Channel == usHtim->Channel) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4b49      	ldr	r3, [pc, #292]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	f040 8089 	bne.w	8005856 <HAL_TIM_IC_CaptureCallback+0x12a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	7f1a      	ldrb	r2, [r3, #28]
 8005748:	4b45      	ldr	r3, [pc, #276]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	7f1b      	ldrb	r3, [r3, #28]
 800574e:	429a      	cmp	r2, r3
 8005750:	f040 8081 	bne.w	8005856 <HAL_TIM_IC_CaptureCallback+0x12a>
		if(flags_usSensor.bits.isFirstCaptured == 0) {
 8005754:	4b43      	ldr	r3, [pc, #268]	; (8005864 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d122      	bne.n	80057a8 <HAL_TIM_IC_CaptureCallback+0x7c>
			flags_usSensor.bits.isFirstCaptured = 1;
 8005762:	4a40      	ldr	r2, [pc, #256]	; (8005864 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005764:	7853      	ldrb	r3, [r2, #1]
 8005766:	f043 0304 	orr.w	r3, r3, #4
 800576a:	7053      	strb	r3, [r2, #1]

			icVal1 = HAL_TIM_ReadCapturedValue(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 800576c:	4b3c      	ldr	r3, [pc, #240]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2108      	movs	r1, #8
 8005772:	4618      	mov	r0, r3
 8005774:	f003 fb1c 	bl	8008db0 <HAL_TIM_ReadCapturedValue>
 8005778:	4603      	mov	r3, r0
 800577a:	4a3b      	ldr	r2, [pc, #236]	; (8005868 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800577c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(usHtim, US_SENSOR_ECHO_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
 800577e:	4b38      	ldr	r3, [pc, #224]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6a1a      	ldr	r2, [r3, #32]
 8005786:	4b36      	ldr	r3, [pc, #216]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005790:	621a      	str	r2, [r3, #32]
 8005792:	4b33      	ldr	r3, [pc, #204]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6a1a      	ldr	r2, [r3, #32]
 800579a:	4b31      	ldr	r3, [pc, #196]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a4:	621a      	str	r2, [r3, #32]

			flags_usSensor.bits.receivedEcho = 1;
			__HAL_TIM_SET_CAPTUREPOLARITY(usHtim, US_SENSOR_ECHO_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 80057a6:	e056      	b.n	8005856 <HAL_TIM_IC_CaptureCallback+0x12a>
			flags_usSensor.bits.isFirstCaptured = 0;
 80057a8:	4a2e      	ldr	r2, [pc, #184]	; (8005864 <HAL_TIM_IC_CaptureCallback+0x138>)
 80057aa:	7853      	ldrb	r3, [r2, #1]
 80057ac:	f36f 0382 	bfc	r3, #2, #1
 80057b0:	7053      	strb	r3, [r2, #1]
			icVal2 = HAL_TIM_ReadCapturedValue(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 80057b2:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2108      	movs	r1, #8
 80057b8:	4618      	mov	r0, r3
 80057ba:	f003 faf9 	bl	8008db0 <HAL_TIM_ReadCapturedValue>
 80057be:	4603      	mov	r3, r0
 80057c0:	4a2a      	ldr	r2, [pc, #168]	; (800586c <HAL_TIM_IC_CaptureCallback+0x140>)
 80057c2:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(usHtim, 0);
 80057c4:	4b26      	ldr	r3, [pc, #152]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	625a      	str	r2, [r3, #36]	; 0x24
			if(icVal2 > icVal1) icDif = icVal2-icVal1;
 80057ce:	4b27      	ldr	r3, [pc, #156]	; (800586c <HAL_TIM_IC_CaptureCallback+0x140>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b25      	ldr	r3, [pc, #148]	; (8005868 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d906      	bls.n	80057e8 <HAL_TIM_IC_CaptureCallback+0xbc>
 80057da:	4b24      	ldr	r3, [pc, #144]	; (800586c <HAL_TIM_IC_CaptureCallback+0x140>)
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b22      	ldr	r3, [pc, #136]	; (8005868 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	4a22      	ldr	r2, [pc, #136]	; (8005870 <HAL_TIM_IC_CaptureCallback+0x144>)
 80057e6:	6013      	str	r3, [r2, #0]
			if(icVal1 > icVal2) icDif = (0xffff-icVal1)+icVal2;
 80057e8:	4b1f      	ldr	r3, [pc, #124]	; (8005868 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b1f      	ldr	r3, [pc, #124]	; (800586c <HAL_TIM_IC_CaptureCallback+0x140>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d909      	bls.n	8005808 <HAL_TIM_IC_CaptureCallback+0xdc>
 80057f4:	4b1d      	ldr	r3, [pc, #116]	; (800586c <HAL_TIM_IC_CaptureCallback+0x140>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005802:	33ff      	adds	r3, #255	; 0xff
 8005804:	4a1a      	ldr	r2, [pc, #104]	; (8005870 <HAL_TIM_IC_CaptureCallback+0x144>)
 8005806:	6013      	str	r3, [r2, #0]
			echoTime = icDif*mFactor;
 8005808:	4b19      	ldr	r3, [pc, #100]	; (8005870 <HAL_TIM_IC_CaptureCallback+0x144>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f7fb f973 	bl	8000af8 <__aeabi_ui2f>
 8005812:	4602      	mov	r2, r0
 8005814:	4b17      	ldr	r3, [pc, #92]	; (8005874 <HAL_TIM_IC_CaptureCallback+0x148>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f7fb f9c4 	bl	8000ba8 <__aeabi_fmul>
 8005820:	4603      	mov	r3, r0
 8005822:	461a      	mov	r2, r3
 8005824:	4b14      	ldr	r3, [pc, #80]	; (8005878 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8005826:	601a      	str	r2, [r3, #0]
			flags_usSensor.bits.receivedEcho = 1;
 8005828:	4a0e      	ldr	r2, [pc, #56]	; (8005864 <HAL_TIM_IC_CaptureCallback+0x138>)
 800582a:	7813      	ldrb	r3, [r2, #0]
 800582c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005830:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(usHtim, US_SENSOR_ECHO_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
 8005832:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6a1a      	ldr	r2, [r3, #32]
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005844:	621a      	str	r2, [r3, #32]
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <HAL_TIM_IC_CaptureCallback+0x134>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a12      	ldr	r2, [r2, #32]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	200005a0 	.word	0x200005a0
 8005864:	200005c8 	.word	0x200005c8
 8005868:	200005d0 	.word	0x200005d0
 800586c:	200005d4 	.word	0x200005d4
 8005870:	200005d8 	.word	0x200005d8
 8005874:	200005dc 	.word	0x200005dc
 8005878:	200005e0 	.word	0x200005e0

0800587c <string_length>:

    return i;
}

uint32_t string_length(uint8_t *str)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]

    if(str != NULL) {
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <string_length+0x26>
        while(str[len] != '\0') {
 800588e:	e002      	b.n	8005896 <string_length+0x1a>
            len++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3301      	adds	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
        while(str[len] != '\0') {
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f6      	bne.n	8005890 <string_length+0x14>
        }
    }

    return len;
 80058a2:	68fb      	ldr	r3, [r7, #12]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr

080058ae <string_containsWithinLength>:

    return contains;
}

uint8_t string_containsWithinLength(uint8_t *str, uint8_t *subStr, uint32_t lenStr)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b088      	sub	sp, #32
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
	uint32_t pos = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
	uint32_t i = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
    uint8_t contains = 0;
 80058c2:	2300      	movs	r3, #0
 80058c4:	75fb      	strb	r3, [r7, #23]
    uint32_t lenSubStr;
    
    if(subStr != NULL && lenStr != 0) {
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d038      	beq.n	800593e <string_containsWithinLength+0x90>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d035      	beq.n	800593e <string_containsWithinLength+0x90>
        lenSubStr = string_length(subStr);
 80058d2:	68b8      	ldr	r0, [r7, #8]
 80058d4:	f7ff ffd2 	bl	800587c <string_length>
 80058d8:	6138      	str	r0, [r7, #16]

        if(lenSubStr <= lenStr) {
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d82d      	bhi.n	800593e <string_containsWithinLength+0x90>
            while(pos < lenStr && contains == 0) {
 80058e2:	e025      	b.n	8005930 <string_containsWithinLength+0x82>
                i = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61bb      	str	r3, [r7, #24]

                while((pos + i) < lenStr) {
 80058e8:	e019      	b.n	800591e <string_containsWithinLength+0x70>
                    if(str[pos + i] != subStr[i]) {
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	4413      	add	r3, r2
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	781a      	ldrb	r2, [r3, #0]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	440b      	add	r3, r1
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d002      	beq.n	8005908 <string_containsWithinLength+0x5a>
                        contains = 0;
 8005902:	2300      	movs	r3, #0
 8005904:	75fb      	strb	r3, [r7, #23]
                        break;
 8005906:	e010      	b.n	800592a <string_containsWithinLength+0x7c>
                    }
                    else if ((lenSubStr - 1) == i) {
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	3b01      	subs	r3, #1
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	429a      	cmp	r2, r3
 8005910:	d102      	bne.n	8005918 <string_containsWithinLength+0x6a>
                        contains = 1;
 8005912:	2301      	movs	r3, #1
 8005914:	75fb      	strb	r3, [r7, #23]
                        break;
 8005916:	e008      	b.n	800592a <string_containsWithinLength+0x7c>
                    }

                    i++;
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	3301      	adds	r3, #1
 800591c:	61bb      	str	r3, [r7, #24]
                while((pos + i) < lenStr) {
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	4413      	add	r3, r2
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	d8df      	bhi.n	80058ea <string_containsWithinLength+0x3c>
                }

                pos++;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	3301      	adds	r3, #1
 800592e:	61fb      	str	r3, [r7, #28]
            while(pos < lenStr && contains == 0) {
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	429a      	cmp	r2, r3
 8005936:	d202      	bcs.n	800593e <string_containsWithinLength+0x90>
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0d2      	beq.n	80058e4 <string_containsWithinLength+0x36>
    		}
        }
    }

    return contains;
 800593e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <string_appendChar>:

    return i;
}

uint32_t string_appendChar(uint8_t *str, uint8_t c)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	70fb      	strb	r3, [r7, #3]
    uint32_t i = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]
    uint32_t len;
    
    if(str != NULL) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d012      	beq.n	8005984 <string_appendChar+0x3c>
        len = string_length(str);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ff8c 	bl	800587c <string_length>
 8005964:	60b8      	str	r0, [r7, #8]

        str[len] = c;
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4413      	add	r3, r2
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	701a      	strb	r2, [r3, #0]
        str[len+1] = '\0';
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	3301      	adds	r3, #1
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	4413      	add	r3, r2
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]

        i = len++;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	60ba      	str	r2, [r7, #8]
 8005982:	60fb      	str	r3, [r7, #12]
    }

    return i;
 8005984:	68fb      	ldr	r3, [r7, #12]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <string_appendString>:

uint32_t string_appendString(uint8_t *str1, uint8_t *str2)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b086      	sub	sp, #24
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
    uint32_t lenStr1;
    uint32_t lenStr2;
    
    if(str1 != NULL && str2 != NULL) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01c      	beq.n	80059dc <string_appendString+0x4e>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d019      	beq.n	80059dc <string_appendString+0x4e>
        lenStr1 = string_length(str1);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff ff67 	bl	800587c <string_length>
 80059ae:	6138      	str	r0, [r7, #16]
        lenStr2 = string_length(str2);
 80059b0:	6838      	ldr	r0, [r7, #0]
 80059b2:	f7ff ff63 	bl	800587c <string_length>
 80059b6:	60f8      	str	r0, [r7, #12]

        while(i < lenStr2) {
 80059b8:	e00c      	b.n	80059d4 <string_appendString+0x46>
            str1[lenStr1 + i] = str2[i];
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	441a      	add	r2, r3
 80059c0:	6939      	ldr	r1, [r7, #16]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	440b      	add	r3, r1
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	440b      	add	r3, r1
 80059ca:	7812      	ldrb	r2, [r2, #0]
 80059cc:	701a      	strb	r2, [r3, #0]

            i++;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	3301      	adds	r3, #1
 80059d2:	617b      	str	r3, [r7, #20]
        while(i < lenStr2) {
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d3ee      	bcc.n	80059ba <string_appendString+0x2c>
        }
    }

    return i;
 80059dc:	697b      	ldr	r3, [r7, #20]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <ascii_convertNum>:

    return pos;
}

uint32_t ascii_convertNum(uint8_t *strAscii, uint32_t num)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
    uint32_t digits = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60bb      	str	r3, [r7, #8]
    digits = number_getDigits(num);
 80059fa:	6838      	ldr	r0, [r7, #0]
 80059fc:	f000 f834 	bl	8005a68 <number_getDigits>
 8005a00:	60b8      	str	r0, [r7, #8]

    if(strAscii != NULL) {
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d028      	beq.n	8005a5a <ascii_convertNum+0x72>
        for(i = 0; i < digits; i++) {
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e01c      	b.n	8005a48 <ascii_convertNum+0x60>
            strAscii[digits - 1 - i] = num % 10 + '0';
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	4b14      	ldr	r3, [pc, #80]	; (8005a64 <ascii_convertNum+0x7c>)
 8005a12:	fba3 2301 	umull	r2, r3, r3, r1
 8005a16:	08da      	lsrs	r2, r3, #3
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	1aca      	subs	r2, r1, r3
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1acb      	subs	r3, r1, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	440b      	add	r3, r1
 8005a30:	3230      	adds	r2, #48	; 0x30
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]
            num /= 10;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <ascii_convertNum+0x7c>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	08db      	lsrs	r3, r3, #3
 8005a40:	603b      	str	r3, [r7, #0]
        for(i = 0; i < digits; i++) {
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3301      	adds	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d3de      	bcc.n	8005a0e <ascii_convertNum+0x26>
        }

        strAscii[digits] = '\0';
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4413      	add	r3, r2
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]
    }

    return i;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	cccccccd 	.word	0xcccccccd

08005a68 <number_getDigits>:




uint32_t number_getDigits(uint32_t num)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
    uint32_t digits = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

	do {
		num /= 10;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a08      	ldr	r2, [pc, #32]	; (8005a98 <number_getDigits+0x30>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	08db      	lsrs	r3, r3, #3
 8005a7e:	607b      	str	r3, [r7, #4]
		digits++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]
	} while(num != 0);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f3      	bne.n	8005a74 <number_getDigits+0xc>

	return digits;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	cccccccd 	.word	0xcccccccd

08005a9c <numberFloat_getLinearValue>:

    return pos;
}

float numberFloat_getLinearValue(float x, float table[][2], uint32_t size)
{
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b089      	sub	sp, #36	; 0x24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
    float y = 0;
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	61bb      	str	r3, [r7, #24]
    float m = 0;
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]
    uint32_t nSegment = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61fb      	str	r3, [r7, #28]

    while(x > table[nSegment][0] && nSegment < size) {
 8005ab8:	e002      	b.n	8005ac0 <numberFloat_getLinearValue+0x24>
        nSegment++;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3301      	adds	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
    while(x > table[nSegment][0] && nSegment < size) {
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f7fb fa27 	bl	8000f20 <__aeabi_fcmpgt>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <numberFloat_getLinearValue+0x44>
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d3ec      	bcc.n	8005aba <numberFloat_getLinearValue+0x1e>
    }

    if(nSegment == 0) {
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <numberFloat_getLinearValue+0x50>
        nSegment = 1;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	e006      	b.n	8005afa <numberFloat_getLinearValue+0x5e>
    }
    else if(nSegment == size) {
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d102      	bne.n	8005afa <numberFloat_getLinearValue+0x5e>
        nSegment = size - 1;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
    }

    m = (table[nSegment][1]-table[nSegment-1][1]) / (table[nSegment][0]-table[nSegment-1][0]);
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4413      	add	r3, r2
 8005b02:	6858      	ldr	r0, [r3, #4]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4413      	add	r3, r2
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4619      	mov	r1, r3
 8005b16:	f7fa ff3d 	bl	8000994 <__aeabi_fsub>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	461c      	mov	r4, r3
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	4413      	add	r3, r2
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	4413      	add	r3, r2
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f7fa ff2b 	bl	8000994 <__aeabi_fsub>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4619      	mov	r1, r3
 8005b42:	4620      	mov	r0, r4
 8005b44:	f7fb f8e4 	bl	8000d10 <__aeabi_fdiv>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	617b      	str	r3, [r7, #20]
    y = m * (x - table[nSegment-1][0]) + table[nSegment-1][1];
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005b52:	3b01      	subs	r3, #1
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	4413      	add	r3, r2
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7fa ff18 	bl	8000994 <__aeabi_fsub>
 8005b64:	4603      	mov	r3, r0
 8005b66:	6979      	ldr	r1, [r7, #20]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fb f81d 	bl	8000ba8 <__aeabi_fmul>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4618      	mov	r0, r3
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	4413      	add	r3, r2
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4619      	mov	r1, r3
 8005b84:	f7fa ff08 	bl	8000998 <__addsf3>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	61bb      	str	r3, [r7, #24]

    return y;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3724      	adds	r7, #36	; 0x24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd90      	pop	{r4, r7, pc}

08005b96 <ringBufferOfUint8_indexOf>:
	}
}


uint32_t ringBufferOfUint8_indexOf(uint8_t *rb, uint32_t ptrStart, uint32_t ptrEnd, uint8_t c, uint32_t rbLen)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b087      	sub	sp, #28
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	70fb      	strb	r3, [r7, #3]
    uint32_t i = ptrStart;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	617b      	str	r3, [r7, #20]
    uint8_t matched = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	74fb      	strb	r3, [r7, #19]

	while( i != ptrEnd) {
 8005bac:	e015      	b.n	8005bda <ringBufferOfUint8_indexOf+0x44>

		if(rb[i] == c) {
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	78fa      	ldrb	r2, [r7, #3]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d102      	bne.n	8005bc2 <ringBufferOfUint8_indexOf+0x2c>
            matched = 1;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	74fb      	strb	r3, [r7, #19]
			break;
 8005bc0:	e00f      	b.n	8005be2 <ringBufferOfUint8_indexOf+0x4c>
		}

		i++;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	617b      	str	r3, [r7, #20]
        i%=rbLen;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	6a3a      	ldr	r2, [r7, #32]
 8005bcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bd0:	6a39      	ldr	r1, [r7, #32]
 8005bd2:	fb01 f202 	mul.w	r2, r1, r2
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]
	while( i != ptrEnd) {
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d1e5      	bne.n	8005bae <ringBufferOfUint8_indexOf+0x18>
	}

	i = (matched == 1) ? i+1 : 0;
 8005be2:	7cfb      	ldrb	r3, [r7, #19]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d102      	bne.n	8005bee <ringBufferOfUint8_indexOf+0x58>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3301      	adds	r3, #1
 8005bec:	e000      	b.n	8005bf0 <ringBufferOfUint8_indexOf+0x5a>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]

	return i;
 8005bf2:	697b      	ldr	r3, [r7, #20]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <ringBufferOfUint8_popChunk>:

uint32_t ringBufferOfUint8_popChunk(uint8_t *rb, uint32_t ptrStart, uint32_t ptrEnd, uint8_t c, uint32_t rbLen, uint8_t *chunk)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b08a      	sub	sp, #40	; 0x28
 8005c02:	af02      	add	r7, sp, #8
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
 8005c0a:	70fb      	strb	r3, [r7, #3]
    uint32_t pos = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
    uint32_t chunkPos = 0;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]

	pos = ringBufferOfUint8_indexOf(rb, ptrStart, ptrEnd, c, rbLen);
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7ff ffb8 	bl	8005b96 <ringBufferOfUint8_indexOf>
 8005c26:	6178      	str	r0, [r7, #20]

	if(pos > 0) {
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d026      	beq.n	8005c7c <ringBufferOfUint8_popChunk+0x7e>
		pos -= 1;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]

		for(uint32_t i = ptrStart; i != pos + 1; i++, chunkPos++) {
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	e016      	b.n	8005c68 <ringBufferOfUint8_popChunk+0x6a>
			i%=rbLen;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c44:	fb01 f202 	mul.w	r2, r1, r2
 8005c48:	1a9b      	subs	r3, r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
			chunk[chunkPos] = rb[i];
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	441a      	add	r2, r3
 8005c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	440b      	add	r3, r1
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	701a      	strb	r2, [r3, #0]
		for(uint32_t i = ptrStart; i != pos + 1; i++, chunkPos++) {
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	3301      	adds	r3, #1
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d1e3      	bne.n	8005c3a <ringBufferOfUint8_popChunk+0x3c>
		}
		chunk[chunkPos] = '\0';
 8005c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	4413      	add	r3, r2
 8005c78:	2200      	movs	r2, #0
 8005c7a:	701a      	strb	r2, [r3, #0]
	}

	return chunkPos;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c88:	480c      	ldr	r0, [pc, #48]	; (8005cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005c8a:	490d      	ldr	r1, [pc, #52]	; (8005cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005c8c:	4a0d      	ldr	r2, [pc, #52]	; (8005cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c90:	e002      	b.n	8005c98 <LoopCopyDataInit>

08005c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c96:	3304      	adds	r3, #4

08005c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c9c:	d3f9      	bcc.n	8005c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c9e:	4a0a      	ldr	r2, [pc, #40]	; (8005cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005ca0:	4c0a      	ldr	r4, [pc, #40]	; (8005ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8005ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ca4:	e001      	b.n	8005caa <LoopFillZerobss>

08005ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ca8:	3204      	adds	r2, #4

08005caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005cac:	d3fb      	bcc.n	8005ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005cae:	f7ff f979 	bl	8004fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cb2:	f004 f80f 	bl	8009cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005cb6:	f7fe fb79 	bl	80043ac <main>
  bx lr
 8005cba:	4770      	bx	lr
  ldr r0, =_sdata
 8005cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005cc0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8005cc4:	0800a088 	.word	0x0800a088
  ldr r2, =_sbss
 8005cc8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005ccc:	2000073c 	.word	0x2000073c

08005cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005cd0:	e7fe      	b.n	8005cd0 <ADC1_2_IRQHandler>
	...

08005cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005cd8:	4b08      	ldr	r3, [pc, #32]	; (8005cfc <HAL_Init+0x28>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a07      	ldr	r2, [pc, #28]	; (8005cfc <HAL_Init+0x28>)
 8005cde:	f043 0310 	orr.w	r3, r3, #16
 8005ce2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ce4:	2003      	movs	r0, #3
 8005ce6:	f000 fd7b 	bl	80067e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cea:	200f      	movs	r0, #15
 8005cec:	f000 f808 	bl	8005d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005cf0:	f7fe ffc0 	bl	8004c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40022000 	.word	0x40022000

08005d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d08:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <HAL_InitTick+0x54>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <HAL_InitTick+0x58>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	4619      	mov	r1, r3
 8005d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fd93 	bl	800684a <HAL_SYSTICK_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e00e      	b.n	8005d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b0f      	cmp	r3, #15
 8005d32:	d80a      	bhi.n	8005d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d34:	2200      	movs	r2, #0
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	f000 fd5b 	bl	80067f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d40:	4a06      	ldr	r2, [pc, #24]	; (8005d5c <HAL_InitTick+0x5c>)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e000      	b.n	8005d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20000004 	.word	0x20000004
 8005d58:	20000084 	.word	0x20000084
 8005d5c:	20000080 	.word	0x20000080

08005d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d64:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <HAL_IncTick+0x1c>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_IncTick+0x20>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4413      	add	r3, r2
 8005d70:	4a03      	ldr	r2, [pc, #12]	; (8005d80 <HAL_IncTick+0x20>)
 8005d72:	6013      	str	r3, [r2, #0]
}
 8005d74:	bf00      	nop
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	20000084 	.word	0x20000084
 8005d80:	20000738 	.word	0x20000738

08005d84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  return uwTick;
 8005d88:	4b02      	ldr	r3, [pc, #8]	; (8005d94 <HAL_GetTick+0x10>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr
 8005d94:	20000738 	.word	0x20000738

08005d98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e0be      	b.n	8005f38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fe ff7e 	bl	8004cd8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fbf1 	bl	80065c4 <ADC_ConversionStop_Disable>
 8005de2:	4603      	mov	r3, r0
 8005de4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f040 8099 	bne.w	8005f26 <HAL_ADC_Init+0x18e>
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 8095 	bne.w	8005f26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e04:	f023 0302 	bic.w	r3, r3, #2
 8005e08:	f043 0202 	orr.w	r2, r3, #2
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005e18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	7b1b      	ldrb	r3, [r3, #12]
 8005e1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005e20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e30:	d003      	beq.n	8005e3a <HAL_ADC_Init+0xa2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d102      	bne.n	8005e40 <HAL_ADC_Init+0xa8>
 8005e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e3e:	e000      	b.n	8005e42 <HAL_ADC_Init+0xaa>
 8005e40:	2300      	movs	r3, #0
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	7d1b      	ldrb	r3, [r3, #20]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d119      	bne.n	8005e84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	7b1b      	ldrb	r3, [r3, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d109      	bne.n	8005e6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	035a      	lsls	r2, r3, #13
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	e00b      	b.n	8005e84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e70:	f043 0220 	orr.w	r2, r3, #32
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	f043 0201 	orr.w	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	4b28      	ldr	r3, [pc, #160]	; (8005f40 <HAL_ADC_Init+0x1a8>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb4:	d003      	beq.n	8005ebe <HAL_ADC_Init+0x126>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d104      	bne.n	8005ec8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	051b      	lsls	r3, r3, #20
 8005ec6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <HAL_ADC_Init+0x1ac>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d10b      	bne.n	8005f04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	f043 0201 	orr.w	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005f02:	e018      	b.n	8005f36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	f023 0312 	bic.w	r3, r3, #18
 8005f0c:	f043 0210 	orr.w	r2, r3, #16
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	f043 0201 	orr.w	r2, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005f24:	e007      	b.n	8005f36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	f043 0210 	orr.w	r2, r3, #16
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	ffe1f7fd 	.word	0xffe1f7fd
 8005f44:	ff1f0efe 	.word	0xff1f0efe

08005f48 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_ADC_Start+0x1a>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e098      	b.n	8006094 <HAL_ADC_Start+0x14c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fad0 	bl	8006510 <ADC_Enable>
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f040 8087 	bne.w	800608a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a41      	ldr	r2, [pc, #260]	; (800609c <HAL_ADC_Start+0x154>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d105      	bne.n	8005fa6 <HAL_ADC_Start+0x5e>
 8005f9a:	4b41      	ldr	r3, [pc, #260]	; (80060a0 <HAL_ADC_Start+0x158>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d115      	bne.n	8005fd2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d026      	beq.n	800600e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005fc8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005fd0:	e01d      	b.n	800600e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2f      	ldr	r2, [pc, #188]	; (80060a0 <HAL_ADC_Start+0x158>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_ADC_Start+0xaa>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2b      	ldr	r2, [pc, #172]	; (800609c <HAL_ADC_Start+0x154>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d10d      	bne.n	800600e <HAL_ADC_Start+0xc6>
 8005ff2:	4b2b      	ldr	r3, [pc, #172]	; (80060a0 <HAL_ADC_Start+0x158>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006006:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d006      	beq.n	8006028 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	f023 0206 	bic.w	r2, r3, #6
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	62da      	str	r2, [r3, #44]	; 0x2c
 8006026:	e002      	b.n	800602e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f06f 0202 	mvn.w	r2, #2
 800603e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800604a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800604e:	d113      	bne.n	8006078 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006054:	4a11      	ldr	r2, [pc, #68]	; (800609c <HAL_ADC_Start+0x154>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d105      	bne.n	8006066 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800605a:	4b11      	ldr	r3, [pc, #68]	; (80060a0 <HAL_ADC_Start+0x158>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006062:	2b00      	cmp	r3, #0
 8006064:	d108      	bne.n	8006078 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006074:	609a      	str	r2, [r3, #8]
 8006076:	e00c      	b.n	8006092 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006086:	609a      	str	r2, [r3, #8]
 8006088:	e003      	b.n	8006092 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40012800 	.word	0x40012800
 80060a0:	40012400 	.word	0x40012400

080060a4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_ADC_Stop+0x1a>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e01a      	b.n	80060f4 <HAL_ADC_Stop+0x50>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa7c 	bl	80065c4 <ADC_ConversionStop_Disable>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80060de:	f023 0301 	bic.w	r3, r3, #1
 80060e2:	f043 0201 	orr.w	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006112:	f7ff fe37 	bl	8005d84 <HAL_GetTick>
 8006116:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00b      	beq.n	800613e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e0d3      	b.n	80062e6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006148:	2b00      	cmp	r3, #0
 800614a:	d131      	bne.n	80061b0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8006156:	2b00      	cmp	r3, #0
 8006158:	d12a      	bne.n	80061b0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800615a:	e021      	b.n	80061a0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006162:	d01d      	beq.n	80061a0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <HAL_ADC_PollForConversion+0x7e>
 800616a:	f7ff fe0b 	bl	8005d84 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d212      	bcs.n	80061a0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10b      	bne.n	80061a0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	f043 0204 	orr.w	r2, r3, #4
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e0a2      	b.n	80062e6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0d6      	beq.n	800615c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80061ae:	e070      	b.n	8006292 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80061b0:	4b4f      	ldr	r3, [pc, #316]	; (80062f0 <HAL_ADC_PollForConversion+0x1f4>)
 80061b2:	681c      	ldr	r4, [r3, #0]
 80061b4:	2002      	movs	r0, #2
 80061b6:	f001 faa1 	bl	80076fc <HAL_RCCEx_GetPeriphCLKFreq>
 80061ba:	4603      	mov	r3, r0
 80061bc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6919      	ldr	r1, [r3, #16]
 80061c6:	4b4b      	ldr	r3, [pc, #300]	; (80062f4 <HAL_ADC_PollForConversion+0x1f8>)
 80061c8:	400b      	ands	r3, r1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d118      	bne.n	8006200 <HAL_ADC_PollForConversion+0x104>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68d9      	ldr	r1, [r3, #12]
 80061d4:	4b48      	ldr	r3, [pc, #288]	; (80062f8 <HAL_ADC_PollForConversion+0x1fc>)
 80061d6:	400b      	ands	r3, r1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d111      	bne.n	8006200 <HAL_ADC_PollForConversion+0x104>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6919      	ldr	r1, [r3, #16]
 80061e2:	4b46      	ldr	r3, [pc, #280]	; (80062fc <HAL_ADC_PollForConversion+0x200>)
 80061e4:	400b      	ands	r3, r1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d108      	bne.n	80061fc <HAL_ADC_PollForConversion+0x100>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68d9      	ldr	r1, [r3, #12]
 80061f0:	4b43      	ldr	r3, [pc, #268]	; (8006300 <HAL_ADC_PollForConversion+0x204>)
 80061f2:	400b      	ands	r3, r1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <HAL_ADC_PollForConversion+0x100>
 80061f8:	2314      	movs	r3, #20
 80061fa:	e020      	b.n	800623e <HAL_ADC_PollForConversion+0x142>
 80061fc:	2329      	movs	r3, #41	; 0x29
 80061fe:	e01e      	b.n	800623e <HAL_ADC_PollForConversion+0x142>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6919      	ldr	r1, [r3, #16]
 8006206:	4b3d      	ldr	r3, [pc, #244]	; (80062fc <HAL_ADC_PollForConversion+0x200>)
 8006208:	400b      	ands	r3, r1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_ADC_PollForConversion+0x120>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68d9      	ldr	r1, [r3, #12]
 8006214:	4b3a      	ldr	r3, [pc, #232]	; (8006300 <HAL_ADC_PollForConversion+0x204>)
 8006216:	400b      	ands	r3, r1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00d      	beq.n	8006238 <HAL_ADC_PollForConversion+0x13c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6919      	ldr	r1, [r3, #16]
 8006222:	4b38      	ldr	r3, [pc, #224]	; (8006304 <HAL_ADC_PollForConversion+0x208>)
 8006224:	400b      	ands	r3, r1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d108      	bne.n	800623c <HAL_ADC_PollForConversion+0x140>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68d9      	ldr	r1, [r3, #12]
 8006230:	4b34      	ldr	r3, [pc, #208]	; (8006304 <HAL_ADC_PollForConversion+0x208>)
 8006232:	400b      	ands	r3, r1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_ADC_PollForConversion+0x140>
 8006238:	2354      	movs	r3, #84	; 0x54
 800623a:	e000      	b.n	800623e <HAL_ADC_PollForConversion+0x142>
 800623c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800623e:	fb02 f303 	mul.w	r3, r2, r3
 8006242:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006244:	e021      	b.n	800628a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624c:	d01a      	beq.n	8006284 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <HAL_ADC_PollForConversion+0x168>
 8006254:	f7ff fd96 	bl	8005d84 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d20f      	bcs.n	8006284 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	429a      	cmp	r2, r3
 800626a:	d90b      	bls.n	8006284 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	f043 0204 	orr.w	r2, r3, #4
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e030      	b.n	80062e6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3301      	adds	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	429a      	cmp	r2, r3
 8006290:	d8d9      	bhi.n	8006246 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f06f 0212 	mvn.w	r2, #18
 800629a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80062b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80062b6:	d115      	bne.n	80062e4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d111      	bne.n	80062e4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d105      	bne.n	80062e4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	f043 0201 	orr.w	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd90      	pop	{r4, r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000004 	.word	0x20000004
 80062f4:	24924924 	.word	0x24924924
 80062f8:	00924924 	.word	0x00924924
 80062fc:	12492492 	.word	0x12492492
 8006300:	00492492 	.word	0x00492492
 8006304:	00249249 	.word	0x00249249

08006308 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_ADC_ConfigChannel+0x20>
 800633c:	2302      	movs	r3, #2
 800633e:	e0dc      	b.n	80064fa <HAL_ADC_ConfigChannel+0x1da>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b06      	cmp	r3, #6
 800634e:	d81c      	bhi.n	800638a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	3b05      	subs	r3, #5
 8006362:	221f      	movs	r2, #31
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	43db      	mvns	r3, r3
 800636a:	4019      	ands	r1, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	3b05      	subs	r3, #5
 800637c:	fa00 f203 	lsl.w	r2, r0, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	635a      	str	r2, [r3, #52]	; 0x34
 8006388:	e03c      	b.n	8006404 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b0c      	cmp	r3, #12
 8006390:	d81c      	bhi.n	80063cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	3b23      	subs	r3, #35	; 0x23
 80063a4:	221f      	movs	r2, #31
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	43db      	mvns	r3, r3
 80063ac:	4019      	ands	r1, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	3b23      	subs	r3, #35	; 0x23
 80063be:	fa00 f203 	lsl.w	r2, r0, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30
 80063ca:	e01b      	b.n	8006404 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	3b41      	subs	r3, #65	; 0x41
 80063de:	221f      	movs	r2, #31
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	43db      	mvns	r3, r3
 80063e6:	4019      	ands	r1, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	3b41      	subs	r3, #65	; 0x41
 80063f8:	fa00 f203 	lsl.w	r2, r0, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b09      	cmp	r3, #9
 800640a:	d91c      	bls.n	8006446 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68d9      	ldr	r1, [r3, #12]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4613      	mov	r3, r2
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	4413      	add	r3, r2
 800641c:	3b1e      	subs	r3, #30
 800641e:	2207      	movs	r2, #7
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	43db      	mvns	r3, r3
 8006426:	4019      	ands	r1, r3
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	6898      	ldr	r0, [r3, #8]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	4413      	add	r3, r2
 8006436:	3b1e      	subs	r3, #30
 8006438:	fa00 f203 	lsl.w	r2, r0, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	60da      	str	r2, [r3, #12]
 8006444:	e019      	b.n	800647a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6919      	ldr	r1, [r3, #16]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	4413      	add	r3, r2
 8006456:	2207      	movs	r2, #7
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	4019      	ands	r1, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	6898      	ldr	r0, [r3, #8]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	4413      	add	r3, r2
 800646e:	fa00 f203 	lsl.w	r2, r0, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b10      	cmp	r3, #16
 8006480:	d003      	beq.n	800648a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006486:	2b11      	cmp	r3, #17
 8006488:	d132      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1d      	ldr	r2, [pc, #116]	; (8006504 <HAL_ADC_ConfigChannel+0x1e4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d125      	bne.n	80064e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d126      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80064b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b10      	cmp	r3, #16
 80064b8:	d11a      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <HAL_ADC_ConfigChannel+0x1e8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a13      	ldr	r2, [pc, #76]	; (800650c <HAL_ADC_ConfigChannel+0x1ec>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	0c9a      	lsrs	r2, r3, #18
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80064d0:	e002      	b.n	80064d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f9      	bne.n	80064d2 <HAL_ADC_ConfigChannel+0x1b2>
 80064de:	e007      	b.n	80064f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	f043 0220 	orr.w	r2, r3, #32
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr
 8006504:	40012400 	.word	0x40012400
 8006508:	20000004 	.word	0x20000004
 800650c:	431bde83 	.word	0x431bde83

08006510 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b01      	cmp	r3, #1
 800652c:	d040      	beq.n	80065b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800653e:	4b1f      	ldr	r3, [pc, #124]	; (80065bc <ADC_Enable+0xac>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <ADC_Enable+0xb0>)
 8006544:	fba2 2303 	umull	r2, r3, r2, r3
 8006548:	0c9b      	lsrs	r3, r3, #18
 800654a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800654c:	e002      	b.n	8006554 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	3b01      	subs	r3, #1
 8006552:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f9      	bne.n	800654e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800655a:	f7ff fc13 	bl	8005d84 <HAL_GetTick>
 800655e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006560:	e01f      	b.n	80065a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006562:	f7ff fc0f 	bl	8005d84 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d918      	bls.n	80065a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b01      	cmp	r3, #1
 800657c:	d011      	beq.n	80065a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	f043 0210 	orr.w	r2, r3, #16
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e007      	b.n	80065b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d1d8      	bne.n	8006562 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000004 	.word	0x20000004
 80065c0:	431bde83 	.word	0x431bde83

080065c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d12e      	bne.n	800663c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80065ee:	f7ff fbc9 	bl	8005d84 <HAL_GetTick>
 80065f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80065f4:	e01b      	b.n	800662e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80065f6:	f7ff fbc5 	bl	8005d84 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d914      	bls.n	800662e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b01      	cmp	r3, #1
 8006610:	d10d      	bne.n	800662e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	f043 0210 	orr.w	r2, r3, #16
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	f043 0201 	orr.w	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e007      	b.n	800663e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b01      	cmp	r3, #1
 800663a:	d0dc      	beq.n	80065f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006658:	4b0c      	ldr	r3, [pc, #48]	; (800668c <__NVIC_SetPriorityGrouping+0x44>)
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006664:	4013      	ands	r3, r2
 8006666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800667a:	4a04      	ldr	r2, [pc, #16]	; (800668c <__NVIC_SetPriorityGrouping+0x44>)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	60d3      	str	r3, [r2, #12]
}
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	e000ed00 	.word	0xe000ed00

08006690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006694:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	0a1b      	lsrs	r3, r3, #8
 800669a:	f003 0307 	and.w	r3, r3, #7
}
 800669e:	4618      	mov	r0, r3
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	e000ed00 	.word	0xe000ed00

080066ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	db0b      	blt.n	80066d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	f003 021f 	and.w	r2, r3, #31
 80066c4:	4906      	ldr	r1, [pc, #24]	; (80066e0 <__NVIC_EnableIRQ+0x34>)
 80066c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	2001      	movs	r0, #1
 80066ce:	fa00 f202 	lsl.w	r2, r0, r2
 80066d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	bc80      	pop	{r7}
 80066de:	4770      	bx	lr
 80066e0:	e000e100 	.word	0xe000e100

080066e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	6039      	str	r1, [r7, #0]
 80066ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db0a      	blt.n	800670e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	490c      	ldr	r1, [pc, #48]	; (8006730 <__NVIC_SetPriority+0x4c>)
 80066fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006702:	0112      	lsls	r2, r2, #4
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	440b      	add	r3, r1
 8006708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800670c:	e00a      	b.n	8006724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	4908      	ldr	r1, [pc, #32]	; (8006734 <__NVIC_SetPriority+0x50>)
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	3b04      	subs	r3, #4
 800671c:	0112      	lsls	r2, r2, #4
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	440b      	add	r3, r1
 8006722:	761a      	strb	r2, [r3, #24]
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	e000e100 	.word	0xe000e100
 8006734:	e000ed00 	.word	0xe000ed00

08006738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	; 0x24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f1c3 0307 	rsb	r3, r3, #7
 8006752:	2b04      	cmp	r3, #4
 8006754:	bf28      	it	cs
 8006756:	2304      	movcs	r3, #4
 8006758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3304      	adds	r3, #4
 800675e:	2b06      	cmp	r3, #6
 8006760:	d902      	bls.n	8006768 <NVIC_EncodePriority+0x30>
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	3b03      	subs	r3, #3
 8006766:	e000      	b.n	800676a <NVIC_EncodePriority+0x32>
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800676c:	f04f 32ff 	mov.w	r2, #4294967295
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	43da      	mvns	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	401a      	ands	r2, r3
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006780:	f04f 31ff 	mov.w	r1, #4294967295
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	fa01 f303 	lsl.w	r3, r1, r3
 800678a:	43d9      	mvns	r1, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006790:	4313      	orrs	r3, r2
         );
}
 8006792:	4618      	mov	r0, r3
 8006794:	3724      	adds	r7, #36	; 0x24
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr

0800679c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067ac:	d301      	bcc.n	80067b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067ae:	2301      	movs	r3, #1
 80067b0:	e00f      	b.n	80067d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067b2:	4a0a      	ldr	r2, [pc, #40]	; (80067dc <SysTick_Config+0x40>)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067ba:	210f      	movs	r1, #15
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	f7ff ff90 	bl	80066e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <SysTick_Config+0x40>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067ca:	4b04      	ldr	r3, [pc, #16]	; (80067dc <SysTick_Config+0x40>)
 80067cc:	2207      	movs	r2, #7
 80067ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	e000e010 	.word	0xe000e010

080067e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ff2d 	bl	8006648 <__NVIC_SetPriorityGrouping>
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b086      	sub	sp, #24
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	4603      	mov	r3, r0
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006808:	f7ff ff42 	bl	8006690 <__NVIC_GetPriorityGrouping>
 800680c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	6978      	ldr	r0, [r7, #20]
 8006814:	f7ff ff90 	bl	8006738 <NVIC_EncodePriority>
 8006818:	4602      	mov	r2, r0
 800681a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff ff5f 	bl	80066e4 <__NVIC_SetPriority>
}
 8006826:	bf00      	nop
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	4603      	mov	r3, r0
 8006836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff ff35 	bl	80066ac <__NVIC_EnableIRQ>
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff ffa2 	bl	800679c <SysTick_Config>
 8006858:	4603      	mov	r3, r0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006874:	2b02      	cmp	r3, #2
 8006876:	d008      	beq.n	800688a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2204      	movs	r2, #4
 800687c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e020      	b.n	80068cc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 020e 	bic.w	r2, r2, #14
 8006898:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	2101      	movs	r1, #1
 80068b4:	fa01 f202 	lsl.w	r2, r1, r2
 80068b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr
	...

080068d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d005      	beq.n	80068fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2204      	movs	r2, #4
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
 80068f8:	e051      	b.n	800699e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 020e 	bic.w	r2, r2, #14
 8006908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0201 	bic.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a22      	ldr	r2, [pc, #136]	; (80069a8 <HAL_DMA_Abort_IT+0xd0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d029      	beq.n	8006978 <HAL_DMA_Abort_IT+0xa0>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a20      	ldr	r2, [pc, #128]	; (80069ac <HAL_DMA_Abort_IT+0xd4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d022      	beq.n	8006974 <HAL_DMA_Abort_IT+0x9c>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a1f      	ldr	r2, [pc, #124]	; (80069b0 <HAL_DMA_Abort_IT+0xd8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d01a      	beq.n	800696e <HAL_DMA_Abort_IT+0x96>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <HAL_DMA_Abort_IT+0xdc>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d012      	beq.n	8006968 <HAL_DMA_Abort_IT+0x90>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1c      	ldr	r2, [pc, #112]	; (80069b8 <HAL_DMA_Abort_IT+0xe0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00a      	beq.n	8006962 <HAL_DMA_Abort_IT+0x8a>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1a      	ldr	r2, [pc, #104]	; (80069bc <HAL_DMA_Abort_IT+0xe4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d102      	bne.n	800695c <HAL_DMA_Abort_IT+0x84>
 8006956:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800695a:	e00e      	b.n	800697a <HAL_DMA_Abort_IT+0xa2>
 800695c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006960:	e00b      	b.n	800697a <HAL_DMA_Abort_IT+0xa2>
 8006962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006966:	e008      	b.n	800697a <HAL_DMA_Abort_IT+0xa2>
 8006968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800696c:	e005      	b.n	800697a <HAL_DMA_Abort_IT+0xa2>
 800696e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006972:	e002      	b.n	800697a <HAL_DMA_Abort_IT+0xa2>
 8006974:	2310      	movs	r3, #16
 8006976:	e000      	b.n	800697a <HAL_DMA_Abort_IT+0xa2>
 8006978:	2301      	movs	r3, #1
 800697a:	4a11      	ldr	r2, [pc, #68]	; (80069c0 <HAL_DMA_Abort_IT+0xe8>)
 800697c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
    } 
  }
  return status;
 800699e:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40020008 	.word	0x40020008
 80069ac:	4002001c 	.word	0x4002001c
 80069b0:	40020030 	.word	0x40020030
 80069b4:	40020044 	.word	0x40020044
 80069b8:	40020058 	.word	0x40020058
 80069bc:	4002006c 	.word	0x4002006c
 80069c0:	40020000 	.word	0x40020000

080069c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b08b      	sub	sp, #44	; 0x2c
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80069d2:	2300      	movs	r3, #0
 80069d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069d6:	e169      	b.n	8006cac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80069d8:	2201      	movs	r2, #1
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	4013      	ands	r3, r2
 80069ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	f040 8158 	bne.w	8006ca6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4a9a      	ldr	r2, [pc, #616]	; (8006c64 <HAL_GPIO_Init+0x2a0>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d05e      	beq.n	8006abe <HAL_GPIO_Init+0xfa>
 8006a00:	4a98      	ldr	r2, [pc, #608]	; (8006c64 <HAL_GPIO_Init+0x2a0>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d875      	bhi.n	8006af2 <HAL_GPIO_Init+0x12e>
 8006a06:	4a98      	ldr	r2, [pc, #608]	; (8006c68 <HAL_GPIO_Init+0x2a4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d058      	beq.n	8006abe <HAL_GPIO_Init+0xfa>
 8006a0c:	4a96      	ldr	r2, [pc, #600]	; (8006c68 <HAL_GPIO_Init+0x2a4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d86f      	bhi.n	8006af2 <HAL_GPIO_Init+0x12e>
 8006a12:	4a96      	ldr	r2, [pc, #600]	; (8006c6c <HAL_GPIO_Init+0x2a8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d052      	beq.n	8006abe <HAL_GPIO_Init+0xfa>
 8006a18:	4a94      	ldr	r2, [pc, #592]	; (8006c6c <HAL_GPIO_Init+0x2a8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d869      	bhi.n	8006af2 <HAL_GPIO_Init+0x12e>
 8006a1e:	4a94      	ldr	r2, [pc, #592]	; (8006c70 <HAL_GPIO_Init+0x2ac>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d04c      	beq.n	8006abe <HAL_GPIO_Init+0xfa>
 8006a24:	4a92      	ldr	r2, [pc, #584]	; (8006c70 <HAL_GPIO_Init+0x2ac>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d863      	bhi.n	8006af2 <HAL_GPIO_Init+0x12e>
 8006a2a:	4a92      	ldr	r2, [pc, #584]	; (8006c74 <HAL_GPIO_Init+0x2b0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d046      	beq.n	8006abe <HAL_GPIO_Init+0xfa>
 8006a30:	4a90      	ldr	r2, [pc, #576]	; (8006c74 <HAL_GPIO_Init+0x2b0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d85d      	bhi.n	8006af2 <HAL_GPIO_Init+0x12e>
 8006a36:	2b12      	cmp	r3, #18
 8006a38:	d82a      	bhi.n	8006a90 <HAL_GPIO_Init+0xcc>
 8006a3a:	2b12      	cmp	r3, #18
 8006a3c:	d859      	bhi.n	8006af2 <HAL_GPIO_Init+0x12e>
 8006a3e:	a201      	add	r2, pc, #4	; (adr r2, 8006a44 <HAL_GPIO_Init+0x80>)
 8006a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a44:	08006abf 	.word	0x08006abf
 8006a48:	08006a99 	.word	0x08006a99
 8006a4c:	08006aab 	.word	0x08006aab
 8006a50:	08006aed 	.word	0x08006aed
 8006a54:	08006af3 	.word	0x08006af3
 8006a58:	08006af3 	.word	0x08006af3
 8006a5c:	08006af3 	.word	0x08006af3
 8006a60:	08006af3 	.word	0x08006af3
 8006a64:	08006af3 	.word	0x08006af3
 8006a68:	08006af3 	.word	0x08006af3
 8006a6c:	08006af3 	.word	0x08006af3
 8006a70:	08006af3 	.word	0x08006af3
 8006a74:	08006af3 	.word	0x08006af3
 8006a78:	08006af3 	.word	0x08006af3
 8006a7c:	08006af3 	.word	0x08006af3
 8006a80:	08006af3 	.word	0x08006af3
 8006a84:	08006af3 	.word	0x08006af3
 8006a88:	08006aa1 	.word	0x08006aa1
 8006a8c:	08006ab5 	.word	0x08006ab5
 8006a90:	4a79      	ldr	r2, [pc, #484]	; (8006c78 <HAL_GPIO_Init+0x2b4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006a96:	e02c      	b.n	8006af2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	623b      	str	r3, [r7, #32]
          break;
 8006a9e:	e029      	b.n	8006af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	623b      	str	r3, [r7, #32]
          break;
 8006aa8:	e024      	b.n	8006af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	623b      	str	r3, [r7, #32]
          break;
 8006ab2:	e01f      	b.n	8006af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	623b      	str	r3, [r7, #32]
          break;
 8006abc:	e01a      	b.n	8006af4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d102      	bne.n	8006acc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006ac6:	2304      	movs	r3, #4
 8006ac8:	623b      	str	r3, [r7, #32]
          break;
 8006aca:	e013      	b.n	8006af4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d105      	bne.n	8006ae0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	69fa      	ldr	r2, [r7, #28]
 8006adc:	611a      	str	r2, [r3, #16]
          break;
 8006ade:	e009      	b.n	8006af4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	615a      	str	r2, [r3, #20]
          break;
 8006aea:	e003      	b.n	8006af4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006aec:	2300      	movs	r3, #0
 8006aee:	623b      	str	r3, [r7, #32]
          break;
 8006af0:	e000      	b.n	8006af4 <HAL_GPIO_Init+0x130>
          break;
 8006af2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2bff      	cmp	r3, #255	; 0xff
 8006af8:	d801      	bhi.n	8006afe <HAL_GPIO_Init+0x13a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	e001      	b.n	8006b02 <HAL_GPIO_Init+0x13e>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3304      	adds	r3, #4
 8006b02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2bff      	cmp	r3, #255	; 0xff
 8006b08:	d802      	bhi.n	8006b10 <HAL_GPIO_Init+0x14c>
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	e002      	b.n	8006b16 <HAL_GPIO_Init+0x152>
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	3b08      	subs	r3, #8
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	210f      	movs	r1, #15
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	fa01 f303 	lsl.w	r3, r1, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	401a      	ands	r2, r3
 8006b28:	6a39      	ldr	r1, [r7, #32]
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b30:	431a      	orrs	r2, r3
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 80b1 	beq.w	8006ca6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b44:	4b4d      	ldr	r3, [pc, #308]	; (8006c7c <HAL_GPIO_Init+0x2b8>)
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	4a4c      	ldr	r2, [pc, #304]	; (8006c7c <HAL_GPIO_Init+0x2b8>)
 8006b4a:	f043 0301 	orr.w	r3, r3, #1
 8006b4e:	6193      	str	r3, [r2, #24]
 8006b50:	4b4a      	ldr	r3, [pc, #296]	; (8006c7c <HAL_GPIO_Init+0x2b8>)
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b5c:	4a48      	ldr	r2, [pc, #288]	; (8006c80 <HAL_GPIO_Init+0x2bc>)
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	089b      	lsrs	r3, r3, #2
 8006b62:	3302      	adds	r3, #2
 8006b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	f003 0303 	and.w	r3, r3, #3
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	220f      	movs	r2, #15
 8006b74:	fa02 f303 	lsl.w	r3, r2, r3
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a40      	ldr	r2, [pc, #256]	; (8006c84 <HAL_GPIO_Init+0x2c0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <HAL_GPIO_Init+0x1ec>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a3f      	ldr	r2, [pc, #252]	; (8006c88 <HAL_GPIO_Init+0x2c4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00d      	beq.n	8006bac <HAL_GPIO_Init+0x1e8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a3e      	ldr	r2, [pc, #248]	; (8006c8c <HAL_GPIO_Init+0x2c8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d007      	beq.n	8006ba8 <HAL_GPIO_Init+0x1e4>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3d      	ldr	r2, [pc, #244]	; (8006c90 <HAL_GPIO_Init+0x2cc>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d101      	bne.n	8006ba4 <HAL_GPIO_Init+0x1e0>
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e006      	b.n	8006bb2 <HAL_GPIO_Init+0x1ee>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	e004      	b.n	8006bb2 <HAL_GPIO_Init+0x1ee>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e002      	b.n	8006bb2 <HAL_GPIO_Init+0x1ee>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <HAL_GPIO_Init+0x1ee>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb4:	f002 0203 	and.w	r2, r2, #3
 8006bb8:	0092      	lsls	r2, r2, #2
 8006bba:	4093      	lsls	r3, r2
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006bc2:	492f      	ldr	r1, [pc, #188]	; (8006c80 <HAL_GPIO_Init+0x2bc>)
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	3302      	adds	r3, #2
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d006      	beq.n	8006bea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006bdc:	4b2d      	ldr	r3, [pc, #180]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	492c      	ldr	r1, [pc, #176]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	600b      	str	r3, [r1, #0]
 8006be8:	e006      	b.n	8006bf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006bea:	4b2a      	ldr	r3, [pc, #168]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	4928      	ldr	r1, [pc, #160]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d006      	beq.n	8006c12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006c04:	4b23      	ldr	r3, [pc, #140]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	4922      	ldr	r1, [pc, #136]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	604b      	str	r3, [r1, #4]
 8006c10:	e006      	b.n	8006c20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006c12:	4b20      	ldr	r3, [pc, #128]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	491e      	ldr	r1, [pc, #120]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d006      	beq.n	8006c3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006c2c:	4b19      	ldr	r3, [pc, #100]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	4918      	ldr	r1, [pc, #96]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	608b      	str	r3, [r1, #8]
 8006c38:	e006      	b.n	8006c48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006c3a:	4b16      	ldr	r3, [pc, #88]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	43db      	mvns	r3, r3
 8006c42:	4914      	ldr	r1, [pc, #80]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d021      	beq.n	8006c98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006c54:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	490e      	ldr	r1, [pc, #56]	; (8006c94 <HAL_GPIO_Init+0x2d0>)
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60cb      	str	r3, [r1, #12]
 8006c60:	e021      	b.n	8006ca6 <HAL_GPIO_Init+0x2e2>
 8006c62:	bf00      	nop
 8006c64:	10320000 	.word	0x10320000
 8006c68:	10310000 	.word	0x10310000
 8006c6c:	10220000 	.word	0x10220000
 8006c70:	10210000 	.word	0x10210000
 8006c74:	10120000 	.word	0x10120000
 8006c78:	10110000 	.word	0x10110000
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	40010000 	.word	0x40010000
 8006c84:	40010800 	.word	0x40010800
 8006c88:	40010c00 	.word	0x40010c00
 8006c8c:	40011000 	.word	0x40011000
 8006c90:	40011400 	.word	0x40011400
 8006c94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006c98:	4b0b      	ldr	r3, [pc, #44]	; (8006cc8 <HAL_GPIO_Init+0x304>)
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	4909      	ldr	r1, [pc, #36]	; (8006cc8 <HAL_GPIO_Init+0x304>)
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	3301      	adds	r3, #1
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f47f ae8e 	bne.w	80069d8 <HAL_GPIO_Init+0x14>
  }
}
 8006cbc:	bf00      	nop
 8006cbe:	bf00      	nop
 8006cc0:	372c      	adds	r7, #44	; 0x2c
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr
 8006cc8:	40010400 	.word	0x40010400

08006ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	807b      	strh	r3, [r7, #2]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cdc:	787b      	ldrb	r3, [r7, #1]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ce2:	887a      	ldrh	r2, [r7, #2]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006ce8:	e003      	b.n	8006cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006cea:	887b      	ldrh	r3, [r7, #2]
 8006cec:	041a      	lsls	r2, r3, #16
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	611a      	str	r2, [r3, #16]
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006d00:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
}
 8006d06:	bf00      	nop
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	420e0020 	.word	0x420e0020

08006d14 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006d18:	4b03      	ldr	r3, [pc, #12]	; (8006d28 <HAL_PWR_DisableBkUpAccess+0x14>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
}
 8006d1e:	bf00      	nop
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	420e0020 	.word	0x420e0020

08006d2c <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8006d30:	4b08      	ldr	r3, [pc, #32]	; (8006d54 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a07      	ldr	r2, [pc, #28]	; (8006d54 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8006d36:	f043 0302 	orr.w	r3, r3, #2
 8006d3a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	4a05      	ldr	r2, [pc, #20]	; (8006d58 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8006d42:	f043 0304 	orr.w	r3, r3, #4
 8006d46:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8006d48:	bf30      	wfi
}
 8006d4a:	bf00      	nop
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40007000 	.word	0x40007000
 8006d58:	e000ed00 	.word	0xe000ed00

08006d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e26c      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 8087 	beq.w	8006e8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d7c:	4b92      	ldr	r3, [pc, #584]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f003 030c 	and.w	r3, r3, #12
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d00c      	beq.n	8006da2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d88:	4b8f      	ldr	r3, [pc, #572]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f003 030c 	and.w	r3, r3, #12
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d112      	bne.n	8006dba <HAL_RCC_OscConfig+0x5e>
 8006d94:	4b8c      	ldr	r3, [pc, #560]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da0:	d10b      	bne.n	8006dba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da2:	4b89      	ldr	r3, [pc, #548]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d06c      	beq.n	8006e88 <HAL_RCC_OscConfig+0x12c>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d168      	bne.n	8006e88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e246      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc2:	d106      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x76>
 8006dc4:	4b80      	ldr	r3, [pc, #512]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a7f      	ldr	r2, [pc, #508]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	e02e      	b.n	8006e30 <HAL_RCC_OscConfig+0xd4>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10c      	bne.n	8006df4 <HAL_RCC_OscConfig+0x98>
 8006dda:	4b7b      	ldr	r3, [pc, #492]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a7a      	ldr	r2, [pc, #488]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	4b78      	ldr	r3, [pc, #480]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a77      	ldr	r2, [pc, #476]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e01d      	b.n	8006e30 <HAL_RCC_OscConfig+0xd4>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dfc:	d10c      	bne.n	8006e18 <HAL_RCC_OscConfig+0xbc>
 8006dfe:	4b72      	ldr	r3, [pc, #456]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a71      	ldr	r2, [pc, #452]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	4b6f      	ldr	r3, [pc, #444]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a6e      	ldr	r2, [pc, #440]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	e00b      	b.n	8006e30 <HAL_RCC_OscConfig+0xd4>
 8006e18:	4b6b      	ldr	r3, [pc, #428]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a6a      	ldr	r2, [pc, #424]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	4b68      	ldr	r3, [pc, #416]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a67      	ldr	r2, [pc, #412]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d013      	beq.n	8006e60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e38:	f7fe ffa4 	bl	8005d84 <HAL_GetTick>
 8006e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e40:	f7fe ffa0 	bl	8005d84 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b64      	cmp	r3, #100	; 0x64
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e1fa      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e52:	4b5d      	ldr	r3, [pc, #372]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0f0      	beq.n	8006e40 <HAL_RCC_OscConfig+0xe4>
 8006e5e:	e014      	b.n	8006e8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e60:	f7fe ff90 	bl	8005d84 <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e68:	f7fe ff8c 	bl	8005d84 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b64      	cmp	r3, #100	; 0x64
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e1e6      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e7a:	4b53      	ldr	r3, [pc, #332]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f0      	bne.n	8006e68 <HAL_RCC_OscConfig+0x10c>
 8006e86:	e000      	b.n	8006e8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d063      	beq.n	8006f5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e96:	4b4c      	ldr	r3, [pc, #304]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f003 030c 	and.w	r3, r3, #12
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00b      	beq.n	8006eba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006ea2:	4b49      	ldr	r3, [pc, #292]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f003 030c 	and.w	r3, r3, #12
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d11c      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x18c>
 8006eae:	4b46      	ldr	r3, [pc, #280]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d116      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eba:	4b43      	ldr	r3, [pc, #268]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x176>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d001      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e1ba      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed2:	4b3d      	ldr	r3, [pc, #244]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	4939      	ldr	r1, [pc, #228]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ee6:	e03a      	b.n	8006f5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d020      	beq.n	8006f32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ef0:	4b36      	ldr	r3, [pc, #216]	; (8006fcc <HAL_RCC_OscConfig+0x270>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef6:	f7fe ff45 	bl	8005d84 <HAL_GetTick>
 8006efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006efc:	e008      	b.n	8006f10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006efe:	f7fe ff41 	bl	8005d84 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e19b      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f10:	4b2d      	ldr	r3, [pc, #180]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0f0      	beq.n	8006efe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f1c:	4b2a      	ldr	r3, [pc, #168]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	4927      	ldr	r1, [pc, #156]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	600b      	str	r3, [r1, #0]
 8006f30:	e015      	b.n	8006f5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f32:	4b26      	ldr	r3, [pc, #152]	; (8006fcc <HAL_RCC_OscConfig+0x270>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f38:	f7fe ff24 	bl	8005d84 <HAL_GetTick>
 8006f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f40:	f7fe ff20 	bl	8005d84 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e17a      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f52:	4b1d      	ldr	r3, [pc, #116]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f0      	bne.n	8006f40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d03a      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d019      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f72:	4b17      	ldr	r3, [pc, #92]	; (8006fd0 <HAL_RCC_OscConfig+0x274>)
 8006f74:	2201      	movs	r2, #1
 8006f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f78:	f7fe ff04 	bl	8005d84 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f80:	f7fe ff00 	bl	8005d84 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e15a      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <HAL_RCC_OscConfig+0x26c>)
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0f0      	beq.n	8006f80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	f000 fad8 	bl	8007554 <RCC_Delay>
 8006fa4:	e01c      	b.n	8006fe0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fa6:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <HAL_RCC_OscConfig+0x274>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fac:	f7fe feea 	bl	8005d84 <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fb2:	e00f      	b.n	8006fd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fb4:	f7fe fee6 	bl	8005d84 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d908      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e140      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
 8006fc6:	bf00      	nop
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	42420000 	.word	0x42420000
 8006fd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fd4:	4b9e      	ldr	r3, [pc, #632]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e9      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 80a6 	beq.w	800713a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ff2:	4b97      	ldr	r3, [pc, #604]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10d      	bne.n	800701a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ffe:	4b94      	ldr	r3, [pc, #592]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	4a93      	ldr	r2, [pc, #588]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007008:	61d3      	str	r3, [r2, #28]
 800700a:	4b91      	ldr	r3, [pc, #580]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007012:	60bb      	str	r3, [r7, #8]
 8007014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007016:	2301      	movs	r3, #1
 8007018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800701a:	4b8e      	ldr	r3, [pc, #568]	; (8007254 <HAL_RCC_OscConfig+0x4f8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	2b00      	cmp	r3, #0
 8007024:	d118      	bne.n	8007058 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007026:	4b8b      	ldr	r3, [pc, #556]	; (8007254 <HAL_RCC_OscConfig+0x4f8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a8a      	ldr	r2, [pc, #552]	; (8007254 <HAL_RCC_OscConfig+0x4f8>)
 800702c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007032:	f7fe fea7 	bl	8005d84 <HAL_GetTick>
 8007036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007038:	e008      	b.n	800704c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800703a:	f7fe fea3 	bl	8005d84 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b64      	cmp	r3, #100	; 0x64
 8007046:	d901      	bls.n	800704c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e0fd      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800704c:	4b81      	ldr	r3, [pc, #516]	; (8007254 <HAL_RCC_OscConfig+0x4f8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0f0      	beq.n	800703a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d106      	bne.n	800706e <HAL_RCC_OscConfig+0x312>
 8007060:	4b7b      	ldr	r3, [pc, #492]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	4a7a      	ldr	r2, [pc, #488]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007066:	f043 0301 	orr.w	r3, r3, #1
 800706a:	6213      	str	r3, [r2, #32]
 800706c:	e02d      	b.n	80070ca <HAL_RCC_OscConfig+0x36e>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10c      	bne.n	8007090 <HAL_RCC_OscConfig+0x334>
 8007076:	4b76      	ldr	r3, [pc, #472]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	4a75      	ldr	r2, [pc, #468]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	6213      	str	r3, [r2, #32]
 8007082:	4b73      	ldr	r3, [pc, #460]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	4a72      	ldr	r2, [pc, #456]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007088:	f023 0304 	bic.w	r3, r3, #4
 800708c:	6213      	str	r3, [r2, #32]
 800708e:	e01c      	b.n	80070ca <HAL_RCC_OscConfig+0x36e>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	2b05      	cmp	r3, #5
 8007096:	d10c      	bne.n	80070b2 <HAL_RCC_OscConfig+0x356>
 8007098:	4b6d      	ldr	r3, [pc, #436]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	4a6c      	ldr	r2, [pc, #432]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 800709e:	f043 0304 	orr.w	r3, r3, #4
 80070a2:	6213      	str	r3, [r2, #32]
 80070a4:	4b6a      	ldr	r3, [pc, #424]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	4a69      	ldr	r2, [pc, #420]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 80070aa:	f043 0301 	orr.w	r3, r3, #1
 80070ae:	6213      	str	r3, [r2, #32]
 80070b0:	e00b      	b.n	80070ca <HAL_RCC_OscConfig+0x36e>
 80070b2:	4b67      	ldr	r3, [pc, #412]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	4a66      	ldr	r2, [pc, #408]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 80070b8:	f023 0301 	bic.w	r3, r3, #1
 80070bc:	6213      	str	r3, [r2, #32]
 80070be:	4b64      	ldr	r3, [pc, #400]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	4a63      	ldr	r2, [pc, #396]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 80070c4:	f023 0304 	bic.w	r3, r3, #4
 80070c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d015      	beq.n	80070fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070d2:	f7fe fe57 	bl	8005d84 <HAL_GetTick>
 80070d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070d8:	e00a      	b.n	80070f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070da:	f7fe fe53 	bl	8005d84 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e0ab      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070f0:	4b57      	ldr	r3, [pc, #348]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0ee      	beq.n	80070da <HAL_RCC_OscConfig+0x37e>
 80070fc:	e014      	b.n	8007128 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070fe:	f7fe fe41 	bl	8005d84 <HAL_GetTick>
 8007102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007104:	e00a      	b.n	800711c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007106:	f7fe fe3d 	bl	8005d84 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	f241 3288 	movw	r2, #5000	; 0x1388
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e095      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800711c:	4b4c      	ldr	r3, [pc, #304]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1ee      	bne.n	8007106 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d105      	bne.n	800713a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800712e:	4b48      	ldr	r3, [pc, #288]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	4a47      	ldr	r2, [pc, #284]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007138:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 8081 	beq.w	8007246 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007144:	4b42      	ldr	r3, [pc, #264]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f003 030c 	and.w	r3, r3, #12
 800714c:	2b08      	cmp	r3, #8
 800714e:	d061      	beq.n	8007214 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d146      	bne.n	80071e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007158:	4b3f      	ldr	r3, [pc, #252]	; (8007258 <HAL_RCC_OscConfig+0x4fc>)
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800715e:	f7fe fe11 	bl	8005d84 <HAL_GetTick>
 8007162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007164:	e008      	b.n	8007178 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007166:	f7fe fe0d 	bl	8005d84 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	2b02      	cmp	r3, #2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e067      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007178:	4b35      	ldr	r3, [pc, #212]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1f0      	bne.n	8007166 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718c:	d108      	bne.n	80071a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800718e:	4b30      	ldr	r3, [pc, #192]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	492d      	ldr	r1, [pc, #180]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 800719c:	4313      	orrs	r3, r2
 800719e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071a0:	4b2b      	ldr	r3, [pc, #172]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a19      	ldr	r1, [r3, #32]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	430b      	orrs	r3, r1
 80071b2:	4927      	ldr	r1, [pc, #156]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071b8:	4b27      	ldr	r3, [pc, #156]	; (8007258 <HAL_RCC_OscConfig+0x4fc>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071be:	f7fe fde1 	bl	8005d84 <HAL_GetTick>
 80071c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071c4:	e008      	b.n	80071d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c6:	f7fe fddd 	bl	8005d84 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e037      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071d8:	4b1d      	ldr	r3, [pc, #116]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0f0      	beq.n	80071c6 <HAL_RCC_OscConfig+0x46a>
 80071e4:	e02f      	b.n	8007246 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071e6:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <HAL_RCC_OscConfig+0x4fc>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ec:	f7fe fdca 	bl	8005d84 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071f4:	f7fe fdc6 	bl	8005d84 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e020      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007206:	4b12      	ldr	r3, [pc, #72]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f0      	bne.n	80071f4 <HAL_RCC_OscConfig+0x498>
 8007212:	e018      	b.n	8007246 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e013      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007220:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <HAL_RCC_OscConfig+0x4f4>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	429a      	cmp	r2, r3
 8007232:	d106      	bne.n	8007242 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800723e:	429a      	cmp	r2, r3
 8007240:	d001      	beq.n	8007246 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	40021000 	.word	0x40021000
 8007254:	40007000 	.word	0x40007000
 8007258:	42420060 	.word	0x42420060

0800725c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0d0      	b.n	8007412 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007270:	4b6a      	ldr	r3, [pc, #424]	; (800741c <HAL_RCC_ClockConfig+0x1c0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d910      	bls.n	80072a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727e:	4b67      	ldr	r3, [pc, #412]	; (800741c <HAL_RCC_ClockConfig+0x1c0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f023 0207 	bic.w	r2, r3, #7
 8007286:	4965      	ldr	r1, [pc, #404]	; (800741c <HAL_RCC_ClockConfig+0x1c0>)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800728e:	4b63      	ldr	r3, [pc, #396]	; (800741c <HAL_RCC_ClockConfig+0x1c0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d001      	beq.n	80072a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e0b8      	b.n	8007412 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d020      	beq.n	80072ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072b8:	4b59      	ldr	r3, [pc, #356]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	4a58      	ldr	r2, [pc, #352]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80072be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80072c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072d0:	4b53      	ldr	r3, [pc, #332]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	4a52      	ldr	r2, [pc, #328]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80072d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80072da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072dc:	4b50      	ldr	r3, [pc, #320]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	494d      	ldr	r1, [pc, #308]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d040      	beq.n	800737c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d107      	bne.n	8007312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007302:	4b47      	ldr	r3, [pc, #284]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d115      	bne.n	800733a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e07f      	b.n	8007412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d107      	bne.n	800732a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800731a:	4b41      	ldr	r3, [pc, #260]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e073      	b.n	8007412 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800732a:	4b3d      	ldr	r3, [pc, #244]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e06b      	b.n	8007412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800733a:	4b39      	ldr	r3, [pc, #228]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f023 0203 	bic.w	r2, r3, #3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	4936      	ldr	r1, [pc, #216]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 8007348:	4313      	orrs	r3, r2
 800734a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800734c:	f7fe fd1a 	bl	8005d84 <HAL_GetTick>
 8007350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007352:	e00a      	b.n	800736a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007354:	f7fe fd16 	bl	8005d84 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007362:	4293      	cmp	r3, r2
 8007364:	d901      	bls.n	800736a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e053      	b.n	8007412 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800736a:	4b2d      	ldr	r3, [pc, #180]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f003 020c 	and.w	r2, r3, #12
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	429a      	cmp	r2, r3
 800737a:	d1eb      	bne.n	8007354 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800737c:	4b27      	ldr	r3, [pc, #156]	; (800741c <HAL_RCC_ClockConfig+0x1c0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d210      	bcs.n	80073ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738a:	4b24      	ldr	r3, [pc, #144]	; (800741c <HAL_RCC_ClockConfig+0x1c0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f023 0207 	bic.w	r2, r3, #7
 8007392:	4922      	ldr	r1, [pc, #136]	; (800741c <HAL_RCC_ClockConfig+0x1c0>)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	4313      	orrs	r3, r2
 8007398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800739a:	4b20      	ldr	r3, [pc, #128]	; (800741c <HAL_RCC_ClockConfig+0x1c0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d001      	beq.n	80073ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e032      	b.n	8007412 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073b8:	4b19      	ldr	r3, [pc, #100]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	4916      	ldr	r1, [pc, #88]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d009      	beq.n	80073ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073d6:	4b12      	ldr	r3, [pc, #72]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	490e      	ldr	r1, [pc, #56]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073ea:	f000 f821 	bl	8007430 <HAL_RCC_GetSysClockFreq>
 80073ee:	4602      	mov	r2, r0
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	091b      	lsrs	r3, r3, #4
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	490a      	ldr	r1, [pc, #40]	; (8007424 <HAL_RCC_ClockConfig+0x1c8>)
 80073fc:	5ccb      	ldrb	r3, [r1, r3]
 80073fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007402:	4a09      	ldr	r2, [pc, #36]	; (8007428 <HAL_RCC_ClockConfig+0x1cc>)
 8007404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007406:	4b09      	ldr	r3, [pc, #36]	; (800742c <HAL_RCC_ClockConfig+0x1d0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fc78 	bl	8005d00 <HAL_InitTick>

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40022000 	.word	0x40022000
 8007420:	40021000 	.word	0x40021000
 8007424:	0800a068 	.word	0x0800a068
 8007428:	20000004 	.word	0x20000004
 800742c:	20000080 	.word	0x20000080

08007430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007430:	b490      	push	{r4, r7}
 8007432:	b08a      	sub	sp, #40	; 0x28
 8007434:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007436:	4b2a      	ldr	r3, [pc, #168]	; (80074e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007438:	1d3c      	adds	r4, r7, #4
 800743a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800743c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007440:	f240 2301 	movw	r3, #513	; 0x201
 8007444:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	61fb      	str	r3, [r7, #28]
 800744a:	2300      	movs	r3, #0
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	2300      	movs	r3, #0
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800745a:	4b22      	ldr	r3, [pc, #136]	; (80074e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	f003 030c 	and.w	r3, r3, #12
 8007466:	2b04      	cmp	r3, #4
 8007468:	d002      	beq.n	8007470 <HAL_RCC_GetSysClockFreq+0x40>
 800746a:	2b08      	cmp	r3, #8
 800746c:	d003      	beq.n	8007476 <HAL_RCC_GetSysClockFreq+0x46>
 800746e:	e02d      	b.n	80074cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007470:	4b1d      	ldr	r3, [pc, #116]	; (80074e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007472:	623b      	str	r3, [r7, #32]
      break;
 8007474:	e02d      	b.n	80074d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	0c9b      	lsrs	r3, r3, #18
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007482:	4413      	add	r3, r2
 8007484:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007488:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d013      	beq.n	80074bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007494:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	0c5b      	lsrs	r3, r3, #17
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80074a2:	4413      	add	r3, r2
 80074a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80074a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	4a0e      	ldr	r2, [pc, #56]	; (80074e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074ae:	fb02 f203 	mul.w	r2, r2, r3
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
 80074ba:	e004      	b.n	80074c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	4a0b      	ldr	r2, [pc, #44]	; (80074ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80074c0:	fb02 f303 	mul.w	r3, r2, r3
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	623b      	str	r3, [r7, #32]
      break;
 80074ca:	e002      	b.n	80074d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074ce:	623b      	str	r3, [r7, #32]
      break;
 80074d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074d2:	6a3b      	ldr	r3, [r7, #32]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3728      	adds	r7, #40	; 0x28
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc90      	pop	{r4, r7}
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	08009d94 	.word	0x08009d94
 80074e4:	40021000 	.word	0x40021000
 80074e8:	007a1200 	.word	0x007a1200
 80074ec:	003d0900 	.word	0x003d0900

080074f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074f4:	4b02      	ldr	r3, [pc, #8]	; (8007500 <HAL_RCC_GetHCLKFreq+0x10>)
 80074f6:	681b      	ldr	r3, [r3, #0]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr
 8007500:	20000004 	.word	0x20000004

08007504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007508:	f7ff fff2 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 800750c:	4602      	mov	r2, r0
 800750e:	4b05      	ldr	r3, [pc, #20]	; (8007524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	0a1b      	lsrs	r3, r3, #8
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	4903      	ldr	r1, [pc, #12]	; (8007528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800751a:	5ccb      	ldrb	r3, [r1, r3]
 800751c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007520:	4618      	mov	r0, r3
 8007522:	bd80      	pop	{r7, pc}
 8007524:	40021000 	.word	0x40021000
 8007528:	0800a078 	.word	0x0800a078

0800752c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007530:	f7ff ffde 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 8007534:	4602      	mov	r2, r0
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	0adb      	lsrs	r3, r3, #11
 800753c:	f003 0307 	and.w	r3, r3, #7
 8007540:	4903      	ldr	r1, [pc, #12]	; (8007550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007542:	5ccb      	ldrb	r3, [r1, r3]
 8007544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007548:	4618      	mov	r0, r3
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40021000 	.word	0x40021000
 8007550:	0800a078 	.word	0x0800a078

08007554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <RCC_Delay+0x34>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a0a      	ldr	r2, [pc, #40]	; (800758c <RCC_Delay+0x38>)
 8007562:	fba2 2303 	umull	r2, r3, r2, r3
 8007566:	0a5b      	lsrs	r3, r3, #9
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007570:	bf00      	nop
  }
  while (Delay --);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1e5a      	subs	r2, r3, #1
 8007576:	60fa      	str	r2, [r7, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1f9      	bne.n	8007570 <RCC_Delay+0x1c>
}
 800757c:	bf00      	nop
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	bc80      	pop	{r7}
 8007586:	4770      	bx	lr
 8007588:	20000004 	.word	0x20000004
 800758c:	10624dd3 	.word	0x10624dd3

08007590 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	613b      	str	r3, [r7, #16]
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d07d      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80075ac:	2300      	movs	r3, #0
 80075ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075b0:	4b4f      	ldr	r3, [pc, #316]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10d      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075bc:	4b4c      	ldr	r3, [pc, #304]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	4a4b      	ldr	r2, [pc, #300]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c6:	61d3      	str	r3, [r2, #28]
 80075c8:	4b49      	ldr	r3, [pc, #292]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d0:	60bb      	str	r3, [r7, #8]
 80075d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075d4:	2301      	movs	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075d8:	4b46      	ldr	r3, [pc, #280]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d118      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075e4:	4b43      	ldr	r3, [pc, #268]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a42      	ldr	r2, [pc, #264]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075f0:	f7fe fbc8 	bl	8005d84 <HAL_GetTick>
 80075f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075f6:	e008      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075f8:	f7fe fbc4 	bl	8005d84 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b64      	cmp	r3, #100	; 0x64
 8007604:	d901      	bls.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e06d      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800760a:	4b3a      	ldr	r3, [pc, #232]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0f0      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007616:	4b36      	ldr	r3, [pc, #216]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800761e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d02e      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	429a      	cmp	r2, r3
 8007632:	d027      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007634:	4b2e      	ldr	r3, [pc, #184]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800763c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800763e:	4b2e      	ldr	r3, [pc, #184]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007640:	2201      	movs	r2, #1
 8007642:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007644:	4b2c      	ldr	r3, [pc, #176]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800764a:	4a29      	ldr	r2, [pc, #164]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d014      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800765a:	f7fe fb93 	bl	8005d84 <HAL_GetTick>
 800765e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007660:	e00a      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007662:	f7fe fb8f 	bl	8005d84 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007670:	4293      	cmp	r3, r2
 8007672:	d901      	bls.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e036      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007678:	4b1d      	ldr	r3, [pc, #116]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0ee      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007684:	4b1a      	ldr	r3, [pc, #104]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	4917      	ldr	r1, [pc, #92]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007692:	4313      	orrs	r3, r2
 8007694:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d105      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800769c:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	4a13      	ldr	r2, [pc, #76]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d008      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076b4:	4b0e      	ldr	r3, [pc, #56]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	490b      	ldr	r1, [pc, #44]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0310 	and.w	r3, r3, #16
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d008      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076d2:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	4904      	ldr	r1, [pc, #16]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	40021000 	.word	0x40021000
 80076f4:	40007000 	.word	0x40007000
 80076f8:	42420440 	.word	0x42420440

080076fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b08d      	sub	sp, #52	; 0x34
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007704:	4b5a      	ldr	r3, [pc, #360]	; (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8007706:	f107 040c 	add.w	r4, r7, #12
 800770a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800770c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007710:	f240 2301 	movw	r3, #513	; 0x201
 8007714:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
 800771a:	2300      	movs	r3, #0
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800771e:	2300      	movs	r3, #0
 8007720:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	61fb      	str	r3, [r7, #28]
 8007726:	2300      	movs	r3, #0
 8007728:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b10      	cmp	r3, #16
 800772e:	d00a      	beq.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b10      	cmp	r3, #16
 8007734:	f200 8091 	bhi.w	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d04c      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d07c      	beq.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007744:	e089      	b.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8007746:	4b4b      	ldr	r3, [pc, #300]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800774c:	4b49      	ldr	r3, [pc, #292]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8082 	beq.w	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	0c9b      	lsrs	r3, r3, #18
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007766:	4413      	add	r3, r2
 8007768:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800776c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d018      	beq.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007778:	4b3e      	ldr	r3, [pc, #248]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	0c5b      	lsrs	r3, r3, #17
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007786:	4413      	add	r3, r2
 8007788:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00d      	beq.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007798:	4a37      	ldr	r2, [pc, #220]	; (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	fbb2 f2f3 	udiv	r2, r2, r3
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	fb02 f303 	mul.w	r3, r2, r3
 80077a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077a8:	e004      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	4a33      	ldr	r2, [pc, #204]	; (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80077ae:	fb02 f303 	mul.w	r3, r2, r3
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80077b4:	4b2f      	ldr	r3, [pc, #188]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077c0:	d102      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80077c6:	e04a      	b.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	4a2c      	ldr	r2, [pc, #176]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80077ce:	fba2 2303 	umull	r2, r3, r2, r3
 80077d2:	085b      	lsrs	r3, r3, #1
 80077d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80077d6:	e042      	b.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80077d8:	4b26      	ldr	r3, [pc, #152]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e8:	d108      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80077f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077fa:	e01f      	b.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007806:	d109      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007808:	4b1a      	ldr	r3, [pc, #104]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8007814:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28
 800781a:	e00f      	b.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007826:	d11c      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8007828:	4b12      	ldr	r3, [pc, #72]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d016      	beq.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8007834:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007838:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800783a:	e012      	b.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800783c:	e011      	b.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800783e:	f7ff fe75 	bl	800752c <HAL_RCC_GetPCLK2Freq>
 8007842:	4602      	mov	r2, r0
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	0b9b      	lsrs	r3, r3, #14
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	3301      	adds	r3, #1
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	fbb2 f3f3 	udiv	r3, r2, r3
 8007856:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007858:	e004      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800785a:	bf00      	nop
 800785c:	e002      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800785e:	bf00      	nop
 8007860:	e000      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8007862:	bf00      	nop
    }
  }
  return (frequency);
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007866:	4618      	mov	r0, r3
 8007868:	3734      	adds	r7, #52	; 0x34
 800786a:	46bd      	mov	sp, r7
 800786c:	bd90      	pop	{r4, r7, pc}
 800786e:	bf00      	nop
 8007870:	08009da4 	.word	0x08009da4
 8007874:	40021000 	.word	0x40021000
 8007878:	007a1200 	.word	0x007a1200
 800787c:	003d0900 	.word	0x003d0900
 8007880:	aaaaaaab 	.word	0xaaaaaaab

08007884 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e084      	b.n	80079a4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7c5b      	ldrb	r3, [r3, #17]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7fd fa50 	bl	8004d50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 faa2 	bl	8007e00 <HAL_RTC_WaitForSynchro>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2204      	movs	r2, #4
 80078c6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e06b      	b.n	80079a4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fb5b 	bl	8007f88 <RTC_EnterInitMode>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2204      	movs	r2, #4
 80078dc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e060      	b.n	80079a4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 0207 	bic.w	r2, r2, #7
 80078f0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d005      	beq.n	8007906 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80078fa:	4b2c      	ldr	r3, [pc, #176]	; (80079ac <HAL_RTC_Init+0x128>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	4a2b      	ldr	r2, [pc, #172]	; (80079ac <HAL_RTC_Init+0x128>)
 8007900:	f023 0301 	bic.w	r3, r3, #1
 8007904:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007906:	4b29      	ldr	r3, [pc, #164]	; (80079ac <HAL_RTC_Init+0x128>)
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	4926      	ldr	r1, [pc, #152]	; (80079ac <HAL_RTC_Init+0x128>)
 8007914:	4313      	orrs	r3, r2
 8007916:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d003      	beq.n	800792a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	e00e      	b.n	8007948 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800792a:	2001      	movs	r0, #1
 800792c:	f7ff fee6 	bl	80076fc <HAL_RCCEx_GetPeriphCLKFreq>
 8007930:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d104      	bne.n	8007942 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2204      	movs	r2, #4
 800793c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e030      	b.n	80079a4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3b01      	subs	r3, #1
 8007946:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f023 010f 	bic.w	r1, r3, #15
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	0c1a      	lsrs	r2, r3, #16
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	0c1b      	lsrs	r3, r3, #16
 8007966:	041b      	lsls	r3, r3, #16
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	b291      	uxth	r1, r2
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6812      	ldr	r2, [r2, #0]
 8007970:	430b      	orrs	r3, r1
 8007972:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fb2f 	bl	8007fd8 <RTC_ExitInitMode>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d004      	beq.n	800798a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2204      	movs	r2, #4
 8007984:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e00c      	b.n	80079a4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80079a2:	2300      	movs	r3, #0
  }
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40006c00 	.word	0x40006c00

080079b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80079b0:	b590      	push	{r4, r7, lr}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	2300      	movs	r3, #0
 80079c2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_RTC_SetTime+0x20>
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e080      	b.n	8007ad6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	7c1b      	ldrb	r3, [r3, #16]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d101      	bne.n	80079e0 <HAL_RTC_SetTime+0x30>
 80079dc:	2302      	movs	r3, #2
 80079de:	e07a      	b.n	8007ad6 <HAL_RTC_SetTime+0x126>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2202      	movs	r2, #2
 80079ea:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d113      	bne.n	8007a1a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80079fc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	785b      	ldrb	r3, [r3, #1]
 8007a04:	4619      	mov	r1, r3
 8007a06:	460b      	mov	r3, r1
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	1a5b      	subs	r3, r3, r1
 8007a0c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007a0e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007a14:	4413      	add	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e01e      	b.n	8007a58 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 fb1f 	bl	8008062 <RTC_Bcd2ToByte>
 8007a24:	4603      	mov	r3, r0
 8007a26:	461a      	mov	r2, r3
 8007a28:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007a2c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 fb14 	bl	8008062 <RTC_Bcd2ToByte>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4613      	mov	r3, r2
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	1a9b      	subs	r3, r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007a46:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	789b      	ldrb	r3, [r3, #2]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fb08 	bl	8008062 <RTC_Bcd2ToByte>
 8007a52:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007a54:	4423      	add	r3, r4
 8007a56:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007a58:	6979      	ldr	r1, [r7, #20]
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 fa2d 	bl	8007eba <RTC_WriteTimeCounter>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d007      	beq.n	8007a76 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2204      	movs	r2, #4
 8007a6a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e02f      	b.n	8007ad6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0205 	bic.w	r2, r2, #5
 8007a84:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fa3e 	bl	8007f08 <RTC_ReadAlarmCounter>
 8007a8c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d018      	beq.n	8007ac8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d214      	bcs.n	8007ac8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007aa4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007aa8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007aaa:	6939      	ldr	r1, [r7, #16]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 fa44 	bl	8007f3a <RTC_WriteAlarmCounter>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d007      	beq.n	8007ac8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2204      	movs	r2, #4
 8007abc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e006      	b.n	8007ad6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
  }
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd90      	pop	{r4, r7, pc}
	...

08007ae0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61bb      	str	r3, [r7, #24]
 8007af0:	2300      	movs	r3, #0
 8007af2:	61fb      	str	r3, [r7, #28]
 8007af4:	2300      	movs	r3, #0
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	2300      	movs	r3, #0
 8007afa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <HAL_RTC_GetTime+0x28>
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e0b5      	b.n	8007c78 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e0ac      	b.n	8007c78 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f99b 	bl	8007e5a <RTC_ReadTimeCounter>
 8007b24:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	4a55      	ldr	r2, [pc, #340]	; (8007c80 <HAL_RTC_GetTime+0x1a0>)
 8007b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2e:	0adb      	lsrs	r3, r3, #11
 8007b30:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	4b52      	ldr	r3, [pc, #328]	; (8007c80 <HAL_RTC_GetTime+0x1a0>)
 8007b36:	fba3 1302 	umull	r1, r3, r3, r2
 8007b3a:	0adb      	lsrs	r3, r3, #11
 8007b3c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007b40:	fb01 f303 	mul.w	r3, r1, r3
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	4a4f      	ldr	r2, [pc, #316]	; (8007c84 <HAL_RTC_GetTime+0x1a4>)
 8007b48:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	4a4a      	ldr	r2, [pc, #296]	; (8007c80 <HAL_RTC_GetTime+0x1a0>)
 8007b58:	fba2 1203 	umull	r1, r2, r2, r3
 8007b5c:	0ad2      	lsrs	r2, r2, #11
 8007b5e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007b62:	fb01 f202 	mul.w	r2, r1, r2
 8007b66:	1a9a      	subs	r2, r3, r2
 8007b68:	4b46      	ldr	r3, [pc, #280]	; (8007c84 <HAL_RTC_GetTime+0x1a4>)
 8007b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8007b6e:	0959      	lsrs	r1, r3, #5
 8007b70:	460b      	mov	r3, r1
 8007b72:	011b      	lsls	r3, r3, #4
 8007b74:	1a5b      	subs	r3, r3, r1
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	1ad1      	subs	r1, r2, r3
 8007b7a:	b2ca      	uxtb	r2, r1
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2b17      	cmp	r3, #23
 8007b84:	d955      	bls.n	8007c32 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	4a3f      	ldr	r2, [pc, #252]	; (8007c88 <HAL_RTC_GetTime+0x1a8>)
 8007b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8e:	091b      	lsrs	r3, r3, #4
 8007b90:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8007b92:	6939      	ldr	r1, [r7, #16]
 8007b94:	4b3c      	ldr	r3, [pc, #240]	; (8007c88 <HAL_RTC_GetTime+0x1a8>)
 8007b96:	fba3 2301 	umull	r2, r3, r3, r1
 8007b9a:	091a      	lsrs	r2, r3, #4
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	4413      	add	r3, r2
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	1aca      	subs	r2, r1, r3
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f9ab 	bl	8007f08 <RTC_ReadAlarmCounter>
 8007bb2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bba:	d008      	beq.n	8007bce <HAL_RTC_GetTime+0xee>
 8007bbc:	69fa      	ldr	r2, [r7, #28]
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d904      	bls.n	8007bce <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	61fb      	str	r3, [r7, #28]
 8007bcc:	e002      	b.n	8007bd4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8007bce:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	4a2d      	ldr	r2, [pc, #180]	; (8007c8c <HAL_RTC_GetTime+0x1ac>)
 8007bd8:	fb02 f303 	mul.w	r3, r2, r3
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007be2:	69b9      	ldr	r1, [r7, #24]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f968 	bl	8007eba <RTC_WriteTimeCounter>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e041      	b.n	8007c78 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfa:	d00c      	beq.n	8007c16 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8007bfc:	69fa      	ldr	r2, [r7, #28]
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	4413      	add	r3, r2
 8007c02:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007c04:	69f9      	ldr	r1, [r7, #28]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 f997 	bl	8007f3a <RTC_WriteAlarmCounter>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e030      	b.n	8007c78 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007c16:	69f9      	ldr	r1, [r7, #28]
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 f98e 	bl	8007f3a <RTC_WriteAlarmCounter>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e027      	b.n	8007c78 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8007c28:	6979      	ldr	r1, [r7, #20]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fa36 	bl	800809c <RTC_DateUpdate>
 8007c30:	e003      	b.n	8007c3a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01a      	beq.n	8007c76 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 f9ef 	bl	8008028 <RTC_ByteToBcd2>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	785b      	ldrb	r3, [r3, #1]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f9e6 	bl	8008028 <RTC_ByteToBcd2>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	789b      	ldrb	r3, [r3, #2]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 f9dd 	bl	8008028 <RTC_ByteToBcd2>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	461a      	mov	r2, r3
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3720      	adds	r7, #32
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	91a2b3c5 	.word	0x91a2b3c5
 8007c84:	88888889 	.word	0x88888889
 8007c88:	aaaaaaab 	.word	0xaaaaaaab
 8007c8c:	00015180 	.word	0x00015180

08007c90 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007c90:	b590      	push	{r4, r7, lr}
 8007c92:	b089      	sub	sp, #36	; 0x24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8007ca0:	f107 0314 	add.w	r3, r7, #20
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	460a      	mov	r2, r1
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	460a      	mov	r2, r1
 8007cac:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <HAL_RTC_SetAlarm_IT+0x2a>
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e099      	b.n	8007df2 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	7c1b      	ldrb	r3, [r3, #16]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_RTC_SetAlarm_IT+0x3a>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e093      	b.n	8007df2 <HAL_RTC_SetAlarm_IT+0x162>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8007cd6:	f107 0314 	add.w	r3, r7, #20
 8007cda:	2200      	movs	r2, #0
 8007cdc:	4619      	mov	r1, r3
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7ff fefe 	bl	8007ae0 <HAL_RTC_GetTime>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e081      	b.n	8007df2 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8007cee:	7d3b      	ldrb	r3, [r7, #20]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007cf6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8007cfa:	7d7b      	ldrb	r3, [r7, #21]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	460b      	mov	r3, r1
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	1a5b      	subs	r3, r3, r1
 8007d04:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8007d06:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8007d08:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8007d0a:	4413      	add	r3, r2
 8007d0c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d113      	bne.n	8007d3c <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007d1e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	4619      	mov	r1, r3
 8007d28:	460b      	mov	r3, r1
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	1a5b      	subs	r3, r3, r1
 8007d2e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8007d30:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8007d36:	4413      	add	r3, r2
 8007d38:	61fb      	str	r3, [r7, #28]
 8007d3a:	e01e      	b.n	8007d7a <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 f98e 	bl	8008062 <RTC_Bcd2ToByte>
 8007d46:	4603      	mov	r3, r0
 8007d48:	461a      	mov	r2, r3
 8007d4a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007d4e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	785b      	ldrb	r3, [r3, #1]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 f983 	bl	8008062 <RTC_Bcd2ToByte>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	461a      	mov	r2, r3
 8007d60:	4613      	mov	r3, r2
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8007d68:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	789b      	ldrb	r3, [r3, #2]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 f977 	bl	8008062 <RTC_Bcd2ToByte>
 8007d74:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8007d76:	4423      	add	r3, r4
 8007d78:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d205      	bcs.n	8007d8e <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007d88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007d8c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007d8e:	69f9      	ldr	r1, [r7, #28]
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 f8d2 	bl	8007f3a <RTC_WriteAlarmCounter>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2204      	movs	r2, #4
 8007da0:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e022      	b.n	8007df2 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 0202 	bic.w	r2, r2, #2
 8007dba:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0202 	orr.w	r2, r2, #2
 8007dca:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007dcc:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <HAL_RTC_SetAlarm_IT+0x16c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a0a      	ldr	r2, [pc, #40]	; (8007dfc <HAL_RTC_SetAlarm_IT+0x16c>)
 8007dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dd6:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007dd8:	4b08      	ldr	r3, [pc, #32]	; (8007dfc <HAL_RTC_SetAlarm_IT+0x16c>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	4a07      	ldr	r2, [pc, #28]	; (8007dfc <HAL_RTC_SetAlarm_IT+0x16c>)
 8007dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007de2:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3724      	adds	r7, #36	; 0x24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd90      	pop	{r4, r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	40010400 	.word	0x40010400

08007e00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e01d      	b.n	8007e52 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 0208 	bic.w	r2, r2, #8
 8007e24:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007e26:	f7fd ffad 	bl	8005d84 <HAL_GetTick>
 8007e2a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007e2c:	e009      	b.n	8007e42 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007e2e:	f7fd ffa9 	bl	8005d84 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e3c:	d901      	bls.n	8007e42 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e007      	b.n	8007e52 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0ee      	beq.n	8007e2e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b087      	sub	sp, #28
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	827b      	strh	r3, [r7, #18]
 8007e66:	2300      	movs	r3, #0
 8007e68:	823b      	strh	r3, [r7, #16]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8007e8a:	8a7a      	ldrh	r2, [r7, #18]
 8007e8c:	8a3b      	ldrh	r3, [r7, #16]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d008      	beq.n	8007ea4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007e92:	8a3b      	ldrh	r3, [r7, #16]
 8007e94:	041a      	lsls	r2, r3, #16
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	e004      	b.n	8007eae <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007ea4:	8a7b      	ldrh	r3, [r7, #18]
 8007ea6:	041a      	lsls	r2, r3, #16
 8007ea8:	89fb      	ldrh	r3, [r7, #14]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8007eae:	697b      	ldr	r3, [r7, #20]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bc80      	pop	{r7}
 8007eb8:	4770      	bx	lr

08007eba <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f85d 	bl	8007f88 <RTC_EnterInitMode>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	73fb      	strb	r3, [r7, #15]
 8007ed8:	e011      	b.n	8007efe <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	0c12      	lsrs	r2, r2, #16
 8007ee2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	b292      	uxth	r2, r2
 8007eec:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f872 	bl	8007fd8 <RTC_ExitInitMode>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	81fb      	strh	r3, [r7, #14]
 8007f14:	2300      	movs	r3, #0
 8007f16:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007f28:	89fb      	ldrh	r3, [r7, #14]
 8007f2a:	041a      	lsls	r2, r3, #16
 8007f2c:	89bb      	ldrh	r3, [r7, #12]
 8007f2e:	4313      	orrs	r3, r2
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr

08007f3a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f81d 	bl	8007f88 <RTC_EnterInitMode>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	73fb      	strb	r3, [r7, #15]
 8007f58:	e011      	b.n	8007f7e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	0c12      	lsrs	r2, r2, #16
 8007f62:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	b292      	uxth	r2, r2
 8007f6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f832 	bl	8007fd8 <RTC_ExitInitMode>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007f94:	f7fd fef6 	bl	8005d84 <HAL_GetTick>
 8007f98:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007f9a:	e009      	b.n	8007fb0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007f9c:	f7fd fef2 	bl	8005d84 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007faa:	d901      	bls.n	8007fb0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e00f      	b.n	8007fd0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0ee      	beq.n	8007f9c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0210 	orr.w	r2, r2, #16
 8007fcc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0210 	bic.w	r2, r2, #16
 8007ff2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007ff4:	f7fd fec6 	bl	8005d84 <HAL_GetTick>
 8007ff8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007ffa:	e009      	b.n	8008010 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007ffc:	f7fd fec2 	bl	8005d84 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800800a:	d901      	bls.n	8008010 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e007      	b.n	8008020 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0ee      	beq.n	8007ffc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8008036:	e005      	b.n	8008044 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3301      	adds	r3, #1
 800803c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800803e:	79fb      	ldrb	r3, [r7, #7]
 8008040:	3b0a      	subs	r3, #10
 8008042:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8008044:	79fb      	ldrb	r3, [r7, #7]
 8008046:	2b09      	cmp	r3, #9
 8008048:	d8f6      	bhi.n	8008038 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	b2db      	uxtb	r3, r3
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	b2da      	uxtb	r2, r3
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	4313      	orrs	r3, r2
 8008056:	b2db      	uxtb	r3, r3
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	bc80      	pop	{r7}
 8008060:	4770      	bx	lr

08008062 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	4603      	mov	r3, r0
 800806a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	091b      	lsrs	r3, r3, #4
 8008074:	b2db      	uxtb	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	f003 030f 	and.w	r3, r3, #15
 8008088:	b2da      	uxtb	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	4413      	add	r3, r2
 8008090:	b2db      	uxtb	r3, r3
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	bc80      	pop	{r7}
 800809a:	4770      	bx	lr

0800809c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	2300      	movs	r3, #0
 80080ac:	613b      	str	r3, [r7, #16]
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	7bdb      	ldrb	r3, [r3, #15]
 80080ba:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	7b5b      	ldrb	r3, [r3, #13]
 80080c0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	7b9b      	ldrb	r3, [r3, #14]
 80080c6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80080c8:	2300      	movs	r3, #0
 80080ca:	60bb      	str	r3, [r7, #8]
 80080cc:	e06f      	b.n	80081ae <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d011      	beq.n	80080f8 <RTC_DateUpdate+0x5c>
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d00e      	beq.n	80080f8 <RTC_DateUpdate+0x5c>
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2b05      	cmp	r3, #5
 80080de:	d00b      	beq.n	80080f8 <RTC_DateUpdate+0x5c>
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b07      	cmp	r3, #7
 80080e4:	d008      	beq.n	80080f8 <RTC_DateUpdate+0x5c>
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d005      	beq.n	80080f8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	2b0a      	cmp	r3, #10
 80080f0:	d002      	beq.n	80080f8 <RTC_DateUpdate+0x5c>
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	2b0c      	cmp	r3, #12
 80080f6:	d117      	bne.n	8008128 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b1e      	cmp	r3, #30
 80080fc:	d803      	bhi.n	8008106 <RTC_DateUpdate+0x6a>
      {
        day++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008104:	e050      	b.n	80081a8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2b0c      	cmp	r3, #12
 800810a:	d005      	beq.n	8008118 <RTC_DateUpdate+0x7c>
        {
          month++;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	3301      	adds	r3, #1
 8008110:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008112:	2301      	movs	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008116:	e047      	b.n	80081a8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8008118:	2301      	movs	r3, #1
 800811a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800811c:	2301      	movs	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
          year++;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	3301      	adds	r3, #1
 8008124:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8008126:	e03f      	b.n	80081a8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	2b04      	cmp	r3, #4
 800812c:	d008      	beq.n	8008140 <RTC_DateUpdate+0xa4>
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	2b06      	cmp	r3, #6
 8008132:	d005      	beq.n	8008140 <RTC_DateUpdate+0xa4>
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	2b09      	cmp	r3, #9
 8008138:	d002      	beq.n	8008140 <RTC_DateUpdate+0xa4>
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	2b0b      	cmp	r3, #11
 800813e:	d10c      	bne.n	800815a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b1d      	cmp	r3, #29
 8008144:	d803      	bhi.n	800814e <RTC_DateUpdate+0xb2>
      {
        day++;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3301      	adds	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800814c:	e02c      	b.n	80081a8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	3301      	adds	r3, #1
 8008152:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008154:	2301      	movs	r3, #1
 8008156:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8008158:	e026      	b.n	80081a8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b02      	cmp	r3, #2
 800815e:	d123      	bne.n	80081a8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b1b      	cmp	r3, #27
 8008164:	d803      	bhi.n	800816e <RTC_DateUpdate+0xd2>
      {
        day++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	e01c      	b.n	80081a8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b1c      	cmp	r3, #28
 8008172:	d111      	bne.n	8008198 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	b29b      	uxth	r3, r3
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f839 	bl	80081f0 <RTC_IsLeapYear>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <RTC_DateUpdate+0xf0>
        {
          day++;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3301      	adds	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	e00d      	b.n	80081a8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	3301      	adds	r3, #1
 8008190:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008192:	2301      	movs	r3, #1
 8008194:	60fb      	str	r3, [r7, #12]
 8008196:	e007      	b.n	80081a8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b1d      	cmp	r3, #29
 800819c:	d104      	bne.n	80081a8 <RTC_DateUpdate+0x10c>
      {
        month++;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	3301      	adds	r3, #1
 80081a2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80081a4:	2301      	movs	r3, #1
 80081a6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d38b      	bcc.n	80080ce <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	4619      	mov	r1, r3
 80081d8:	6978      	ldr	r0, [r7, #20]
 80081da:	f000 f83b 	bl	8008254 <RTC_WeekDayNum>
 80081de:	4603      	mov	r3, r0
 80081e0:	461a      	mov	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	731a      	strb	r2, [r3, #12]
}
 80081e6:	bf00      	nop
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80081fa:	88fb      	ldrh	r3, [r7, #6]
 80081fc:	f003 0303 	and.w	r3, r3, #3
 8008200:	b29b      	uxth	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	e01d      	b.n	8008246 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	4a10      	ldr	r2, [pc, #64]	; (8008250 <RTC_IsLeapYear+0x60>)
 800820e:	fba2 1203 	umull	r1, r2, r2, r3
 8008212:	0952      	lsrs	r2, r2, #5
 8008214:	2164      	movs	r1, #100	; 0x64
 8008216:	fb01 f202 	mul.w	r2, r1, r2
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	b29b      	uxth	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8008222:	2301      	movs	r3, #1
 8008224:	e00f      	b.n	8008246 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8008226:	88fb      	ldrh	r3, [r7, #6]
 8008228:	4a09      	ldr	r2, [pc, #36]	; (8008250 <RTC_IsLeapYear+0x60>)
 800822a:	fba2 1203 	umull	r1, r2, r2, r3
 800822e:	09d2      	lsrs	r2, r2, #7
 8008230:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008234:	fb01 f202 	mul.w	r2, r1, r2
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	b29b      	uxth	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8008240:	2301      	movs	r3, #1
 8008242:	e000      	b.n	8008246 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8008244:	2300      	movs	r3, #0
  }
}
 8008246:	4618      	mov	r0, r3
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	bc80      	pop	{r7}
 800824e:	4770      	bx	lr
 8008250:	51eb851f 	.word	0x51eb851f

08008254 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
 8008260:	4613      	mov	r3, r2
 8008262:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	60bb      	str	r3, [r7, #8]
 8008268:	2300      	movs	r3, #0
 800826a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008272:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d82d      	bhi.n	80082d6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	4613      	mov	r3, r2
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	4413      	add	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	4a2c      	ldr	r2, [pc, #176]	; (8008338 <RTC_WeekDayNum+0xe4>)
 8008288:	fba2 2303 	umull	r2, r3, r2, r3
 800828c:	085a      	lsrs	r2, r3, #1
 800828e:	78bb      	ldrb	r3, [r7, #2]
 8008290:	441a      	add	r2, r3
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	441a      	add	r2, r3
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	3b01      	subs	r3, #1
 800829a:	089b      	lsrs	r3, r3, #2
 800829c:	441a      	add	r2, r3
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	4926      	ldr	r1, [pc, #152]	; (800833c <RTC_WeekDayNum+0xe8>)
 80082a4:	fba1 1303 	umull	r1, r3, r1, r3
 80082a8:	095b      	lsrs	r3, r3, #5
 80082aa:	1ad2      	subs	r2, r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	4922      	ldr	r1, [pc, #136]	; (800833c <RTC_WeekDayNum+0xe8>)
 80082b2:	fba1 1303 	umull	r1, r3, r1, r3
 80082b6:	09db      	lsrs	r3, r3, #7
 80082b8:	4413      	add	r3, r2
 80082ba:	1d1a      	adds	r2, r3, #4
 80082bc:	4b20      	ldr	r3, [pc, #128]	; (8008340 <RTC_WeekDayNum+0xec>)
 80082be:	fba3 1302 	umull	r1, r3, r3, r2
 80082c2:	1ad1      	subs	r1, r2, r3
 80082c4:	0849      	lsrs	r1, r1, #1
 80082c6:	440b      	add	r3, r1
 80082c8:	0899      	lsrs	r1, r3, #2
 80082ca:	460b      	mov	r3, r1
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	1a5b      	subs	r3, r3, r1
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e029      	b.n	800832a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	4613      	mov	r3, r2
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	4413      	add	r3, r2
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	4a15      	ldr	r2, [pc, #84]	; (8008338 <RTC_WeekDayNum+0xe4>)
 80082e4:	fba2 2303 	umull	r2, r3, r2, r3
 80082e8:	085a      	lsrs	r2, r3, #1
 80082ea:	78bb      	ldrb	r3, [r7, #2]
 80082ec:	441a      	add	r2, r3
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	441a      	add	r2, r3
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	089b      	lsrs	r3, r3, #2
 80082f6:	441a      	add	r2, r3
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4910      	ldr	r1, [pc, #64]	; (800833c <RTC_WeekDayNum+0xe8>)
 80082fc:	fba1 1303 	umull	r1, r3, r1, r3
 8008300:	095b      	lsrs	r3, r3, #5
 8008302:	1ad2      	subs	r2, r2, r3
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	490d      	ldr	r1, [pc, #52]	; (800833c <RTC_WeekDayNum+0xe8>)
 8008308:	fba1 1303 	umull	r1, r3, r1, r3
 800830c:	09db      	lsrs	r3, r3, #7
 800830e:	4413      	add	r3, r2
 8008310:	1c9a      	adds	r2, r3, #2
 8008312:	4b0b      	ldr	r3, [pc, #44]	; (8008340 <RTC_WeekDayNum+0xec>)
 8008314:	fba3 1302 	umull	r1, r3, r3, r2
 8008318:	1ad1      	subs	r1, r2, r3
 800831a:	0849      	lsrs	r1, r1, #1
 800831c:	440b      	add	r3, r1
 800831e:	0899      	lsrs	r1, r3, #2
 8008320:	460b      	mov	r3, r1
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	1a5b      	subs	r3, r3, r1
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	b2db      	uxtb	r3, r3
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	bc80      	pop	{r7}
 8008336:	4770      	bx	lr
 8008338:	38e38e39 	.word	0x38e38e39
 800833c:	51eb851f 	.word	0x51eb851f
 8008340:	24924925 	.word	0x24924925

08008344 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8008354:	4b07      	ldr	r3, [pc, #28]	; (8008374 <HAL_RTCEx_BKUPWrite+0x30>)
 8008356:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	4413      	add	r3, r2
 8008360:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	b292      	uxth	r2, r2
 8008368:	601a      	str	r2, [r3, #0]
}
 800836a:	bf00      	nop
 800836c:	371c      	adds	r7, #28
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr
 8008374:	40006c00 	.word	0x40006c00

08008378 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 800838a:	4b08      	ldr	r3, [pc, #32]	; (80083ac <HAL_RTCEx_BKUPRead+0x34>)
 800838c:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80083a0:	68bb      	ldr	r3, [r7, #8]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr
 80083ac:	40006c00 	.word	0x40006c00

080083b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e041      	b.n	8008446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d106      	bne.n	80083dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7fc fd24 	bl	8004e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f000 fd3e 	bl	8008e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
	...

08008450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b01      	cmp	r3, #1
 8008462:	d001      	beq.n	8008468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e03a      	b.n	80084de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f042 0201 	orr.w	r2, r2, #1
 800847e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a18      	ldr	r2, [pc, #96]	; (80084e8 <HAL_TIM_Base_Start_IT+0x98>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00e      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x58>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008492:	d009      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x58>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a14      	ldr	r2, [pc, #80]	; (80084ec <HAL_TIM_Base_Start_IT+0x9c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d004      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x58>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d111      	bne.n	80084cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b06      	cmp	r3, #6
 80084b8:	d010      	beq.n	80084dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f042 0201 	orr.w	r2, r2, #1
 80084c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ca:	e007      	b.n	80084dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0201 	orr.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bc80      	pop	{r7}
 80084e6:	4770      	bx	lr
 80084e8:	40012c00 	.word	0x40012c00
 80084ec:	40000400 	.word	0x40000400
 80084f0:	40000800 	.word	0x40000800

080084f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e041      	b.n	800858a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d106      	bne.n	8008520 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7fc fc3c 	bl	8004d98 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2202      	movs	r2, #2
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3304      	adds	r3, #4
 8008530:	4619      	mov	r1, r3
 8008532:	4610      	mov	r0, r2
 8008534:	f000 fc9c 	bl	8008e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <HAL_TIM_IC_Start_IT+0x1a>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	e013      	b.n	80085d6 <HAL_TIM_IC_Start_IT+0x42>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d104      	bne.n	80085be <HAL_TIM_IC_Start_IT+0x2a>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	e00b      	b.n	80085d6 <HAL_TIM_IC_Start_IT+0x42>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d104      	bne.n	80085ce <HAL_TIM_IC_Start_IT+0x3a>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	e003      	b.n	80085d6 <HAL_TIM_IC_Start_IT+0x42>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d104      	bne.n	80085e8 <HAL_TIM_IC_Start_IT+0x54>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	e013      	b.n	8008610 <HAL_TIM_IC_Start_IT+0x7c>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d104      	bne.n	80085f8 <HAL_TIM_IC_Start_IT+0x64>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	e00b      	b.n	8008610 <HAL_TIM_IC_Start_IT+0x7c>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b08      	cmp	r3, #8
 80085fc:	d104      	bne.n	8008608 <HAL_TIM_IC_Start_IT+0x74>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008604:	b2db      	uxtb	r3, r3
 8008606:	e003      	b.n	8008610 <HAL_TIM_IC_Start_IT+0x7c>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800860e:	b2db      	uxtb	r3, r3
 8008610:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d102      	bne.n	800861e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d001      	beq.n	8008622 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e0b3      	b.n	800878a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d104      	bne.n	8008632 <HAL_TIM_IC_Start_IT+0x9e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008630:	e013      	b.n	800865a <HAL_TIM_IC_Start_IT+0xc6>
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b04      	cmp	r3, #4
 8008636:	d104      	bne.n	8008642 <HAL_TIM_IC_Start_IT+0xae>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008640:	e00b      	b.n	800865a <HAL_TIM_IC_Start_IT+0xc6>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b08      	cmp	r3, #8
 8008646:	d104      	bne.n	8008652 <HAL_TIM_IC_Start_IT+0xbe>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008650:	e003      	b.n	800865a <HAL_TIM_IC_Start_IT+0xc6>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2202      	movs	r2, #2
 8008656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d104      	bne.n	800866a <HAL_TIM_IC_Start_IT+0xd6>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008668:	e013      	b.n	8008692 <HAL_TIM_IC_Start_IT+0xfe>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b04      	cmp	r3, #4
 800866e:	d104      	bne.n	800867a <HAL_TIM_IC_Start_IT+0xe6>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008678:	e00b      	b.n	8008692 <HAL_TIM_IC_Start_IT+0xfe>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b08      	cmp	r3, #8
 800867e:	d104      	bne.n	800868a <HAL_TIM_IC_Start_IT+0xf6>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008688:	e003      	b.n	8008692 <HAL_TIM_IC_Start_IT+0xfe>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2202      	movs	r2, #2
 800868e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b0c      	cmp	r3, #12
 8008696:	d841      	bhi.n	800871c <HAL_TIM_IC_Start_IT+0x188>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <HAL_TIM_IC_Start_IT+0x10c>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	080086d5 	.word	0x080086d5
 80086a4:	0800871d 	.word	0x0800871d
 80086a8:	0800871d 	.word	0x0800871d
 80086ac:	0800871d 	.word	0x0800871d
 80086b0:	080086e7 	.word	0x080086e7
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	0800871d 	.word	0x0800871d
 80086bc:	0800871d 	.word	0x0800871d
 80086c0:	080086f9 	.word	0x080086f9
 80086c4:	0800871d 	.word	0x0800871d
 80086c8:	0800871d 	.word	0x0800871d
 80086cc:	0800871d 	.word	0x0800871d
 80086d0:	0800870b 	.word	0x0800870b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0202 	orr.w	r2, r2, #2
 80086e2:	60da      	str	r2, [r3, #12]
      break;
 80086e4:	e01b      	b.n	800871e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0204 	orr.w	r2, r2, #4
 80086f4:	60da      	str	r2, [r3, #12]
      break;
 80086f6:	e012      	b.n	800871e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f042 0208 	orr.w	r2, r2, #8
 8008706:	60da      	str	r2, [r3, #12]
      break;
 8008708:	e009      	b.n	800871e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68da      	ldr	r2, [r3, #12]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0210 	orr.w	r2, r2, #16
 8008718:	60da      	str	r2, [r3, #12]
      break;
 800871a:	e000      	b.n	800871e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800871c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2201      	movs	r2, #1
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fda7 	bl	800927a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a18      	ldr	r2, [pc, #96]	; (8008794 <HAL_TIM_IC_Start_IT+0x200>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d00e      	beq.n	8008754 <HAL_TIM_IC_Start_IT+0x1c0>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873e:	d009      	beq.n	8008754 <HAL_TIM_IC_Start_IT+0x1c0>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a14      	ldr	r2, [pc, #80]	; (8008798 <HAL_TIM_IC_Start_IT+0x204>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d004      	beq.n	8008754 <HAL_TIM_IC_Start_IT+0x1c0>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a13      	ldr	r2, [pc, #76]	; (800879c <HAL_TIM_IC_Start_IT+0x208>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d111      	bne.n	8008778 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b06      	cmp	r3, #6
 8008764:	d010      	beq.n	8008788 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0201 	orr.w	r2, r2, #1
 8008774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008776:	e007      	b.n	8008788 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	40012c00 	.word	0x40012c00
 8008798:	40000400 	.word	0x40000400
 800879c:	40000800 	.word	0x40000800

080087a0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b0c      	cmp	r3, #12
 80087ae:	d841      	bhi.n	8008834 <HAL_TIM_IC_Stop_IT+0x94>
 80087b0:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <HAL_TIM_IC_Stop_IT+0x18>)
 80087b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b6:	bf00      	nop
 80087b8:	080087ed 	.word	0x080087ed
 80087bc:	08008835 	.word	0x08008835
 80087c0:	08008835 	.word	0x08008835
 80087c4:	08008835 	.word	0x08008835
 80087c8:	080087ff 	.word	0x080087ff
 80087cc:	08008835 	.word	0x08008835
 80087d0:	08008835 	.word	0x08008835
 80087d4:	08008835 	.word	0x08008835
 80087d8:	08008811 	.word	0x08008811
 80087dc:	08008835 	.word	0x08008835
 80087e0:	08008835 	.word	0x08008835
 80087e4:	08008835 	.word	0x08008835
 80087e8:	08008823 	.word	0x08008823
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f022 0202 	bic.w	r2, r2, #2
 80087fa:	60da      	str	r2, [r3, #12]
      break;
 80087fc:	e01b      	b.n	8008836 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68da      	ldr	r2, [r3, #12]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0204 	bic.w	r2, r2, #4
 800880c:	60da      	str	r2, [r3, #12]
      break;
 800880e:	e012      	b.n	8008836 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0208 	bic.w	r2, r2, #8
 800881e:	60da      	str	r2, [r3, #12]
      break;
 8008820:	e009      	b.n	8008836 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0210 	bic.w	r2, r2, #16
 8008830:	60da      	str	r2, [r3, #12]
      break;
 8008832:	e000      	b.n	8008836 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8008834:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2200      	movs	r2, #0
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fd1b 	bl	800927a <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6a1a      	ldr	r2, [r3, #32]
 800884a:	f241 1311 	movw	r3, #4369	; 0x1111
 800884e:	4013      	ands	r3, r2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10f      	bne.n	8008874 <HAL_TIM_IC_Stop_IT+0xd4>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6a1a      	ldr	r2, [r3, #32]
 800885a:	f240 4344 	movw	r3, #1092	; 0x444
 800885e:	4013      	ands	r3, r2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d107      	bne.n	8008874 <HAL_TIM_IC_Stop_IT+0xd4>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0201 	bic.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d104      	bne.n	8008884 <HAL_TIM_IC_Stop_IT+0xe4>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008882:	e013      	b.n	80088ac <HAL_TIM_IC_Stop_IT+0x10c>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	2b04      	cmp	r3, #4
 8008888:	d104      	bne.n	8008894 <HAL_TIM_IC_Stop_IT+0xf4>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008892:	e00b      	b.n	80088ac <HAL_TIM_IC_Stop_IT+0x10c>
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	2b08      	cmp	r3, #8
 8008898:	d104      	bne.n	80088a4 <HAL_TIM_IC_Stop_IT+0x104>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088a2:	e003      	b.n	80088ac <HAL_TIM_IC_Stop_IT+0x10c>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d104      	bne.n	80088bc <HAL_TIM_IC_Stop_IT+0x11c>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088ba:	e013      	b.n	80088e4 <HAL_TIM_IC_Stop_IT+0x144>
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d104      	bne.n	80088cc <HAL_TIM_IC_Stop_IT+0x12c>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088ca:	e00b      	b.n	80088e4 <HAL_TIM_IC_Stop_IT+0x144>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b08      	cmp	r3, #8
 80088d0:	d104      	bne.n	80088dc <HAL_TIM_IC_Stop_IT+0x13c>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088da:	e003      	b.n	80088e4 <HAL_TIM_IC_Stop_IT+0x144>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop

080088f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b02      	cmp	r3, #2
 8008904:	d122      	bne.n	800894c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b02      	cmp	r3, #2
 8008912:	d11b      	bne.n	800894c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f06f 0202 	mvn.w	r2, #2
 800891c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fc fefa 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 8008938:	e005      	b.n	8008946 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa7c 	bl	8008e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fa82 	bl	8008e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b04      	cmp	r3, #4
 8008958:	d122      	bne.n	80089a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b04      	cmp	r3, #4
 8008966:	d11b      	bne.n	80089a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f06f 0204 	mvn.w	r2, #4
 8008970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2202      	movs	r2, #2
 8008976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fc fed0 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 800898c:	e005      	b.n	800899a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa52 	bl	8008e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fa58 	bl	8008e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	f003 0308 	and.w	r3, r3, #8
 80089aa:	2b08      	cmp	r3, #8
 80089ac:	d122      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f003 0308 	and.w	r3, r3, #8
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d11b      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f06f 0208 	mvn.w	r2, #8
 80089c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2204      	movs	r2, #4
 80089ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	f003 0303 	and.w	r3, r3, #3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7fc fea6 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 80089e0:	e005      	b.n	80089ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fa28 	bl	8008e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fa2e 	bl	8008e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d122      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b10      	cmp	r3, #16
 8008a0e:	d11b      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f06f 0210 	mvn.w	r2, #16
 8008a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7fc fe7c 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 8008a34:	e005      	b.n	8008a42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9fe 	bl	8008e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fa04 	bl	8008e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d10e      	bne.n	8008a74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d107      	bne.n	8008a74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f06f 0201 	mvn.w	r2, #1
 8008a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7fb fc91 	bl	8004396 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7e:	2b80      	cmp	r3, #128	; 0x80
 8008a80:	d10e      	bne.n	8008aa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8c:	2b80      	cmp	r3, #128	; 0x80
 8008a8e:	d107      	bne.n	8008aa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fc79 	bl	8009392 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aaa:	2b40      	cmp	r3, #64	; 0x40
 8008aac:	d10e      	bne.n	8008acc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab8:	2b40      	cmp	r3, #64	; 0x40
 8008aba:	d107      	bne.n	8008acc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f9c8 	bl	8008e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	f003 0320 	and.w	r3, r3, #32
 8008ad6:	2b20      	cmp	r3, #32
 8008ad8:	d10e      	bne.n	8008af8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f003 0320 	and.w	r3, r3, #32
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d107      	bne.n	8008af8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f06f 0220 	mvn.w	r2, #32
 8008af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fc44 	bl	8009380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008af8:	bf00      	nop
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <HAL_TIM_IC_ConfigChannel+0x1a>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e082      	b.n	8008c20 <HAL_TIM_IC_ConfigChannel+0x120>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d11b      	bne.n	8008b60 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6818      	ldr	r0, [r3, #0]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	6819      	ldr	r1, [r3, #0]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	f000 f9fc 	bl	8008f34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 020c 	bic.w	r2, r2, #12
 8008b4a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6999      	ldr	r1, [r3, #24]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	689a      	ldr	r2, [r3, #8]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	619a      	str	r2, [r3, #24]
 8008b5e:	e05a      	b.n	8008c16 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d11c      	bne.n	8008ba0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6818      	ldr	r0, [r3, #0]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	6819      	ldr	r1, [r3, #0]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f000 fa65 	bl	8009044 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	699a      	ldr	r2, [r3, #24]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008b88:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6999      	ldr	r1, [r3, #24]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	021a      	lsls	r2, r3, #8
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	619a      	str	r2, [r3, #24]
 8008b9e:	e03a      	b.n	8008c16 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	d11b      	bne.n	8008bde <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6819      	ldr	r1, [r3, #0]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f000 fab0 	bl	800911a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	69da      	ldr	r2, [r3, #28]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 020c 	bic.w	r2, r2, #12
 8008bc8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69d9      	ldr	r1, [r3, #28]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	61da      	str	r2, [r3, #28]
 8008bdc:	e01b      	b.n	8008c16 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6819      	ldr	r1, [r3, #0]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f000 facf 	bl	8009190 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69da      	ldr	r2, [r3, #28]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008c00:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69d9      	ldr	r1, [r3, #28]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	021a      	lsls	r2, r3, #8
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_TIM_ConfigClockSource+0x18>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e0b3      	b.n	8008da8 <HAL_TIM_ConfigClockSource+0x180>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c78:	d03e      	beq.n	8008cf8 <HAL_TIM_ConfigClockSource+0xd0>
 8008c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c7e:	f200 8087 	bhi.w	8008d90 <HAL_TIM_ConfigClockSource+0x168>
 8008c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c86:	f000 8085 	beq.w	8008d94 <HAL_TIM_ConfigClockSource+0x16c>
 8008c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c8e:	d87f      	bhi.n	8008d90 <HAL_TIM_ConfigClockSource+0x168>
 8008c90:	2b70      	cmp	r3, #112	; 0x70
 8008c92:	d01a      	beq.n	8008cca <HAL_TIM_ConfigClockSource+0xa2>
 8008c94:	2b70      	cmp	r3, #112	; 0x70
 8008c96:	d87b      	bhi.n	8008d90 <HAL_TIM_ConfigClockSource+0x168>
 8008c98:	2b60      	cmp	r3, #96	; 0x60
 8008c9a:	d050      	beq.n	8008d3e <HAL_TIM_ConfigClockSource+0x116>
 8008c9c:	2b60      	cmp	r3, #96	; 0x60
 8008c9e:	d877      	bhi.n	8008d90 <HAL_TIM_ConfigClockSource+0x168>
 8008ca0:	2b50      	cmp	r3, #80	; 0x50
 8008ca2:	d03c      	beq.n	8008d1e <HAL_TIM_ConfigClockSource+0xf6>
 8008ca4:	2b50      	cmp	r3, #80	; 0x50
 8008ca6:	d873      	bhi.n	8008d90 <HAL_TIM_ConfigClockSource+0x168>
 8008ca8:	2b40      	cmp	r3, #64	; 0x40
 8008caa:	d058      	beq.n	8008d5e <HAL_TIM_ConfigClockSource+0x136>
 8008cac:	2b40      	cmp	r3, #64	; 0x40
 8008cae:	d86f      	bhi.n	8008d90 <HAL_TIM_ConfigClockSource+0x168>
 8008cb0:	2b30      	cmp	r3, #48	; 0x30
 8008cb2:	d064      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x156>
 8008cb4:	2b30      	cmp	r3, #48	; 0x30
 8008cb6:	d86b      	bhi.n	8008d90 <HAL_TIM_ConfigClockSource+0x168>
 8008cb8:	2b20      	cmp	r3, #32
 8008cba:	d060      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x156>
 8008cbc:	2b20      	cmp	r3, #32
 8008cbe:	d867      	bhi.n	8008d90 <HAL_TIM_ConfigClockSource+0x168>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d05c      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x156>
 8008cc4:	2b10      	cmp	r3, #16
 8008cc6:	d05a      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008cc8:	e062      	b.n	8008d90 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	6899      	ldr	r1, [r3, #8]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f000 faaf 	bl	800923c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008cec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	609a      	str	r2, [r3, #8]
      break;
 8008cf6:	e04e      	b.n	8008d96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	6899      	ldr	r1, [r3, #8]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f000 fa98 	bl	800923c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d1a:	609a      	str	r2, [r3, #8]
      break;
 8008d1c:	e03b      	b.n	8008d96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	6859      	ldr	r1, [r3, #4]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f000 f95c 	bl	8008fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2150      	movs	r1, #80	; 0x50
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 fa66 	bl	8009208 <TIM_ITRx_SetConfig>
      break;
 8008d3c:	e02b      	b.n	8008d96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	6859      	ldr	r1, [r3, #4]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f000 f9b6 	bl	80090bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2160      	movs	r1, #96	; 0x60
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 fa56 	bl	8009208 <TIM_ITRx_SetConfig>
      break;
 8008d5c:	e01b      	b.n	8008d96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	6859      	ldr	r1, [r3, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f000 f93c 	bl	8008fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2140      	movs	r1, #64	; 0x40
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fa46 	bl	8009208 <TIM_ITRx_SetConfig>
      break;
 8008d7c:	e00b      	b.n	8008d96 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4619      	mov	r1, r3
 8008d88:	4610      	mov	r0, r2
 8008d8a:	f000 fa3d 	bl	8009208 <TIM_ITRx_SetConfig>
        break;
 8008d8e:	e002      	b.n	8008d96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008d90:	bf00      	nop
 8008d92:	e000      	b.n	8008d96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008d94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b0c      	cmp	r3, #12
 8008dc2:	d831      	bhi.n	8008e28 <HAL_TIM_ReadCapturedValue+0x78>
 8008dc4:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <HAL_TIM_ReadCapturedValue+0x1c>)
 8008dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dca:	bf00      	nop
 8008dcc:	08008e01 	.word	0x08008e01
 8008dd0:	08008e29 	.word	0x08008e29
 8008dd4:	08008e29 	.word	0x08008e29
 8008dd8:	08008e29 	.word	0x08008e29
 8008ddc:	08008e0b 	.word	0x08008e0b
 8008de0:	08008e29 	.word	0x08008e29
 8008de4:	08008e29 	.word	0x08008e29
 8008de8:	08008e29 	.word	0x08008e29
 8008dec:	08008e15 	.word	0x08008e15
 8008df0:	08008e29 	.word	0x08008e29
 8008df4:	08008e29 	.word	0x08008e29
 8008df8:	08008e29 	.word	0x08008e29
 8008dfc:	08008e1f 	.word	0x08008e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e06:	60fb      	str	r3, [r7, #12]

      break;
 8008e08:	e00f      	b.n	8008e2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	60fb      	str	r3, [r7, #12]

      break;
 8008e12:	e00a      	b.n	8008e2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1a:	60fb      	str	r3, [r7, #12]

      break;
 8008e1c:	e005      	b.n	8008e2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e24:	60fb      	str	r3, [r7, #12]

      break;
 8008e26:	e000      	b.n	8008e2a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008e28:	bf00      	nop
  }

  return tmpreg;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bc80      	pop	{r7}
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop

08008e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bc80      	pop	{r7}
 8008e48:	4770      	bx	lr

08008e4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bc80      	pop	{r7}
 8008e5a:	4770      	bx	lr

08008e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bc80      	pop	{r7}
 8008e6c:	4770      	bx	lr
	...

08008e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a29      	ldr	r2, [pc, #164]	; (8008f28 <TIM_Base_SetConfig+0xb8>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d00b      	beq.n	8008ea0 <TIM_Base_SetConfig+0x30>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e8e:	d007      	beq.n	8008ea0 <TIM_Base_SetConfig+0x30>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a26      	ldr	r2, [pc, #152]	; (8008f2c <TIM_Base_SetConfig+0xbc>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d003      	beq.n	8008ea0 <TIM_Base_SetConfig+0x30>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a25      	ldr	r2, [pc, #148]	; (8008f30 <TIM_Base_SetConfig+0xc0>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d108      	bne.n	8008eb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a1c      	ldr	r2, [pc, #112]	; (8008f28 <TIM_Base_SetConfig+0xb8>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d00b      	beq.n	8008ed2 <TIM_Base_SetConfig+0x62>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec0:	d007      	beq.n	8008ed2 <TIM_Base_SetConfig+0x62>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a19      	ldr	r2, [pc, #100]	; (8008f2c <TIM_Base_SetConfig+0xbc>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d003      	beq.n	8008ed2 <TIM_Base_SetConfig+0x62>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a18      	ldr	r2, [pc, #96]	; (8008f30 <TIM_Base_SetConfig+0xc0>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d108      	bne.n	8008ee4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a07      	ldr	r2, [pc, #28]	; (8008f28 <TIM_Base_SetConfig+0xb8>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d103      	bne.n	8008f18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	615a      	str	r2, [r3, #20]
}
 8008f1e:	bf00      	nop
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bc80      	pop	{r7}
 8008f26:	4770      	bx	lr
 8008f28:	40012c00 	.word	0x40012c00
 8008f2c:	40000400 	.word	0x40000400
 8008f30:	40000800 	.word	0x40000800

08008f34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	f023 0201 	bic.w	r2, r3, #1
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4a1f      	ldr	r2, [pc, #124]	; (8008fdc <TIM_TI1_SetConfig+0xa8>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00b      	beq.n	8008f7a <TIM_TI1_SetConfig+0x46>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f68:	d007      	beq.n	8008f7a <TIM_TI1_SetConfig+0x46>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4a1c      	ldr	r2, [pc, #112]	; (8008fe0 <TIM_TI1_SetConfig+0xac>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d003      	beq.n	8008f7a <TIM_TI1_SetConfig+0x46>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4a1b      	ldr	r2, [pc, #108]	; (8008fe4 <TIM_TI1_SetConfig+0xb0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d101      	bne.n	8008f7e <TIM_TI1_SetConfig+0x4a>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e000      	b.n	8008f80 <TIM_TI1_SetConfig+0x4c>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d008      	beq.n	8008f96 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f023 0303 	bic.w	r3, r3, #3
 8008f8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	e003      	b.n	8008f9e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f043 0301 	orr.w	r3, r3, #1
 8008f9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	011b      	lsls	r3, r3, #4
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	f023 030a 	bic.w	r3, r3, #10
 8008fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	f003 030a 	and.w	r3, r3, #10
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	621a      	str	r2, [r3, #32]
}
 8008fd2:	bf00      	nop
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bc80      	pop	{r7}
 8008fda:	4770      	bx	lr
 8008fdc:	40012c00 	.word	0x40012c00
 8008fe0:	40000400 	.word	0x40000400
 8008fe4:	40000800 	.word	0x40000800

08008fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	f023 0201 	bic.w	r2, r3, #1
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	4313      	orrs	r3, r2
 800901c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f023 030a 	bic.w	r3, r3, #10
 8009024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	4313      	orrs	r3, r2
 800902c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	621a      	str	r2, [r3, #32]
}
 800903a:	bf00      	nop
 800903c:	371c      	adds	r7, #28
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr

08009044 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	f023 0210 	bic.w	r2, r3, #16
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	021b      	lsls	r3, r3, #8
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	4313      	orrs	r3, r2
 800907a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009082:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	031b      	lsls	r3, r3, #12
 8009088:	b29b      	uxth	r3, r3
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009096:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	621a      	str	r2, [r3, #32]
}
 80090b2:	bf00      	nop
 80090b4:	371c      	adds	r7, #28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bc80      	pop	{r7}
 80090ba:	4770      	bx	lr

080090bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	f023 0210 	bic.w	r2, r3, #16
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	031b      	lsls	r3, r3, #12
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	011b      	lsls	r3, r3, #4
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	4313      	orrs	r3, r2
 8009102:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	621a      	str	r2, [r3, #32]
}
 8009110:	bf00      	nop
 8009112:	371c      	adds	r7, #28
 8009114:	46bd      	mov	sp, r7
 8009116:	bc80      	pop	{r7}
 8009118:	4770      	bx	lr

0800911a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800911a:	b480      	push	{r7}
 800911c:	b087      	sub	sp, #28
 800911e:	af00      	add	r7, sp, #0
 8009120:	60f8      	str	r0, [r7, #12]
 8009122:	60b9      	str	r1, [r7, #8]
 8009124:	607a      	str	r2, [r7, #4]
 8009126:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f023 0303 	bic.w	r3, r3, #3
 8009146:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4313      	orrs	r3, r2
 800914e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009156:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	011b      	lsls	r3, r3, #4
 800915c:	b2db      	uxtb	r3, r3
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	4313      	orrs	r3, r2
 8009162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800916a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	021b      	lsls	r3, r3, #8
 8009170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	621a      	str	r2, [r3, #32]
}
 8009186:	bf00      	nop
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	bc80      	pop	{r7}
 800918e:	4770      	bx	lr

08009190 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
 800919c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	021b      	lsls	r3, r3, #8
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	031b      	lsls	r3, r3, #12
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	031b      	lsls	r3, r3, #12
 80091e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	621a      	str	r2, [r3, #32]
}
 80091fe:	bf00      	nop
 8009200:	371c      	adds	r7, #28
 8009202:	46bd      	mov	sp, r7
 8009204:	bc80      	pop	{r7}
 8009206:	4770      	bx	lr

08009208 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800921e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4313      	orrs	r3, r2
 8009226:	f043 0307 	orr.w	r3, r3, #7
 800922a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	609a      	str	r2, [r3, #8]
}
 8009232:	bf00      	nop
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr

0800923c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	021a      	lsls	r2, r3, #8
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	431a      	orrs	r2, r3
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	4313      	orrs	r3, r2
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	4313      	orrs	r3, r2
 8009268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	609a      	str	r2, [r3, #8]
}
 8009270:	bf00      	nop
 8009272:	371c      	adds	r7, #28
 8009274:	46bd      	mov	sp, r7
 8009276:	bc80      	pop	{r7}
 8009278:	4770      	bx	lr

0800927a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800927a:	b480      	push	{r7}
 800927c:	b087      	sub	sp, #28
 800927e:	af00      	add	r7, sp, #0
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f003 031f 	and.w	r3, r3, #31
 800928c:	2201      	movs	r2, #1
 800928e:	fa02 f303 	lsl.w	r3, r2, r3
 8009292:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a1a      	ldr	r2, [r3, #32]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	43db      	mvns	r3, r3
 800929c:	401a      	ands	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6a1a      	ldr	r2, [r3, #32]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f003 031f 	and.w	r3, r3, #31
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	fa01 f303 	lsl.w	r3, r1, r3
 80092b2:	431a      	orrs	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	621a      	str	r2, [r3, #32]
}
 80092b8:	bf00      	nop
 80092ba:	371c      	adds	r7, #28
 80092bc:	46bd      	mov	sp, r7
 80092be:	bc80      	pop	{r7}
 80092c0:	4770      	bx	lr
	...

080092c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092d8:	2302      	movs	r3, #2
 80092da:	e046      	b.n	800936a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	4313      	orrs	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a16      	ldr	r2, [pc, #88]	; (8009374 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d00e      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009328:	d009      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a12      	ldr	r2, [pc, #72]	; (8009378 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d004      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a10      	ldr	r2, [pc, #64]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d10c      	bne.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	4313      	orrs	r3, r2
 800934e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	bc80      	pop	{r7}
 8009372:	4770      	bx	lr
 8009374:	40012c00 	.word	0x40012c00
 8009378:	40000400 	.word	0x40000400
 800937c:	40000800 	.word	0x40000800

08009380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	bc80      	pop	{r7}
 8009390:	4770      	bx	lr

08009392 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr

080093a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e03f      	b.n	8009436 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7fb fd50 	bl	8004e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2224      	movs	r2, #36	; 0x24
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fbe5 	bl	8009bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	691a      	ldr	r2, [r3, #16]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695a      	ldr	r2, [r3, #20]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800940c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800941c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2220      	movs	r2, #32
 8009430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800943e:	b480      	push	{r7}
 8009440:	b085      	sub	sp, #20
 8009442:	af00      	add	r7, sp, #0
 8009444:	60f8      	str	r0, [r7, #12]
 8009446:	60b9      	str	r1, [r7, #8]
 8009448:	4613      	mov	r3, r2
 800944a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b20      	cmp	r3, #32
 8009456:	d130      	bne.n	80094ba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <HAL_UART_Transmit_IT+0x26>
 800945e:	88fb      	ldrh	r3, [r7, #6]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e029      	b.n	80094bc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800946e:	2b01      	cmp	r3, #1
 8009470:	d101      	bne.n	8009476 <HAL_UART_Transmit_IT+0x38>
 8009472:	2302      	movs	r3, #2
 8009474:	e022      	b.n	80094bc <HAL_UART_Transmit_IT+0x7e>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	88fa      	ldrh	r2, [r7, #6]
 8009488:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	88fa      	ldrh	r2, [r7, #6]
 800948e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2221      	movs	r2, #33	; 0x21
 800949a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68da      	ldr	r2, [r3, #12]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094b4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	e000      	b.n	80094bc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80094ba:	2302      	movs	r3, #2
  }
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bc80      	pop	{r7}
 80094c4:	4770      	bx	lr

080094c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	60b9      	str	r1, [r7, #8]
 80094d0:	4613      	mov	r3, r2
 80094d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d11d      	bne.n	800951c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <HAL_UART_Receive_IT+0x26>
 80094e6:	88fb      	ldrh	r3, [r7, #6]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e016      	b.n	800951e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d101      	bne.n	80094fe <HAL_UART_Receive_IT+0x38>
 80094fa:	2302      	movs	r3, #2
 80094fc:	e00f      	b.n	800951e <HAL_UART_Receive_IT+0x58>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800950c:	88fb      	ldrh	r3, [r7, #6]
 800950e:	461a      	mov	r2, r3
 8009510:	68b9      	ldr	r1, [r7, #8]
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 f9c6 	bl	80098a4 <UART_Start_Receive_IT>
 8009518:	4603      	mov	r3, r0
 800951a:	e000      	b.n	800951e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800951c:	2302      	movs	r3, #2
  }
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b08a      	sub	sp, #40	; 0x28
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009548:	2300      	movs	r3, #0
 800954a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800954c:	2300      	movs	r3, #0
 800954e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	f003 030f 	and.w	r3, r3, #15
 8009556:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10d      	bne.n	800957a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	f003 0320 	and.w	r3, r3, #32
 8009564:	2b00      	cmp	r3, #0
 8009566:	d008      	beq.n	800957a <HAL_UART_IRQHandler+0x52>
 8009568:	6a3b      	ldr	r3, [r7, #32]
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa76 	bl	8009a64 <UART_Receive_IT>
      return;
 8009578:	e17b      	b.n	8009872 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 80b1 	beq.w	80096e4 <HAL_UART_IRQHandler+0x1bc>
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	d105      	bne.n	8009598 <HAL_UART_IRQHandler+0x70>
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 80a6 	beq.w	80096e4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <HAL_UART_IRQHandler+0x90>
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d005      	beq.n	80095b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b0:	f043 0201 	orr.w	r2, r3, #1
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	f003 0304 	and.w	r3, r3, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00a      	beq.n	80095d8 <HAL_UART_IRQHandler+0xb0>
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d005      	beq.n	80095d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d0:	f043 0202 	orr.w	r2, r3, #2
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	f003 0302 	and.w	r3, r3, #2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <HAL_UART_IRQHandler+0xd0>
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d005      	beq.n	80095f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f0:	f043 0204 	orr.w	r2, r3, #4
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	f003 0308 	and.w	r3, r3, #8
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00f      	beq.n	8009622 <HAL_UART_IRQHandler+0xfa>
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	f003 0320 	and.w	r3, r3, #32
 8009608:	2b00      	cmp	r3, #0
 800960a:	d104      	bne.n	8009616 <HAL_UART_IRQHandler+0xee>
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d005      	beq.n	8009622 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	f043 0208 	orr.w	r2, r3, #8
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	f000 811e 	beq.w	8009868 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	f003 0320 	and.w	r3, r3, #32
 8009632:	2b00      	cmp	r3, #0
 8009634:	d007      	beq.n	8009646 <HAL_UART_IRQHandler+0x11e>
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	f003 0320 	and.w	r3, r3, #32
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fa0f 	bl	8009a64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009650:	2b00      	cmp	r3, #0
 8009652:	bf14      	ite	ne
 8009654:	2301      	movne	r3, #1
 8009656:	2300      	moveq	r3, #0
 8009658:	b2db      	uxtb	r3, r3
 800965a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009660:	f003 0308 	and.w	r3, r3, #8
 8009664:	2b00      	cmp	r3, #0
 8009666:	d102      	bne.n	800966e <HAL_UART_IRQHandler+0x146>
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d031      	beq.n	80096d2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f951 	bl	8009916 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800967e:	2b00      	cmp	r3, #0
 8009680:	d023      	beq.n	80096ca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	695a      	ldr	r2, [r3, #20]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009690:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009696:	2b00      	cmp	r3, #0
 8009698:	d013      	beq.n	80096c2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969e:	4a76      	ldr	r2, [pc, #472]	; (8009878 <HAL_UART_IRQHandler+0x350>)
 80096a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fd f916 	bl	80068d8 <HAL_DMA_Abort_IT>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d016      	beq.n	80096e0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c0:	e00e      	b.n	80096e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f8da 	bl	800987c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c8:	e00a      	b.n	80096e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f8d6 	bl	800987c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d0:	e006      	b.n	80096e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f8d2 	bl	800987c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80096de:	e0c3      	b.n	8009868 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e0:	bf00      	nop
    return;
 80096e2:	e0c1      	b.n	8009868 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	f040 80a1 	bne.w	8009830 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80096ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f0:	f003 0310 	and.w	r3, r3, #16
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 809b 	beq.w	8009830 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 8095 	beq.w	8009830 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009706:	2300      	movs	r3, #0
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	60fb      	str	r3, [r7, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	60fb      	str	r3, [r7, #12]
 800971a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009726:	2b00      	cmp	r3, #0
 8009728:	d04e      	beq.n	80097c8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009734:	8a3b      	ldrh	r3, [r7, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 8098 	beq.w	800986c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009740:	8a3a      	ldrh	r2, [r7, #16]
 8009742:	429a      	cmp	r2, r3
 8009744:	f080 8092 	bcs.w	800986c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	8a3a      	ldrh	r2, [r7, #16]
 800974c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	2b20      	cmp	r3, #32
 8009756:	d02b      	beq.n	80097b0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009766:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	695a      	ldr	r2, [r3, #20]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 0201 	bic.w	r2, r2, #1
 8009776:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	695a      	ldr	r2, [r3, #20]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009786:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2220      	movs	r2, #32
 800978c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68da      	ldr	r2, [r3, #12]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f022 0210 	bic.w	r2, r2, #16
 80097a4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fd f859 	bl	8006862 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	b29b      	uxth	r3, r3
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f864 	bl	800988e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80097c6:	e051      	b.n	800986c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097da:	b29b      	uxth	r3, r3
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d047      	beq.n	8009870 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80097e0:	8a7b      	ldrh	r3, [r7, #18]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d044      	beq.n	8009870 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80097f4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	695a      	ldr	r2, [r3, #20]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f022 0201 	bic.w	r2, r2, #1
 8009804:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2220      	movs	r2, #32
 800980a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f022 0210 	bic.w	r2, r2, #16
 8009822:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009824:	8a7b      	ldrh	r3, [r7, #18]
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f830 	bl	800988e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800982e:	e01f      	b.n	8009870 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009836:	2b00      	cmp	r3, #0
 8009838:	d008      	beq.n	800984c <HAL_UART_IRQHandler+0x324>
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f8a6 	bl	8009996 <UART_Transmit_IT>
    return;
 800984a:	e012      	b.n	8009872 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00d      	beq.n	8009872 <HAL_UART_IRQHandler+0x34a>
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985c:	2b00      	cmp	r3, #0
 800985e:	d008      	beq.n	8009872 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f8e7 	bl	8009a34 <UART_EndTransmit_IT>
    return;
 8009866:	e004      	b.n	8009872 <HAL_UART_IRQHandler+0x34a>
    return;
 8009868:	bf00      	nop
 800986a:	e002      	b.n	8009872 <HAL_UART_IRQHandler+0x34a>
      return;
 800986c:	bf00      	nop
 800986e:	e000      	b.n	8009872 <HAL_UART_IRQHandler+0x34a>
      return;
 8009870:	bf00      	nop
  }
}
 8009872:	3728      	adds	r7, #40	; 0x28
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	0800996f 	.word	0x0800996f

0800987c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	bc80      	pop	{r7}
 800988c:	4770      	bx	lr

0800988e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800988e:	b480      	push	{r7}
 8009890:	b083      	sub	sp, #12
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800989a:	bf00      	nop
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	bc80      	pop	{r7}
 80098a2:	4770      	bx	lr

080098a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	88fa      	ldrh	r2, [r7, #6]
 80098bc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	88fa      	ldrh	r2, [r7, #6]
 80098c2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2222      	movs	r2, #34	; 0x22
 80098ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098e8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	695a      	ldr	r2, [r3, #20]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0201 	orr.w	r2, r2, #1
 80098f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68da      	ldr	r2, [r3, #12]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0220 	orr.w	r2, r2, #32
 8009908:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	bc80      	pop	{r7}
 8009914:	4770      	bx	lr

08009916 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68da      	ldr	r2, [r3, #12]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800992c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	695a      	ldr	r2, [r3, #20]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f022 0201 	bic.w	r2, r2, #1
 800993c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009942:	2b01      	cmp	r3, #1
 8009944:	d107      	bne.n	8009956 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f022 0210 	bic.w	r2, r2, #16
 8009954:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2220      	movs	r2, #32
 800995a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	bc80      	pop	{r7}
 800996c:	4770      	bx	lr

0800996e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f7ff ff77 	bl	800987c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800998e:	bf00      	nop
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009996:	b480      	push	{r7}
 8009998:	b085      	sub	sp, #20
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b21      	cmp	r3, #33	; 0x21
 80099a8:	d13e      	bne.n	8009a28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b2:	d114      	bne.n	80099de <UART_Transmit_IT+0x48>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d110      	bne.n	80099de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	1c9a      	adds	r2, r3, #2
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	621a      	str	r2, [r3, #32]
 80099dc:	e008      	b.n	80099f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	1c59      	adds	r1, r3, #1
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	6211      	str	r1, [r2, #32]
 80099e8:	781a      	ldrb	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	4619      	mov	r1, r3
 80099fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10f      	bne.n	8009a24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68da      	ldr	r2, [r3, #12]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68da      	ldr	r2, [r3, #12]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	e000      	b.n	8009a2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a28:	2302      	movs	r3, #2
  }
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bc80      	pop	{r7}
 8009a32:	4770      	bx	lr

08009a34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7fa fc95 	bl	8004384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b22      	cmp	r3, #34	; 0x22
 8009a76:	f040 8099 	bne.w	8009bac <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a82:	d117      	bne.n	8009ab4 <UART_Receive_IT+0x50>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d113      	bne.n	8009ab4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a94:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aac:	1c9a      	adds	r2, r3, #2
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	629a      	str	r2, [r3, #40]	; 0x28
 8009ab2:	e026      	b.n	8009b02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac6:	d007      	beq.n	8009ad8 <UART_Receive_IT+0x74>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10a      	bne.n	8009ae6 <UART_Receive_IT+0x82>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d106      	bne.n	8009ae6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	701a      	strb	r2, [r3, #0]
 8009ae4:	e008      	b.n	8009af8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d148      	bne.n	8009ba8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68da      	ldr	r2, [r3, #12]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f022 0220 	bic.w	r2, r2, #32
 8009b24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	695a      	ldr	r2, [r3, #20]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 0201 	bic.w	r2, r2, #1
 8009b44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2220      	movs	r2, #32
 8009b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d123      	bne.n	8009b9e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0210 	bic.w	r2, r2, #16
 8009b6a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 0310 	and.w	r3, r3, #16
 8009b76:	2b10      	cmp	r3, #16
 8009b78:	d10a      	bne.n	8009b90 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	60fb      	str	r3, [r7, #12]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60fb      	str	r3, [r7, #12]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	60fb      	str	r3, [r7, #12]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b94:	4619      	mov	r1, r3
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff fe79 	bl	800988e <HAL_UARTEx_RxEventCallback>
 8009b9c:	e002      	b.n	8009ba4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7fa fbdc 	bl	800435c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	e002      	b.n	8009bae <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	e000      	b.n	8009bae <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009bac:	2302      	movs	r3, #2
  }
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3718      	adds	r7, #24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	689a      	ldr	r2, [r3, #8]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	431a      	orrs	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009bf2:	f023 030c 	bic.w	r3, r3, #12
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	6812      	ldr	r2, [r2, #0]
 8009bfa:	68b9      	ldr	r1, [r7, #8]
 8009bfc:	430b      	orrs	r3, r1
 8009bfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	699a      	ldr	r2, [r3, #24]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a2c      	ldr	r2, [pc, #176]	; (8009ccc <UART_SetConfig+0x114>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d103      	bne.n	8009c28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009c20:	f7fd fc84 	bl	800752c <HAL_RCC_GetPCLK2Freq>
 8009c24:	60f8      	str	r0, [r7, #12]
 8009c26:	e002      	b.n	8009c2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009c28:	f7fd fc6c 	bl	8007504 <HAL_RCC_GetPCLK1Freq>
 8009c2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	4613      	mov	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	009a      	lsls	r2, r3, #2
 8009c38:	441a      	add	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c44:	4a22      	ldr	r2, [pc, #136]	; (8009cd0 <UART_SetConfig+0x118>)
 8009c46:	fba2 2303 	umull	r2, r3, r2, r3
 8009c4a:	095b      	lsrs	r3, r3, #5
 8009c4c:	0119      	lsls	r1, r3, #4
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009a      	lsls	r2, r3, #2
 8009c58:	441a      	add	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c64:	4b1a      	ldr	r3, [pc, #104]	; (8009cd0 <UART_SetConfig+0x118>)
 8009c66:	fba3 0302 	umull	r0, r3, r3, r2
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	2064      	movs	r0, #100	; 0x64
 8009c6e:	fb00 f303 	mul.w	r3, r0, r3
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	011b      	lsls	r3, r3, #4
 8009c76:	3332      	adds	r3, #50	; 0x32
 8009c78:	4a15      	ldr	r2, [pc, #84]	; (8009cd0 <UART_SetConfig+0x118>)
 8009c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7e:	095b      	lsrs	r3, r3, #5
 8009c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c84:	4419      	add	r1, r3
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009a      	lsls	r2, r3, #2
 8009c90:	441a      	add	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c9c:	4b0c      	ldr	r3, [pc, #48]	; (8009cd0 <UART_SetConfig+0x118>)
 8009c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8009ca2:	095b      	lsrs	r3, r3, #5
 8009ca4:	2064      	movs	r0, #100	; 0x64
 8009ca6:	fb00 f303 	mul.w	r3, r0, r3
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	011b      	lsls	r3, r3, #4
 8009cae:	3332      	adds	r3, #50	; 0x32
 8009cb0:	4a07      	ldr	r2, [pc, #28]	; (8009cd0 <UART_SetConfig+0x118>)
 8009cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb6:	095b      	lsrs	r3, r3, #5
 8009cb8:	f003 020f 	and.w	r2, r3, #15
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009cc4:	bf00      	nop
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	40013800 	.word	0x40013800
 8009cd0:	51eb851f 	.word	0x51eb851f

08009cd4 <__libc_init_array>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	4d0c      	ldr	r5, [pc, #48]	; (8009d0c <__libc_init_array+0x38>)
 8009cda:	4c0d      	ldr	r4, [pc, #52]	; (8009d10 <__libc_init_array+0x3c>)
 8009cdc:	1b64      	subs	r4, r4, r5
 8009cde:	10a4      	asrs	r4, r4, #2
 8009ce0:	42a6      	cmp	r6, r4
 8009ce2:	d109      	bne.n	8009cf8 <__libc_init_array+0x24>
 8009ce4:	f000 f822 	bl	8009d2c <_init>
 8009ce8:	2600      	movs	r6, #0
 8009cea:	4d0a      	ldr	r5, [pc, #40]	; (8009d14 <__libc_init_array+0x40>)
 8009cec:	4c0a      	ldr	r4, [pc, #40]	; (8009d18 <__libc_init_array+0x44>)
 8009cee:	1b64      	subs	r4, r4, r5
 8009cf0:	10a4      	asrs	r4, r4, #2
 8009cf2:	42a6      	cmp	r6, r4
 8009cf4:	d105      	bne.n	8009d02 <__libc_init_array+0x2e>
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cfc:	4798      	blx	r3
 8009cfe:	3601      	adds	r6, #1
 8009d00:	e7ee      	b.n	8009ce0 <__libc_init_array+0xc>
 8009d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d06:	4798      	blx	r3
 8009d08:	3601      	adds	r6, #1
 8009d0a:	e7f2      	b.n	8009cf2 <__libc_init_array+0x1e>
 8009d0c:	0800a080 	.word	0x0800a080
 8009d10:	0800a080 	.word	0x0800a080
 8009d14:	0800a080 	.word	0x0800a080
 8009d18:	0800a084 	.word	0x0800a084

08009d1c <memset>:
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	4402      	add	r2, r0
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d100      	bne.n	8009d26 <memset+0xa>
 8009d24:	4770      	bx	lr
 8009d26:	f803 1b01 	strb.w	r1, [r3], #1
 8009d2a:	e7f9      	b.n	8009d20 <memset+0x4>

08009d2c <_init>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	bf00      	nop
 8009d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d32:	bc08      	pop	{r3}
 8009d34:	469e      	mov	lr, r3
 8009d36:	4770      	bx	lr

08009d38 <_fini>:
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3a:	bf00      	nop
 8009d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3e:	bc08      	pop	{r3}
 8009d40:	469e      	mov	lr, r3
 8009d42:	4770      	bx	lr
