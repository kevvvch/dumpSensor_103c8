
dumpSensor_103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800b8c0  0800b8c0  0001b8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc40  0800bc40  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc40  0800bc40  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc40  0800bc40  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc40  0800bc40  0001bc40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc44  0800bc44  0001bc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800bc48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  200000ec  0800bd34  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  0800bd34  00020868  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172f3  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cd9  00000000  00000000  00037408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0003b0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  0003c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f8a  00000000  00000000  0003dab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178ac  00000000  00000000  00057a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a1b  00000000  00000000  0006f2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103d01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d54  00000000  00000000  00103d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000ec 	.word	0x200000ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b8a4 	.word	0x0800b8a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f0 	.word	0x200000f0
 800014c:	0800b8a4 	.word	0x0800b8a4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <ch4Sensor_init>:




void ch4Sensor_init(ADC_HandleTypeDef *hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	//ADC
	ch4Hadc = hadc;
 80010b8:	4a08      	ldr	r2, [pc, #32]	; (80010dc <ch4Sensor_init+0x2c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&ch4Sensor_state, __ch4Sensor_idle);
 80010be:	2100      	movs	r1, #0
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <ch4Sensor_init+0x30>)
 80010c2:	f000 ff01 	bl	8001ec8 <fsmManager_init>

	//Flags
	flags_ch4Sensor.dword = 0;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <ch4Sensor_init+0x34>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
	flags_ch4SensorError.dword = 0;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <ch4Sensor_init+0x38>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000108 	.word	0x20000108
 80010e0:	20000110 	.word	0x20000110
 80010e4:	2000011c 	.word	0x2000011c
 80010e8:	20000120 	.word	0x20000120
 80010ec:	00000000 	.word	0x00000000

080010f0 <ch4Sensor_handler>:

void ch4Sensor_handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&ch4Sensor_state)) {
 80010f4:	4864      	ldr	r0, [pc, #400]	; (8001288 <ch4Sensor_handler+0x198>)
 80010f6:	f000 ff14 	bl	8001f22 <fsmManager_getState>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <ch4Sensor_handler+0x16>
 8001100:	2b01      	cmp	r3, #1
 8001102:	d029      	beq.n	8001158 <ch4Sensor_handler+0x68>

				flags_ch4Sensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 8001104:	e0b0      	b.n	8001268 <ch4Sensor_handler+0x178>
			if(fsmManager_isStateIn(&ch4Sensor_state)) {
 8001106:	4860      	ldr	r0, [pc, #384]	; (8001288 <ch4Sensor_handler+0x198>)
 8001108:	f000 ff16 	bl	8001f38 <fsmManager_isStateIn>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <ch4Sensor_handler+0x32>
				fsmManager_stateIn(&ch4Sensor_state);
 8001112:	485d      	ldr	r0, [pc, #372]	; (8001288 <ch4Sensor_handler+0x198>)
 8001114:	f000 ff26 	bl	8001f64 <fsmManager_stateIn>
				flags_ch4Sensor.bits.isMeasuring = 0;
 8001118:	4a5c      	ldr	r2, [pc, #368]	; (800128c <ch4Sensor_handler+0x19c>)
 800111a:	7853      	ldrb	r3, [r2, #1]
 800111c:	f36f 03c3 	bfc	r3, #3, #1
 8001120:	7053      	strb	r3, [r2, #1]
			if(flags_ch4Sensor.bits.requestMeasure) {
 8001122:	4b5a      	ldr	r3, [pc, #360]	; (800128c <ch4Sensor_handler+0x19c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d008      	beq.n	8001142 <ch4Sensor_handler+0x52>
				flags_ch4Sensor.bits.isMeasuring = 1;
 8001130:	4a56      	ldr	r2, [pc, #344]	; (800128c <ch4Sensor_handler+0x19c>)
 8001132:	7853      	ldrb	r3, [r2, #1]
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&ch4Sensor_state,__ch4Sensor_getAmmoniac);
 800113a:	2101      	movs	r1, #1
 800113c:	4852      	ldr	r0, [pc, #328]	; (8001288 <ch4Sensor_handler+0x198>)
 800113e:	f000 fed9 	bl	8001ef4 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&ch4Sensor_state)) {
 8001142:	4851      	ldr	r0, [pc, #324]	; (8001288 <ch4Sensor_handler+0x198>)
 8001144:	f000 ff03 	bl	8001f4e <fsmManager_isStateOut>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8089 	beq.w	8001262 <ch4Sensor_handler+0x172>
				fsmManager_stateOut(&ch4Sensor_state);
 8001150:	484d      	ldr	r0, [pc, #308]	; (8001288 <ch4Sensor_handler+0x198>)
 8001152:	f000 ff16 	bl	8001f82 <fsmManager_stateOut>
			break;
 8001156:	e084      	b.n	8001262 <ch4Sensor_handler+0x172>
			if(fsmManager_isStateIn(&ch4Sensor_state)) {
 8001158:	484b      	ldr	r0, [pc, #300]	; (8001288 <ch4Sensor_handler+0x198>)
 800115a:	f000 feed 	bl	8001f38 <fsmManager_isStateIn>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <ch4Sensor_handler+0x7e>
				fsmManager_stateIn(&ch4Sensor_state);
 8001164:	4848      	ldr	r0, [pc, #288]	; (8001288 <ch4Sensor_handler+0x198>)
 8001166:	f000 fefd 	bl	8001f64 <fsmManager_stateIn>
				ch4_adcStart();
 800116a:	f000 f8e7 	bl	800133c <ch4_adcStart>
			ch4Ppm = (float) ch4_adcGetValue();
 800116e:	f000 f8f9 	bl	8001364 <ch4_adcGetValue>
 8001172:	4603      	mov	r3, r0
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fd5d 	bl	8000c34 <__aeabi_ui2f>
 800117a:	4603      	mov	r3, r0
 800117c:	4a44      	ldr	r2, [pc, #272]	; (8001290 <ch4Sensor_handler+0x1a0>)
 800117e:	6013      	str	r3, [r2, #0]
			ch4Ppm = CH4_RL*(4095-ch4Ppm)/ch4Ppm;	//Gets Rs
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <ch4Sensor_handler+0x1a0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	4843      	ldr	r0, [pc, #268]	; (8001294 <ch4Sensor_handler+0x1a4>)
 8001188:	f7ff fca2 	bl	8000ad0 <__aeabi_fsub>
 800118c:	4603      	mov	r3, r0
 800118e:	4942      	ldr	r1, [pc, #264]	; (8001298 <ch4Sensor_handler+0x1a8>)
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fda7 	bl	8000ce4 <__aeabi_fmul>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <ch4Sensor_handler+0x1a0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f7ff fe53 	bl	8000e4c <__aeabi_fdiv>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <ch4Sensor_handler+0x1a0>)
 80011ac:	601a      	str	r2, [r3, #0]
			ch4Ppm = ch4Ppm/CH4_R0;					//Gets ratio
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <ch4Sensor_handler+0x1a0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	493a      	ldr	r1, [pc, #232]	; (800129c <ch4Sensor_handler+0x1ac>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fe49 	bl	8000e4c <__aeabi_fdiv>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <ch4Sensor_handler+0x1a0>)
 80011c0:	601a      	str	r2, [r3, #0]
			ch4Ppm = pow(10, ((log10(ch4Ppm) - CH4_COEF_B)/CH4_COEF_C + CH4_COEF_A));
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <ch4Sensor_handler+0x1a0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f926 	bl	8000418 <__aeabi_f2d>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f009 f966 	bl	800a4a4 <log10>
 80011d8:	a325      	add	r3, pc, #148	; (adr r3, 8001270 <ch4Sensor_handler+0x180>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7fe ffbb 	bl	8000158 <__aeabi_dsub>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	a323      	add	r3, pc, #140	; (adr r3, 8001278 <ch4Sensor_handler+0x188>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fa94 	bl	800071c <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	a320      	add	r3, pc, #128	; (adr r3, 8001280 <ch4Sensor_handler+0x190>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7fe ffab 	bl	800015c <__adddf3>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4924      	ldr	r1, [pc, #144]	; (80012a0 <ch4Sensor_handler+0x1b0>)
 8001210:	f009 f982 	bl	800a518 <pow>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fc04 	bl	8000a28 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <ch4Sensor_handler+0x1a0>)
 8001224:	6013      	str	r3, [r2, #0]
			if(ch4SensorCallback != NULL) {
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <ch4Sensor_handler+0x1b4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <ch4Sensor_handler+0x148>
				ch4SensorCallback(__ch4SensorEvent_okMeasuring, (float *) &ch4Ppm);
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <ch4Sensor_handler+0x1b4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4917      	ldr	r1, [pc, #92]	; (8001290 <ch4Sensor_handler+0x1a0>)
 8001234:	2000      	movs	r0, #0
 8001236:	4798      	blx	r3
			fsmManager_gotoState(&ch4Sensor_state,__ch4Sensor_idle);
 8001238:	2100      	movs	r1, #0
 800123a:	4813      	ldr	r0, [pc, #76]	; (8001288 <ch4Sensor_handler+0x198>)
 800123c:	f000 fe5a 	bl	8001ef4 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&ch4Sensor_state)) {
 8001240:	4811      	ldr	r0, [pc, #68]	; (8001288 <ch4Sensor_handler+0x198>)
 8001242:	f000 fe84 	bl	8001f4e <fsmManager_isStateOut>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00c      	beq.n	8001266 <ch4Sensor_handler+0x176>
				fsmManager_stateOut(&ch4Sensor_state);
 800124c:	480e      	ldr	r0, [pc, #56]	; (8001288 <ch4Sensor_handler+0x198>)
 800124e:	f000 fe98 	bl	8001f82 <fsmManager_stateOut>
				ch4_adcStop();
 8001252:	f000 f893 	bl	800137c <ch4_adcStop>
				flags_ch4Sensor.bits.requestMeasure = 0;
 8001256:	4a0d      	ldr	r2, [pc, #52]	; (800128c <ch4Sensor_handler+0x19c>)
 8001258:	7813      	ldrb	r3, [r2, #0]
 800125a:	f36f 0300 	bfc	r3, #0, #1
 800125e:	7013      	strb	r3, [r2, #0]
			break;
 8001260:	e001      	b.n	8001266 <ch4Sensor_handler+0x176>
			break;
 8001262:	bf00      	nop
 8001264:	e000      	b.n	8001268 <ch4Sensor_handler+0x178>
			break;
 8001266:	bf00      	nop
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	f3af 8000 	nop.w
 8001270:	00000000 	.word	0x00000000
 8001274:	3fdf5c29 	.word	0x3fdf5c29
 8001278:	80000000 	.word	0x80000000
 800127c:	bfd851eb 	.word	0xbfd851eb
 8001280:	60000000 	.word	0x60000000
 8001284:	40026666 	.word	0x40026666
 8001288:	20000110 	.word	0x20000110
 800128c:	2000011c 	.word	0x2000011c
 8001290:	2000010c 	.word	0x2000010c
 8001294:	457ff000 	.word	0x457ff000
 8001298:	41b00000 	.word	0x41b00000
 800129c:	3fca3d71 	.word	0x3fca3d71
 80012a0:	40240000 	.word	0x40240000
 80012a4:	20000124 	.word	0x20000124

080012a8 <ch4Sensor_measure>:

void ch4Sensor_measure(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	flags_ch4Sensor.bits.requestMeasure = 1;
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <ch4Sensor_measure+0x18>)
 80012ae:	7813      	ldrb	r3, [r2, #0]
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	7013      	strb	r3, [r2, #0]
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	2000011c 	.word	0x2000011c

080012c4 <ch4Sensor_setCallback>:
{
	return flags_ch4Sensor.bits.isMeasuring;
}

void ch4Sensor_setCallback(void (*cb)(_ch4Sensor_event, void*))
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	ch4SensorCallback = cb;
 80012cc:	4a03      	ldr	r2, [pc, #12]	; (80012dc <ch4Sensor_setCallback+0x18>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000124 	.word	0x20000124

080012e0 <ch4Sensor_powerOn>:

void ch4Sensor_powerOn(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	pinCh4Vdd_write(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f000 f855 	bl	8001394 <pinCh4Vdd_write>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <ch4Sensor_powerOff>:

void ch4Sensor_powerOff(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
	pinCh4Vdd_write(0);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 f84e 	bl	8001394 <pinCh4Vdd_write>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <ADC_Select_CHCh4>:



static void ADC_Select_CHCh4(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 800130c:	2304      	movs	r3, #4
 800130e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001314:	2301      	movs	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(ch4Hadc, &sConfig) != HAL_OK) {
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <ADC_Select_CHCh4+0x3c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1d3a      	adds	r2, r7, #4
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f005 fbb3 	bl	8006a8c <HAL_ADC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <ADC_Select_CHCh4+0x34>
		Error_Handler();
 800132c:	f003 fc82 	bl	8004c34 <Error_Handler>
	}
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000108 	.word	0x20000108

0800133c <ch4_adcStart>:

static void ch4_adcStart(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	ADC_Select_CHCh4();
 8001340:	f7ff ffdc 	bl	80012fc <ADC_Select_CHCh4>
	HAL_ADC_Start(ch4Hadc);
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <ch4_adcStart+0x24>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f005 f9b3 	bl	80066b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ch4Hadc, 100);
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <ch4_adcStart+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2164      	movs	r1, #100	; 0x64
 8001354:	4618      	mov	r0, r3
 8001356:	f005 fa87 	bl	8006868 <HAL_ADC_PollForConversion>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000108 	.word	0x20000108

08001364 <ch4_adcGetValue>:

static uint32_t ch4_adcGetValue(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(ch4Hadc);
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <ch4_adcGetValue+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f005 fb81 	bl	8006a74 <HAL_ADC_GetValue>
 8001372:	4603      	mov	r3, r0
}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000108 	.word	0x20000108

0800137c <ch4_adcStop>:

static void ch4_adcStop(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(ch4Hadc);
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <ch4_adcStop+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f005 fa43 	bl	8006810 <HAL_ADC_Stop>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000108 	.word	0x20000108

08001394 <pinCh4Vdd_write>:

static void pinCh4Vdd_write(uint8_t state)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CH4_SENSOR_VDD_PORT, CH4_SENSOR_VDD_PIN, state);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	461a      	mov	r2, r3
 80013a2:	2120      	movs	r1, #32
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <pinCh4Vdd_write+0x20>)
 80013a6:	f006 f847 	bl	8007438 <HAL_GPIO_WritePin>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40010800 	.word	0x40010800

080013b8 <usSensorCb>:
static float calculateDistancePercentage(float dist);



void usSensorCb(_usSensor_event evt, void* payload)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <usSensorCb+0x16>
 80013ca:	2b01      	cmp	r3, #1
			flags_dumpSensor.bits.usSensor_measureDone = 1;
			break;

		case __usSensorEvent_errorEcho:;

			break;
 80013cc:	e009      	b.n	80013e2 <usSensorCb+0x2a>
			distance = *(float*) payload;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a06      	ldr	r2, [pc, #24]	; (80013ec <usSensorCb+0x34>)
 80013d4:	6013      	str	r3, [r2, #0]
			flags_dumpSensor.bits.usSensor_measureDone = 1;
 80013d6:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <usSensorCb+0x38>)
 80013d8:	7813      	ldrb	r3, [r2, #0]
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	7013      	strb	r3, [r2, #0]
			break;
 80013e0:	bf00      	nop
	}
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	2000012c 	.word	0x2000012c
 80013f0:	2000073c 	.word	0x2000073c

080013f4 <nh3SensorCb>:

void nh3SensorCb(_nh3Sensor_event evt, void* payload)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <nh3SensorCb+0x26>
	{
		case __nh3SensorEvent_okMeasuring:;
			nh3Concentration = *(float*) payload;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <nh3SensorCb+0x30>)
 800140c:	6013      	str	r3, [r2, #0]

			flags_dumpSensor.bits.nh3Sensor_measureDone = 1;
 800140e:	4a06      	ldr	r2, [pc, #24]	; (8001428 <nh3SensorCb+0x34>)
 8001410:	7813      	ldrb	r3, [r2, #0]
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	7013      	strb	r3, [r2, #0]
			break;
 8001418:	bf00      	nop
	}
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000130 	.word	0x20000130
 8001428:	2000073c 	.word	0x2000073c

0800142c <ch4SensorCb>:

void ch4SensorCb(_ch4Sensor_event evt, void* payload)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <ch4SensorCb+0x26>
	{
		case __ch4SensorEvent_okMeasuring:;
			ch4Concentration = *(float*) payload;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a06      	ldr	r2, [pc, #24]	; (800145c <ch4SensorCb+0x30>)
 8001444:	6013      	str	r3, [r2, #0]

			flags_dumpSensor.bits.ch4Sensor_measureDone = 1;
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <ch4SensorCb+0x34>)
 8001448:	7813      	ldrb	r3, [r2, #0]
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	7013      	strb	r3, [r2, #0]
			break;
 8001450:	bf00      	nop
	}
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20000134 	.word	0x20000134
 8001460:	2000073c 	.word	0x2000073c

08001464 <tempSensorCb>:

void tempSensorCb(_tempSensor_event evt, void* payload)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d113      	bne.n	800149e <tempSensorCb+0x3a>
	{
		case __tempSensorEvent_okMeasuring:;
			temperature = *(float*) payload;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <tempSensorCb+0x44>)
 800147c:	6013      	str	r3, [r2, #0]
			temperature -= 10;	//Subtract addicional temperature of the capsule
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <tempSensorCb+0x44>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	490a      	ldr	r1, [pc, #40]	; (80014ac <tempSensorCb+0x48>)
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fb23 	bl	8000ad0 <__aeabi_fsub>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <tempSensorCb+0x44>)
 8001490:	601a      	str	r2, [r3, #0]

			flags_dumpSensor.bits.tempSensor_measureDone = 1;
 8001492:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <tempSensorCb+0x4c>)
 8001494:	7813      	ldrb	r3, [r2, #0]
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	7013      	strb	r3, [r2, #0]
			break;
 800149c:	bf00      	nop
	}
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000138 	.word	0x20000138
 80014ac:	41200000 	.word	0x41200000
 80014b0:	2000073c 	.word	0x2000073c

080014b4 <gsmModuleCb>:

void gsmModuleCb(_gsmModule_event evt, void* payload)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d126      	bne.n	8001514 <gsmModuleCb+0x60>
	{
		case __gsmModuleEvent_okGpsInfo:;
			uint8_t *gspInfo = (uint8_t*) payload;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	617b      	str	r3, [r7, #20]
			uint8_t strOut[10];

			string_split(gspInfo, ',', strOut);
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	461a      	mov	r2, r3
 80014d0:	212c      	movs	r1, #44	; 0x2c
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f004 fdc3 	bl	800605e <string_split>
			string_split(gspInfo, ',', strOut);
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	461a      	mov	r2, r3
 80014de:	212c      	movs	r1, #44	; 0x2c
 80014e0:	6978      	ldr	r0, [r7, #20]
 80014e2:	f004 fdbc 	bl	800605e <string_split>
			string_split(gspInfo, ',', gspLon);
 80014e6:	4a0d      	ldr	r2, [pc, #52]	; (800151c <gsmModuleCb+0x68>)
 80014e8:	212c      	movs	r1, #44	; 0x2c
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f004 fdb7 	bl	800605e <string_split>
			string_split(gspInfo, ',', strOut);
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	461a      	mov	r2, r3
 80014f6:	212c      	movs	r1, #44	; 0x2c
 80014f8:	6978      	ldr	r0, [r7, #20]
 80014fa:	f004 fdb0 	bl	800605e <string_split>
			string_split(gspInfo, ',', gspLat);
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <gsmModuleCb+0x6c>)
 8001500:	212c      	movs	r1, #44	; 0x2c
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f004 fdab 	bl	800605e <string_split>

			flags_dumpSensor.bits.tempSensor_measureDone = 1;
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <gsmModuleCb+0x70>)
 800150a:	7813      	ldrb	r3, [r2, #0]
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	7013      	strb	r3, [r2, #0]
			break;
 8001512:	bf00      	nop
	}
}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000140 	.word	0x20000140
 8001520:	20000150 	.word	0x20000150
 8001524:	2000073c 	.word	0x2000073c

08001528 <dumpSensorManager_init>:


void dumpSensorManager_init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	//Wakes up from sleep
	powerMode_init(&hrtc);
 800152c:	481b      	ldr	r0, [pc, #108]	; (800159c <dumpSensorManager_init+0x74>)
 800152e:	f003 fd5b 	bl	8004fe8 <powerMode_init>

	//Initializes softTimer
	softTimer_init(&htim4);
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <dumpSensorManager_init+0x78>)
 8001534:	f003 fdb6 	bl	80050a4 <softTimer_init>

	//Initializes ultrasonic Sensor
	usSensor_init(&htim3);
 8001538:	481a      	ldr	r0, [pc, #104]	; (80015a4 <dumpSensorManager_init+0x7c>)
 800153a:	f004 f923 	bl	8005784 <usSensor_init>
	usSensor_setCallback(usSensorCb);
 800153e:	481a      	ldr	r0, [pc, #104]	; (80015a8 <dumpSensorManager_init+0x80>)
 8001540:	f004 fb78 	bl	8005c34 <usSensor_setCallback>
	usSensor_powerOff();
 8001544:	f004 fb41 	bl	8005bca <usSensor_powerOff>

	//Initializes temperature Sensor
	tempSensor_init(&hadc1);
 8001548:	4818      	ldr	r0, [pc, #96]	; (80015ac <dumpSensorManager_init+0x84>)
 800154a:	f003 ffd9 	bl	8005500 <tempSensor_init>
	tempSensor_setCallback(tempSensorCb);
 800154e:	4818      	ldr	r0, [pc, #96]	; (80015b0 <dumpSensorManager_init+0x88>)
 8001550:	f004 f8be 	bl	80056d0 <tempSensor_setCallback>

	//Initializes NH3 Sensor
	nh3Sensor_init(&hadc1);
 8001554:	4815      	ldr	r0, [pc, #84]	; (80015ac <dumpSensorManager_init+0x84>)
 8001556:	f003 fb73 	bl	8004c40 <nh3Sensor_init>
	nh3Sensor_setCallback(nh3SensorCb);
 800155a:	4816      	ldr	r0, [pc, #88]	; (80015b4 <dumpSensorManager_init+0x8c>)
 800155c:	f003 fc78 	bl	8004e50 <nh3Sensor_setCallback>
	nh3Sensor_powerOff();
 8001560:	f003 fc8b 	bl	8004e7a <nh3Sensor_powerOff>

	//Initializes CH4 Sensor
	ch4Sensor_init(&hadc1);
 8001564:	4811      	ldr	r0, [pc, #68]	; (80015ac <dumpSensorManager_init+0x84>)
 8001566:	f7ff fda3 	bl	80010b0 <ch4Sensor_init>
	ch4Sensor_setCallback(ch4SensorCb);
 800156a:	4813      	ldr	r0, [pc, #76]	; (80015b8 <dumpSensorManager_init+0x90>)
 800156c:	f7ff feaa 	bl	80012c4 <ch4Sensor_setCallback>
	ch4Sensor_powerOff();
 8001570:	f7ff febd 	bl	80012ee <ch4Sensor_powerOff>

	//Initializes GSM Module
	gsmModule_init(&huart1);
 8001574:	4811      	ldr	r0, [pc, #68]	; (80015bc <dumpSensorManager_init+0x94>)
 8001576:	f000 fd13 	bl	8001fa0 <gsmModule_init>
	gsmModule_powerOff();
 800157a:	f000 fd84 	bl	8002086 <gsmModule_powerOff>
	gsmModule_setCallback(gsmModuleCb);
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <dumpSensorManager_init+0x98>)
 8001580:	f000 fd6c 	bl	800205c <gsmModule_setCallback>

	//Initializes NVM managment Module
	nvm_init(&hrtc);
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <dumpSensorManager_init+0x74>)
 8001586:	f003 fcdd 	bl	8004f44 <nvm_init>

	//FSM
	fsmManager_init(&dumpSensorFsmState, __dumpSensor_idle);
 800158a:	2100      	movs	r1, #0
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <dumpSensorManager_init+0x9c>)
 800158e:	f000 fc9b 	bl	8001ec8 <fsmManager_init>

	//Flags
	flags_dumpSensor.dword = 0;
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <dumpSensorManager_init+0xa0>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000848 	.word	0x20000848
 80015a0:	20000744 	.word	0x20000744
 80015a4:	2000078c 	.word	0x2000078c
 80015a8:	080013b9 	.word	0x080013b9
 80015ac:	200007d4 	.word	0x200007d4
 80015b0:	08001465 	.word	0x08001465
 80015b4:	080013f5 	.word	0x080013f5
 80015b8:	0800142d 	.word	0x0800142d
 80015bc:	20000804 	.word	0x20000804
 80015c0:	080014b5 	.word	0x080014b5
 80015c4:	20000730 	.word	0x20000730
 80015c8:	2000073c 	.word	0x2000073c

080015cc <dumpSensorManager_handler>:

void dumpSensorManager_handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	usSensor_handler();
 80015d0:	f004 f930 	bl	8005834 <usSensor_handler>
	tempSensor_handler();
 80015d4:	f003 ffb4 	bl	8005540 <tempSensor_handler>
	nh3Sensor_handler();
 80015d8:	f003 fb52 	bl	8004c80 <nh3Sensor_handler>
	ch4Sensor_handler();
 80015dc:	f7ff fd88 	bl	80010f0 <ch4Sensor_handler>
	gsmModule_handler();
 80015e0:	f000 fe4c 	bl	800227c <gsmModule_handler>



	if(flags_dumpSensor.bits.gsmModule_turnOn == 1) {
 80015e4:	4bbb      	ldr	r3, [pc, #748]	; (80018d4 <dumpSensorManager_handler+0x308>)
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d106      	bne.n	80015fa <dumpSensorManager_handler+0x2e>
		flags_dumpSensor.bits.gsmModule_turnOn = 0;
 80015ec:	4bb9      	ldr	r3, [pc, #740]	; (80018d4 <dumpSensorManager_handler+0x308>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	705a      	strb	r2, [r3, #1]

		gsmModule_powerOn();
 80015f2:	f000 fd41 	bl	8002078 <gsmModule_powerOn>
		gsmModule_pwrkeyOn();
 80015f6:	f000 fd4d 	bl	8002094 <gsmModule_pwrkeyOn>
	}

	switch(fsmManager_getState(&dumpSensorFsmState))
 80015fa:	48b7      	ldr	r0, [pc, #732]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80015fc:	f000 fc91 	bl	8001f22 <fsmManager_getState>
 8001600:	4603      	mov	r3, r0
 8001602:	2b0e      	cmp	r3, #14
 8001604:	f200 838e 	bhi.w	8001d24 <dumpSensorManager_handler+0x758>
 8001608:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <dumpSensorManager_handler+0x44>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	0800164d 	.word	0x0800164d
 8001614:	0800167d 	.word	0x0800167d
 8001618:	080016c5 	.word	0x080016c5
 800161c:	08001711 	.word	0x08001711
 8001620:	08001759 	.word	0x08001759
 8001624:	080017b9 	.word	0x080017b9
 8001628:	08001807 	.word	0x08001807
 800162c:	0800186d 	.word	0x0800186d
 8001630:	08001901 	.word	0x08001901
 8001634:	0800198b 	.word	0x0800198b
 8001638:	080019e9 	.word	0x080019e9
 800163c:	08001bb1 	.word	0x08001bb1
 8001640:	08001c63 	.word	0x08001c63
 8001644:	08001cc3 	.word	0x08001cc3
 8001648:	08001cf7 	.word	0x08001cf7
	{
		case __dumpSensor_idle:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 800164c:	48a2      	ldr	r0, [pc, #648]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800164e:	f000 fc73 	bl	8001f38 <fsmManager_isStateIn>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <dumpSensorManager_handler+0x92>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001658:	489f      	ldr	r0, [pc, #636]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800165a:	f000 fc83 	bl	8001f64 <fsmManager_stateIn>
#if defined(STATUS_LED)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
#endif
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_readNvm);
 800165e:	2101      	movs	r1, #1
 8001660:	489d      	ldr	r0, [pc, #628]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001662:	f000 fc47 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001666:	489c      	ldr	r0, [pc, #624]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001668:	f000 fc71 	bl	8001f4e <fsmManager_isStateOut>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 836f 	beq.w	8001d52 <dumpSensorManager_handler+0x786>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001674:	4898      	ldr	r0, [pc, #608]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001676:	f000 fc84 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800167a:	e36a      	b.n	8001d52 <dumpSensorManager_handler+0x786>



		case __dumpSensor_readNvm:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 800167c:	4896      	ldr	r0, [pc, #600]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800167e:	f000 fc5b 	bl	8001f38 <fsmManager_isStateIn>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <dumpSensorManager_handler+0xc2>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001688:	4893      	ldr	r0, [pc, #588]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800168a:	f000 fc6b 	bl	8001f64 <fsmManager_stateIn>
			}

			readNvm();
 800168e:	f000 fbbf 	bl	8001e10 <readNvm>
			writeNvm();
 8001692:	f000 fbdb 	bl	8001e4c <writeNvm>

			//Gets product ID
			productId = (((uint32_t) reg[NVM_ID_HIGH].word) << 16) | reg[NVM_ID_LOW].word;
 8001696:	4b91      	ldr	r3, [pc, #580]	; (80018dc <dumpSensorManager_handler+0x310>)
 8001698:	889b      	ldrh	r3, [r3, #4]
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	4a8f      	ldr	r2, [pc, #572]	; (80018dc <dumpSensorManager_handler+0x310>)
 800169e:	8852      	ldrh	r2, [r2, #2]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	4a8f      	ldr	r2, [pc, #572]	; (80018e0 <dumpSensorManager_handler+0x314>)
 80016a4:	6013      	str	r3, [r2, #0]

			//Gets flags


			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureBattery);
 80016a6:	2102      	movs	r1, #2
 80016a8:	488b      	ldr	r0, [pc, #556]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80016aa:	f000 fc23 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80016ae:	488a      	ldr	r0, [pc, #552]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80016b0:	f000 fc4d 	bl	8001f4e <fsmManager_isStateOut>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 834d 	beq.w	8001d56 <dumpSensorManager_handler+0x78a>
				fsmManager_stateOut(&dumpSensorFsmState);
 80016bc:	4886      	ldr	r0, [pc, #536]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80016be:	f000 fc60 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80016c2:	e348      	b.n	8001d56 <dumpSensorManager_handler+0x78a>



		case __dumpSensor_measureBattery:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80016c4:	4884      	ldr	r0, [pc, #528]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80016c6:	f000 fc37 	bl	8001f38 <fsmManager_isStateIn>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <dumpSensorManager_handler+0x10a>
				fsmManager_stateIn(&dumpSensorFsmState);
 80016d0:	4881      	ldr	r0, [pc, #516]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80016d2:	f000 fc47 	bl	8001f64 <fsmManager_stateIn>
			}

			//Gets battery level percetange
			battery = 0.50;
 80016d6:	4b83      	ldr	r3, [pc, #524]	; (80018e4 <dumpSensorManager_handler+0x318>)
 80016d8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80016dc:	601a      	str	r2, [r3, #0]
			batteryPercent = battery*100;
 80016de:	4b81      	ldr	r3, [pc, #516]	; (80018e4 <dumpSensorManager_handler+0x318>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4981      	ldr	r1, [pc, #516]	; (80018e8 <dumpSensorManager_handler+0x31c>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fafd 	bl	8000ce4 <__aeabi_fmul>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b7f      	ldr	r3, [pc, #508]	; (80018ec <dumpSensorManager_handler+0x320>)
 80016f0:	601a      	str	r2, [r3, #0]
			if(batteryPercent < DUMPSTER_BATTERY_PERC_TRIG_NEG || ) {
				flags_dumpSensor.bits.gsmModule_turnOn = 1;
			}
			*/

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureTemperature);
 80016f2:	2103      	movs	r1, #3
 80016f4:	4878      	ldr	r0, [pc, #480]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80016f6:	f000 fbfd 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80016fa:	4877      	ldr	r0, [pc, #476]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80016fc:	f000 fc27 	bl	8001f4e <fsmManager_isStateOut>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8329 	beq.w	8001d5a <dumpSensorManager_handler+0x78e>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001708:	4873      	ldr	r0, [pc, #460]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800170a:	f000 fc3a 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800170e:	e324      	b.n	8001d5a <dumpSensorManager_handler+0x78e>



		case __dumpSensor_measureTemperature:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001710:	4871      	ldr	r0, [pc, #452]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001712:	f000 fc11 	bl	8001f38 <fsmManager_isStateIn>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <dumpSensorManager_handler+0x15a>
				fsmManager_stateIn(&dumpSensorFsmState);
 800171c:	486e      	ldr	r0, [pc, #440]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800171e:	f000 fc21 	bl	8001f64 <fsmManager_stateIn>

				tempSensor_measure();
 8001722:	f003 ffc7 	bl	80056b4 <tempSensor_measure>
			}

			if(flags_dumpSensor.bits.tempSensor_measureDone == 1) {
 8001726:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <dumpSensorManager_handler+0x308>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <dumpSensorManager_handler+0x176>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureLevel);
 8001734:	2104      	movs	r1, #4
 8001736:	4868      	ldr	r0, [pc, #416]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001738:	f000 fbdc 	bl	8001ef4 <fsmManager_gotoState>
				flags_dumpSensor.bits.gsmModule_turnOn = 1;
 800173c:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <dumpSensorManager_handler+0x308>)
 800173e:	2201      	movs	r2, #1
 8001740:	705a      	strb	r2, [r3, #1]
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001742:	4865      	ldr	r0, [pc, #404]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001744:	f000 fc03 	bl	8001f4e <fsmManager_isStateOut>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8307 	beq.w	8001d5e <dumpSensorManager_handler+0x792>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001750:	4861      	ldr	r0, [pc, #388]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001752:	f000 fc16 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8001756:	e302      	b.n	8001d5e <dumpSensorManager_handler+0x792>



		case __dumpSensor_measureLevel:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001758:	485f      	ldr	r0, [pc, #380]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800175a:	f000 fbed 	bl	8001f38 <fsmManager_isStateIn>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d009      	beq.n	8001778 <dumpSensorManager_handler+0x1ac>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001764:	485c      	ldr	r0, [pc, #368]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001766:	f000 fbfd 	bl	8001f64 <fsmManager_stateIn>

				usSensor_powerOn();
 800176a:	f004 fa27 	bl	8005bbc <usSensor_powerOn>
				usSensor_measure(temperature);
 800176e:	4b60      	ldr	r3, [pc, #384]	; (80018f0 <dumpSensorManager_handler+0x324>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f004 fa30 	bl	8005bd8 <usSensor_measure>
			}

			if(flags_dumpSensor.bits.usSensor_measureDone == 1) {
 8001778:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <dumpSensorManager_handler+0x308>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <dumpSensorManager_handler+0x1d2>
				//Calculates the percentage of the level of the dumpster
				distancePercent = calculateDistancePercentage(distance);
 8001786:	4b5b      	ldr	r3, [pc, #364]	; (80018f4 <dumpSensorManager_handler+0x328>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fb06 	bl	8001d9c <calculateDistancePercentage>
 8001790:	4603      	mov	r3, r0
 8001792:	4a59      	ldr	r2, [pc, #356]	; (80018f8 <dumpSensorManager_handler+0x32c>)
 8001794:	6013      	str	r3, [r2, #0]
#if defined PROJECT_NOLOGIC
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_heatGasSensor);
 8001796:	2105      	movs	r1, #5
 8001798:	484f      	ldr	r0, [pc, #316]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800179a:	f000 fbab 	bl	8001ef4 <fsmManager_gotoState>
				else {
					fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
				}
#endif
			}
			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 800179e:	484e      	ldr	r0, [pc, #312]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80017a0:	f000 fbd5 	bl	8001f4e <fsmManager_isStateOut>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 82db 	beq.w	8001d62 <dumpSensorManager_handler+0x796>
				fsmManager_stateOut(&dumpSensorFsmState);
 80017ac:	484a      	ldr	r0, [pc, #296]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80017ae:	f000 fbe8 	bl	8001f82 <fsmManager_stateOut>

				usSensor_powerOff();
 80017b2:	f004 fa0a 	bl	8005bca <usSensor_powerOff>
			}
			break;
 80017b6:	e2d4      	b.n	8001d62 <dumpSensorManager_handler+0x796>

		case __dumpSensor_heatGasSensor:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80017b8:	4847      	ldr	r0, [pc, #284]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80017ba:	f000 fbbd 	bl	8001f38 <fsmManager_isStateIn>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00b      	beq.n	80017dc <dumpSensorManager_handler+0x210>
				fsmManager_stateIn(&dumpSensorFsmState);
 80017c4:	4844      	ldr	r0, [pc, #272]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80017c6:	f000 fbcd 	bl	8001f64 <fsmManager_stateIn>

				ch4Sensor_powerOn();
 80017ca:	f7ff fd89 	bl	80012e0 <ch4Sensor_powerOn>
				nh3Sensor_powerOn();
 80017ce:	f003 fb4d 	bl	8004e6c <nh3Sensor_powerOn>

				softTimer_start(&timer, 6*1000);
 80017d2:	f241 7170 	movw	r1, #6000	; 0x1770
 80017d6:	4849      	ldr	r0, [pc, #292]	; (80018fc <dumpSensorManager_handler+0x330>)
 80017d8:	f003 fc74 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 80017dc:	4847      	ldr	r0, [pc, #284]	; (80018fc <dumpSensorManager_handler+0x330>)
 80017de:	f003 fc85 	bl	80050ec <softTimer_expired>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <dumpSensorManager_handler+0x224>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureNh3);
 80017e8:	2106      	movs	r1, #6
 80017ea:	483b      	ldr	r0, [pc, #236]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80017ec:	f000 fb82 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80017f0:	4839      	ldr	r0, [pc, #228]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80017f2:	f000 fbac 	bl	8001f4e <fsmManager_isStateOut>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 82b4 	beq.w	8001d66 <dumpSensorManager_handler+0x79a>
				fsmManager_stateOut(&dumpSensorFsmState);
 80017fe:	4836      	ldr	r0, [pc, #216]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001800:	f000 fbbf 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8001804:	e2af      	b.n	8001d66 <dumpSensorManager_handler+0x79a>

		case __dumpSensor_measureNh3:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001806:	4834      	ldr	r0, [pc, #208]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001808:	f000 fb96 	bl	8001f38 <fsmManager_isStateIn>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <dumpSensorManager_handler+0x25a>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001812:	4831      	ldr	r0, [pc, #196]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001814:	f000 fba6 	bl	8001f64 <fsmManager_stateIn>

				nh3Sensor_measure();
 8001818:	f003 fb0c 	bl	8004e34 <nh3Sensor_measure>

				softTimer_start(&timer, 500);
 800181c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001820:	4836      	ldr	r0, [pc, #216]	; (80018fc <dumpSensorManager_handler+0x330>)
 8001822:	f003 fc4f 	bl	80050c4 <softTimer_start>
			}

			if(flags_dumpSensor.bits.nh3Sensor_measureDone == 1) {
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <dumpSensorManager_handler+0x308>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <dumpSensorManager_handler+0x272>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureCh4);
 8001834:	2107      	movs	r1, #7
 8001836:	4828      	ldr	r0, [pc, #160]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001838:	f000 fb5c 	bl	8001ef4 <fsmManager_gotoState>
 800183c:	e009      	b.n	8001852 <dumpSensorManager_handler+0x286>
			}
			else if(softTimer_expired(&timer)) {
 800183e:	482f      	ldr	r0, [pc, #188]	; (80018fc <dumpSensorManager_handler+0x330>)
 8001840:	f003 fc54 	bl	80050ec <softTimer_expired>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <dumpSensorManager_handler+0x286>
				//If there is not a measurement within 500 mseg, stop trying to measure
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureCh4);
 800184a:	2107      	movs	r1, #7
 800184c:	4822      	ldr	r0, [pc, #136]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800184e:	f000 fb51 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001852:	4821      	ldr	r0, [pc, #132]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001854:	f000 fb7b 	bl	8001f4e <fsmManager_isStateOut>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8285 	beq.w	8001d6a <dumpSensorManager_handler+0x79e>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001860:	481d      	ldr	r0, [pc, #116]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 8001862:	f000 fb8e 	bl	8001f82 <fsmManager_stateOut>

				nh3Sensor_powerOff();
 8001866:	f003 fb08 	bl	8004e7a <nh3Sensor_powerOff>
			}
			break;
 800186a:	e27e      	b.n	8001d6a <dumpSensorManager_handler+0x79e>



		case __dumpSensor_measureCh4:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 800186c:	481a      	ldr	r0, [pc, #104]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800186e:	f000 fb63 	bl	8001f38 <fsmManager_isStateIn>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <dumpSensorManager_handler+0x2c0>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001878:	4817      	ldr	r0, [pc, #92]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800187a:	f000 fb73 	bl	8001f64 <fsmManager_stateIn>

				ch4Sensor_measure();
 800187e:	f7ff fd13 	bl	80012a8 <ch4Sensor_measure>

				softTimer_start(&timer, 500);
 8001882:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001886:	481d      	ldr	r0, [pc, #116]	; (80018fc <dumpSensorManager_handler+0x330>)
 8001888:	f003 fc1c 	bl	80050c4 <softTimer_start>
			}

			if(flags_dumpSensor.bits.ch4Sensor_measureDone == 1) {
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <dumpSensorManager_handler+0x308>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <dumpSensorManager_handler+0x2d8>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_getGps);
 800189a:	2108      	movs	r1, #8
 800189c:	480e      	ldr	r0, [pc, #56]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 800189e:	f000 fb29 	bl	8001ef4 <fsmManager_gotoState>
 80018a2:	e009      	b.n	80018b8 <dumpSensorManager_handler+0x2ec>
			}
			else if(softTimer_expired(&timer)) {
 80018a4:	4815      	ldr	r0, [pc, #84]	; (80018fc <dumpSensorManager_handler+0x330>)
 80018a6:	f003 fc21 	bl	80050ec <softTimer_expired>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <dumpSensorManager_handler+0x2ec>
				//If there is not a measurement within 500 mseg, stop trying to measure
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_getGps);
 80018b0:	2108      	movs	r1, #8
 80018b2:	4809      	ldr	r0, [pc, #36]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80018b4:	f000 fb1e 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80018ba:	f000 fb48 	bl	8001f4e <fsmManager_isStateOut>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 8254 	beq.w	8001d6e <dumpSensorManager_handler+0x7a2>
				fsmManager_stateOut(&dumpSensorFsmState);
 80018c6:	4804      	ldr	r0, [pc, #16]	; (80018d8 <dumpSensorManager_handler+0x30c>)
 80018c8:	f000 fb5b 	bl	8001f82 <fsmManager_stateOut>

				ch4Sensor_powerOff();
 80018cc:	f7ff fd0f 	bl	80012ee <ch4Sensor_powerOff>
			}
			break;
 80018d0:	e24d      	b.n	8001d6e <dumpSensorManager_handler+0x7a2>
 80018d2:	bf00      	nop
 80018d4:	2000073c 	.word	0x2000073c
 80018d8:	20000730 	.word	0x20000730
 80018dc:	2000071c 	.word	0x2000071c
 80018e0:	20000128 	.word	0x20000128
 80018e4:	2000013c 	.word	0x2000013c
 80018e8:	42c80000 	.word	0x42c80000
 80018ec:	20000164 	.word	0x20000164
 80018f0:	20000138 	.word	0x20000138
 80018f4:	2000012c 	.word	0x2000012c
 80018f8:	20000160 	.word	0x20000160
 80018fc:	20000234 	.word	0x20000234



		case __dumpSensor_getGps:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001900:	48b8      	ldr	r0, [pc, #736]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001902:	f000 fb19 	bl	8001f38 <fsmManager_isStateIn>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <dumpSensorManager_handler+0x352>
				fsmManager_stateIn(&dumpSensorFsmState);
 800190c:	48b5      	ldr	r0, [pc, #724]	; (8001be4 <dumpSensorManager_handler+0x618>)
 800190e:	f000 fb29 	bl	8001f64 <fsmManager_stateIn>

				gsmModule_gpsOn();
 8001912:	f000 fbdb 	bl	80020cc <gsmModule_gpsOn>
				softTimer_start(&timer, 20*60*1000);
 8001916:	49b4      	ldr	r1, [pc, #720]	; (8001be8 <dumpSensorManager_handler+0x61c>)
 8001918:	48b4      	ldr	r0, [pc, #720]	; (8001bec <dumpSensorManager_handler+0x620>)
 800191a:	f003 fbd3 	bl	80050c4 <softTimer_start>
			}

			if(gsmModule_isGpsFixed()) {
 800191e:	f000 fc59 	bl	80021d4 <gsmModule_isGpsFixed>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <dumpSensorManager_handler+0x366>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGps);
 8001928:	2109      	movs	r1, #9
 800192a:	48ae      	ldr	r0, [pc, #696]	; (8001be4 <dumpSensorManager_handler+0x618>)
 800192c:	f000 fae2 	bl	8001ef4 <fsmManager_gotoState>
 8001930:	e020      	b.n	8001974 <dumpSensorManager_handler+0x3a8>
			}
			else if(softTimer_expired(&timer)) {
 8001932:	48ae      	ldr	r0, [pc, #696]	; (8001bec <dumpSensorManager_handler+0x620>)
 8001934:	f003 fbda 	bl	80050ec <softTimer_expired>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <dumpSensorManager_handler+0x37c>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGps);
 800193e:	2109      	movs	r1, #9
 8001940:	48a8      	ldr	r0, [pc, #672]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001942:	f000 fad7 	bl	8001ef4 <fsmManager_gotoState>
 8001946:	e015      	b.n	8001974 <dumpSensorManager_handler+0x3a8>
			}
			else if(gsmModule_isPowered() && gsmModule_isGpsOn() && !gsmModule_isGpsFixed() && !gsmModule_requestedGpsInfo()) {
 8001948:	f000 fc28 	bl	800219c <gsmModule_isPowered>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d010      	beq.n	8001974 <dumpSensorManager_handler+0x3a8>
 8001952:	f000 fc31 	bl	80021b8 <gsmModule_isGpsOn>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00b      	beq.n	8001974 <dumpSensorManager_handler+0x3a8>
 800195c:	f000 fc3a 	bl	80021d4 <gsmModule_isGpsFixed>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <dumpSensorManager_handler+0x3a8>
 8001966:	f000 fc5f 	bl	8002228 <gsmModule_requestedGpsInfo>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <dumpSensorManager_handler+0x3a8>
				gsmModule_gpsInfo();
 8001970:	f000 fbba 	bl	80020e8 <gsmModule_gpsInfo>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001974:	489b      	ldr	r0, [pc, #620]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001976:	f000 faea 	bl	8001f4e <fsmManager_isStateOut>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 81f8 	beq.w	8001d72 <dumpSensorManager_handler+0x7a6>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001982:	4898      	ldr	r0, [pc, #608]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001984:	f000 fafd 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8001988:	e1f3      	b.n	8001d72 <dumpSensorManager_handler+0x7a6>



		case __dumpSensor_turnOffGps:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 800198a:	4896      	ldr	r0, [pc, #600]	; (8001be4 <dumpSensorManager_handler+0x618>)
 800198c:	f000 fad4 	bl	8001f38 <fsmManager_isStateIn>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <dumpSensorManager_handler+0x3de>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001996:	4893      	ldr	r0, [pc, #588]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001998:	f000 fae4 	bl	8001f64 <fsmManager_stateIn>

				gsmModule_gpsOff();
 800199c:	f000 fbb2 	bl	8002104 <gsmModule_gpsOff>
				softTimer_start(&timer, 60*1000);
 80019a0:	f64e 2160 	movw	r1, #60000	; 0xea60
 80019a4:	4891      	ldr	r0, [pc, #580]	; (8001bec <dumpSensorManager_handler+0x620>)
 80019a6:	f003 fb8d 	bl	80050c4 <softTimer_start>
			}

			if(!gsmModule_isGpsOn()) {
 80019aa:	f000 fc05 	bl	80021b8 <gsmModule_isGpsOn>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d104      	bne.n	80019be <dumpSensorManager_handler+0x3f2>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sendPackage);
 80019b4:	210a      	movs	r1, #10
 80019b6:	488b      	ldr	r0, [pc, #556]	; (8001be4 <dumpSensorManager_handler+0x618>)
 80019b8:	f000 fa9c 	bl	8001ef4 <fsmManager_gotoState>
 80019bc:	e009      	b.n	80019d2 <dumpSensorManager_handler+0x406>
			}
			else if(softTimer_expired(&timer)) {
 80019be:	488b      	ldr	r0, [pc, #556]	; (8001bec <dumpSensorManager_handler+0x620>)
 80019c0:	f003 fb94 	bl	80050ec <softTimer_expired>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <dumpSensorManager_handler+0x406>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sendPackage);
 80019ca:	210a      	movs	r1, #10
 80019cc:	4885      	ldr	r0, [pc, #532]	; (8001be4 <dumpSensorManager_handler+0x618>)
 80019ce:	f000 fa91 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80019d2:	4884      	ldr	r0, [pc, #528]	; (8001be4 <dumpSensorManager_handler+0x618>)
 80019d4:	f000 fabb 	bl	8001f4e <fsmManager_isStateOut>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 81cb 	beq.w	8001d76 <dumpSensorManager_handler+0x7aa>
				fsmManager_stateOut(&dumpSensorFsmState);
 80019e0:	4880      	ldr	r0, [pc, #512]	; (8001be4 <dumpSensorManager_handler+0x618>)
 80019e2:	f000 face 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80019e6:	e1c6      	b.n	8001d76 <dumpSensorManager_handler+0x7aa>



		case __dumpSensor_sendPackage:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80019e8:	487e      	ldr	r0, [pc, #504]	; (8001be4 <dumpSensorManager_handler+0x618>)
 80019ea:	f000 faa5 	bl	8001f38 <fsmManager_isStateIn>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a1 	beq.w	8001b38 <dumpSensorManager_handler+0x56c>
				fsmManager_stateIn(&dumpSensorFsmState);
 80019f6:	487b      	ldr	r0, [pc, #492]	; (8001be4 <dumpSensorManager_handler+0x618>)
 80019f8:	f000 fab4 	bl	8001f64 <fsmManager_stateIn>

				gsmModule_serverConnect();
 80019fc:	f000 fb90 	bl	8002120 <gsmModule_serverConnect>

				payloadDataToSend[0] = '\0';
 8001a00:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
				string_appendString(payloadDataToSend, (uint8_t *) "id=");
 8001a06:	497b      	ldr	r1, [pc, #492]	; (8001bf4 <dumpSensorManager_handler+0x628>)
 8001a08:	4879      	ldr	r0, [pc, #484]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001a0a:	f004 fafc 	bl	8006006 <string_appendString>
				number_convertUint32_toArrayOfUint8(auxToSend, productId);
 8001a0e:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <dumpSensorManager_handler+0x62c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4879      	ldr	r0, [pc, #484]	; (8001bfc <dumpSensorManager_handler+0x630>)
 8001a16:	f004 fbd3 	bl	80061c0 <number_convertUint32_toArrayOfUint8>
				string_appendString(payloadDataToSend, auxToSend);
 8001a1a:	4978      	ldr	r1, [pc, #480]	; (8001bfc <dumpSensorManager_handler+0x630>)
 8001a1c:	4874      	ldr	r0, [pc, #464]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001a1e:	f004 faf2 	bl	8006006 <string_appendString>
				string_appendChar(payloadDataToSend, '&');
 8001a22:	2126      	movs	r1, #38	; 0x26
 8001a24:	4872      	ldr	r0, [pc, #456]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001a26:	f004 facb 	bl	8005fc0 <string_appendChar>

				string_appendString(payloadDataToSend, (uint8_t *) "bat=");
 8001a2a:	4975      	ldr	r1, [pc, #468]	; (8001c00 <dumpSensorManager_handler+0x634>)
 8001a2c:	4870      	ldr	r0, [pc, #448]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001a2e:	f004 faea 	bl	8006006 <string_appendString>
				ascii_convertNum(auxToSend, (uint32_t) batteryPercent);
 8001a32:	4b74      	ldr	r3, [pc, #464]	; (8001c04 <dumpSensorManager_handler+0x638>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fb1a 	bl	8001070 <__aeabi_f2uiz>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	486e      	ldr	r0, [pc, #440]	; (8001bfc <dumpSensorManager_handler+0x630>)
 8001a42:	f004 fb63 	bl	800610c <ascii_convertNum>
				string_appendString(payloadDataToSend, auxToSend);
 8001a46:	496d      	ldr	r1, [pc, #436]	; (8001bfc <dumpSensorManager_handler+0x630>)
 8001a48:	4869      	ldr	r0, [pc, #420]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001a4a:	f004 fadc 	bl	8006006 <string_appendString>
				string_appendChar(payloadDataToSend, '&');
 8001a4e:	2126      	movs	r1, #38	; 0x26
 8001a50:	4867      	ldr	r0, [pc, #412]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001a52:	f004 fab5 	bl	8005fc0 <string_appendChar>

				string_appendString(payloadDataToSend, (uint8_t *) "level=");
 8001a56:	496c      	ldr	r1, [pc, #432]	; (8001c08 <dumpSensorManager_handler+0x63c>)
 8001a58:	4865      	ldr	r0, [pc, #404]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001a5a:	f004 fad4 	bl	8006006 <string_appendString>
				ascii_convertNum(auxToSend, (uint32_t) distancePercent);
 8001a5e:	4b6b      	ldr	r3, [pc, #428]	; (8001c0c <dumpSensorManager_handler+0x640>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fb04 	bl	8001070 <__aeabi_f2uiz>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4863      	ldr	r0, [pc, #396]	; (8001bfc <dumpSensorManager_handler+0x630>)
 8001a6e:	f004 fb4d 	bl	800610c <ascii_convertNum>
				string_appendString(payloadDataToSend, auxToSend);
 8001a72:	4962      	ldr	r1, [pc, #392]	; (8001bfc <dumpSensorManager_handler+0x630>)
 8001a74:	485e      	ldr	r0, [pc, #376]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001a76:	f004 fac6 	bl	8006006 <string_appendString>

				if(flags_dumpSensor.bits.nh3Sensor_measureDone) {
 8001a7a:	4b65      	ldr	r3, [pc, #404]	; (8001c10 <dumpSensorManager_handler+0x644>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d015      	beq.n	8001ab4 <dumpSensorManager_handler+0x4e8>
					string_appendChar(payloadDataToSend, '&');
 8001a88:	2126      	movs	r1, #38	; 0x26
 8001a8a:	4859      	ldr	r0, [pc, #356]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001a8c:	f004 fa98 	bl	8005fc0 <string_appendChar>
					string_appendString(payloadDataToSend, (uint8_t *) "nh3=");
 8001a90:	4960      	ldr	r1, [pc, #384]	; (8001c14 <dumpSensorManager_handler+0x648>)
 8001a92:	4857      	ldr	r0, [pc, #348]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001a94:	f004 fab7 	bl	8006006 <string_appendString>
					ascii_convertNum(auxToSend, (uint32_t) nh3Concentration);
 8001a98:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <dumpSensorManager_handler+0x64c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fae7 	bl	8001070 <__aeabi_f2uiz>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4855      	ldr	r0, [pc, #340]	; (8001bfc <dumpSensorManager_handler+0x630>)
 8001aa8:	f004 fb30 	bl	800610c <ascii_convertNum>
					string_appendString(payloadDataToSend, auxToSend);
 8001aac:	4953      	ldr	r1, [pc, #332]	; (8001bfc <dumpSensorManager_handler+0x630>)
 8001aae:	4850      	ldr	r0, [pc, #320]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001ab0:	f004 faa9 	bl	8006006 <string_appendString>
				}

				if(flags_dumpSensor.bits.ch4Sensor_measureDone) {
 8001ab4:	4b56      	ldr	r3, [pc, #344]	; (8001c10 <dumpSensorManager_handler+0x644>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d015      	beq.n	8001aee <dumpSensorManager_handler+0x522>
					string_appendChar(payloadDataToSend, '&');
 8001ac2:	2126      	movs	r1, #38	; 0x26
 8001ac4:	484a      	ldr	r0, [pc, #296]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001ac6:	f004 fa7b 	bl	8005fc0 <string_appendChar>
					string_appendString(payloadDataToSend, (uint8_t *) "ch4=");
 8001aca:	4954      	ldr	r1, [pc, #336]	; (8001c1c <dumpSensorManager_handler+0x650>)
 8001acc:	4848      	ldr	r0, [pc, #288]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001ace:	f004 fa9a 	bl	8006006 <string_appendString>
					ascii_convertNum(auxToSend, (uint32_t) ch4Concentration);
 8001ad2:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <dumpSensorManager_handler+0x654>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff faca 	bl	8001070 <__aeabi_f2uiz>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4846      	ldr	r0, [pc, #280]	; (8001bfc <dumpSensorManager_handler+0x630>)
 8001ae2:	f004 fb13 	bl	800610c <ascii_convertNum>
					string_appendString(payloadDataToSend, auxToSend);
 8001ae6:	4945      	ldr	r1, [pc, #276]	; (8001bfc <dumpSensorManager_handler+0x630>)
 8001ae8:	4841      	ldr	r0, [pc, #260]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001aea:	f004 fa8c 	bl	8006006 <string_appendString>
				}

				if(gsmModule_isGpsFixed()) {
 8001aee:	f000 fb71 	bl	80021d4 <gsmModule_isGpsFixed>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d017      	beq.n	8001b28 <dumpSensorManager_handler+0x55c>
					string_appendChar(payloadDataToSend, '&');
 8001af8:	2126      	movs	r1, #38	; 0x26
 8001afa:	483d      	ldr	r0, [pc, #244]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001afc:	f004 fa60 	bl	8005fc0 <string_appendChar>
					string_appendString(payloadDataToSend, (uint8_t *) "gpslon=");
 8001b00:	4948      	ldr	r1, [pc, #288]	; (8001c24 <dumpSensorManager_handler+0x658>)
 8001b02:	483b      	ldr	r0, [pc, #236]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001b04:	f004 fa7f 	bl	8006006 <string_appendString>
					string_appendString(payloadDataToSend, gspLon);
 8001b08:	4947      	ldr	r1, [pc, #284]	; (8001c28 <dumpSensorManager_handler+0x65c>)
 8001b0a:	4839      	ldr	r0, [pc, #228]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001b0c:	f004 fa7b 	bl	8006006 <string_appendString>

					string_appendChar(payloadDataToSend, '&');
 8001b10:	2126      	movs	r1, #38	; 0x26
 8001b12:	4837      	ldr	r0, [pc, #220]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001b14:	f004 fa54 	bl	8005fc0 <string_appendChar>
					string_appendString(payloadDataToSend, (uint8_t *) "gpslat=");
 8001b18:	4944      	ldr	r1, [pc, #272]	; (8001c2c <dumpSensorManager_handler+0x660>)
 8001b1a:	4835      	ldr	r0, [pc, #212]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001b1c:	f004 fa73 	bl	8006006 <string_appendString>
					string_appendString(payloadDataToSend, gspLat);
 8001b20:	4943      	ldr	r1, [pc, #268]	; (8001c30 <dumpSensorManager_handler+0x664>)
 8001b22:	4833      	ldr	r0, [pc, #204]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001b24:	f004 fa6f 	bl	8006006 <string_appendString>
				}
				string_appendChar(payloadDataToSend, '"');
 8001b28:	2122      	movs	r1, #34	; 0x22
 8001b2a:	4831      	ldr	r0, [pc, #196]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001b2c:	f004 fa48 	bl	8005fc0 <string_appendChar>

				softTimer_start(&timer, 10*60*1000);
 8001b30:	4940      	ldr	r1, [pc, #256]	; (8001c34 <dumpSensorManager_handler+0x668>)
 8001b32:	482e      	ldr	r0, [pc, #184]	; (8001bec <dumpSensorManager_handler+0x620>)
 8001b34:	f003 fac6 	bl	80050c4 <softTimer_start>
			}


			if(gsmModule_isServerDataSent()) {
 8001b38:	f000 fb68 	bl	800220c <gsmModule_isServerDataSent>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <dumpSensorManager_handler+0x580>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_disconnectServer);
 8001b42:	210b      	movs	r1, #11
 8001b44:	4827      	ldr	r0, [pc, #156]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001b46:	f000 f9d5 	bl	8001ef4 <fsmManager_gotoState>
 8001b4a:	e026      	b.n	8001b9a <dumpSensorManager_handler+0x5ce>
			}
			else if(softTimer_expired(&timer) || gsmModule_errorServerSendData()) {
 8001b4c:	4827      	ldr	r0, [pc, #156]	; (8001bec <dumpSensorManager_handler+0x620>)
 8001b4e:	f003 facd 	bl	80050ec <softTimer_expired>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d104      	bne.n	8001b62 <dumpSensorManager_handler+0x596>
 8001b58:	f000 fb82 	bl	8002260 <gsmModule_errorServerSendData>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <dumpSensorManager_handler+0x5a0>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_disconnectServer);
 8001b62:	210b      	movs	r1, #11
 8001b64:	481f      	ldr	r0, [pc, #124]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001b66:	f000 f9c5 	bl	8001ef4 <fsmManager_gotoState>
 8001b6a:	e016      	b.n	8001b9a <dumpSensorManager_handler+0x5ce>
			}
			else if(gsmModule_isPowered() && gsmModule_isServerConnected() && !gsmModule_isServerDataSent() && !gsmModule_requestedServerDataSend()) {
 8001b6c:	f000 fb16 	bl	800219c <gsmModule_isPowered>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d011      	beq.n	8001b9a <dumpSensorManager_handler+0x5ce>
 8001b76:	f000 fb3b 	bl	80021f0 <gsmModule_isServerConnected>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00c      	beq.n	8001b9a <dumpSensorManager_handler+0x5ce>
 8001b80:	f000 fb44 	bl	800220c <gsmModule_isServerDataSent>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d107      	bne.n	8001b9a <dumpSensorManager_handler+0x5ce>
 8001b8a:	f000 fb5b 	bl	8002244 <gsmModule_requestedServerDataSend>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <dumpSensorManager_handler+0x5ce>
				gsmModule_serverDataSend(payloadDataToSend);
 8001b94:	4816      	ldr	r0, [pc, #88]	; (8001bf0 <dumpSensorManager_handler+0x624>)
 8001b96:	f000 fad1 	bl	800213c <gsmModule_serverDataSend>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001b9a:	4812      	ldr	r0, [pc, #72]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001b9c:	f000 f9d7 	bl	8001f4e <fsmManager_isStateOut>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80e9 	beq.w	8001d7a <dumpSensorManager_handler+0x7ae>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001ba8:	480e      	ldr	r0, [pc, #56]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001baa:	f000 f9ea 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8001bae:	e0e4      	b.n	8001d7a <dumpSensorManager_handler+0x7ae>



		case __dumpSensor_disconnectServer:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001bb0:	480c      	ldr	r0, [pc, #48]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001bb2:	f000 f9c1 	bl	8001f38 <fsmManager_isStateIn>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <dumpSensorManager_handler+0x604>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001bbc:	4809      	ldr	r0, [pc, #36]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001bbe:	f000 f9d1 	bl	8001f64 <fsmManager_stateIn>

				gsmModule_serverDisconnect();
 8001bc2:	f000 fadd 	bl	8002180 <gsmModule_serverDisconnect>

				softTimer_start(&timer, 5*1000);
 8001bc6:	f241 3188 	movw	r1, #5000	; 0x1388
 8001bca:	4808      	ldr	r0, [pc, #32]	; (8001bec <dumpSensorManager_handler+0x620>)
 8001bcc:	f003 fa7a 	bl	80050c4 <softTimer_start>
			}

			if(gsmModule_isServerConnected() == 0) {
 8001bd0:	f000 fb0e 	bl	80021f0 <gsmModule_isServerConnected>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d12e      	bne.n	8001c38 <dumpSensorManager_handler+0x66c>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGsmModule);
 8001bda:	210c      	movs	r1, #12
 8001bdc:	4801      	ldr	r0, [pc, #4]	; (8001be4 <dumpSensorManager_handler+0x618>)
 8001bde:	f000 f989 	bl	8001ef4 <fsmManager_gotoState>
 8001be2:	e033      	b.n	8001c4c <dumpSensorManager_handler+0x680>
 8001be4:	20000730 	.word	0x20000730
 8001be8:	00124f80 	.word	0x00124f80
 8001bec:	20000234 	.word	0x20000234
 8001bf0:	20000168 	.word	0x20000168
 8001bf4:	0800b8c0 	.word	0x0800b8c0
 8001bf8:	20000128 	.word	0x20000128
 8001bfc:	20000200 	.word	0x20000200
 8001c00:	0800b8c4 	.word	0x0800b8c4
 8001c04:	20000164 	.word	0x20000164
 8001c08:	0800b8cc 	.word	0x0800b8cc
 8001c0c:	20000160 	.word	0x20000160
 8001c10:	2000073c 	.word	0x2000073c
 8001c14:	0800b8d4 	.word	0x0800b8d4
 8001c18:	20000130 	.word	0x20000130
 8001c1c:	0800b8dc 	.word	0x0800b8dc
 8001c20:	20000134 	.word	0x20000134
 8001c24:	0800b8e4 	.word	0x0800b8e4
 8001c28:	20000140 	.word	0x20000140
 8001c2c:	0800b8ec 	.word	0x0800b8ec
 8001c30:	20000150 	.word	0x20000150
 8001c34:	000927c0 	.word	0x000927c0
			}
			else if(softTimer_expired(&timer)) {
 8001c38:	4856      	ldr	r0, [pc, #344]	; (8001d94 <dumpSensorManager_handler+0x7c8>)
 8001c3a:	f003 fa57 	bl	80050ec <softTimer_expired>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <dumpSensorManager_handler+0x680>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGsmModule);
 8001c44:	210c      	movs	r1, #12
 8001c46:	4854      	ldr	r0, [pc, #336]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001c48:	f000 f954 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001c4c:	4852      	ldr	r0, [pc, #328]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001c4e:	f000 f97e 	bl	8001f4e <fsmManager_isStateOut>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8092 	beq.w	8001d7e <dumpSensorManager_handler+0x7b2>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001c5a:	484f      	ldr	r0, [pc, #316]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001c5c:	f000 f991 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8001c60:	e08d      	b.n	8001d7e <dumpSensorManager_handler+0x7b2>



		case __dumpSensor_turnOffGsmModule:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001c62:	484d      	ldr	r0, [pc, #308]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001c64:	f000 f968 	bl	8001f38 <fsmManager_isStateIn>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <dumpSensorManager_handler+0x6ba>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001c6e:	484a      	ldr	r0, [pc, #296]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001c70:	f000 f978 	bl	8001f64 <fsmManager_stateIn>

				gsmModule_powerOff();
 8001c74:	f000 fa07 	bl	8002086 <gsmModule_powerOff>
				gsmModule_pwrkeyOff();
 8001c78:	f000 fa1a 	bl	80020b0 <gsmModule_pwrkeyOff>

				softTimer_start(&timer, 10*1000);
 8001c7c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001c80:	4844      	ldr	r0, [pc, #272]	; (8001d94 <dumpSensorManager_handler+0x7c8>)
 8001c82:	f003 fa1f 	bl	80050c4 <softTimer_start>
			}

			if(gsmModule_isPowered() == 0) {
 8001c86:	f000 fa89 	bl	800219c <gsmModule_isPowered>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d104      	bne.n	8001c9a <dumpSensorManager_handler+0x6ce>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
 8001c90:	210d      	movs	r1, #13
 8001c92:	4841      	ldr	r0, [pc, #260]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001c94:	f000 f92e 	bl	8001ef4 <fsmManager_gotoState>
 8001c98:	e009      	b.n	8001cae <dumpSensorManager_handler+0x6e2>
			}
			else if(softTimer_expired(&timer)) {
 8001c9a:	483e      	ldr	r0, [pc, #248]	; (8001d94 <dumpSensorManager_handler+0x7c8>)
 8001c9c:	f003 fa26 	bl	80050ec <softTimer_expired>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <dumpSensorManager_handler+0x6e2>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
 8001ca6:	210d      	movs	r1, #13
 8001ca8:	483b      	ldr	r0, [pc, #236]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001caa:	f000 f923 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001cae:	483a      	ldr	r0, [pc, #232]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001cb0:	f000 f94d 	bl	8001f4e <fsmManager_isStateOut>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d063      	beq.n	8001d82 <dumpSensorManager_handler+0x7b6>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001cba:	4837      	ldr	r0, [pc, #220]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001cbc:	f000 f961 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8001cc0:	e05f      	b.n	8001d82 <dumpSensorManager_handler+0x7b6>



		case __dumpSensor_sleep:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001cc2:	4835      	ldr	r0, [pc, #212]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001cc4:	f000 f938 	bl	8001f38 <fsmManager_isStateIn>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <dumpSensorManager_handler+0x708>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001cce:	4832      	ldr	r0, [pc, #200]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001cd0:	f000 f948 	bl	8001f64 <fsmManager_stateIn>
			}

			//Enters standby mode
			powerMode_enterStandbyMode(1*10);
 8001cd4:	200a      	movs	r0, #10
 8001cd6:	f003 f9a9 	bl	800502c <powerMode_enterStandbyMode>

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	482e      	ldr	r0, [pc, #184]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001cde:	f000 f909 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001ce2:	482d      	ldr	r0, [pc, #180]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001ce4:	f000 f933 	bl	8001f4e <fsmManager_isStateOut>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d04b      	beq.n	8001d86 <dumpSensorManager_handler+0x7ba>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001cee:	482a      	ldr	r0, [pc, #168]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001cf0:	f000 f947 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8001cf4:	e047      	b.n	8001d86 <dumpSensorManager_handler+0x7ba>



		case __dumpSensor_error:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001cf6:	4828      	ldr	r0, [pc, #160]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001cf8:	f000 f91e 	bl	8001f38 <fsmManager_isStateIn>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <dumpSensorManager_handler+0x73c>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001d02:	4825      	ldr	r0, [pc, #148]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001d04:	f000 f92e 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4823      	ldr	r0, [pc, #140]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001d0c:	f000 f8f2 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001d10:	4821      	ldr	r0, [pc, #132]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001d12:	f000 f91c 	bl	8001f4e <fsmManager_isStateOut>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d036      	beq.n	8001d8a <dumpSensorManager_handler+0x7be>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001d1c:	481e      	ldr	r0, [pc, #120]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001d1e:	f000 f930 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8001d22:	e032      	b.n	8001d8a <dumpSensorManager_handler+0x7be>



		default:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001d24:	481c      	ldr	r0, [pc, #112]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001d26:	f000 f907 	bl	8001f38 <fsmManager_isStateIn>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <dumpSensorManager_handler+0x76a>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001d30:	4819      	ldr	r0, [pc, #100]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001d32:	f000 f917 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 8001d36:	2100      	movs	r1, #0
 8001d38:	4817      	ldr	r0, [pc, #92]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001d3a:	f000 f8db 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001d3e:	4816      	ldr	r0, [pc, #88]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001d40:	f000 f905 	bl	8001f4e <fsmManager_isStateOut>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d021      	beq.n	8001d8e <dumpSensorManager_handler+0x7c2>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001d4a:	4813      	ldr	r0, [pc, #76]	; (8001d98 <dumpSensorManager_handler+0x7cc>)
 8001d4c:	f000 f919 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8001d50:	e01d      	b.n	8001d8e <dumpSensorManager_handler+0x7c2>
			break;
 8001d52:	bf00      	nop
 8001d54:	e01c      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d56:	bf00      	nop
 8001d58:	e01a      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d5a:	bf00      	nop
 8001d5c:	e018      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d5e:	bf00      	nop
 8001d60:	e016      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d62:	bf00      	nop
 8001d64:	e014      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d66:	bf00      	nop
 8001d68:	e012      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d6a:	bf00      	nop
 8001d6c:	e010      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d6e:	bf00      	nop
 8001d70:	e00e      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d72:	bf00      	nop
 8001d74:	e00c      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d76:	bf00      	nop
 8001d78:	e00a      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d7a:	bf00      	nop
 8001d7c:	e008      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d7e:	bf00      	nop
 8001d80:	e006      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d82:	bf00      	nop
 8001d84:	e004      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d86:	bf00      	nop
 8001d88:	e002      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d8a:	bf00      	nop
 8001d8c:	e000      	b.n	8001d90 <dumpSensorManager_handler+0x7c4>
			break;
 8001d8e:	bf00      	nop
	}
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000234 	.word	0x20000234
 8001d98:	20000730 	.word	0x20000730

08001d9c <calculateDistancePercentage>:

static float calculateDistancePercentage(float dist)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	float distPerc = 0;
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]

	distPerc = (DUMPSTER_DISTANCE_MAX-distance)*100/DUMPSTER_DISTANCE_MAX;
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <calculateDistancePercentage+0x68>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	4815      	ldr	r0, [pc, #84]	; (8001e08 <calculateDistancePercentage+0x6c>)
 8001db2:	f7fe fe8d 	bl	8000ad0 <__aeabi_fsub>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4914      	ldr	r1, [pc, #80]	; (8001e0c <calculateDistancePercentage+0x70>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ff92 	bl	8000ce4 <__aeabi_fmul>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4911      	ldr	r1, [pc, #68]	; (8001e08 <calculateDistancePercentage+0x6c>)
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f841 	bl	8000e4c <__aeabi_fdiv>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	60fb      	str	r3, [r7, #12]
	if(distPerc > 100) {
 8001dce:	490f      	ldr	r1, [pc, #60]	; (8001e0c <calculateDistancePercentage+0x70>)
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f7ff f943 	bl	800105c <__aeabi_fcmpgt>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <calculateDistancePercentage+0x46>
		distPerc = 100;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <calculateDistancePercentage+0x70>)
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e00a      	b.n	8001df8 <calculateDistancePercentage+0x5c>
	}
	else if(distPerc < 0) {
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f7ff f91a 	bl	8001020 <__aeabi_fcmplt>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <calculateDistancePercentage+0x5c>
		distPerc = 0;
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
	}

	return distPerc;
 8001df8:	68fb      	ldr	r3, [r7, #12]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000012c 	.word	0x2000012c
 8001e08:	44e10000 	.word	0x44e10000
 8001e0c:	42c80000 	.word	0x42c80000

08001e10 <readNvm>:

static void readNvm(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001e16:	2300      	movs	r3, #0
 8001e18:	71fb      	strb	r3, [r7, #7]
 8001e1a:	e00d      	b.n	8001e38 <readNvm+0x28>
		reg[i].word = nvm_readWord(NVM_REGISTER1+i);
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 f89d 	bl	8004f60 <nvm_readWord>
 8001e26:	4602      	mov	r2, r0
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	b291      	uxth	r1, r2
 8001e2c:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <readNvm+0x38>)
 8001e2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	3301      	adds	r3, #1
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	2b09      	cmp	r3, #9
 8001e3c:	d9ee      	bls.n	8001e1c <readNvm+0xc>
	}
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000071c 	.word	0x2000071c

08001e4c <writeNvm>:

//https://docs.google.com/spreadsheets/d/1n-ANLwi3L4sAhEEs7HliKyX1nLDQ-HLQLX-bY1MBAcw/edit#gid=0
static void writeNvm(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
	//If it is needed to write to nvm, toggle the value of reg[NVM_FLAGS0].bits.bit0
	if(reg[NVM_FLAGS0].bits.bit0 != 0) {
 8001e52:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <writeNvm+0x78>)
 8001e54:	7a1b      	ldrb	r3, [r3, #8]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d02c      	beq.n	8001eba <writeNvm+0x6e>
		reg[NVM_FLAGS0].bits.bit0 = 0;
 8001e60:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <writeNvm+0x78>)
 8001e62:	7a13      	ldrb	r3, [r2, #8]
 8001e64:	f36f 0300 	bfc	r3, #0, #1
 8001e68:	7213      	strb	r3, [r2, #8]

		reg[NVM_ID_HIGH].word = 0xAE23;
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <writeNvm+0x78>)
 8001e6c:	f64a 6223 	movw	r2, #44579	; 0xae23
 8001e70:	809a      	strh	r2, [r3, #4]
		reg[NVM_ID_LOW].word = 0xFA5B;
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <writeNvm+0x78>)
 8001e74:	f64f 225b 	movw	r2, #64091	; 0xfa5b
 8001e78:	805a      	strh	r2, [r3, #2]

		reg[NVM_COUNTER_DAY].word = 0;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <writeNvm+0x78>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	80da      	strh	r2, [r3, #6]

		reg[NVM_FLAGS0].bits.bit1 = 0;
 8001e80:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <writeNvm+0x78>)
 8001e82:	7a13      	ldrb	r3, [r2, #8]
 8001e84:	f36f 0341 	bfc	r3, #1, #1
 8001e88:	7213      	strb	r3, [r2, #8]
		reg[NVM_FLAGS0].bits.bit2 = 0;
 8001e8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <writeNvm+0x78>)
 8001e8c:	7a13      	ldrb	r3, [r2, #8]
 8001e8e:	f36f 0382 	bfc	r3, #2, #1
 8001e92:	7213      	strb	r3, [r2, #8]

		for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001e94:	2300      	movs	r3, #0
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	e00c      	b.n	8001eb4 <writeNvm+0x68>
			nvm_writeWord(NVM_REGISTER1+i, reg[i].word);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <writeNvm+0x78>)
 8001ea2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f003 f865 	bl	8004f78 <nvm_writeWord>
		for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	71fb      	strb	r3, [r7, #7]
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	2b09      	cmp	r3, #9
 8001eb8:	d9ef      	bls.n	8001e9a <writeNvm+0x4e>
		}
	}
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000071c 	.word	0x2000071c

08001ec8 <fsmManager_init>:
#include "fsmManager.h"

void fsmManager_init(fsm_t *fsm, uint32_t fsmStateInit)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
    fsm->fsmStatePrev = fsmStateInit;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
	fsm->fsmState = fsmStateInit;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	601a      	str	r2, [r3, #0]
	
	fsm->stateIn = 1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	721a      	strb	r2, [r3, #8]
	fsm->stateOut = 0;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	725a      	strb	r2, [r3, #9]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <fsmManager_gotoState>:

void fsmManager_gotoState(fsm_t *fsm, uint32_t fsmStateNext)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
    fsm->fsmStatePrev = fsm->fsmState;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	605a      	str	r2, [r3, #4]
	fsm->fsmState = fsmStateNext;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	601a      	str	r2, [r3, #0]
	
	fsm->stateIn = 0;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	721a      	strb	r2, [r3, #8]
	fsm->stateOut = 1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	725a      	strb	r2, [r3, #9]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <fsmManager_getState>:
	fsm->stateIn = 0;
	fsm->stateOut = 1;
}

uint32_t fsmManager_getState(fsm_t *fsm)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
    return fsm->fsmState;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <fsmManager_isStateIn>:
{
    return fsm->fsmState == fsmState;
}

uint8_t fsmManager_isStateIn(fsm_t *fsm)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    return fsm->stateIn;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7a1b      	ldrb	r3, [r3, #8]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <fsmManager_isStateOut>:

uint8_t fsmManager_isStateOut(fsm_t *fsm)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
    return fsm->stateOut;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7a5b      	ldrb	r3, [r3, #9]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <fsmManager_stateIn>:

void fsmManager_stateIn(fsm_t *fsm)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    fsm->stateIn = 0;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	721a      	strb	r2, [r3, #8]
    fsm->stateOut = 0;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	725a      	strb	r2, [r3, #9]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <fsmManager_stateOut>:

void fsmManager_stateOut(fsm_t *fsm)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
    fsm->stateIn = 1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	721a      	strb	r2, [r3, #8]
    fsm->stateOut = 0;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	725a      	strb	r2, [r3, #9]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <gsmModule_init>:
static void (*gsmModuleCallback)(_gsmModule_event evt, void* payload);



void gsmModule_init(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	//FSM
	fsmManager_init(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8001fa8:	2100      	movs	r1, #0
 8001faa:	481e      	ldr	r0, [pc, #120]	; (8002024 <gsmModule_init+0x84>)
 8001fac:	f7ff ff8c 	bl	8001ec8 <fsmManager_init>
	fsmManager_init(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	481d      	ldr	r0, [pc, #116]	; (8002028 <gsmModule_init+0x88>)
 8001fb4:	f7ff ff88 	bl	8001ec8 <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	481c      	ldr	r0, [pc, #112]	; (800202c <gsmModule_init+0x8c>)
 8001fbc:	f7ff ff84 	bl	8001ec8 <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	481b      	ldr	r0, [pc, #108]	; (8002030 <gsmModule_init+0x90>)
 8001fc4:	f7ff ff80 	bl	8001ec8 <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_idle);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	481a      	ldr	r0, [pc, #104]	; (8002034 <gsmModule_init+0x94>)
 8001fcc:	f7ff ff7c 	bl	8001ec8 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4819      	ldr	r0, [pc, #100]	; (8002038 <gsmModule_init+0x98>)
 8001fd4:	f7ff ff78 	bl	8001ec8 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4818      	ldr	r0, [pc, #96]	; (800203c <gsmModule_init+0x9c>)
 8001fdc:	f7ff ff74 	bl	8001ec8 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDataReceive_state, __gsmModule_requestServerDataReceive_idle);
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4817      	ldr	r0, [pc, #92]	; (8002040 <gsmModule_init+0xa0>)
 8001fe4:	f7ff ff70 	bl	8001ec8 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4816      	ldr	r0, [pc, #88]	; (8002044 <gsmModule_init+0xa4>)
 8001fec:	f7ff ff6c 	bl	8001ec8 <fsmManager_init>

	//UART
	gsmHuart = huart;
 8001ff0:	4a15      	ldr	r2, [pc, #84]	; (8002048 <gsmModule_init+0xa8>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
	//pinGsmUartRx_receive();

	//Flags
	flags_gsmModule.dword = 0;
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <gsmModule_init+0xac>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
	flags_gsmModuleError.dword = 0;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <gsmModule_init+0xb0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
	flags_gsmModuleUnsolicited.dword = 0;
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <gsmModule_init+0xb4>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

	//Pin
	pinGsmVdd_write(0);
 8002008:	2000      	movs	r0, #0
 800200a:	f002 fb5b 	bl	80046c4 <pinGsmVdd_write>
	pinGsmPwrkey_write(0);
 800200e:	2000      	movs	r0, #0
 8002010:	f002 fb6a 	bl	80046e8 <pinGsmPwrkey_write>

	//Variables
	gsmModule_operator = __gsmModule_operator_unknown;
 8002014:	4b10      	ldr	r3, [pc, #64]	; (8002058 <gsmModule_init+0xb8>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000600 	.word	0x20000600
 8002028:	2000060c 	.word	0x2000060c
 800202c:	20000618 	.word	0x20000618
 8002030:	20000624 	.word	0x20000624
 8002034:	20000630 	.word	0x20000630
 8002038:	2000063c 	.word	0x2000063c
 800203c:	20000648 	.word	0x20000648
 8002040:	20000654 	.word	0x20000654
 8002044:	20000660 	.word	0x20000660
 8002048:	20000240 	.word	0x20000240
 800204c:	200005dc 	.word	0x200005dc
 8002050:	200005e0 	.word	0x200005e0
 8002054:	200005e4 	.word	0x200005e4
 8002058:	20000740 	.word	0x20000740

0800205c <gsmModule_setCallback>:

void gsmModule_setCallback(void (*cb)(_gsmModule_event, void*))
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	gsmModuleCallback = cb;
 8002064:	4a03      	ldr	r2, [pc, #12]	; (8002074 <gsmModule_setCallback+0x18>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	2000066c 	.word	0x2000066c

08002078 <gsmModule_powerOn>:



void gsmModule_powerOn(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	pinGsmVdd_write(1);
 800207c:	2001      	movs	r0, #1
 800207e:	f002 fb21 	bl	80046c4 <pinGsmVdd_write>
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}

08002086 <gsmModule_powerOff>:


void gsmModule_powerOff(void)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	af00      	add	r7, sp, #0
	pinGsmVdd_write(0);
 800208a:	2000      	movs	r0, #0
 800208c:	f002 fb1a 	bl	80046c4 <pinGsmVdd_write>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <gsmModule_pwrkeyOn>:

void gsmModule_pwrkeyOn(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestPowerOn = 1;
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <gsmModule_pwrkeyOn+0x18>)
 800209a:	7813      	ldrb	r3, [r2, #0]
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	7013      	strb	r3, [r2, #0]
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200005dc 	.word	0x200005dc

080020b0 <gsmModule_pwrkeyOff>:

void gsmModule_pwrkeyOff(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestPowerOff = 1;
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <gsmModule_pwrkeyOff+0x18>)
 80020b6:	7813      	ldrb	r3, [r2, #0]
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	7013      	strb	r3, [r2, #0]
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	200005dc 	.word	0x200005dc

080020cc <gsmModule_gpsOn>:

void gsmModule_gpsOn(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestGpsOn = 1;
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <gsmModule_gpsOn+0x18>)
 80020d2:	7813      	ldrb	r3, [r2, #0]
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	7013      	strb	r3, [r2, #0]
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	200005dc 	.word	0x200005dc

080020e8 <gsmModule_gpsInfo>:

void gsmModule_gpsInfo(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestGpsInfo = 1;
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <gsmModule_gpsInfo+0x18>)
 80020ee:	7813      	ldrb	r3, [r2, #0]
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	7013      	strb	r3, [r2, #0]
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	200005dc 	.word	0x200005dc

08002104 <gsmModule_gpsOff>:

void gsmModule_gpsOff(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestGpsOff = 1;
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <gsmModule_gpsOff+0x18>)
 800210a:	7813      	ldrb	r3, [r2, #0]
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	7013      	strb	r3, [r2, #0]
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	200005dc 	.word	0x200005dc

08002120 <gsmModule_serverConnect>:

void gsmModule_serverConnect(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestServerConnection = 1;
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <gsmModule_serverConnect+0x18>)
 8002126:	7813      	ldrb	r3, [r2, #0]
 8002128:	f043 0320 	orr.w	r3, r3, #32
 800212c:	7013      	strb	r3, [r2, #0]
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	200005dc 	.word	0x200005dc

0800213c <gsmModule_serverDataSend>:

void gsmModule_serverDataSend(uint8_t *data)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	string_appendString(dataToSend, (uint8_t *) gsmModule_command_httppara_url);
 8002144:	490a      	ldr	r1, [pc, #40]	; (8002170 <gsmModule_serverDataSend+0x34>)
 8002146:	480b      	ldr	r0, [pc, #44]	; (8002174 <gsmModule_serverDataSend+0x38>)
 8002148:	f003 ff5d 	bl	8006006 <string_appendString>
	string_appendString(dataToSend, data);
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4809      	ldr	r0, [pc, #36]	; (8002174 <gsmModule_serverDataSend+0x38>)
 8002150:	f003 ff59 	bl	8006006 <string_appendString>
	string_appendString(dataToSend, (uint8_t *) "\r\n");
 8002154:	4908      	ldr	r1, [pc, #32]	; (8002178 <gsmModule_serverDataSend+0x3c>)
 8002156:	4807      	ldr	r0, [pc, #28]	; (8002174 <gsmModule_serverDataSend+0x38>)
 8002158:	f003 ff55 	bl	8006006 <string_appendString>

	flags_gsmModule.bits.requestServerDataSend = 1;
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <gsmModule_serverDataSend+0x40>)
 800215e:	7813      	ldrb	r3, [r2, #0]
 8002160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002164:	7013      	strb	r3, [r2, #0]
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	0800bae8 	.word	0x0800bae8
 8002174:	200004b0 	.word	0x200004b0
 8002178:	0800b8f4 	.word	0x0800b8f4
 800217c:	200005dc 	.word	0x200005dc

08002180 <gsmModule_serverDisconnect>:
{
	flags_gsmModule.bits.requestServerDataReceive = 1;
}

void gsmModule_serverDisconnect(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestServerDisconnection = 1;
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <gsmModule_serverDisconnect+0x18>)
 8002186:	7853      	ldrb	r3, [r2, #1]
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	7053      	strb	r3, [r2, #1]
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	200005dc 	.word	0x200005dc

0800219c <gsmModule_isPowered>:

uint8_t gsmModule_isPowered(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isPowered;
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <gsmModule_isPowered+0x18>)
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80021a8:	b2db      	uxtb	r3, r3
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	200005dc 	.word	0x200005dc

080021b8 <gsmModule_isGpsOn>:

uint8_t gsmModule_isGpsOn(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isGpsOn;
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <gsmModule_isGpsOn+0x18>)
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80021c4:	b2db      	uxtb	r3, r3
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	200005dc 	.word	0x200005dc

080021d4 <gsmModule_isGpsFixed>:

uint8_t gsmModule_isGpsFixed(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isGpsFixed;
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <gsmModule_isGpsFixed+0x18>)
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80021e0:	b2db      	uxtb	r3, r3
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	200005dc 	.word	0x200005dc

080021f0 <gsmModule_isServerConnected>:

uint8_t gsmModule_isServerConnected(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isServerConnected;
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <gsmModule_isServerConnected+0x18>)
 80021f6:	785b      	ldrb	r3, [r3, #1]
 80021f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021fc:	b2db      	uxtb	r3, r3
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	200005dc 	.word	0x200005dc

0800220c <gsmModule_isServerDataSent>:

uint8_t gsmModule_isServerDataSent(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isServerDataSent;
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <gsmModule_isServerDataSent+0x18>)
 8002212:	785b      	ldrb	r3, [r3, #1]
 8002214:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002218:	b2db      	uxtb	r3, r3
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	200005dc 	.word	0x200005dc

08002228 <gsmModule_requestedGpsInfo>:
{
	return flags_gsmModule.bits.requestGpsOn;
}

uint8_t gsmModule_requestedGpsInfo(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.requestGpsInfo;
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <gsmModule_requestedGpsInfo+0x18>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002234:	b2db      	uxtb	r3, r3
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	200005dc 	.word	0x200005dc

08002244 <gsmModule_requestedServerDataSend>:
{
	return flags_gsmModule.bits.requestServerConnection;
}

uint8_t gsmModule_requestedServerDataSend(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.requestServerDataSend;
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <gsmModule_requestedServerDataSend+0x18>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002250:	b2db      	uxtb	r3, r3
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	200005dc 	.word	0x200005dc

08002260 <gsmModule_errorServerSendData>:
}



uint8_t gsmModule_errorServerSendData(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
	return flags_gsmModuleError.bits.serverSendData;
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <gsmModule_errorServerSendData+0x18>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800226c:	b2db      	uxtb	r3, r3
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	200005e0 	.word	0x200005e0

0800227c <gsmModule_handler>:

static uint32_t contChunks;

void gsmModule_handler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af02      	add	r7, sp, #8
	if(gsmRxPtrInPrev != gsmRxPtrIn) {
 8002282:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <gsmModule_handler+0x14c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b51      	ldr	r3, [pc, #324]	; (80023cc <gsmModule_handler+0x150>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d03e      	beq.n	800230c <gsmModule_handler+0x90>
		gsmRxPtrInPrev++;
 800228e:	4b4e      	ldr	r3, [pc, #312]	; (80023c8 <gsmModule_handler+0x14c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	4a4c      	ldr	r2, [pc, #304]	; (80023c8 <gsmModule_handler+0x14c>)
 8002296:	6013      	str	r3, [r2, #0]
		gsmRxPtrInPrev%=GSMRXDATA_LENGTH;
 8002298:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <gsmModule_handler+0x14c>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <gsmModule_handler+0x154>)
 800229e:	fba3 1302 	umull	r1, r3, r3, r2
 80022a2:	09db      	lsrs	r3, r3, #7
 80022a4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	4a46      	ldr	r2, [pc, #280]	; (80023c8 <gsmModule_handler+0x14c>)
 80022b0:	6013      	str	r3, [r2, #0]

		gsmRxDataChunkLen = ringBufferOfUint8_popChunk(gsmRxData, gsmRxPtrOut, gsmRxPtrIn, '\n', GSMRXDATA_LENGTH, gsmRxDataChunk);
 80022b2:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <gsmModule_handler+0x158>)
 80022b4:	6819      	ldr	r1, [r3, #0]
 80022b6:	4b45      	ldr	r3, [pc, #276]	; (80023cc <gsmModule_handler+0x150>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <gsmModule_handler+0x15c>)
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	230a      	movs	r3, #10
 80022c6:	4845      	ldr	r0, [pc, #276]	; (80023dc <gsmModule_handler+0x160>)
 80022c8:	f004 f850 	bl	800636c <ringBufferOfUint8_popChunk>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4a44      	ldr	r2, [pc, #272]	; (80023e0 <gsmModule_handler+0x164>)
 80022d0:	6013      	str	r3, [r2, #0]
		if(gsmRxDataChunkLen > 0) {
 80022d2:	4b43      	ldr	r3, [pc, #268]	; (80023e0 <gsmModule_handler+0x164>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d018      	beq.n	800230c <gsmModule_handler+0x90>
			gsmRxPtrOut+=gsmRxDataChunkLen;
 80022da:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <gsmModule_handler+0x158>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <gsmModule_handler+0x164>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	4a3b      	ldr	r2, [pc, #236]	; (80023d4 <gsmModule_handler+0x158>)
 80022e6:	6013      	str	r3, [r2, #0]
			gsmRxPtrOut%=GSMRXDATA_LENGTH;
 80022e8:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <gsmModule_handler+0x158>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <gsmModule_handler+0x154>)
 80022ee:	fba3 1302 	umull	r1, r3, r3, r2
 80022f2:	09db      	lsrs	r3, r3, #7
 80022f4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	4a35      	ldr	r2, [pc, #212]	; (80023d4 <gsmModule_handler+0x158>)
 8002300:	6013      	str	r3, [r2, #0]

			contChunks++;
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <gsmModule_handler+0x168>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	4a36      	ldr	r2, [pc, #216]	; (80023e4 <gsmModule_handler+0x168>)
 800230a:	6013      	str	r3, [r2, #0]
		}
	}

	handle_unsolicitedMessages();
 800230c:	f000 f86e 	bl	80023ec <handle_unsolicitedMessages>

	if(flags_gsmModule.bits.requestPowerOn) {
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <gsmModule_handler+0x16c>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <gsmModule_handler+0xa8>
		handle_requestPowerOn();
 800231e:	f000 f8d5 	bl	80024cc <handle_requestPowerOn>
 8002322:	e04b      	b.n	80023bc <gsmModule_handler+0x140>
	}
	else if(flags_gsmModule.bits.requestPowerOff) {
 8002324:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <gsmModule_handler+0x16c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <gsmModule_handler+0xbc>
		handle_requestPowerOff();
 8002332:	f000 fa19 	bl	8002768 <handle_requestPowerOff>
 8002336:	e041      	b.n	80023bc <gsmModule_handler+0x140>
	}
	else {
		if(flags_gsmModule.bits.requestGpsOn) {
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <gsmModule_handler+0x16c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <gsmModule_handler+0xd0>
			handle_requestGpsOn();
 8002346:	f000 fb2f 	bl	80029a8 <handle_requestGpsOn>
 800234a:	e037      	b.n	80023bc <gsmModule_handler+0x140>
		}
		else if(flags_gsmModule.bits.requestGpsInfo) {
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <gsmModule_handler+0x16c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <gsmModule_handler+0xe4>
			handle_requestGpsInfo();
 800235a:	f000 fc6d 	bl	8002c38 <handle_requestGpsInfo>
 800235e:	e02d      	b.n	80023bc <gsmModule_handler+0x140>
		}
		else if(flags_gsmModule.bits.requestGpsOff) {
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <gsmModule_handler+0x16c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <gsmModule_handler+0xf8>
			handle_requestGpsOff();
 800236e:	f000 fdd7 	bl	8002f20 <handle_requestGpsOff>
 8002372:	e023      	b.n	80023bc <gsmModule_handler+0x140>
		}
		else if(flags_gsmModule.bits.requestServerConnection) {
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <gsmModule_handler+0x16c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <gsmModule_handler+0x10c>
			handle_requestServerConnection();
 8002382:	f000 ff6f 	bl	8003264 <handle_requestServerConnection>
 8002386:	e019      	b.n	80023bc <gsmModule_handler+0x140>
		}
		else if(flags_gsmModule.bits.requestServerDataSend) {
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <gsmModule_handler+0x16c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <gsmModule_handler+0x120>
			handle_requestServerDataSend();
 8002396:	f001 fe9d 	bl	80040d4 <handle_requestServerDataSend>
 800239a:	e00f      	b.n	80023bc <gsmModule_handler+0x140>
		}
		else if(flags_gsmModule.bits.requestServerDataReceive) {
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <gsmModule_handler+0x16c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <gsmModule_handler+0x140>
			//handle_requestServerDataReceive();
		}
		else if(flags_gsmModule.bits.requestServerDisconnection) {
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <gsmModule_handler+0x16c>)
 80023ac:	785b      	ldrb	r3, [r3, #1]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <gsmModule_handler+0x140>
			handle_requestServerDisconnection();
 80023b8:	f001 ffda 	bl	8004370 <handle_requestServerDisconnection>
		}
	}

	gsmRxDataChunkLen = 0;
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <gsmModule_handler+0x164>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200004a0 	.word	0x200004a0
 80023cc:	2000049c 	.word	0x2000049c
 80023d0:	51eb851f 	.word	0x51eb851f
 80023d4:	200004a4 	.word	0x200004a4
 80023d8:	200003d4 	.word	0x200003d4
 80023dc:	20000244 	.word	0x20000244
 80023e0:	200004a8 	.word	0x200004a8
 80023e4:	20000670 	.word	0x20000670
 80023e8:	200005dc 	.word	0x200005dc

080023ec <handle_unsolicitedMessages>:

static void handle_unsolicitedMessages(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg, gsmRxDataChunkLen)) {
 80023f0:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <handle_unsolicitedMessages+0xbc>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	492d      	ldr	r1, [pc, #180]	; (80024ac <handle_unsolicitedMessages+0xc0>)
 80023f8:	482d      	ldr	r0, [pc, #180]	; (80024b0 <handle_unsolicitedMessages+0xc4>)
 80023fa:	f003 fd64 	bl	8005ec6 <string_containsWithinLength>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d02f      	beq.n	8002464 <handle_unsolicitedMessages+0x78>
		if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg0, gsmRxDataChunkLen)) {
 8002404:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <handle_unsolicitedMessages+0xbc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	492a      	ldr	r1, [pc, #168]	; (80024b4 <handle_unsolicitedMessages+0xc8>)
 800240c:	4828      	ldr	r0, [pc, #160]	; (80024b0 <handle_unsolicitedMessages+0xc4>)
 800240e:	f003 fd5a 	bl	8005ec6 <string_containsWithinLength>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <handle_unsolicitedMessages+0x38>
			flags_gsmModuleUnsolicited.bits.creg0 = 1;
 8002418:	4a27      	ldr	r2, [pc, #156]	; (80024b8 <handle_unsolicitedMessages+0xcc>)
 800241a:	7813      	ldrb	r3, [r2, #0]
 800241c:	f043 0308 	orr.w	r3, r3, #8
 8002420:	7013      	strb	r3, [r2, #0]
		}
		else {
			flags_gsmModuleUnsolicited.bits.httpActionError = 1;
		}
	}
}
 8002422:	e03e      	b.n	80024a2 <handle_unsolicitedMessages+0xb6>
		else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg1, gsmRxDataChunkLen)) {
 8002424:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <handle_unsolicitedMessages+0xbc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4924      	ldr	r1, [pc, #144]	; (80024bc <handle_unsolicitedMessages+0xd0>)
 800242c:	4820      	ldr	r0, [pc, #128]	; (80024b0 <handle_unsolicitedMessages+0xc4>)
 800242e:	f003 fd4a 	bl	8005ec6 <string_containsWithinLength>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <handle_unsolicitedMessages+0x58>
			flags_gsmModuleUnsolicited.bits.creg1 = 1;
 8002438:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <handle_unsolicitedMessages+0xcc>)
 800243a:	7813      	ldrb	r3, [r2, #0]
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	7013      	strb	r3, [r2, #0]
}
 8002442:	e02e      	b.n	80024a2 <handle_unsolicitedMessages+0xb6>
		else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg2, gsmRxDataChunkLen)) {
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <handle_unsolicitedMessages+0xbc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	491d      	ldr	r1, [pc, #116]	; (80024c0 <handle_unsolicitedMessages+0xd4>)
 800244c:	4818      	ldr	r0, [pc, #96]	; (80024b0 <handle_unsolicitedMessages+0xc4>)
 800244e:	f003 fd3a 	bl	8005ec6 <string_containsWithinLength>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d024      	beq.n	80024a2 <handle_unsolicitedMessages+0xb6>
			flags_gsmModuleUnsolicited.bits.creg2 = 1;
 8002458:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <handle_unsolicitedMessages+0xcc>)
 800245a:	7813      	ldrb	r3, [r2, #0]
 800245c:	f043 0320 	orr.w	r3, r3, #32
 8002460:	7013      	strb	r3, [r2, #0]
}
 8002462:	e01e      	b.n	80024a2 <handle_unsolicitedMessages+0xb6>
	else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_httpaction, gsmRxDataChunkLen)) {
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <handle_unsolicitedMessages+0xbc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4916      	ldr	r1, [pc, #88]	; (80024c4 <handle_unsolicitedMessages+0xd8>)
 800246c:	4810      	ldr	r0, [pc, #64]	; (80024b0 <handle_unsolicitedMessages+0xc4>)
 800246e:	f003 fd2a 	bl	8005ec6 <string_containsWithinLength>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d014      	beq.n	80024a2 <handle_unsolicitedMessages+0xb6>
		if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_httpaction1_200, gsmRxDataChunkLen)) {
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <handle_unsolicitedMessages+0xbc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4912      	ldr	r1, [pc, #72]	; (80024c8 <handle_unsolicitedMessages+0xdc>)
 8002480:	480b      	ldr	r0, [pc, #44]	; (80024b0 <handle_unsolicitedMessages+0xc4>)
 8002482:	f003 fd20 	bl	8005ec6 <string_containsWithinLength>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <handle_unsolicitedMessages+0xac>
			flags_gsmModuleUnsolicited.bits.httpActionOk = 1;
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <handle_unsolicitedMessages+0xcc>)
 800248e:	7813      	ldrb	r3, [r2, #0]
 8002490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002494:	7013      	strb	r3, [r2, #0]
}
 8002496:	e004      	b.n	80024a2 <handle_unsolicitedMessages+0xb6>
			flags_gsmModuleUnsolicited.bits.httpActionError = 1;
 8002498:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <handle_unsolicitedMessages+0xcc>)
 800249a:	7813      	ldrb	r3, [r2, #0]
 800249c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a0:	7013      	strb	r3, [r2, #0]
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200004a8 	.word	0x200004a8
 80024ac:	0800bbd0 	.word	0x0800bbd0
 80024b0:	200003d4 	.word	0x200003d4
 80024b4:	0800bbd8 	.word	0x0800bbd8
 80024b8:	200005e4 	.word	0x200005e4
 80024bc:	0800bbdc 	.word	0x0800bbdc
 80024c0:	0800bbe0 	.word	0x0800bbe0
 80024c4:	0800bba0 	.word	0x0800bba0
 80024c8:	0800bb98 	.word	0x0800bb98

080024cc <handle_requestPowerOn>:

static void handle_requestPowerOn(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestPowerOn_state)) {
 80024d0:	489c      	ldr	r0, [pc, #624]	; (8002744 <handle_requestPowerOn+0x278>)
 80024d2:	f7ff fd26 	bl	8001f22 <fsmManager_getState>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b06      	cmp	r3, #6
 80024da:	f200 8106 	bhi.w	80026ea <handle_requestPowerOn+0x21e>
 80024de:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <handle_requestPowerOn+0x18>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	08002501 	.word	0x08002501
 80024e8:	08002531 	.word	0x08002531
 80024ec:	08002567 	.word	0x08002567
 80024f0:	080025ad 	.word	0x080025ad
 80024f4:	080025e3 	.word	0x080025e3
 80024f8:	0800262f 	.word	0x0800262f
 80024fc:	080026a9 	.word	0x080026a9
		case __gsmModule_requestPowerOn_idle:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002500:	4890      	ldr	r0, [pc, #576]	; (8002744 <handle_requestPowerOn+0x278>)
 8002502:	f7ff fd19 	bl	8001f38 <fsmManager_isStateIn>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <handle_requestPowerOn+0x46>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 800250c:	488d      	ldr	r0, [pc, #564]	; (8002744 <handle_requestPowerOn+0x278>)
 800250e:	f7ff fd29 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOn);
 8002512:	2101      	movs	r1, #1
 8002514:	488b      	ldr	r0, [pc, #556]	; (8002744 <handle_requestPowerOn+0x278>)
 8002516:	f7ff fced 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 800251a:	488a      	ldr	r0, [pc, #552]	; (8002744 <handle_requestPowerOn+0x278>)
 800251c:	f7ff fd17 	bl	8001f4e <fsmManager_isStateOut>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80fd 	beq.w	8002722 <handle_requestPowerOn+0x256>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 8002528:	4886      	ldr	r0, [pc, #536]	; (8002744 <handle_requestPowerOn+0x278>)
 800252a:	f7ff fd2a 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800252e:	e0f8      	b.n	8002722 <handle_requestPowerOn+0x256>



		case __gsmModule_requestPowerOn_pwrKeyOn:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002530:	4884      	ldr	r0, [pc, #528]	; (8002744 <handle_requestPowerOn+0x278>)
 8002532:	f7ff fd01 	bl	8001f38 <fsmManager_isStateIn>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <handle_requestPowerOn+0x76>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 800253c:	4881      	ldr	r0, [pc, #516]	; (8002744 <handle_requestPowerOn+0x278>)
 800253e:	f7ff fd11 	bl	8001f64 <fsmManager_stateIn>
			}

			pinGsmPwrkey_write(1);
 8002542:	2001      	movs	r0, #1
 8002544:	f002 f8d0 	bl	80046e8 <pinGsmPwrkey_write>
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOnWait);
 8002548:	2102      	movs	r1, #2
 800254a:	487e      	ldr	r0, [pc, #504]	; (8002744 <handle_requestPowerOn+0x278>)
 800254c:	f7ff fcd2 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002550:	487c      	ldr	r0, [pc, #496]	; (8002744 <handle_requestPowerOn+0x278>)
 8002552:	f7ff fcfc 	bl	8001f4e <fsmManager_isStateOut>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80e4 	beq.w	8002726 <handle_requestPowerOn+0x25a>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 800255e:	4879      	ldr	r0, [pc, #484]	; (8002744 <handle_requestPowerOn+0x278>)
 8002560:	f7ff fd0f 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002564:	e0df      	b.n	8002726 <handle_requestPowerOn+0x25a>



		case __gsmModule_requestPowerOn_pwrKeyOnWait:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002566:	4877      	ldr	r0, [pc, #476]	; (8002744 <handle_requestPowerOn+0x278>)
 8002568:	f7ff fce6 	bl	8001f38 <fsmManager_isStateIn>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <handle_requestPowerOn+0xb6>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 8002572:	4874      	ldr	r0, [pc, #464]	; (8002744 <handle_requestPowerOn+0x278>)
 8002574:	f7ff fcf6 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timer, 1500);
 8002578:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800257c:	4872      	ldr	r0, [pc, #456]	; (8002748 <handle_requestPowerOn+0x27c>)
 800257e:	f002 fda1 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 8002582:	4871      	ldr	r0, [pc, #452]	; (8002748 <handle_requestPowerOn+0x27c>)
 8002584:	f002 fdb2 	bl	80050ec <softTimer_expired>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <handle_requestPowerOn+0xca>
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOff);
 800258e:	2103      	movs	r1, #3
 8002590:	486c      	ldr	r0, [pc, #432]	; (8002744 <handle_requestPowerOn+0x278>)
 8002592:	f7ff fcaf 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002596:	486b      	ldr	r0, [pc, #428]	; (8002744 <handle_requestPowerOn+0x278>)
 8002598:	f7ff fcd9 	bl	8001f4e <fsmManager_isStateOut>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80c3 	beq.w	800272a <handle_requestPowerOn+0x25e>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80025a4:	4867      	ldr	r0, [pc, #412]	; (8002744 <handle_requestPowerOn+0x278>)
 80025a6:	f7ff fcec 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80025aa:	e0be      	b.n	800272a <handle_requestPowerOn+0x25e>



		case __gsmModule_requestPowerOn_pwrKeyOff:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80025ac:	4865      	ldr	r0, [pc, #404]	; (8002744 <handle_requestPowerOn+0x278>)
 80025ae:	f7ff fcc3 	bl	8001f38 <fsmManager_isStateIn>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <handle_requestPowerOn+0xf2>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80025b8:	4862      	ldr	r0, [pc, #392]	; (8002744 <handle_requestPowerOn+0x278>)
 80025ba:	f7ff fcd3 	bl	8001f64 <fsmManager_stateIn>
			}

			pinGsmPwrkey_write(0);
 80025be:	2000      	movs	r0, #0
 80025c0:	f002 f892 	bl	80046e8 <pinGsmPwrkey_write>
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_send_at);
 80025c4:	2104      	movs	r1, #4
 80025c6:	485f      	ldr	r0, [pc, #380]	; (8002744 <handle_requestPowerOn+0x278>)
 80025c8:	f7ff fc94 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 80025cc:	485d      	ldr	r0, [pc, #372]	; (8002744 <handle_requestPowerOn+0x278>)
 80025ce:	f7ff fcbe 	bl	8001f4e <fsmManager_isStateOut>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80aa 	beq.w	800272e <handle_requestPowerOn+0x262>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80025da:	485a      	ldr	r0, [pc, #360]	; (8002744 <handle_requestPowerOn+0x278>)
 80025dc:	f7ff fcd1 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80025e0:	e0a5      	b.n	800272e <handle_requestPowerOn+0x262>



		case __gsmModule_requestPowerOn_send_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80025e2:	4858      	ldr	r0, [pc, #352]	; (8002744 <handle_requestPowerOn+0x278>)
 80025e4:	f7ff fca8 	bl	8001f38 <fsmManager_isStateIn>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <handle_requestPowerOn+0x132>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80025ee:	4855      	ldr	r0, [pc, #340]	; (8002744 <handle_requestPowerOn+0x278>)
 80025f0:	f7ff fcb8 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 4000);
 80025f4:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80025f8:	4854      	ldr	r0, [pc, #336]	; (800274c <handle_requestPowerOn+0x280>)
 80025fa:	f002 fd63 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80025fe:	4853      	ldr	r0, [pc, #332]	; (800274c <handle_requestPowerOn+0x280>)
 8002600:	f002 fd74 	bl	80050ec <softTimer_expired>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <handle_requestPowerOn+0x14c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_at);
 800260a:	4851      	ldr	r0, [pc, #324]	; (8002750 <handle_requestPowerOn+0x284>)
 800260c:	f002 f87e 	bl	800470c <pinGsmUartTx_transmit>

				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_check_at);
 8002610:	2105      	movs	r1, #5
 8002612:	484c      	ldr	r0, [pc, #304]	; (8002744 <handle_requestPowerOn+0x278>)
 8002614:	f7ff fc6e 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002618:	484a      	ldr	r0, [pc, #296]	; (8002744 <handle_requestPowerOn+0x278>)
 800261a:	f7ff fc98 	bl	8001f4e <fsmManager_isStateOut>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8086 	beq.w	8002732 <handle_requestPowerOn+0x266>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 8002626:	4847      	ldr	r0, [pc, #284]	; (8002744 <handle_requestPowerOn+0x278>)
 8002628:	f7ff fcab 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800262c:	e081      	b.n	8002732 <handle_requestPowerOn+0x266>



		case __gsmModule_requestPowerOn_check_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 800262e:	4845      	ldr	r0, [pc, #276]	; (8002744 <handle_requestPowerOn+0x278>)
 8002630:	f7ff fc82 	bl	8001f38 <fsmManager_isStateIn>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <handle_requestPowerOn+0x182>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 800263a:	4842      	ldr	r0, [pc, #264]	; (8002744 <handle_requestPowerOn+0x278>)
 800263c:	f7ff fc92 	bl	8001f64 <fsmManager_stateIn>

				pinGsmUartRx_receive();
 8002640:	f002 f8a2 	bl	8004788 <pinGsmUartRx_receive>
				softTimer_start(&timeout, 1000);
 8002644:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002648:	4840      	ldr	r0, [pc, #256]	; (800274c <handle_requestPowerOn+0x280>)
 800264a:	f002 fd3b 	bl	80050c4 <softTimer_start>
			}


			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <handle_requestPowerOn+0x288>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	4940      	ldr	r1, [pc, #256]	; (8002758 <handle_requestPowerOn+0x28c>)
 8002656:	4841      	ldr	r0, [pc, #260]	; (800275c <handle_requestPowerOn+0x290>)
 8002658:	f003 fc35 	bl	8005ec6 <string_containsWithinLength>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00e      	beq.n	8002680 <handle_requestPowerOn+0x1b4>
				flags_gsmModule.bits.isPowered = 1;
 8002662:	4a3f      	ldr	r2, [pc, #252]	; (8002760 <handle_requestPowerOn+0x294>)
 8002664:	7853      	ldrb	r3, [r2, #1]
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestPowerOn = 0;
 800266c:	4a3c      	ldr	r2, [pc, #240]	; (8002760 <handle_requestPowerOn+0x294>)
 800266e:	7813      	ldrb	r3, [r2, #0]
 8002670:	f36f 0300 	bfc	r3, #0, #1
 8002674:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8002676:	2100      	movs	r1, #0
 8002678:	4832      	ldr	r0, [pc, #200]	; (8002744 <handle_requestPowerOn+0x278>)
 800267a:	f7ff fc3b 	bl	8001ef4 <fsmManager_gotoState>
 800267e:	e009      	b.n	8002694 <handle_requestPowerOn+0x1c8>
			}
			else if(softTimer_expired(&timeout)) {
 8002680:	4832      	ldr	r0, [pc, #200]	; (800274c <handle_requestPowerOn+0x280>)
 8002682:	f002 fd33 	bl	80050ec <softTimer_expired>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <handle_requestPowerOn+0x1c8>
				//The module is powered off
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 800268c:	2100      	movs	r1, #0
 800268e:	482d      	ldr	r0, [pc, #180]	; (8002744 <handle_requestPowerOn+0x278>)
 8002690:	f7ff fc30 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002694:	482b      	ldr	r0, [pc, #172]	; (8002744 <handle_requestPowerOn+0x278>)
 8002696:	f7ff fc5a 	bl	8001f4e <fsmManager_isStateOut>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d04a      	beq.n	8002736 <handle_requestPowerOn+0x26a>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80026a0:	4828      	ldr	r0, [pc, #160]	; (8002744 <handle_requestPowerOn+0x278>)
 80026a2:	f7ff fc6e 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80026a6:	e046      	b.n	8002736 <handle_requestPowerOn+0x26a>



		case __gsmModule_requestPowerOn_error:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80026a8:	4826      	ldr	r0, [pc, #152]	; (8002744 <handle_requestPowerOn+0x278>)
 80026aa:	f7ff fc45 	bl	8001f38 <fsmManager_isStateIn>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <handle_requestPowerOn+0x1ee>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80026b4:	4823      	ldr	r0, [pc, #140]	; (8002744 <handle_requestPowerOn+0x278>)
 80026b6:	f7ff fc55 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestPowerOn = 0;
 80026ba:	4a29      	ldr	r2, [pc, #164]	; (8002760 <handle_requestPowerOn+0x294>)
 80026bc:	7813      	ldrb	r3, [r2, #0]
 80026be:	f36f 0300 	bfc	r3, #0, #1
 80026c2:	7013      	strb	r3, [r2, #0]
			flags_gsmModuleError.bits.powerOn = 1;
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <handle_requestPowerOn+0x298>)
 80026c6:	7813      	ldrb	r3, [r2, #0]
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 80026ce:	2100      	movs	r1, #0
 80026d0:	481c      	ldr	r0, [pc, #112]	; (8002744 <handle_requestPowerOn+0x278>)
 80026d2:	f7ff fc0f 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 80026d6:	481b      	ldr	r0, [pc, #108]	; (8002744 <handle_requestPowerOn+0x278>)
 80026d8:	f7ff fc39 	bl	8001f4e <fsmManager_isStateOut>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d02b      	beq.n	800273a <handle_requestPowerOn+0x26e>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80026e2:	4818      	ldr	r0, [pc, #96]	; (8002744 <handle_requestPowerOn+0x278>)
 80026e4:	f7ff fc4d 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80026e8:	e027      	b.n	800273a <handle_requestPowerOn+0x26e>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80026ea:	4816      	ldr	r0, [pc, #88]	; (8002744 <handle_requestPowerOn+0x278>)
 80026ec:	f7ff fc24 	bl	8001f38 <fsmManager_isStateIn>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <handle_requestPowerOn+0x230>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80026f6:	4813      	ldr	r0, [pc, #76]	; (8002744 <handle_requestPowerOn+0x278>)
 80026f8:	f7ff fc34 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestPowerOn = 0;
 80026fc:	4a18      	ldr	r2, [pc, #96]	; (8002760 <handle_requestPowerOn+0x294>)
 80026fe:	7813      	ldrb	r3, [r2, #0]
 8002700:	f36f 0300 	bfc	r3, #0, #1
 8002704:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8002706:	2100      	movs	r1, #0
 8002708:	480e      	ldr	r0, [pc, #56]	; (8002744 <handle_requestPowerOn+0x278>)
 800270a:	f7ff fbf3 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <handle_requestPowerOn+0x278>)
 8002710:	f7ff fc1d 	bl	8001f4e <fsmManager_isStateOut>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d011      	beq.n	800273e <handle_requestPowerOn+0x272>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 800271a:	480a      	ldr	r0, [pc, #40]	; (8002744 <handle_requestPowerOn+0x278>)
 800271c:	f7ff fc31 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002720:	e00d      	b.n	800273e <handle_requestPowerOn+0x272>
			break;
 8002722:	bf00      	nop
 8002724:	e00c      	b.n	8002740 <handle_requestPowerOn+0x274>
			break;
 8002726:	bf00      	nop
 8002728:	e00a      	b.n	8002740 <handle_requestPowerOn+0x274>
			break;
 800272a:	bf00      	nop
 800272c:	e008      	b.n	8002740 <handle_requestPowerOn+0x274>
			break;
 800272e:	bf00      	nop
 8002730:	e006      	b.n	8002740 <handle_requestPowerOn+0x274>
			break;
 8002732:	bf00      	nop
 8002734:	e004      	b.n	8002740 <handle_requestPowerOn+0x274>
			break;
 8002736:	bf00      	nop
 8002738:	e002      	b.n	8002740 <handle_requestPowerOn+0x274>
			break;
 800273a:	bf00      	nop
 800273c:	e000      	b.n	8002740 <handle_requestPowerOn+0x274>
			break;
 800273e:	bf00      	nop
	}
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000600 	.word	0x20000600
 8002748:	200005e8 	.word	0x200005e8
 800274c:	200005f4 	.word	0x200005f4
 8002750:	0800b940 	.word	0x0800b940
 8002754:	200004a8 	.word	0x200004a8
 8002758:	0800bb4c 	.word	0x0800bb4c
 800275c:	200003d4 	.word	0x200003d4
 8002760:	200005dc 	.word	0x200005dc
 8002764:	200005e0 	.word	0x200005e0

08002768 <handle_requestPowerOff>:

static void handle_requestPowerOff(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestPowerOff_state)) {
 800276c:	4883      	ldr	r0, [pc, #524]	; (800297c <handle_requestPowerOff+0x214>)
 800276e:	f7ff fbd8 	bl	8001f22 <fsmManager_getState>
 8002772:	4603      	mov	r3, r0
 8002774:	2b05      	cmp	r3, #5
 8002776:	f200 80ff 	bhi.w	8002978 <handle_requestPowerOff+0x210>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <handle_requestPowerOff+0x18>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	08002799 	.word	0x08002799
 8002784:	080027c9 	.word	0x080027c9
 8002788:	080027ff 	.word	0x080027ff
 800278c:	08002865 	.word	0x08002865
 8002790:	080028ad 	.word	0x080028ad
 8002794:	08002921 	.word	0x08002921
		case __gsmModule_requestPowerOff_idle:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002798:	4878      	ldr	r0, [pc, #480]	; (800297c <handle_requestPowerOff+0x214>)
 800279a:	f7ff fbcd 	bl	8001f38 <fsmManager_isStateIn>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <handle_requestPowerOff+0x42>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 80027a4:	4875      	ldr	r0, [pc, #468]	; (800297c <handle_requestPowerOff+0x214>)
 80027a6:	f7ff fbdd 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_send_atCpowd1);
 80027aa:	2101      	movs	r1, #1
 80027ac:	4873      	ldr	r0, [pc, #460]	; (800297c <handle_requestPowerOff+0x214>)
 80027ae:	f7ff fba1 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 80027b2:	4872      	ldr	r0, [pc, #456]	; (800297c <handle_requestPowerOff+0x214>)
 80027b4:	f7ff fbcb 	bl	8001f4e <fsmManager_isStateOut>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80d1 	beq.w	8002962 <handle_requestPowerOff+0x1fa>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 80027c0:	486e      	ldr	r0, [pc, #440]	; (800297c <handle_requestPowerOff+0x214>)
 80027c2:	f7ff fbde 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80027c6:	e0cc      	b.n	8002962 <handle_requestPowerOff+0x1fa>



		case __gsmModule_requestPowerOff_send_atCpowd1:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 80027c8:	486c      	ldr	r0, [pc, #432]	; (800297c <handle_requestPowerOff+0x214>)
 80027ca:	f7ff fbb5 	bl	8001f38 <fsmManager_isStateIn>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <handle_requestPowerOff+0x72>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 80027d4:	4869      	ldr	r0, [pc, #420]	; (800297c <handle_requestPowerOff+0x214>)
 80027d6:	f7ff fbc5 	bl	8001f64 <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cpowd1);
 80027da:	4869      	ldr	r0, [pc, #420]	; (8002980 <handle_requestPowerOff+0x218>)
 80027dc:	f001 ff96 	bl	800470c <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_check_atCpowd1);
 80027e0:	2102      	movs	r1, #2
 80027e2:	4866      	ldr	r0, [pc, #408]	; (800297c <handle_requestPowerOff+0x214>)
 80027e4:	f7ff fb86 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 80027e8:	4864      	ldr	r0, [pc, #400]	; (800297c <handle_requestPowerOff+0x214>)
 80027ea:	f7ff fbb0 	bl	8001f4e <fsmManager_isStateOut>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80b8 	beq.w	8002966 <handle_requestPowerOff+0x1fe>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 80027f6:	4861      	ldr	r0, [pc, #388]	; (800297c <handle_requestPowerOff+0x214>)
 80027f8:	f7ff fbc3 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80027fc:	e0b3      	b.n	8002966 <handle_requestPowerOff+0x1fe>



		case __gsmModule_requestPowerOff_check_atCpowd1:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 80027fe:	485f      	ldr	r0, [pc, #380]	; (800297c <handle_requestPowerOff+0x214>)
 8002800:	f7ff fb9a 	bl	8001f38 <fsmManager_isStateIn>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <handle_requestPowerOff+0xb4>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 800280a:	485c      	ldr	r0, [pc, #368]	; (800297c <handle_requestPowerOff+0x214>)
 800280c:	f7ff fbaa 	bl	8001f64 <fsmManager_stateIn>

				pinGsmUartRx_receive();
 8002810:	f001 ffba 	bl	8004788 <pinGsmUartRx_receive>
				softTimer_start(&timeout, 100);
 8002814:	2164      	movs	r1, #100	; 0x64
 8002816:	485b      	ldr	r0, [pc, #364]	; (8002984 <handle_requestPowerOff+0x21c>)
 8002818:	f002 fc54 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_normal_powerdown, gsmRxDataChunkLen)) {
 800281c:	4b5a      	ldr	r3, [pc, #360]	; (8002988 <handle_requestPowerOff+0x220>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	495a      	ldr	r1, [pc, #360]	; (800298c <handle_requestPowerOff+0x224>)
 8002824:	485a      	ldr	r0, [pc, #360]	; (8002990 <handle_requestPowerOff+0x228>)
 8002826:	f003 fb4e 	bl	8005ec6 <string_containsWithinLength>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <handle_requestPowerOff+0xd2>
				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_send_at);
 8002830:	2103      	movs	r1, #3
 8002832:	4852      	ldr	r0, [pc, #328]	; (800297c <handle_requestPowerOff+0x214>)
 8002834:	f7ff fb5e 	bl	8001ef4 <fsmManager_gotoState>
 8002838:	e009      	b.n	800284e <handle_requestPowerOff+0xe6>
			}
			else if(softTimer_expired(&timeout)) {
 800283a:	4852      	ldr	r0, [pc, #328]	; (8002984 <handle_requestPowerOff+0x21c>)
 800283c:	f002 fc56 	bl	80050ec <softTimer_expired>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <handle_requestPowerOff+0xe6>
				//The module is powered off
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOff_idle);
 8002846:	2100      	movs	r1, #0
 8002848:	4852      	ldr	r0, [pc, #328]	; (8002994 <handle_requestPowerOff+0x22c>)
 800284a:	f7ff fb53 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 800284e:	484b      	ldr	r0, [pc, #300]	; (800297c <handle_requestPowerOff+0x214>)
 8002850:	f7ff fb7d 	bl	8001f4e <fsmManager_isStateOut>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8087 	beq.w	800296a <handle_requestPowerOff+0x202>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 800285c:	4847      	ldr	r0, [pc, #284]	; (800297c <handle_requestPowerOff+0x214>)
 800285e:	f7ff fb90 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002862:	e082      	b.n	800296a <handle_requestPowerOff+0x202>



		case __gsmModule_requestPowerOff_send_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002864:	4845      	ldr	r0, [pc, #276]	; (800297c <handle_requestPowerOff+0x214>)
 8002866:	f7ff fb67 	bl	8001f38 <fsmManager_isStateIn>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <handle_requestPowerOff+0x116>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 8002870:	4842      	ldr	r0, [pc, #264]	; (800297c <handle_requestPowerOff+0x214>)
 8002872:	f7ff fb77 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002876:	2164      	movs	r1, #100	; 0x64
 8002878:	4842      	ldr	r0, [pc, #264]	; (8002984 <handle_requestPowerOff+0x21c>)
 800287a:	f002 fc23 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 800287e:	4841      	ldr	r0, [pc, #260]	; (8002984 <handle_requestPowerOff+0x21c>)
 8002880:	f002 fc34 	bl	80050ec <softTimer_expired>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <handle_requestPowerOff+0x130>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_at);
 800288a:	4843      	ldr	r0, [pc, #268]	; (8002998 <handle_requestPowerOff+0x230>)
 800288c:	f001 ff3e 	bl	800470c <pinGsmUartTx_transmit>

				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_check_at);
 8002890:	2104      	movs	r1, #4
 8002892:	483a      	ldr	r0, [pc, #232]	; (800297c <handle_requestPowerOff+0x214>)
 8002894:	f7ff fb2e 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 8002898:	4838      	ldr	r0, [pc, #224]	; (800297c <handle_requestPowerOff+0x214>)
 800289a:	f7ff fb58 	bl	8001f4e <fsmManager_isStateOut>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d064      	beq.n	800296e <handle_requestPowerOff+0x206>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 80028a4:	4835      	ldr	r0, [pc, #212]	; (800297c <handle_requestPowerOff+0x214>)
 80028a6:	f7ff fb6c 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80028aa:	e060      	b.n	800296e <handle_requestPowerOff+0x206>



		case __gsmModule_requestPowerOff_check_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 80028ac:	4833      	ldr	r0, [pc, #204]	; (800297c <handle_requestPowerOff+0x214>)
 80028ae:	f7ff fb43 	bl	8001f38 <fsmManager_isStateIn>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <handle_requestPowerOff+0x15e>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 80028b8:	4830      	ldr	r0, [pc, #192]	; (800297c <handle_requestPowerOff+0x214>)
 80028ba:	f7ff fb53 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80028be:	2164      	movs	r1, #100	; 0x64
 80028c0:	4830      	ldr	r0, [pc, #192]	; (8002984 <handle_requestPowerOff+0x21c>)
 80028c2:	f002 fbff 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80028c6:	4b30      	ldr	r3, [pc, #192]	; (8002988 <handle_requestPowerOff+0x220>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	4933      	ldr	r1, [pc, #204]	; (800299c <handle_requestPowerOff+0x234>)
 80028ce:	4830      	ldr	r0, [pc, #192]	; (8002990 <handle_requestPowerOff+0x228>)
 80028d0:	f003 faf9 	bl	8005ec6 <string_containsWithinLength>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d004      	beq.n	80028e4 <handle_requestPowerOff+0x17c>
				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_error);
 80028da:	2105      	movs	r1, #5
 80028dc:	4827      	ldr	r0, [pc, #156]	; (800297c <handle_requestPowerOff+0x214>)
 80028de:	f7ff fb09 	bl	8001ef4 <fsmManager_gotoState>
 80028e2:	e013      	b.n	800290c <handle_requestPowerOff+0x1a4>
			}
			else if(softTimer_expired(&timeout)) {
 80028e4:	4827      	ldr	r0, [pc, #156]	; (8002984 <handle_requestPowerOff+0x21c>)
 80028e6:	f002 fc01 	bl	80050ec <softTimer_expired>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00d      	beq.n	800290c <handle_requestPowerOff+0x1a4>
				flags_gsmModule.bits.requestPowerOff = 0;
 80028f0:	4a2b      	ldr	r2, [pc, #172]	; (80029a0 <handle_requestPowerOff+0x238>)
 80028f2:	7813      	ldrb	r3, [r2, #0]
 80028f4:	f36f 0341 	bfc	r3, #1, #1
 80028f8:	7013      	strb	r3, [r2, #0]
				flags_gsmModule.bits.isPowered = 0;
 80028fa:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <handle_requestPowerOff+0x238>)
 80028fc:	7853      	ldrb	r3, [r2, #1]
 80028fe:	f36f 0382 	bfc	r3, #2, #1
 8002902:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 8002904:	2100      	movs	r1, #0
 8002906:	481d      	ldr	r0, [pc, #116]	; (800297c <handle_requestPowerOff+0x214>)
 8002908:	f7ff faf4 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 800290c:	481b      	ldr	r0, [pc, #108]	; (800297c <handle_requestPowerOff+0x214>)
 800290e:	f7ff fb1e 	bl	8001f4e <fsmManager_isStateOut>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d02c      	beq.n	8002972 <handle_requestPowerOff+0x20a>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 8002918:	4818      	ldr	r0, [pc, #96]	; (800297c <handle_requestPowerOff+0x214>)
 800291a:	f7ff fb32 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800291e:	e028      	b.n	8002972 <handle_requestPowerOff+0x20a>



		case __gsmModule_requestPowerOff_error:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002920:	4816      	ldr	r0, [pc, #88]	; (800297c <handle_requestPowerOff+0x214>)
 8002922:	f7ff fb09 	bl	8001f38 <fsmManager_isStateIn>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <handle_requestPowerOff+0x1ca>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 800292c:	4813      	ldr	r0, [pc, #76]	; (800297c <handle_requestPowerOff+0x214>)
 800292e:	f7ff fb19 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.powerOff = 1;
 8002932:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <handle_requestPowerOff+0x23c>)
 8002934:	7813      	ldrb	r3, [r2, #0]
 8002936:	f043 0302 	orr.w	r3, r3, #2
 800293a:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestPowerOff = 0;
 800293c:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <handle_requestPowerOff+0x238>)
 800293e:	7813      	ldrb	r3, [r2, #0]
 8002940:	f36f 0341 	bfc	r3, #1, #1
 8002944:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 8002946:	2100      	movs	r1, #0
 8002948:	480c      	ldr	r0, [pc, #48]	; (800297c <handle_requestPowerOff+0x214>)
 800294a:	f7ff fad3 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 800294e:	480b      	ldr	r0, [pc, #44]	; (800297c <handle_requestPowerOff+0x214>)
 8002950:	f7ff fafd 	bl	8001f4e <fsmManager_isStateOut>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00d      	beq.n	8002976 <handle_requestPowerOff+0x20e>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 800295a:	4808      	ldr	r0, [pc, #32]	; (800297c <handle_requestPowerOff+0x214>)
 800295c:	f7ff fb11 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002960:	e009      	b.n	8002976 <handle_requestPowerOff+0x20e>
			break;
 8002962:	bf00      	nop
 8002964:	e008      	b.n	8002978 <handle_requestPowerOff+0x210>
			break;
 8002966:	bf00      	nop
 8002968:	e006      	b.n	8002978 <handle_requestPowerOff+0x210>
			break;
 800296a:	bf00      	nop
 800296c:	e004      	b.n	8002978 <handle_requestPowerOff+0x210>
			break;
 800296e:	bf00      	nop
 8002970:	e002      	b.n	8002978 <handle_requestPowerOff+0x210>
			break;
 8002972:	bf00      	nop
 8002974:	e000      	b.n	8002978 <handle_requestPowerOff+0x210>
			break;
 8002976:	bf00      	nop
	}


}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	2000060c 	.word	0x2000060c
 8002980:	0800b948 	.word	0x0800b948
 8002984:	200005f4 	.word	0x200005f4
 8002988:	200004a8 	.word	0x200004a8
 800298c:	0800bb5c 	.word	0x0800bb5c
 8002990:	200003d4 	.word	0x200003d4
 8002994:	20000600 	.word	0x20000600
 8002998:	0800b940 	.word	0x0800b940
 800299c:	0800bb4c 	.word	0x0800bb4c
 80029a0:	200005dc 	.word	0x200005dc
 80029a4:	200005e0 	.word	0x200005e0

080029a8 <handle_requestGpsOn>:

static void handle_requestGpsOn(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsOn_state)) {
 80029ac:	4899      	ldr	r0, [pc, #612]	; (8002c14 <handle_requestGpsOn+0x26c>)
 80029ae:	f7ff fab8 	bl	8001f22 <fsmManager_getState>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	f200 8101 	bhi.w	8002bbc <handle_requestGpsOn+0x214>
 80029ba:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <handle_requestGpsOn+0x18>)
 80029bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c0:	080029d9 	.word	0x080029d9
 80029c4:	08002a09 	.word	0x08002a09
 80029c8:	08002a55 	.word	0x08002a55
 80029cc:	08002ab9 	.word	0x08002ab9
 80029d0:	08002b05 	.word	0x08002b05
 80029d4:	08002b7b 	.word	0x08002b7b
		case __gsmModule_requestGpsOn_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 80029d8:	488e      	ldr	r0, [pc, #568]	; (8002c14 <handle_requestGpsOn+0x26c>)
 80029da:	f7ff faad 	bl	8001f38 <fsmManager_isStateIn>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <handle_requestGpsOn+0x42>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 80029e4:	488b      	ldr	r0, [pc, #556]	; (8002c14 <handle_requestGpsOn+0x26c>)
 80029e6:	f7ff fabd 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpspwr1);
 80029ea:	2101      	movs	r1, #1
 80029ec:	4889      	ldr	r0, [pc, #548]	; (8002c14 <handle_requestGpsOn+0x26c>)
 80029ee:	f7ff fa81 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 80029f2:	4888      	ldr	r0, [pc, #544]	; (8002c14 <handle_requestGpsOn+0x26c>)
 80029f4:	f7ff faab 	bl	8001f4e <fsmManager_isStateOut>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80fa 	beq.w	8002bf4 <handle_requestGpsOn+0x24c>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002a00:	4884      	ldr	r0, [pc, #528]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002a02:	f7ff fabe 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002a06:	e0f5      	b.n	8002bf4 <handle_requestGpsOn+0x24c>



		case __gsmModule_requestGpsOn_send_atCgpspwr1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002a08:	4882      	ldr	r0, [pc, #520]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002a0a:	f7ff fa95 	bl	8001f38 <fsmManager_isStateIn>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d007      	beq.n	8002a24 <handle_requestGpsOn+0x7c>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002a14:	487f      	ldr	r0, [pc, #508]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002a16:	f7ff faa5 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002a1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a1e:	487e      	ldr	r0, [pc, #504]	; (8002c18 <handle_requestGpsOn+0x270>)
 8002a20:	f002 fb50 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002a24:	487c      	ldr	r0, [pc, #496]	; (8002c18 <handle_requestGpsOn+0x270>)
 8002a26:	f002 fb61 	bl	80050ec <softTimer_expired>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d006      	beq.n	8002a3e <handle_requestGpsOn+0x96>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpspwr1);
 8002a30:	487a      	ldr	r0, [pc, #488]	; (8002c1c <handle_requestGpsOn+0x274>)
 8002a32:	f001 fe6b 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_waitOk_atCgpspwr1);
 8002a36:	2102      	movs	r1, #2
 8002a38:	4876      	ldr	r0, [pc, #472]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002a3a:	f7ff fa5b 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002a3e:	4875      	ldr	r0, [pc, #468]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002a40:	f7ff fa85 	bl	8001f4e <fsmManager_isStateOut>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80d6 	beq.w	8002bf8 <handle_requestGpsOn+0x250>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002a4c:	4871      	ldr	r0, [pc, #452]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002a4e:	f7ff fa98 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002a52:	e0d1      	b.n	8002bf8 <handle_requestGpsOn+0x250>



		case __gsmModule_requestGpsOn_waitOk_atCgpspwr1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002a54:	486f      	ldr	r0, [pc, #444]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002a56:	f7ff fa6f 	bl	8001f38 <fsmManager_isStateIn>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <handle_requestGpsOn+0xc8>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002a60:	486c      	ldr	r0, [pc, #432]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002a62:	f7ff fa7f 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002a66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a6a:	486b      	ldr	r0, [pc, #428]	; (8002c18 <handle_requestGpsOn+0x270>)
 8002a6c:	f002 fb2a 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002a70:	4b6b      	ldr	r3, [pc, #428]	; (8002c20 <handle_requestGpsOn+0x278>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	496b      	ldr	r1, [pc, #428]	; (8002c24 <handle_requestGpsOn+0x27c>)
 8002a78:	486b      	ldr	r0, [pc, #428]	; (8002c28 <handle_requestGpsOn+0x280>)
 8002a7a:	f003 fa24 	bl	8005ec6 <string_containsWithinLength>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <handle_requestGpsOn+0xe6>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpsrst0);
 8002a84:	2103      	movs	r1, #3
 8002a86:	4863      	ldr	r0, [pc, #396]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002a88:	f7ff fa34 	bl	8001ef4 <fsmManager_gotoState>
 8002a8c:	e009      	b.n	8002aa2 <handle_requestGpsOn+0xfa>
			}
			else if(softTimer_expired(&timeout)) {
 8002a8e:	4862      	ldr	r0, [pc, #392]	; (8002c18 <handle_requestGpsOn+0x270>)
 8002a90:	f002 fb2c 	bl	80050ec <softTimer_expired>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <handle_requestGpsOn+0xfa>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpspwr1);
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	485d      	ldr	r0, [pc, #372]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002a9e:	f7ff fa29 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002aa2:	485c      	ldr	r0, [pc, #368]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002aa4:	f7ff fa53 	bl	8001f4e <fsmManager_isStateOut>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a6 	beq.w	8002bfc <handle_requestGpsOn+0x254>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002ab0:	4858      	ldr	r0, [pc, #352]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002ab2:	f7ff fa66 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002ab6:	e0a1      	b.n	8002bfc <handle_requestGpsOn+0x254>



		case __gsmModule_requestGpsOn_send_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002ab8:	4856      	ldr	r0, [pc, #344]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002aba:	f7ff fa3d 	bl	8001f38 <fsmManager_isStateIn>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <handle_requestGpsOn+0x12c>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002ac4:	4853      	ldr	r0, [pc, #332]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002ac6:	f7ff fa4d 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002aca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ace:	4852      	ldr	r0, [pc, #328]	; (8002c18 <handle_requestGpsOn+0x270>)
 8002ad0:	f002 faf8 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002ad4:	4850      	ldr	r0, [pc, #320]	; (8002c18 <handle_requestGpsOn+0x270>)
 8002ad6:	f002 fb09 	bl	80050ec <softTimer_expired>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <handle_requestGpsOn+0x146>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst0);
 8002ae0:	4852      	ldr	r0, [pc, #328]	; (8002c2c <handle_requestGpsOn+0x284>)
 8002ae2:	f001 fe13 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_waitOk_atCgpsrst0);
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	484a      	ldr	r0, [pc, #296]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002aea:	f7ff fa03 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002aee:	4849      	ldr	r0, [pc, #292]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002af0:	f7ff fa2d 	bl	8001f4e <fsmManager_isStateOut>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8082 	beq.w	8002c00 <handle_requestGpsOn+0x258>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002afc:	4845      	ldr	r0, [pc, #276]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002afe:	f7ff fa40 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002b02:	e07d      	b.n	8002c00 <handle_requestGpsOn+0x258>



		case __gsmModule_requestGpsOn_waitOk_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002b04:	4843      	ldr	r0, [pc, #268]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002b06:	f7ff fa17 	bl	8001f38 <fsmManager_isStateIn>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <handle_requestGpsOn+0x178>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002b10:	4840      	ldr	r0, [pc, #256]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002b12:	f7ff fa27 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 3000);
 8002b16:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002b1a:	483f      	ldr	r0, [pc, #252]	; (8002c18 <handle_requestGpsOn+0x270>)
 8002b1c:	f002 fad2 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002b20:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <handle_requestGpsOn+0x278>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	493f      	ldr	r1, [pc, #252]	; (8002c24 <handle_requestGpsOn+0x27c>)
 8002b28:	483f      	ldr	r0, [pc, #252]	; (8002c28 <handle_requestGpsOn+0x280>)
 8002b2a:	f003 f9cc 	bl	8005ec6 <string_containsWithinLength>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00e      	beq.n	8002b52 <handle_requestGpsOn+0x1aa>
				flags_gsmModule.bits.isGpsOn = 1;
 8002b34:	4a3e      	ldr	r2, [pc, #248]	; (8002c30 <handle_requestGpsOn+0x288>)
 8002b36:	7853      	ldrb	r3, [r2, #1]
 8002b38:	f043 0308 	orr.w	r3, r3, #8
 8002b3c:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestGpsOn = 0;
 8002b3e:	4a3c      	ldr	r2, [pc, #240]	; (8002c30 <handle_requestGpsOn+0x288>)
 8002b40:	7813      	ldrb	r3, [r2, #0]
 8002b42:	f36f 0382 	bfc	r3, #2, #1
 8002b46:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4832      	ldr	r0, [pc, #200]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002b4c:	f7ff f9d2 	bl	8001ef4 <fsmManager_gotoState>
 8002b50:	e009      	b.n	8002b66 <handle_requestGpsOn+0x1be>
			}
			else if(softTimer_expired(&timeout)) {
 8002b52:	4831      	ldr	r0, [pc, #196]	; (8002c18 <handle_requestGpsOn+0x270>)
 8002b54:	f002 faca 	bl	80050ec <softTimer_expired>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <handle_requestGpsOn+0x1be>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpsrst0);
 8002b5e:	2103      	movs	r1, #3
 8002b60:	482c      	ldr	r0, [pc, #176]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002b62:	f7ff f9c7 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002b66:	482b      	ldr	r0, [pc, #172]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002b68:	f7ff f9f1 	bl	8001f4e <fsmManager_isStateOut>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d048      	beq.n	8002c04 <handle_requestGpsOn+0x25c>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002b72:	4828      	ldr	r0, [pc, #160]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002b74:	f7ff fa05 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002b78:	e044      	b.n	8002c04 <handle_requestGpsOn+0x25c>

		case __gsmModule_requestGpsOn_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002b7a:	4826      	ldr	r0, [pc, #152]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002b7c:	f7ff f9dc 	bl	8001f38 <fsmManager_isStateIn>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <handle_requestGpsOn+0x1e4>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002b86:	4823      	ldr	r0, [pc, #140]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002b88:	f7ff f9ec 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.gpsOn = 1;
 8002b8c:	4a29      	ldr	r2, [pc, #164]	; (8002c34 <handle_requestGpsOn+0x28c>)
 8002b8e:	7813      	ldrb	r3, [r2, #0]
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestGpsOn = 0;
 8002b96:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <handle_requestGpsOn+0x288>)
 8002b98:	7813      	ldrb	r3, [r2, #0]
 8002b9a:	f36f 0382 	bfc	r3, #2, #1
 8002b9e:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	481c      	ldr	r0, [pc, #112]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002ba4:	f7ff f9a6 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002ba8:	481a      	ldr	r0, [pc, #104]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002baa:	f7ff f9d0 	bl	8001f4e <fsmManager_isStateOut>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d029      	beq.n	8002c08 <handle_requestGpsOn+0x260>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002bb4:	4817      	ldr	r0, [pc, #92]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002bb6:	f7ff f9e4 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002bba:	e025      	b.n	8002c08 <handle_requestGpsOn+0x260>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002bbc:	4815      	ldr	r0, [pc, #84]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002bbe:	f7ff f9bb 	bl	8001f38 <fsmManager_isStateIn>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <handle_requestGpsOn+0x226>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002bc8:	4812      	ldr	r0, [pc, #72]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002bca:	f7ff f9cb 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestGpsOn = 0;
 8002bce:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <handle_requestGpsOn+0x288>)
 8002bd0:	7813      	ldrb	r3, [r2, #0]
 8002bd2:	f36f 0382 	bfc	r3, #2, #1
 8002bd6:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8002bd8:	2100      	movs	r1, #0
 8002bda:	480e      	ldr	r0, [pc, #56]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002bdc:	f7ff f98a 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002be0:	480c      	ldr	r0, [pc, #48]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002be2:	f7ff f9b4 	bl	8001f4e <fsmManager_isStateOut>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00f      	beq.n	8002c0c <handle_requestGpsOn+0x264>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002bec:	4809      	ldr	r0, [pc, #36]	; (8002c14 <handle_requestGpsOn+0x26c>)
 8002bee:	f7ff f9c8 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002bf2:	e00b      	b.n	8002c0c <handle_requestGpsOn+0x264>
			break;
 8002bf4:	bf00      	nop
 8002bf6:	e00a      	b.n	8002c0e <handle_requestGpsOn+0x266>
			break;
 8002bf8:	bf00      	nop
 8002bfa:	e008      	b.n	8002c0e <handle_requestGpsOn+0x266>
			break;
 8002bfc:	bf00      	nop
 8002bfe:	e006      	b.n	8002c0e <handle_requestGpsOn+0x266>
			break;
 8002c00:	bf00      	nop
 8002c02:	e004      	b.n	8002c0e <handle_requestGpsOn+0x266>
			break;
 8002c04:	bf00      	nop
 8002c06:	e002      	b.n	8002c0e <handle_requestGpsOn+0x266>
			break;
 8002c08:	bf00      	nop
 8002c0a:	e000      	b.n	8002c0e <handle_requestGpsOn+0x266>
			break;
 8002c0c:	bf00      	nop
	}
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000618 	.word	0x20000618
 8002c18:	200005f4 	.word	0x200005f4
 8002c1c:	0800b958 	.word	0x0800b958
 8002c20:	200004a8 	.word	0x200004a8
 8002c24:	0800bb4c 	.word	0x0800bb4c
 8002c28:	200003d4 	.word	0x200003d4
 8002c2c:	0800b968 	.word	0x0800b968
 8002c30:	200005dc 	.word	0x200005dc
 8002c34:	200005e0 	.word	0x200005e0

08002c38 <handle_requestGpsInfo>:

static void handle_requestGpsInfo(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsInfo_state)) {
 8002c3c:	48a9      	ldr	r0, [pc, #676]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002c3e:	f7ff f970 	bl	8001f22 <fsmManager_getState>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	f200 8127 	bhi.w	8002e98 <handle_requestGpsInfo+0x260>
 8002c4a:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <handle_requestGpsInfo+0x18>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c69 	.word	0x08002c69
 8002c54:	08002c99 	.word	0x08002c99
 8002c58:	08002ce5 	.word	0x08002ce5
 8002c5c:	08002d5d 	.word	0x08002d5d
 8002c60:	08002da9 	.word	0x08002da9
 8002c64:	08002e57 	.word	0x08002e57
		case __gsmModule_requestGpsInfo_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002c68:	489e      	ldr	r0, [pc, #632]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002c6a:	f7ff f965 	bl	8001f38 <fsmManager_isStateIn>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <handle_requestGpsInfo+0x42>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002c74:	489b      	ldr	r0, [pc, #620]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002c76:	f7ff f975 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsstatus);
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4899      	ldr	r0, [pc, #612]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002c7e:	f7ff f939 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002c82:	4898      	ldr	r0, [pc, #608]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002c84:	f7ff f963 	bl	8001f4e <fsmManager_isStateOut>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 811b 	beq.w	8002ec6 <handle_requestGpsInfo+0x28e>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002c90:	4894      	ldr	r0, [pc, #592]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002c92:	f7ff f976 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002c96:	e116      	b.n	8002ec6 <handle_requestGpsInfo+0x28e>



		case __gsmModule_requestGpsInfo_send_atCgpsstatus:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002c98:	4892      	ldr	r0, [pc, #584]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002c9a:	f7ff f94d 	bl	8001f38 <fsmManager_isStateIn>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <handle_requestGpsInfo+0x7c>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002ca4:	488f      	ldr	r0, [pc, #572]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002ca6:	f7ff f95d 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 10000);
 8002caa:	f242 7110 	movw	r1, #10000	; 0x2710
 8002cae:	488e      	ldr	r0, [pc, #568]	; (8002ee8 <handle_requestGpsInfo+0x2b0>)
 8002cb0:	f002 fa08 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002cb4:	488c      	ldr	r0, [pc, #560]	; (8002ee8 <handle_requestGpsInfo+0x2b0>)
 8002cb6:	f002 fa19 	bl	80050ec <softTimer_expired>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <handle_requestGpsInfo+0x96>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsstatus);
 8002cc0:	488a      	ldr	r0, [pc, #552]	; (8002eec <handle_requestGpsInfo+0x2b4>)
 8002cc2:	f001 fd23 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_check_atCgpsstatus);
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4886      	ldr	r0, [pc, #536]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002cca:	f7ff f913 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002cce:	4885      	ldr	r0, [pc, #532]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002cd0:	f7ff f93d 	bl	8001f4e <fsmManager_isStateOut>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80f7 	beq.w	8002eca <handle_requestGpsInfo+0x292>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002cdc:	4881      	ldr	r0, [pc, #516]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002cde:	f7ff f950 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002ce2:	e0f2      	b.n	8002eca <handle_requestGpsInfo+0x292>



		case __gsmModule_requestGpsInfo_check_atCgpsstatus:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002ce4:	487f      	ldr	r0, [pc, #508]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002ce6:	f7ff f927 	bl	8001f38 <fsmManager_isStateIn>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <handle_requestGpsInfo+0xc8>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002cf0:	487c      	ldr	r0, [pc, #496]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002cf2:	f7ff f937 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002cf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002cfa:	487b      	ldr	r0, [pc, #492]	; (8002ee8 <handle_requestGpsInfo+0x2b0>)
 8002cfc:	f002 f9e2 	bl	80050c4 <softTimer_start>
			}


			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps2dFix, gsmRxDataChunkLen) ||
 8002d00:	4b7b      	ldr	r3, [pc, #492]	; (8002ef0 <handle_requestGpsInfo+0x2b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	497b      	ldr	r1, [pc, #492]	; (8002ef4 <handle_requestGpsInfo+0x2bc>)
 8002d08:	487b      	ldr	r0, [pc, #492]	; (8002ef8 <handle_requestGpsInfo+0x2c0>)
 8002d0a:	f003 f8dc 	bl	8005ec6 <string_containsWithinLength>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <handle_requestGpsInfo+0xf0>
			   string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps3dFix, gsmRxDataChunkLen)) {
 8002d14:	4b76      	ldr	r3, [pc, #472]	; (8002ef0 <handle_requestGpsInfo+0x2b8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4978      	ldr	r1, [pc, #480]	; (8002efc <handle_requestGpsInfo+0x2c4>)
 8002d1c:	4876      	ldr	r0, [pc, #472]	; (8002ef8 <handle_requestGpsInfo+0x2c0>)
 8002d1e:	f003 f8d2 	bl	8005ec6 <string_containsWithinLength>
 8002d22:	4603      	mov	r3, r0
			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps2dFix, gsmRxDataChunkLen) ||
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <handle_requestGpsInfo+0xfa>

				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsinf2);
 8002d28:	2103      	movs	r1, #3
 8002d2a:	486e      	ldr	r0, [pc, #440]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002d2c:	f7ff f8e2 	bl	8001ef4 <fsmManager_gotoState>
 8002d30:	e009      	b.n	8002d46 <handle_requestGpsInfo+0x10e>
			}
			else if(softTimer_expired(&timeout)) {
 8002d32:	486d      	ldr	r0, [pc, #436]	; (8002ee8 <handle_requestGpsInfo+0x2b0>)
 8002d34:	f002 f9da 	bl	80050ec <softTimer_expired>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <handle_requestGpsInfo+0x10e>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsstatus);
 8002d3e:	2101      	movs	r1, #1
 8002d40:	4868      	ldr	r0, [pc, #416]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002d42:	f7ff f8d7 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002d46:	4867      	ldr	r0, [pc, #412]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002d48:	f7ff f901 	bl	8001f4e <fsmManager_isStateOut>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80bd 	beq.w	8002ece <handle_requestGpsInfo+0x296>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002d54:	4863      	ldr	r0, [pc, #396]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002d56:	f7ff f914 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002d5a:	e0b8      	b.n	8002ece <handle_requestGpsInfo+0x296>



		case __gsmModule_requestGpsInfo_send_atCgpsinf2:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002d5c:	4861      	ldr	r0, [pc, #388]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002d5e:	f7ff f8eb 	bl	8001f38 <fsmManager_isStateIn>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <handle_requestGpsInfo+0x140>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002d68:	485e      	ldr	r0, [pc, #376]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002d6a:	f7ff f8fb 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 10000);
 8002d6e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002d72:	485d      	ldr	r0, [pc, #372]	; (8002ee8 <handle_requestGpsInfo+0x2b0>)
 8002d74:	f002 f9a6 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002d78:	485b      	ldr	r0, [pc, #364]	; (8002ee8 <handle_requestGpsInfo+0x2b0>)
 8002d7a:	f002 f9b7 	bl	80050ec <softTimer_expired>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <handle_requestGpsInfo+0x15a>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsinf2);
 8002d84:	485e      	ldr	r0, [pc, #376]	; (8002f00 <handle_requestGpsInfo+0x2c8>)
 8002d86:	f001 fcc1 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_get_atCgpsinf2);
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	4855      	ldr	r0, [pc, #340]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002d8e:	f7ff f8b1 	bl	8001ef4 <fsmManager_gotoState>

			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002d92:	4854      	ldr	r0, [pc, #336]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002d94:	f7ff f8db 	bl	8001f4e <fsmManager_isStateOut>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8099 	beq.w	8002ed2 <handle_requestGpsInfo+0x29a>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002da0:	4850      	ldr	r0, [pc, #320]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002da2:	f7ff f8ee 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002da6:	e094      	b.n	8002ed2 <handle_requestGpsInfo+0x29a>



		case __gsmModule_requestGpsInfo_get_atCgpsinf2:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002da8:	484e      	ldr	r0, [pc, #312]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002daa:	f7ff f8c5 	bl	8001f38 <fsmManager_isStateIn>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <handle_requestGpsInfo+0x18c>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002db4:	484b      	ldr	r0, [pc, #300]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002db6:	f7ff f8d5 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002dba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002dbe:	484a      	ldr	r0, [pc, #296]	; (8002ee8 <handle_requestGpsInfo+0x2b0>)
 8002dc0:	f002 f980 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gpsInf2, gsmRxDataChunkLen)) {
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <handle_requestGpsInfo+0x2b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	494e      	ldr	r1, [pc, #312]	; (8002f04 <handle_requestGpsInfo+0x2cc>)
 8002dcc:	484a      	ldr	r0, [pc, #296]	; (8002ef8 <handle_requestGpsInfo+0x2c0>)
 8002dce:	f003 f87a 	bl	8005ec6 <string_containsWithinLength>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d02a      	beq.n	8002e2e <handle_requestGpsInfo+0x1f6>
				countGpsInfo++;
 8002dd8:	4b4b      	ldr	r3, [pc, #300]	; (8002f08 <handle_requestGpsInfo+0x2d0>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <handle_requestGpsInfo+0x2d0>)
 8002de2:	701a      	strb	r2, [r3, #0]

				if(countGpsInfo >= COUNTGPSINFO_MAX) {
 8002de4:	4b48      	ldr	r3, [pc, #288]	; (8002f08 <handle_requestGpsInfo+0x2d0>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d91b      	bls.n	8002e24 <handle_requestGpsInfo+0x1ec>
					flags_gsmModule.bits.isGpsFixed = 1;
 8002dec:	4a47      	ldr	r2, [pc, #284]	; (8002f0c <handle_requestGpsInfo+0x2d4>)
 8002dee:	7853      	ldrb	r3, [r2, #1]
 8002df0:	f043 0310 	orr.w	r3, r3, #16
 8002df4:	7053      	strb	r3, [r2, #1]
					flags_gsmModule.bits.requestGpsInfo = 0;
 8002df6:	4a45      	ldr	r2, [pc, #276]	; (8002f0c <handle_requestGpsInfo+0x2d4>)
 8002df8:	7813      	ldrb	r3, [r2, #0]
 8002dfa:	f36f 03c3 	bfc	r3, #3, #1
 8002dfe:	7013      	strb	r3, [r2, #0]

					string_writeStr(gsmInfo, &gsmRxDataChunk[10]);
 8002e00:	4943      	ldr	r1, [pc, #268]	; (8002f10 <handle_requestGpsInfo+0x2d8>)
 8002e02:	4844      	ldr	r0, [pc, #272]	; (8002f14 <handle_requestGpsInfo+0x2dc>)
 8002e04:	f003 f808 	bl	8005e18 <string_writeStr>
					if(gsmModuleCallback != NULL) {
 8002e08:	4b43      	ldr	r3, [pc, #268]	; (8002f18 <handle_requestGpsInfo+0x2e0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <handle_requestGpsInfo+0x1e2>
						gsmModuleCallback(__gsmModuleEvent_okGpsInfo, (uint8_t *) gsmInfo);
 8002e10:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <handle_requestGpsInfo+0x2e0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	493f      	ldr	r1, [pc, #252]	; (8002f14 <handle_requestGpsInfo+0x2dc>)
 8002e16:	2000      	movs	r0, #0
 8002e18:	4798      	blx	r3
					}

					fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4831      	ldr	r0, [pc, #196]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002e1e:	f7ff f869 	bl	8001ef4 <fsmManager_gotoState>
 8002e22:	e00e      	b.n	8002e42 <handle_requestGpsInfo+0x20a>
				}
				else {
					fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsinf2);
 8002e24:	2103      	movs	r1, #3
 8002e26:	482f      	ldr	r0, [pc, #188]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002e28:	f7ff f864 	bl	8001ef4 <fsmManager_gotoState>
 8002e2c:	e009      	b.n	8002e42 <handle_requestGpsInfo+0x20a>
				}
			}
			else if(softTimer_expired(&timeout)) {
 8002e2e:	482e      	ldr	r0, [pc, #184]	; (8002ee8 <handle_requestGpsInfo+0x2b0>)
 8002e30:	f002 f95c 	bl	80050ec <softTimer_expired>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <handle_requestGpsInfo+0x20a>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsinf2);
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	4829      	ldr	r0, [pc, #164]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002e3e:	f7ff f859 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002e42:	4828      	ldr	r0, [pc, #160]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002e44:	f7ff f883 	bl	8001f4e <fsmManager_isStateOut>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d043      	beq.n	8002ed6 <handle_requestGpsInfo+0x29e>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002e4e:	4825      	ldr	r0, [pc, #148]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002e50:	f7ff f897 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002e54:	e03f      	b.n	8002ed6 <handle_requestGpsInfo+0x29e>



		case __gsmModule_requestGpsInfo_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002e56:	4823      	ldr	r0, [pc, #140]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002e58:	f7ff f86e 	bl	8001f38 <fsmManager_isStateIn>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <handle_requestGpsInfo+0x230>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002e62:	4820      	ldr	r0, [pc, #128]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002e64:	f7ff f87e 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestGpsInfo = 0;
 8002e68:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <handle_requestGpsInfo+0x2d4>)
 8002e6a:	7813      	ldrb	r3, [r2, #0]
 8002e6c:	f36f 03c3 	bfc	r3, #3, #1
 8002e70:	7013      	strb	r3, [r2, #0]
			flags_gsmModuleError.bits.gpsInfo = 1;
 8002e72:	4a2a      	ldr	r2, [pc, #168]	; (8002f1c <handle_requestGpsInfo+0x2e4>)
 8002e74:	7813      	ldrb	r3, [r2, #0]
 8002e76:	f043 0308 	orr.w	r3, r3, #8
 8002e7a:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4819      	ldr	r0, [pc, #100]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002e80:	f7ff f838 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002e84:	4817      	ldr	r0, [pc, #92]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002e86:	f7ff f862 	bl	8001f4e <fsmManager_isStateOut>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d024      	beq.n	8002eda <handle_requestGpsInfo+0x2a2>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002e90:	4814      	ldr	r0, [pc, #80]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002e92:	f7ff f876 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002e96:	e020      	b.n	8002eda <handle_requestGpsInfo+0x2a2>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002e98:	4812      	ldr	r0, [pc, #72]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002e9a:	f7ff f84d 	bl	8001f38 <fsmManager_isStateIn>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <handle_requestGpsInfo+0x272>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002ea4:	480f      	ldr	r0, [pc, #60]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002ea6:	f7ff f85d 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8002eaa:	2100      	movs	r1, #0
 8002eac:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002eae:	f7ff f821 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002eb2:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002eb4:	f7ff f84b 	bl	8001f4e <fsmManager_isStateOut>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00f      	beq.n	8002ede <handle_requestGpsInfo+0x2a6>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002ebe:	4809      	ldr	r0, [pc, #36]	; (8002ee4 <handle_requestGpsInfo+0x2ac>)
 8002ec0:	f7ff f85f 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002ec4:	e00b      	b.n	8002ede <handle_requestGpsInfo+0x2a6>
			break;
 8002ec6:	bf00      	nop
 8002ec8:	e00a      	b.n	8002ee0 <handle_requestGpsInfo+0x2a8>
			break;
 8002eca:	bf00      	nop
 8002ecc:	e008      	b.n	8002ee0 <handle_requestGpsInfo+0x2a8>
			break;
 8002ece:	bf00      	nop
 8002ed0:	e006      	b.n	8002ee0 <handle_requestGpsInfo+0x2a8>
			break;
 8002ed2:	bf00      	nop
 8002ed4:	e004      	b.n	8002ee0 <handle_requestGpsInfo+0x2a8>
			break;
 8002ed6:	bf00      	nop
 8002ed8:	e002      	b.n	8002ee0 <handle_requestGpsInfo+0x2a8>
			break;
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <handle_requestGpsInfo+0x2a8>
			break;
 8002ede:	bf00      	nop
	}
}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000624 	.word	0x20000624
 8002ee8:	200005f4 	.word	0x200005f4
 8002eec:	0800b988 	.word	0x0800b988
 8002ef0:	200004a8 	.word	0x200004a8
 8002ef4:	0800bbb0 	.word	0x0800bbb0
 8002ef8:	200003d4 	.word	0x200003d4
 8002efc:	0800bbb8 	.word	0x0800bbb8
 8002f00:	0800b99c 	.word	0x0800b99c
 8002f04:	0800bbc0 	.word	0x0800bbc0
 8002f08:	200004ac 	.word	0x200004ac
 8002f0c:	200005dc 	.word	0x200005dc
 8002f10:	200003de 	.word	0x200003de
 8002f14:	20000578 	.word	0x20000578
 8002f18:	2000066c 	.word	0x2000066c
 8002f1c:	200005e0 	.word	0x200005e0

08002f20 <handle_requestGpsOff>:

static void handle_requestGpsOff(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsOff_state)) {
 8002f24:	48c0      	ldr	r0, [pc, #768]	; (8003228 <handle_requestGpsOff+0x308>)
 8002f26:	f7fe fffc 	bl	8001f22 <fsmManager_getState>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b07      	cmp	r3, #7
 8002f2e:	f200 815a 	bhi.w	80031e6 <handle_requestGpsOff+0x2c6>
 8002f32:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <handle_requestGpsOff+0x18>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f59 	.word	0x08002f59
 8002f3c:	08002f89 	.word	0x08002f89
 8002f40:	08002fd5 	.word	0x08002fd5
 8002f44:	08003037 	.word	0x08003037
 8002f48:	08003083 	.word	0x08003083
 8002f4c:	080030e5 	.word	0x080030e5
 8002f50:	08003131 	.word	0x08003131
 8002f54:	080031a5 	.word	0x080031a5
		case __gsmModule_requestGpsOff_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002f58:	48b3      	ldr	r0, [pc, #716]	; (8003228 <handle_requestGpsOff+0x308>)
 8002f5a:	f7fe ffed 	bl	8001f38 <fsmManager_isStateIn>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <handle_requestGpsOff+0x4a>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002f64:	48b0      	ldr	r0, [pc, #704]	; (8003228 <handle_requestGpsOff+0x308>)
 8002f66:	f7fe fffd 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst0);
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	48ae      	ldr	r0, [pc, #696]	; (8003228 <handle_requestGpsOff+0x308>)
 8002f6e:	f7fe ffc1 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002f72:	48ad      	ldr	r0, [pc, #692]	; (8003228 <handle_requestGpsOff+0x308>)
 8002f74:	f7fe ffeb 	bl	8001f4e <fsmManager_isStateOut>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 814a 	beq.w	8003214 <handle_requestGpsOff+0x2f4>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002f80:	48a9      	ldr	r0, [pc, #676]	; (8003228 <handle_requestGpsOff+0x308>)
 8002f82:	f7fe fffe 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002f86:	e145      	b.n	8003214 <handle_requestGpsOff+0x2f4>



		case __gsmModule_requestGpsOff_send_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002f88:	48a7      	ldr	r0, [pc, #668]	; (8003228 <handle_requestGpsOff+0x308>)
 8002f8a:	f7fe ffd5 	bl	8001f38 <fsmManager_isStateIn>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <handle_requestGpsOff+0x84>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002f94:	48a4      	ldr	r0, [pc, #656]	; (8003228 <handle_requestGpsOff+0x308>)
 8002f96:	f7fe ffe5 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002f9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f9e:	48a3      	ldr	r0, [pc, #652]	; (800322c <handle_requestGpsOff+0x30c>)
 8002fa0:	f002 f890 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002fa4:	48a1      	ldr	r0, [pc, #644]	; (800322c <handle_requestGpsOff+0x30c>)
 8002fa6:	f002 f8a1 	bl	80050ec <softTimer_expired>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <handle_requestGpsOff+0x9e>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst0);
 8002fb0:	489f      	ldr	r0, [pc, #636]	; (8003230 <handle_requestGpsOff+0x310>)
 8002fb2:	f001 fbab 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpsrst0);
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	489b      	ldr	r0, [pc, #620]	; (8003228 <handle_requestGpsOff+0x308>)
 8002fba:	f7fe ff9b 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002fbe:	489a      	ldr	r0, [pc, #616]	; (8003228 <handle_requestGpsOff+0x308>)
 8002fc0:	f7fe ffc5 	bl	8001f4e <fsmManager_isStateOut>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8126 	beq.w	8003218 <handle_requestGpsOff+0x2f8>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002fcc:	4896      	ldr	r0, [pc, #600]	; (8003228 <handle_requestGpsOff+0x308>)
 8002fce:	f7fe ffd8 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8002fd2:	e121      	b.n	8003218 <handle_requestGpsOff+0x2f8>



		case __gsmModule_requestGpsOff_waitOk_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002fd4:	4894      	ldr	r0, [pc, #592]	; (8003228 <handle_requestGpsOff+0x308>)
 8002fd6:	f7fe ffaf 	bl	8001f38 <fsmManager_isStateIn>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d006      	beq.n	8002fee <handle_requestGpsOff+0xce>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002fe0:	4891      	ldr	r0, [pc, #580]	; (8003228 <handle_requestGpsOff+0x308>)
 8002fe2:	f7fe ffbf 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002fe6:	2164      	movs	r1, #100	; 0x64
 8002fe8:	4890      	ldr	r0, [pc, #576]	; (800322c <handle_requestGpsOff+0x30c>)
 8002fea:	f002 f86b 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002fee:	4b91      	ldr	r3, [pc, #580]	; (8003234 <handle_requestGpsOff+0x314>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4990      	ldr	r1, [pc, #576]	; (8003238 <handle_requestGpsOff+0x318>)
 8002ff6:	4891      	ldr	r0, [pc, #580]	; (800323c <handle_requestGpsOff+0x31c>)
 8002ff8:	f002 ff65 	bl	8005ec6 <string_containsWithinLength>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <handle_requestGpsOff+0xec>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst1);
 8003002:	2103      	movs	r1, #3
 8003004:	4888      	ldr	r0, [pc, #544]	; (8003228 <handle_requestGpsOff+0x308>)
 8003006:	f7fe ff75 	bl	8001ef4 <fsmManager_gotoState>
 800300a:	e009      	b.n	8003020 <handle_requestGpsOff+0x100>
			}
			else if(softTimer_expired(&timeout)) {
 800300c:	4887      	ldr	r0, [pc, #540]	; (800322c <handle_requestGpsOff+0x30c>)
 800300e:	f002 f86d 	bl	80050ec <softTimer_expired>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <handle_requestGpsOff+0x100>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst0);
 8003018:	2101      	movs	r1, #1
 800301a:	4883      	ldr	r0, [pc, #524]	; (8003228 <handle_requestGpsOff+0x308>)
 800301c:	f7fe ff6a 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8003020:	4881      	ldr	r0, [pc, #516]	; (8003228 <handle_requestGpsOff+0x308>)
 8003022:	f7fe ff94 	bl	8001f4e <fsmManager_isStateOut>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80f7 	beq.w	800321c <handle_requestGpsOff+0x2fc>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 800302e:	487e      	ldr	r0, [pc, #504]	; (8003228 <handle_requestGpsOff+0x308>)
 8003030:	f7fe ffa7 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003034:	e0f2      	b.n	800321c <handle_requestGpsOff+0x2fc>



		case __gsmModule_requestGpsOff_send_atCgpsrst1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8003036:	487c      	ldr	r0, [pc, #496]	; (8003228 <handle_requestGpsOff+0x308>)
 8003038:	f7fe ff7e 	bl	8001f38 <fsmManager_isStateIn>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <handle_requestGpsOff+0x132>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8003042:	4879      	ldr	r0, [pc, #484]	; (8003228 <handle_requestGpsOff+0x308>)
 8003044:	f7fe ff8e 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8003048:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800304c:	4877      	ldr	r0, [pc, #476]	; (800322c <handle_requestGpsOff+0x30c>)
 800304e:	f002 f839 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003052:	4876      	ldr	r0, [pc, #472]	; (800322c <handle_requestGpsOff+0x30c>)
 8003054:	f002 f84a 	bl	80050ec <softTimer_expired>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d006      	beq.n	800306c <handle_requestGpsOff+0x14c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst1);
 800305e:	4878      	ldr	r0, [pc, #480]	; (8003240 <handle_requestGpsOff+0x320>)
 8003060:	f001 fb54 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpsrst1);
 8003064:	2104      	movs	r1, #4
 8003066:	4870      	ldr	r0, [pc, #448]	; (8003228 <handle_requestGpsOff+0x308>)
 8003068:	f7fe ff44 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 800306c:	486e      	ldr	r0, [pc, #440]	; (8003228 <handle_requestGpsOff+0x308>)
 800306e:	f7fe ff6e 	bl	8001f4e <fsmManager_isStateOut>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80d3 	beq.w	8003220 <handle_requestGpsOff+0x300>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 800307a:	486b      	ldr	r0, [pc, #428]	; (8003228 <handle_requestGpsOff+0x308>)
 800307c:	f7fe ff81 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003080:	e0ce      	b.n	8003220 <handle_requestGpsOff+0x300>



		case __gsmModule_requestGpsOff_waitOk_atCgpsrst1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8003082:	4869      	ldr	r0, [pc, #420]	; (8003228 <handle_requestGpsOff+0x308>)
 8003084:	f7fe ff58 	bl	8001f38 <fsmManager_isStateIn>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d006      	beq.n	800309c <handle_requestGpsOff+0x17c>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 800308e:	4866      	ldr	r0, [pc, #408]	; (8003228 <handle_requestGpsOff+0x308>)
 8003090:	f7fe ff68 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003094:	2164      	movs	r1, #100	; 0x64
 8003096:	4865      	ldr	r0, [pc, #404]	; (800322c <handle_requestGpsOff+0x30c>)
 8003098:	f002 f814 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800309c:	4b65      	ldr	r3, [pc, #404]	; (8003234 <handle_requestGpsOff+0x314>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4965      	ldr	r1, [pc, #404]	; (8003238 <handle_requestGpsOff+0x318>)
 80030a4:	4865      	ldr	r0, [pc, #404]	; (800323c <handle_requestGpsOff+0x31c>)
 80030a6:	f002 ff0e 	bl	8005ec6 <string_containsWithinLength>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <handle_requestGpsOff+0x19a>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpspwr0);
 80030b0:	2105      	movs	r1, #5
 80030b2:	485d      	ldr	r0, [pc, #372]	; (8003228 <handle_requestGpsOff+0x308>)
 80030b4:	f7fe ff1e 	bl	8001ef4 <fsmManager_gotoState>
 80030b8:	e009      	b.n	80030ce <handle_requestGpsOff+0x1ae>
			}
			else if(softTimer_expired(&timeout)) {
 80030ba:	485c      	ldr	r0, [pc, #368]	; (800322c <handle_requestGpsOff+0x30c>)
 80030bc:	f002 f816 	bl	80050ec <softTimer_expired>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <handle_requestGpsOff+0x1ae>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst1);
 80030c6:	2103      	movs	r1, #3
 80030c8:	4857      	ldr	r0, [pc, #348]	; (8003228 <handle_requestGpsOff+0x308>)
 80030ca:	f7fe ff13 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 80030ce:	4856      	ldr	r0, [pc, #344]	; (8003228 <handle_requestGpsOff+0x308>)
 80030d0:	f7fe ff3d 	bl	8001f4e <fsmManager_isStateOut>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80a4 	beq.w	8003224 <handle_requestGpsOff+0x304>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 80030dc:	4852      	ldr	r0, [pc, #328]	; (8003228 <handle_requestGpsOff+0x308>)
 80030de:	f7fe ff50 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80030e2:	e09f      	b.n	8003224 <handle_requestGpsOff+0x304>



		case __gsmModule_requestGpsOff_send_atCgpspwr0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 80030e4:	4850      	ldr	r0, [pc, #320]	; (8003228 <handle_requestGpsOff+0x308>)
 80030e6:	f7fe ff27 	bl	8001f38 <fsmManager_isStateIn>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <handle_requestGpsOff+0x1e0>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 80030f0:	484d      	ldr	r0, [pc, #308]	; (8003228 <handle_requestGpsOff+0x308>)
 80030f2:	f7fe ff37 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 80030f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030fa:	484c      	ldr	r0, [pc, #304]	; (800322c <handle_requestGpsOff+0x30c>)
 80030fc:	f001 ffe2 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003100:	484a      	ldr	r0, [pc, #296]	; (800322c <handle_requestGpsOff+0x30c>)
 8003102:	f001 fff3 	bl	80050ec <softTimer_expired>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d006      	beq.n	800311a <handle_requestGpsOff+0x1fa>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpspwr1);
 800310c:	484d      	ldr	r0, [pc, #308]	; (8003244 <handle_requestGpsOff+0x324>)
 800310e:	f001 fafd 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpspwr0);
 8003112:	2106      	movs	r1, #6
 8003114:	4844      	ldr	r0, [pc, #272]	; (8003228 <handle_requestGpsOff+0x308>)
 8003116:	f7fe feed 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 800311a:	4843      	ldr	r0, [pc, #268]	; (8003228 <handle_requestGpsOff+0x308>)
 800311c:	f7fe ff17 	bl	8001f4e <fsmManager_isStateOut>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8094 	beq.w	8003250 <handle_requestGpsOff+0x330>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8003128:	483f      	ldr	r0, [pc, #252]	; (8003228 <handle_requestGpsOff+0x308>)
 800312a:	f7fe ff2a 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800312e:	e08f      	b.n	8003250 <handle_requestGpsOff+0x330>



		case __gsmModule_requestGpsOff_waitOk_atCgpspwr0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8003130:	483d      	ldr	r0, [pc, #244]	; (8003228 <handle_requestGpsOff+0x308>)
 8003132:	f7fe ff01 	bl	8001f38 <fsmManager_isStateIn>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d006      	beq.n	800314a <handle_requestGpsOff+0x22a>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 800313c:	483a      	ldr	r0, [pc, #232]	; (8003228 <handle_requestGpsOff+0x308>)
 800313e:	f7fe ff11 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003142:	2164      	movs	r1, #100	; 0x64
 8003144:	4839      	ldr	r0, [pc, #228]	; (800322c <handle_requestGpsOff+0x30c>)
 8003146:	f001 ffbd 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800314a:	4b3a      	ldr	r3, [pc, #232]	; (8003234 <handle_requestGpsOff+0x314>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	4939      	ldr	r1, [pc, #228]	; (8003238 <handle_requestGpsOff+0x318>)
 8003152:	483a      	ldr	r0, [pc, #232]	; (800323c <handle_requestGpsOff+0x31c>)
 8003154:	f002 feb7 	bl	8005ec6 <string_containsWithinLength>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00e      	beq.n	800317c <handle_requestGpsOff+0x25c>
				flags_gsmModule.bits.requestGpsOff = 0;
 800315e:	4a3a      	ldr	r2, [pc, #232]	; (8003248 <handle_requestGpsOff+0x328>)
 8003160:	7813      	ldrb	r3, [r2, #0]
 8003162:	f36f 1304 	bfc	r3, #4, #1
 8003166:	7013      	strb	r3, [r2, #0]
				flags_gsmModule.bits.isGpsOn = 0;
 8003168:	4a37      	ldr	r2, [pc, #220]	; (8003248 <handle_requestGpsOff+0x328>)
 800316a:	7853      	ldrb	r3, [r2, #1]
 800316c:	f36f 03c3 	bfc	r3, #3, #1
 8003170:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_idle);
 8003172:	2100      	movs	r1, #0
 8003174:	482c      	ldr	r0, [pc, #176]	; (8003228 <handle_requestGpsOff+0x308>)
 8003176:	f7fe febd 	bl	8001ef4 <fsmManager_gotoState>
 800317a:	e009      	b.n	8003190 <handle_requestGpsOff+0x270>
			}
			else if(softTimer_expired(&timeout)) {
 800317c:	482b      	ldr	r0, [pc, #172]	; (800322c <handle_requestGpsOff+0x30c>)
 800317e:	f001 ffb5 	bl	80050ec <softTimer_expired>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <handle_requestGpsOff+0x270>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpspwr0);
 8003188:	2105      	movs	r1, #5
 800318a:	4827      	ldr	r0, [pc, #156]	; (8003228 <handle_requestGpsOff+0x308>)
 800318c:	f7fe feb2 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8003190:	4825      	ldr	r0, [pc, #148]	; (8003228 <handle_requestGpsOff+0x308>)
 8003192:	f7fe fedc 	bl	8001f4e <fsmManager_isStateOut>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d05b      	beq.n	8003254 <handle_requestGpsOff+0x334>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 800319c:	4822      	ldr	r0, [pc, #136]	; (8003228 <handle_requestGpsOff+0x308>)
 800319e:	f7fe fef0 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80031a2:	e057      	b.n	8003254 <handle_requestGpsOff+0x334>



		case __gsmModule_requestGpsOff_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 80031a4:	4820      	ldr	r0, [pc, #128]	; (8003228 <handle_requestGpsOff+0x308>)
 80031a6:	f7fe fec7 	bl	8001f38 <fsmManager_isStateIn>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <handle_requestGpsOff+0x296>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 80031b0:	481d      	ldr	r0, [pc, #116]	; (8003228 <handle_requestGpsOff+0x308>)
 80031b2:	f7fe fed7 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.gpsOff = 1;
 80031b6:	4a25      	ldr	r2, [pc, #148]	; (800324c <handle_requestGpsOff+0x32c>)
 80031b8:	7813      	ldrb	r3, [r2, #0]
 80031ba:	f043 0310 	orr.w	r3, r3, #16
 80031be:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestGpsOff = 0;
 80031c0:	4a21      	ldr	r2, [pc, #132]	; (8003248 <handle_requestGpsOff+0x328>)
 80031c2:	7813      	ldrb	r3, [r2, #0]
 80031c4:	f36f 1304 	bfc	r3, #4, #1
 80031c8:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOn_idle);
 80031ca:	2100      	movs	r1, #0
 80031cc:	4816      	ldr	r0, [pc, #88]	; (8003228 <handle_requestGpsOff+0x308>)
 80031ce:	f7fe fe91 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 80031d2:	4815      	ldr	r0, [pc, #84]	; (8003228 <handle_requestGpsOff+0x308>)
 80031d4:	f7fe febb 	bl	8001f4e <fsmManager_isStateOut>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d03c      	beq.n	8003258 <handle_requestGpsOff+0x338>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 80031de:	4812      	ldr	r0, [pc, #72]	; (8003228 <handle_requestGpsOff+0x308>)
 80031e0:	f7fe fecf 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80031e4:	e038      	b.n	8003258 <handle_requestGpsOff+0x338>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 80031e6:	4810      	ldr	r0, [pc, #64]	; (8003228 <handle_requestGpsOff+0x308>)
 80031e8:	f7fe fea6 	bl	8001f38 <fsmManager_isStateIn>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <handle_requestGpsOff+0x2d8>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 80031f2:	480d      	ldr	r0, [pc, #52]	; (8003228 <handle_requestGpsOff+0x308>)
 80031f4:	f7fe feb6 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOn_idle);
 80031f8:	2100      	movs	r1, #0
 80031fa:	480b      	ldr	r0, [pc, #44]	; (8003228 <handle_requestGpsOff+0x308>)
 80031fc:	f7fe fe7a 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8003200:	4809      	ldr	r0, [pc, #36]	; (8003228 <handle_requestGpsOff+0x308>)
 8003202:	f7fe fea4 	bl	8001f4e <fsmManager_isStateOut>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d027      	beq.n	800325c <handle_requestGpsOff+0x33c>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 800320c:	4806      	ldr	r0, [pc, #24]	; (8003228 <handle_requestGpsOff+0x308>)
 800320e:	f7fe feb8 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003212:	e023      	b.n	800325c <handle_requestGpsOff+0x33c>
			break;
 8003214:	bf00      	nop
 8003216:	e022      	b.n	800325e <handle_requestGpsOff+0x33e>
			break;
 8003218:	bf00      	nop
 800321a:	e020      	b.n	800325e <handle_requestGpsOff+0x33e>
			break;
 800321c:	bf00      	nop
 800321e:	e01e      	b.n	800325e <handle_requestGpsOff+0x33e>
			break;
 8003220:	bf00      	nop
 8003222:	e01c      	b.n	800325e <handle_requestGpsOff+0x33e>
			break;
 8003224:	bf00      	nop
 8003226:	e01a      	b.n	800325e <handle_requestGpsOff+0x33e>
 8003228:	20000630 	.word	0x20000630
 800322c:	200005f4 	.word	0x200005f4
 8003230:	0800b968 	.word	0x0800b968
 8003234:	200004a8 	.word	0x200004a8
 8003238:	0800bb4c 	.word	0x0800bb4c
 800323c:	200003d4 	.word	0x200003d4
 8003240:	0800b978 	.word	0x0800b978
 8003244:	0800b958 	.word	0x0800b958
 8003248:	200005dc 	.word	0x200005dc
 800324c:	200005e0 	.word	0x200005e0
			break;
 8003250:	bf00      	nop
 8003252:	e004      	b.n	800325e <handle_requestGpsOff+0x33e>
			break;
 8003254:	bf00      	nop
 8003256:	e002      	b.n	800325e <handle_requestGpsOff+0x33e>
			break;
 8003258:	bf00      	nop
 800325a:	e000      	b.n	800325e <handle_requestGpsOff+0x33e>
			break;
 800325c:	bf00      	nop
	}
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop

08003264 <handle_requestServerConnection>:

static void handle_requestServerConnection(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerConnection_state)) {
 8003268:	48c8      	ldr	r0, [pc, #800]	; (800358c <handle_requestServerConnection+0x328>)
 800326a:	f7fe fe5a 	bl	8001f22 <fsmManager_getState>
 800326e:	4603      	mov	r3, r0
 8003270:	2b22      	cmp	r3, #34	; 0x22
 8003272:	f200 86bc 	bhi.w	8003fee <handle_requestServerConnection+0xd8a>
 8003276:	a201      	add	r2, pc, #4	; (adr r2, 800327c <handle_requestServerConnection+0x18>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	08003309 	.word	0x08003309
 8003280:	0800333b 	.word	0x0800333b
 8003284:	08003373 	.word	0x08003373
 8003288:	080033d7 	.word	0x080033d7
 800328c:	08003425 	.word	0x08003425
 8003290:	0800348b 	.word	0x0800348b
 8003294:	080034d9 	.word	0x080034d9
 8003298:	0800353f 	.word	0x0800353f
 800329c:	080035b1 	.word	0x080035b1
 80032a0:	08003635 	.word	0x08003635
 80032a4:	08003683 	.word	0x08003683
 80032a8:	080036e9 	.word	0x080036e9
 80032ac:	08003fef 	.word	0x08003fef
 80032b0:	08003737 	.word	0x08003737
 80032b4:	0800379d 	.word	0x0800379d
 80032b8:	080037eb 	.word	0x080037eb
 80032bc:	0800386d 	.word	0x0800386d
 80032c0:	080038ed 	.word	0x080038ed
 80032c4:	080039a5 	.word	0x080039a5
 80032c8:	080039f1 	.word	0x080039f1
 80032cc:	08003a55 	.word	0x08003a55
 80032d0:	08003aa9 	.word	0x08003aa9
 80032d4:	08003b0d 	.word	0x08003b0d
 80032d8:	08003b61 	.word	0x08003b61
 80032dc:	08003bf5 	.word	0x08003bf5
 80032e0:	08003c49 	.word	0x08003c49
 80032e4:	08003cad 	.word	0x08003cad
 80032e8:	08003cf9 	.word	0x08003cf9
 80032ec:	08003d5d 	.word	0x08003d5d
 80032f0:	08003da9 	.word	0x08003da9
 80032f4:	08003e0d 	.word	0x08003e0d
 80032f8:	08003e59 	.word	0x08003e59
 80032fc:	08003ee9 	.word	0x08003ee9
 8003300:	08003f35 	.word	0x08003f35
 8003304:	08003fad 	.word	0x08003fad
		case __gsmModule_requestServerConnection_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003308:	48a0      	ldr	r0, [pc, #640]	; (800358c <handle_requestServerConnection+0x328>)
 800330a:	f7fe fe15 	bl	8001f38 <fsmManager_isStateIn>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <handle_requestServerConnection+0xb6>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003314:	489d      	ldr	r0, [pc, #628]	; (800358c <handle_requestServerConnection+0x328>)
 8003316:	f7fe fe25 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCmee1);
 800331a:	2101      	movs	r1, #1
 800331c:	489b      	ldr	r0, [pc, #620]	; (800358c <handle_requestServerConnection+0x328>)
 800331e:	f7fe fde9 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003322:	489a      	ldr	r0, [pc, #616]	; (800358c <handle_requestServerConnection+0x328>)
 8003324:	f7fe fe13 	bl	8001f4e <fsmManager_isStateOut>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 867b 	beq.w	8004026 <handle_requestServerConnection+0xdc2>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003330:	4896      	ldr	r0, [pc, #600]	; (800358c <handle_requestServerConnection+0x328>)
 8003332:	f7fe fe26 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003336:	f000 be76 	b.w	8004026 <handle_requestServerConnection+0xdc2>



		case __gsmModule_requestServerConnection_send_atCmee1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800333a:	4894      	ldr	r0, [pc, #592]	; (800358c <handle_requestServerConnection+0x328>)
 800333c:	f7fe fdfc 	bl	8001f38 <fsmManager_isStateIn>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <handle_requestServerConnection+0xe8>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003346:	4891      	ldr	r0, [pc, #580]	; (800358c <handle_requestServerConnection+0x328>)
 8003348:	f7fe fe0c 	bl	8001f64 <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_atcmee1);
 800334c:	4890      	ldr	r0, [pc, #576]	; (8003590 <handle_requestServerConnection+0x32c>)
 800334e:	f001 f9dd 	bl	800470c <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCmee1);
 8003352:	2102      	movs	r1, #2
 8003354:	488d      	ldr	r0, [pc, #564]	; (800358c <handle_requestServerConnection+0x328>)
 8003356:	f7fe fdcd 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800335a:	488c      	ldr	r0, [pc, #560]	; (800358c <handle_requestServerConnection+0x328>)
 800335c:	f7fe fdf7 	bl	8001f4e <fsmManager_isStateOut>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8661 	beq.w	800402a <handle_requestServerConnection+0xdc6>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003368:	4888      	ldr	r0, [pc, #544]	; (800358c <handle_requestServerConnection+0x328>)
 800336a:	f7fe fe0a 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800336e:	f000 be5c 	b.w	800402a <handle_requestServerConnection+0xdc6>



		case __gsmModule_requestServerConnection_waitOk_atCmee1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003372:	4886      	ldr	r0, [pc, #536]	; (800358c <handle_requestServerConnection+0x328>)
 8003374:	f7fe fde0 	bl	8001f38 <fsmManager_isStateIn>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <handle_requestServerConnection+0x128>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800337e:	4883      	ldr	r0, [pc, #524]	; (800358c <handle_requestServerConnection+0x328>)
 8003380:	f7fe fdf0 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003384:	2164      	movs	r1, #100	; 0x64
 8003386:	4883      	ldr	r0, [pc, #524]	; (8003594 <handle_requestServerConnection+0x330>)
 8003388:	f001 fe9c 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800338c:	4b82      	ldr	r3, [pc, #520]	; (8003598 <handle_requestServerConnection+0x334>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4982      	ldr	r1, [pc, #520]	; (800359c <handle_requestServerConnection+0x338>)
 8003394:	4882      	ldr	r0, [pc, #520]	; (80035a0 <handle_requestServerConnection+0x33c>)
 8003396:	f002 fd96 	bl	8005ec6 <string_containsWithinLength>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d004      	beq.n	80033aa <handle_requestServerConnection+0x146>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun0);
 80033a0:	2103      	movs	r1, #3
 80033a2:	487a      	ldr	r0, [pc, #488]	; (800358c <handle_requestServerConnection+0x328>)
 80033a4:	f7fe fda6 	bl	8001ef4 <fsmManager_gotoState>
 80033a8:	e009      	b.n	80033be <handle_requestServerConnection+0x15a>
			}
			else if(softTimer_expired(&timeout)) {
 80033aa:	487a      	ldr	r0, [pc, #488]	; (8003594 <handle_requestServerConnection+0x330>)
 80033ac:	f001 fe9e 	bl	80050ec <softTimer_expired>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <handle_requestServerConnection+0x15a>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun0);
 80033b6:	2103      	movs	r1, #3
 80033b8:	4874      	ldr	r0, [pc, #464]	; (800358c <handle_requestServerConnection+0x328>)
 80033ba:	f7fe fd9b 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80033be:	4873      	ldr	r0, [pc, #460]	; (800358c <handle_requestServerConnection+0x328>)
 80033c0:	f7fe fdc5 	bl	8001f4e <fsmManager_isStateOut>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8631 	beq.w	800402e <handle_requestServerConnection+0xdca>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80033cc:	486f      	ldr	r0, [pc, #444]	; (800358c <handle_requestServerConnection+0x328>)
 80033ce:	f7fe fdd8 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80033d2:	f000 be2c 	b.w	800402e <handle_requestServerConnection+0xdca>



		case __gsmModule_requestServerConnection_send_atCfun0:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80033d6:	486d      	ldr	r0, [pc, #436]	; (800358c <handle_requestServerConnection+0x328>)
 80033d8:	f7fe fdae 	bl	8001f38 <fsmManager_isStateIn>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <handle_requestServerConnection+0x18e>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80033e2:	486a      	ldr	r0, [pc, #424]	; (800358c <handle_requestServerConnection+0x328>)
 80033e4:	f7fe fdbe 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 3000);
 80033e8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80033ec:	4869      	ldr	r0, [pc, #420]	; (8003594 <handle_requestServerConnection+0x330>)
 80033ee:	f001 fe69 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80033f2:	4868      	ldr	r0, [pc, #416]	; (8003594 <handle_requestServerConnection+0x330>)
 80033f4:	f001 fe7a 	bl	80050ec <softTimer_expired>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <handle_requestServerConnection+0x1a8>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cfun0);
 80033fe:	4869      	ldr	r0, [pc, #420]	; (80035a4 <handle_requestServerConnection+0x340>)
 8003400:	f001 f984 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCfun0);
 8003404:	2104      	movs	r1, #4
 8003406:	4861      	ldr	r0, [pc, #388]	; (800358c <handle_requestServerConnection+0x328>)
 8003408:	f7fe fd74 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800340c:	485f      	ldr	r0, [pc, #380]	; (800358c <handle_requestServerConnection+0x328>)
 800340e:	f7fe fd9e 	bl	8001f4e <fsmManager_isStateOut>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 860c 	beq.w	8004032 <handle_requestServerConnection+0xdce>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800341a:	485c      	ldr	r0, [pc, #368]	; (800358c <handle_requestServerConnection+0x328>)
 800341c:	f7fe fdb1 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003420:	f000 be07 	b.w	8004032 <handle_requestServerConnection+0xdce>



		case __gsmModule_requestServerConnection_waitOk_atCfun0:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003424:	4859      	ldr	r0, [pc, #356]	; (800358c <handle_requestServerConnection+0x328>)
 8003426:	f7fe fd87 	bl	8001f38 <fsmManager_isStateIn>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <handle_requestServerConnection+0x1dc>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003430:	4856      	ldr	r0, [pc, #344]	; (800358c <handle_requestServerConnection+0x328>)
 8003432:	f7fe fd97 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 10*1000);
 8003436:	f242 7110 	movw	r1, #10000	; 0x2710
 800343a:	4856      	ldr	r0, [pc, #344]	; (8003594 <handle_requestServerConnection+0x330>)
 800343c:	f001 fe42 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003440:	4b55      	ldr	r3, [pc, #340]	; (8003598 <handle_requestServerConnection+0x334>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	4955      	ldr	r1, [pc, #340]	; (800359c <handle_requestServerConnection+0x338>)
 8003448:	4855      	ldr	r0, [pc, #340]	; (80035a0 <handle_requestServerConnection+0x33c>)
 800344a:	f002 fd3c 	bl	8005ec6 <string_containsWithinLength>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d004      	beq.n	800345e <handle_requestServerConnection+0x1fa>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun1);
 8003454:	2105      	movs	r1, #5
 8003456:	484d      	ldr	r0, [pc, #308]	; (800358c <handle_requestServerConnection+0x328>)
 8003458:	f7fe fd4c 	bl	8001ef4 <fsmManager_gotoState>
 800345c:	e009      	b.n	8003472 <handle_requestServerConnection+0x20e>
			}
			else if(softTimer_expired(&timeout)) {
 800345e:	484d      	ldr	r0, [pc, #308]	; (8003594 <handle_requestServerConnection+0x330>)
 8003460:	f001 fe44 	bl	80050ec <softTimer_expired>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <handle_requestServerConnection+0x20e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun0);
 800346a:	2103      	movs	r1, #3
 800346c:	4847      	ldr	r0, [pc, #284]	; (800358c <handle_requestServerConnection+0x328>)
 800346e:	f7fe fd41 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003472:	4846      	ldr	r0, [pc, #280]	; (800358c <handle_requestServerConnection+0x328>)
 8003474:	f7fe fd6b 	bl	8001f4e <fsmManager_isStateOut>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 85db 	beq.w	8004036 <handle_requestServerConnection+0xdd2>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003480:	4842      	ldr	r0, [pc, #264]	; (800358c <handle_requestServerConnection+0x328>)
 8003482:	f7fe fd7e 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003486:	f000 bdd6 	b.w	8004036 <handle_requestServerConnection+0xdd2>



		case __gsmModule_requestServerConnection_send_atCfun1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800348a:	4840      	ldr	r0, [pc, #256]	; (800358c <handle_requestServerConnection+0x328>)
 800348c:	f7fe fd54 	bl	8001f38 <fsmManager_isStateIn>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <handle_requestServerConnection+0x242>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003496:	483d      	ldr	r0, [pc, #244]	; (800358c <handle_requestServerConnection+0x328>)
 8003498:	f7fe fd64 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 3000);
 800349c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80034a0:	483c      	ldr	r0, [pc, #240]	; (8003594 <handle_requestServerConnection+0x330>)
 80034a2:	f001 fe0f 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80034a6:	483b      	ldr	r0, [pc, #236]	; (8003594 <handle_requestServerConnection+0x330>)
 80034a8:	f001 fe20 	bl	80050ec <softTimer_expired>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <handle_requestServerConnection+0x25c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cfun1);
 80034b2:	483d      	ldr	r0, [pc, #244]	; (80035a8 <handle_requestServerConnection+0x344>)
 80034b4:	f001 f92a 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCfun1);
 80034b8:	2106      	movs	r1, #6
 80034ba:	4834      	ldr	r0, [pc, #208]	; (800358c <handle_requestServerConnection+0x328>)
 80034bc:	f7fe fd1a 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80034c0:	4832      	ldr	r0, [pc, #200]	; (800358c <handle_requestServerConnection+0x328>)
 80034c2:	f7fe fd44 	bl	8001f4e <fsmManager_isStateOut>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 85b6 	beq.w	800403a <handle_requestServerConnection+0xdd6>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80034ce:	482f      	ldr	r0, [pc, #188]	; (800358c <handle_requestServerConnection+0x328>)
 80034d0:	f7fe fd57 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80034d4:	f000 bdb1 	b.w	800403a <handle_requestServerConnection+0xdd6>



		case __gsmModule_requestServerConnection_waitOk_atCfun1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80034d8:	482c      	ldr	r0, [pc, #176]	; (800358c <handle_requestServerConnection+0x328>)
 80034da:	f7fe fd2d 	bl	8001f38 <fsmManager_isStateIn>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <handle_requestServerConnection+0x290>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80034e4:	4829      	ldr	r0, [pc, #164]	; (800358c <handle_requestServerConnection+0x328>)
 80034e6:	f7fe fd3d 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 10*1000);
 80034ea:	f242 7110 	movw	r1, #10000	; 0x2710
 80034ee:	4829      	ldr	r0, [pc, #164]	; (8003594 <handle_requestServerConnection+0x330>)
 80034f0:	f001 fde8 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80034f4:	4b28      	ldr	r3, [pc, #160]	; (8003598 <handle_requestServerConnection+0x334>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	4928      	ldr	r1, [pc, #160]	; (800359c <handle_requestServerConnection+0x338>)
 80034fc:	4828      	ldr	r0, [pc, #160]	; (80035a0 <handle_requestServerConnection+0x33c>)
 80034fe:	f002 fce2 	bl	8005ec6 <string_containsWithinLength>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d004      	beq.n	8003512 <handle_requestServerConnection+0x2ae>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCpin);
 8003508:	2107      	movs	r1, #7
 800350a:	4820      	ldr	r0, [pc, #128]	; (800358c <handle_requestServerConnection+0x328>)
 800350c:	f7fe fcf2 	bl	8001ef4 <fsmManager_gotoState>
 8003510:	e009      	b.n	8003526 <handle_requestServerConnection+0x2c2>
			}
			else if(softTimer_expired(&timeout)) {
 8003512:	4820      	ldr	r0, [pc, #128]	; (8003594 <handle_requestServerConnection+0x330>)
 8003514:	f001 fdea 	bl	80050ec <softTimer_expired>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <handle_requestServerConnection+0x2c2>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun1);
 800351e:	2105      	movs	r1, #5
 8003520:	481a      	ldr	r0, [pc, #104]	; (800358c <handle_requestServerConnection+0x328>)
 8003522:	f7fe fce7 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003526:	4819      	ldr	r0, [pc, #100]	; (800358c <handle_requestServerConnection+0x328>)
 8003528:	f7fe fd11 	bl	8001f4e <fsmManager_isStateOut>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8585 	beq.w	800403e <handle_requestServerConnection+0xdda>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003534:	4815      	ldr	r0, [pc, #84]	; (800358c <handle_requestServerConnection+0x328>)
 8003536:	f7fe fd24 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800353a:	f000 bd80 	b.w	800403e <handle_requestServerConnection+0xdda>



		case __gsmModule_requestServerConnection_send_atCpin:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800353e:	4813      	ldr	r0, [pc, #76]	; (800358c <handle_requestServerConnection+0x328>)
 8003540:	f7fe fcfa 	bl	8001f38 <fsmManager_isStateIn>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <handle_requestServerConnection+0x2f6>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800354a:	4810      	ldr	r0, [pc, #64]	; (800358c <handle_requestServerConnection+0x328>)
 800354c:	f7fe fd0a 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8003550:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003554:	480f      	ldr	r0, [pc, #60]	; (8003594 <handle_requestServerConnection+0x330>)
 8003556:	f001 fdb5 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 800355a:	480e      	ldr	r0, [pc, #56]	; (8003594 <handle_requestServerConnection+0x330>)
 800355c:	f001 fdc6 	bl	80050ec <softTimer_expired>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <handle_requestServerConnection+0x310>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cpin);
 8003566:	4811      	ldr	r0, [pc, #68]	; (80035ac <handle_requestServerConnection+0x348>)
 8003568:	f001 f8d0 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atCpin);
 800356c:	2108      	movs	r1, #8
 800356e:	4807      	ldr	r0, [pc, #28]	; (800358c <handle_requestServerConnection+0x328>)
 8003570:	f7fe fcc0 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003574:	4805      	ldr	r0, [pc, #20]	; (800358c <handle_requestServerConnection+0x328>)
 8003576:	f7fe fcea 	bl	8001f4e <fsmManager_isStateOut>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8560 	beq.w	8004042 <handle_requestServerConnection+0xdde>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003582:	4802      	ldr	r0, [pc, #8]	; (800358c <handle_requestServerConnection+0x328>)
 8003584:	f7fe fcfd 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003588:	f000 bd5b 	b.w	8004042 <handle_requestServerConnection+0xdde>
 800358c:	2000063c 	.word	0x2000063c
 8003590:	0800b9ac 	.word	0x0800b9ac
 8003594:	200005f4 	.word	0x200005f4
 8003598:	200004a8 	.word	0x200004a8
 800359c:	0800bb4c 	.word	0x0800bb4c
 80035a0:	200003d4 	.word	0x200003d4
 80035a4:	0800b9b8 	.word	0x0800b9b8
 80035a8:	0800b9c4 	.word	0x0800b9c4
 80035ac:	0800b9d0 	.word	0x0800b9d0



		case __gsmModule_requestServerConnection_check_atCpin:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80035b0:	48c1      	ldr	r0, [pc, #772]	; (80038b8 <handle_requestServerConnection+0x654>)
 80035b2:	f7fe fcc1 	bl	8001f38 <fsmManager_isStateIn>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <handle_requestServerConnection+0x368>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80035bc:	48be      	ldr	r0, [pc, #760]	; (80038b8 <handle_requestServerConnection+0x654>)
 80035be:	f7fe fcd1 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 5*1000);
 80035c2:	f241 3188 	movw	r1, #5000	; 0x1388
 80035c6:	48bd      	ldr	r0, [pc, #756]	; (80038bc <handle_requestServerConnection+0x658>)
 80035c8:	f001 fd7c 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_cpinReady, gsmRxDataChunkLen)) {
 80035cc:	4bbc      	ldr	r3, [pc, #752]	; (80038c0 <handle_requestServerConnection+0x65c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	49bc      	ldr	r1, [pc, #752]	; (80038c4 <handle_requestServerConnection+0x660>)
 80035d4:	48bc      	ldr	r0, [pc, #752]	; (80038c8 <handle_requestServerConnection+0x664>)
 80035d6:	f002 fc76 	bl	8005ec6 <string_containsWithinLength>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d004      	beq.n	80035ea <handle_requestServerConnection+0x386>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCband);
 80035e0:	2109      	movs	r1, #9
 80035e2:	48b5      	ldr	r0, [pc, #724]	; (80038b8 <handle_requestServerConnection+0x654>)
 80035e4:	f7fe fc86 	bl	8001ef4 <fsmManager_gotoState>
 80035e8:	e018      	b.n	800361c <handle_requestServerConnection+0x3b8>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_cme_error, gsmRxDataChunkLen)) {
 80035ea:	4bb5      	ldr	r3, [pc, #724]	; (80038c0 <handle_requestServerConnection+0x65c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	49b6      	ldr	r1, [pc, #728]	; (80038cc <handle_requestServerConnection+0x668>)
 80035f2:	48b5      	ldr	r0, [pc, #724]	; (80038c8 <handle_requestServerConnection+0x664>)
 80035f4:	f002 fc67 	bl	8005ec6 <string_containsWithinLength>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d004      	beq.n	8003608 <handle_requestServerConnection+0x3a4>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun1);
 80035fe:	2105      	movs	r1, #5
 8003600:	48ad      	ldr	r0, [pc, #692]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003602:	f7fe fc77 	bl	8001ef4 <fsmManager_gotoState>
 8003606:	e009      	b.n	800361c <handle_requestServerConnection+0x3b8>
			}
			else if(softTimer_expired(&timeout)) {
 8003608:	48ac      	ldr	r0, [pc, #688]	; (80038bc <handle_requestServerConnection+0x658>)
 800360a:	f001 fd6f 	bl	80050ec <softTimer_expired>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <handle_requestServerConnection+0x3b8>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCpin);
 8003614:	2107      	movs	r1, #7
 8003616:	48a8      	ldr	r0, [pc, #672]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003618:	f7fe fc6c 	bl	8001ef4 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800361c:	48a6      	ldr	r0, [pc, #664]	; (80038b8 <handle_requestServerConnection+0x654>)
 800361e:	f7fe fc96 	bl	8001f4e <fsmManager_isStateOut>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 850e 	beq.w	8004046 <handle_requestServerConnection+0xde2>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800362a:	48a3      	ldr	r0, [pc, #652]	; (80038b8 <handle_requestServerConnection+0x654>)
 800362c:	f7fe fca9 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003630:	f000 bd09 	b.w	8004046 <handle_requestServerConnection+0xde2>



		case __gsmModule_requestServerConnection_send_atCband:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003634:	48a0      	ldr	r0, [pc, #640]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003636:	f7fe fc7f 	bl	8001f38 <fsmManager_isStateIn>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <handle_requestServerConnection+0x3ec>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003640:	489d      	ldr	r0, [pc, #628]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003642:	f7fe fc8f 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003646:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800364a:	489c      	ldr	r0, [pc, #624]	; (80038bc <handle_requestServerConnection+0x658>)
 800364c:	f001 fd3a 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003650:	489a      	ldr	r0, [pc, #616]	; (80038bc <handle_requestServerConnection+0x658>)
 8003652:	f001 fd4b 	bl	80050ec <softTimer_expired>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <handle_requestServerConnection+0x406>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cband_allBand);
 800365c:	489c      	ldr	r0, [pc, #624]	; (80038d0 <handle_requestServerConnection+0x66c>)
 800365e:	f001 f855 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCband);
 8003662:	210a      	movs	r1, #10
 8003664:	4894      	ldr	r0, [pc, #592]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003666:	f7fe fc45 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800366a:	4893      	ldr	r0, [pc, #588]	; (80038b8 <handle_requestServerConnection+0x654>)
 800366c:	f7fe fc6f 	bl	8001f4e <fsmManager_isStateOut>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 84e9 	beq.w	800404a <handle_requestServerConnection+0xde6>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003678:	488f      	ldr	r0, [pc, #572]	; (80038b8 <handle_requestServerConnection+0x654>)
 800367a:	f7fe fc82 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800367e:	f000 bce4 	b.w	800404a <handle_requestServerConnection+0xde6>



		case __gsmModule_requestServerConnection_waitOk_atCband:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003682:	488d      	ldr	r0, [pc, #564]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003684:	f7fe fc58 	bl	8001f38 <fsmManager_isStateIn>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <handle_requestServerConnection+0x43a>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800368e:	488a      	ldr	r0, [pc, #552]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003690:	f7fe fc68 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 5000);
 8003694:	f241 3188 	movw	r1, #5000	; 0x1388
 8003698:	4888      	ldr	r0, [pc, #544]	; (80038bc <handle_requestServerConnection+0x658>)
 800369a:	f001 fd13 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800369e:	4b88      	ldr	r3, [pc, #544]	; (80038c0 <handle_requestServerConnection+0x65c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	498b      	ldr	r1, [pc, #556]	; (80038d4 <handle_requestServerConnection+0x670>)
 80036a6:	4888      	ldr	r0, [pc, #544]	; (80038c8 <handle_requestServerConnection+0x664>)
 80036a8:	f002 fc0d 	bl	8005ec6 <string_containsWithinLength>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <handle_requestServerConnection+0x458>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 80036b2:	210b      	movs	r1, #11
 80036b4:	4880      	ldr	r0, [pc, #512]	; (80038b8 <handle_requestServerConnection+0x654>)
 80036b6:	f7fe fc1d 	bl	8001ef4 <fsmManager_gotoState>
 80036ba:	e009      	b.n	80036d0 <handle_requestServerConnection+0x46c>
			}
			else if(softTimer_expired(&timeout)) {
 80036bc:	487f      	ldr	r0, [pc, #508]	; (80038bc <handle_requestServerConnection+0x658>)
 80036be:	f001 fd15 	bl	80050ec <softTimer_expired>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <handle_requestServerConnection+0x46c>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCband);
 80036c8:	2109      	movs	r1, #9
 80036ca:	487b      	ldr	r0, [pc, #492]	; (80038b8 <handle_requestServerConnection+0x654>)
 80036cc:	f7fe fc12 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80036d0:	4879      	ldr	r0, [pc, #484]	; (80038b8 <handle_requestServerConnection+0x654>)
 80036d2:	f7fe fc3c 	bl	8001f4e <fsmManager_isStateOut>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 84b8 	beq.w	800404e <handle_requestServerConnection+0xdea>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80036de:	4876      	ldr	r0, [pc, #472]	; (80038b8 <handle_requestServerConnection+0x654>)
 80036e0:	f7fe fc4f 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80036e4:	f000 bcb3 	b.w	800404e <handle_requestServerConnection+0xdea>



		case __gsmModule_requestServerConnection_send_atCreg1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80036e8:	4873      	ldr	r0, [pc, #460]	; (80038b8 <handle_requestServerConnection+0x654>)
 80036ea:	f7fe fc25 	bl	8001f38 <fsmManager_isStateIn>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <handle_requestServerConnection+0x4a0>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80036f4:	4870      	ldr	r0, [pc, #448]	; (80038b8 <handle_requestServerConnection+0x654>)
 80036f6:	f7fe fc35 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 80036fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80036fe:	486f      	ldr	r0, [pc, #444]	; (80038bc <handle_requestServerConnection+0x658>)
 8003700:	f001 fce0 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003704:	486d      	ldr	r0, [pc, #436]	; (80038bc <handle_requestServerConnection+0x658>)
 8003706:	f001 fcf1 	bl	80050ec <softTimer_expired>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <handle_requestServerConnection+0x4ba>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_creg1);
 8003710:	4871      	ldr	r0, [pc, #452]	; (80038d8 <handle_requestServerConnection+0x674>)
 8003712:	f000 fffb 	bl	800470c <pinGsmUartTx_transmit>
				//fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atCreg1);
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCreg1);
 8003716:	210d      	movs	r1, #13
 8003718:	4867      	ldr	r0, [pc, #412]	; (80038b8 <handle_requestServerConnection+0x654>)
 800371a:	f7fe fbeb 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800371e:	4866      	ldr	r0, [pc, #408]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003720:	f7fe fc15 	bl	8001f4e <fsmManager_isStateOut>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8493 	beq.w	8004052 <handle_requestServerConnection+0xdee>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800372c:	4862      	ldr	r0, [pc, #392]	; (80038b8 <handle_requestServerConnection+0x654>)
 800372e:	f7fe fc28 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003732:	f000 bc8e 	b.w	8004052 <handle_requestServerConnection+0xdee>
			break;
*/


		case __gsmModule_requestServerConnection_waitOk_atCreg1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003736:	4860      	ldr	r0, [pc, #384]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003738:	f7fe fbfe 	bl	8001f38 <fsmManager_isStateIn>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <handle_requestServerConnection+0x4ee>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003742:	485d      	ldr	r0, [pc, #372]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003744:	f7fe fc0e 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003748:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800374c:	485b      	ldr	r0, [pc, #364]	; (80038bc <handle_requestServerConnection+0x658>)
 800374e:	f001 fcb9 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003752:	4b5b      	ldr	r3, [pc, #364]	; (80038c0 <handle_requestServerConnection+0x65c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	495e      	ldr	r1, [pc, #376]	; (80038d4 <handle_requestServerConnection+0x670>)
 800375a:	485b      	ldr	r0, [pc, #364]	; (80038c8 <handle_requestServerConnection+0x664>)
 800375c:	f002 fbb3 	bl	8005ec6 <string_containsWithinLength>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <handle_requestServerConnection+0x50c>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg);
 8003766:	210e      	movs	r1, #14
 8003768:	4853      	ldr	r0, [pc, #332]	; (80038b8 <handle_requestServerConnection+0x654>)
 800376a:	f7fe fbc3 	bl	8001ef4 <fsmManager_gotoState>
 800376e:	e009      	b.n	8003784 <handle_requestServerConnection+0x520>
			}
			else if(softTimer_expired(&timeout)) {
 8003770:	4852      	ldr	r0, [pc, #328]	; (80038bc <handle_requestServerConnection+0x658>)
 8003772:	f001 fcbb 	bl	80050ec <softTimer_expired>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <handle_requestServerConnection+0x520>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 800377c:	210b      	movs	r1, #11
 800377e:	484e      	ldr	r0, [pc, #312]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003780:	f7fe fbb8 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003784:	484c      	ldr	r0, [pc, #304]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003786:	f7fe fbe2 	bl	8001f4e <fsmManager_isStateOut>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8462 	beq.w	8004056 <handle_requestServerConnection+0xdf2>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003792:	4849      	ldr	r0, [pc, #292]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003794:	f7fe fbf5 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003798:	f000 bc5d 	b.w	8004056 <handle_requestServerConnection+0xdf2>



		case __gsmModule_requestServerConnection_send_atCreg:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800379c:	4846      	ldr	r0, [pc, #280]	; (80038b8 <handle_requestServerConnection+0x654>)
 800379e:	f7fe fbcb 	bl	8001f38 <fsmManager_isStateIn>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <handle_requestServerConnection+0x554>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80037a8:	4843      	ldr	r0, [pc, #268]	; (80038b8 <handle_requestServerConnection+0x654>)
 80037aa:	f7fe fbdb 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 80037ae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80037b2:	4842      	ldr	r0, [pc, #264]	; (80038bc <handle_requestServerConnection+0x658>)
 80037b4:	f001 fc86 	bl	80050c4 <softTimer_start>
			}


			if(softTimer_expired(&timeout)) {
 80037b8:	4840      	ldr	r0, [pc, #256]	; (80038bc <handle_requestServerConnection+0x658>)
 80037ba:	f001 fc97 	bl	80050ec <softTimer_expired>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d006      	beq.n	80037d2 <handle_requestServerConnection+0x56e>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_creg);
 80037c4:	4845      	ldr	r0, [pc, #276]	; (80038dc <handle_requestServerConnection+0x678>)
 80037c6:	f000 ffa1 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atCreg);
 80037ca:	210f      	movs	r1, #15
 80037cc:	483a      	ldr	r0, [pc, #232]	; (80038b8 <handle_requestServerConnection+0x654>)
 80037ce:	f7fe fb91 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80037d2:	4839      	ldr	r0, [pc, #228]	; (80038b8 <handle_requestServerConnection+0x654>)
 80037d4:	f7fe fbbb 	bl	8001f4e <fsmManager_isStateOut>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 843d 	beq.w	800405a <handle_requestServerConnection+0xdf6>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80037e0:	4835      	ldr	r0, [pc, #212]	; (80038b8 <handle_requestServerConnection+0x654>)
 80037e2:	f7fe fbce 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80037e6:	f000 bc38 	b.w	800405a <handle_requestServerConnection+0xdf6>



		case __gsmModule_requestServerConnection_check_atCreg:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80037ea:	4833      	ldr	r0, [pc, #204]	; (80038b8 <handle_requestServerConnection+0x654>)
 80037ec:	f7fe fba4 	bl	8001f38 <fsmManager_isStateIn>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <handle_requestServerConnection+0x5a2>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80037f6:	4830      	ldr	r0, [pc, #192]	; (80038b8 <handle_requestServerConnection+0x654>)
 80037f8:	f7fe fbb4 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 5*1000);
 80037fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8003800:	482e      	ldr	r0, [pc, #184]	; (80038bc <handle_requestServerConnection+0x658>)
 8003802:	f001 fc5f 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_creg1_1, gsmRxDataChunkLen)) {
 8003806:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <handle_requestServerConnection+0x65c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	4934      	ldr	r1, [pc, #208]	; (80038e0 <handle_requestServerConnection+0x67c>)
 800380e:	482e      	ldr	r0, [pc, #184]	; (80038c8 <handle_requestServerConnection+0x664>)
 8003810:	f002 fb59 	bl	8005ec6 <string_containsWithinLength>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d004      	beq.n	8003824 <handle_requestServerConnection+0x5c0>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCops);
 800381a:	2110      	movs	r1, #16
 800381c:	4826      	ldr	r0, [pc, #152]	; (80038b8 <handle_requestServerConnection+0x654>)
 800381e:	f7fe fb69 	bl	8001ef4 <fsmManager_gotoState>
 8003822:	e018      	b.n	8003856 <handle_requestServerConnection+0x5f2>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_creg1_2, gsmRxDataChunkLen)) {
 8003824:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <handle_requestServerConnection+0x65c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	492e      	ldr	r1, [pc, #184]	; (80038e4 <handle_requestServerConnection+0x680>)
 800382c:	4826      	ldr	r0, [pc, #152]	; (80038c8 <handle_requestServerConnection+0x664>)
 800382e:	f002 fb4a 	bl	8005ec6 <string_containsWithinLength>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <handle_requestServerConnection+0x5de>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 8003838:	210b      	movs	r1, #11
 800383a:	481f      	ldr	r0, [pc, #124]	; (80038b8 <handle_requestServerConnection+0x654>)
 800383c:	f7fe fb5a 	bl	8001ef4 <fsmManager_gotoState>
 8003840:	e009      	b.n	8003856 <handle_requestServerConnection+0x5f2>
			}
			else if(softTimer_expired(&timeout)) {
 8003842:	481e      	ldr	r0, [pc, #120]	; (80038bc <handle_requestServerConnection+0x658>)
 8003844:	f001 fc52 	bl	80050ec <softTimer_expired>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <handle_requestServerConnection+0x5f2>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg);
 800384e:	210e      	movs	r1, #14
 8003850:	4819      	ldr	r0, [pc, #100]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003852:	f7fe fb4f 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003856:	4818      	ldr	r0, [pc, #96]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003858:	f7fe fb79 	bl	8001f4e <fsmManager_isStateOut>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 83fd 	beq.w	800405e <handle_requestServerConnection+0xdfa>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003864:	4814      	ldr	r0, [pc, #80]	; (80038b8 <handle_requestServerConnection+0x654>)
 8003866:	f7fe fb8c 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800386a:	e3f8      	b.n	800405e <handle_requestServerConnection+0xdfa>



		case __gsmModule_requestServerConnection_send_atCops:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800386c:	4812      	ldr	r0, [pc, #72]	; (80038b8 <handle_requestServerConnection+0x654>)
 800386e:	f7fe fb63 	bl	8001f38 <fsmManager_isStateIn>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <handle_requestServerConnection+0x624>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003878:	480f      	ldr	r0, [pc, #60]	; (80038b8 <handle_requestServerConnection+0x654>)
 800387a:	f7fe fb73 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 3*1000);
 800387e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003882:	480e      	ldr	r0, [pc, #56]	; (80038bc <handle_requestServerConnection+0x658>)
 8003884:	f001 fc1e 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003888:	480c      	ldr	r0, [pc, #48]	; (80038bc <handle_requestServerConnection+0x658>)
 800388a:	f001 fc2f 	bl	80050ec <softTimer_expired>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <handle_requestServerConnection+0x63e>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cops);
 8003894:	4814      	ldr	r0, [pc, #80]	; (80038e8 <handle_requestServerConnection+0x684>)
 8003896:	f000 ff39 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_get_atCops);
 800389a:	2111      	movs	r1, #17
 800389c:	4806      	ldr	r0, [pc, #24]	; (80038b8 <handle_requestServerConnection+0x654>)
 800389e:	f7fe fb29 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80038a2:	4805      	ldr	r0, [pc, #20]	; (80038b8 <handle_requestServerConnection+0x654>)
 80038a4:	f7fe fb53 	bl	8001f4e <fsmManager_isStateOut>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 83d9 	beq.w	8004062 <handle_requestServerConnection+0xdfe>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80038b0:	4801      	ldr	r0, [pc, #4]	; (80038b8 <handle_requestServerConnection+0x654>)
 80038b2:	f7fe fb66 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80038b6:	e3d4      	b.n	8004062 <handle_requestServerConnection+0xdfe>
 80038b8:	2000063c 	.word	0x2000063c
 80038bc:	200005f4 	.word	0x200005f4
 80038c0:	200004a8 	.word	0x200004a8
 80038c4:	0800bb70 	.word	0x0800bb70
 80038c8:	200003d4 	.word	0x200003d4
 80038cc:	0800bb50 	.word	0x0800bb50
 80038d0:	0800b9dc 	.word	0x0800b9dc
 80038d4:	0800bb4c 	.word	0x0800bb4c
 80038d8:	0800b9f4 	.word	0x0800b9f4
 80038dc:	0800ba00 	.word	0x0800ba00
 80038e0:	0800bb80 	.word	0x0800bb80
 80038e4:	0800bb8c 	.word	0x0800bb8c
 80038e8:	0800bab4 	.word	0x0800bab4



		case __gsmModule_requestServerConnection_get_atCops:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80038ec:	48b5      	ldr	r0, [pc, #724]	; (8003bc4 <handle_requestServerConnection+0x960>)
 80038ee:	f7fe fb23 	bl	8001f38 <fsmManager_isStateIn>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <handle_requestServerConnection+0x6a4>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80038f8:	48b2      	ldr	r0, [pc, #712]	; (8003bc4 <handle_requestServerConnection+0x960>)
 80038fa:	f7fe fb33 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 45*1000);
 80038fe:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8003902:	48b1      	ldr	r0, [pc, #708]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003904:	f001 fbde 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "PERSONAL", gsmRxDataChunkLen)) {
 8003908:	4bb0      	ldr	r3, [pc, #704]	; (8003bcc <handle_requestServerConnection+0x968>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	49b0      	ldr	r1, [pc, #704]	; (8003bd0 <handle_requestServerConnection+0x96c>)
 8003910:	48b0      	ldr	r0, [pc, #704]	; (8003bd4 <handle_requestServerConnection+0x970>)
 8003912:	f002 fad8 	bl	8005ec6 <string_containsWithinLength>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <handle_requestServerConnection+0x6c8>
				gsmModule_operator = __gsmModule_operator_personal;
 800391c:	4bae      	ldr	r3, [pc, #696]	; (8003bd8 <handle_requestServerConnection+0x974>)
 800391e:	2201      	movs	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 8003922:	2112      	movs	r1, #18
 8003924:	48a7      	ldr	r0, [pc, #668]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003926:	f7fe fae5 	bl	8001ef4 <fsmManager_gotoState>
 800392a:	e030      	b.n	800398e <handle_requestServerConnection+0x72a>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "CLARO", gsmRxDataChunkLen)) {
 800392c:	4ba7      	ldr	r3, [pc, #668]	; (8003bcc <handle_requestServerConnection+0x968>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	49aa      	ldr	r1, [pc, #680]	; (8003bdc <handle_requestServerConnection+0x978>)
 8003934:	48a7      	ldr	r0, [pc, #668]	; (8003bd4 <handle_requestServerConnection+0x970>)
 8003936:	f002 fac6 	bl	8005ec6 <string_containsWithinLength>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <handle_requestServerConnection+0x6ec>
				gsmModule_operator = __gsmModule_operator_claro;
 8003940:	4ba5      	ldr	r3, [pc, #660]	; (8003bd8 <handle_requestServerConnection+0x974>)
 8003942:	2202      	movs	r2, #2
 8003944:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 8003946:	2112      	movs	r1, #18
 8003948:	489e      	ldr	r0, [pc, #632]	; (8003bc4 <handle_requestServerConnection+0x960>)
 800394a:	f7fe fad3 	bl	8001ef4 <fsmManager_gotoState>
 800394e:	e01e      	b.n	800398e <handle_requestServerConnection+0x72a>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "MOVISTAR", gsmRxDataChunkLen)) {
 8003950:	4b9e      	ldr	r3, [pc, #632]	; (8003bcc <handle_requestServerConnection+0x968>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	49a2      	ldr	r1, [pc, #648]	; (8003be0 <handle_requestServerConnection+0x97c>)
 8003958:	489e      	ldr	r0, [pc, #632]	; (8003bd4 <handle_requestServerConnection+0x970>)
 800395a:	f002 fab4 	bl	8005ec6 <string_containsWithinLength>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <handle_requestServerConnection+0x710>
				gsmModule_operator = __gsmModule_operator_movistar;
 8003964:	4b9c      	ldr	r3, [pc, #624]	; (8003bd8 <handle_requestServerConnection+0x974>)
 8003966:	2203      	movs	r2, #3
 8003968:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 800396a:	2112      	movs	r1, #18
 800396c:	4895      	ldr	r0, [pc, #596]	; (8003bc4 <handle_requestServerConnection+0x960>)
 800396e:	f7fe fac1 	bl	8001ef4 <fsmManager_gotoState>
 8003972:	e00c      	b.n	800398e <handle_requestServerConnection+0x72a>
			}
			else if(softTimer_expired(&timeout)) {
 8003974:	4894      	ldr	r0, [pc, #592]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003976:	f001 fbb9 	bl	80050ec <softTimer_expired>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <handle_requestServerConnection+0x72a>
				gsmModule_operator = __gsmModule_operator_unknown;
 8003980:	4b95      	ldr	r3, [pc, #596]	; (8003bd8 <handle_requestServerConnection+0x974>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCops);
 8003986:	2110      	movs	r1, #16
 8003988:	488e      	ldr	r0, [pc, #568]	; (8003bc4 <handle_requestServerConnection+0x960>)
 800398a:	f7fe fab3 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800398e:	488d      	ldr	r0, [pc, #564]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003990:	f7fe fadd 	bl	8001f4e <fsmManager_isStateOut>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8365 	beq.w	8004066 <handle_requestServerConnection+0xe02>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800399c:	4889      	ldr	r0, [pc, #548]	; (8003bc4 <handle_requestServerConnection+0x960>)
 800399e:	f7fe faf0 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80039a2:	e360      	b.n	8004066 <handle_requestServerConnection+0xe02>



		case __gsmModule_requestServerConnection_send_atSapbr3_contype:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80039a4:	4887      	ldr	r0, [pc, #540]	; (8003bc4 <handle_requestServerConnection+0x960>)
 80039a6:	f7fe fac7 	bl	8001f38 <fsmManager_isStateIn>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <handle_requestServerConnection+0x75c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80039b0:	4884      	ldr	r0, [pc, #528]	; (8003bc4 <handle_requestServerConnection+0x960>)
 80039b2:	f7fe fad7 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 80039b6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80039ba:	4883      	ldr	r0, [pc, #524]	; (8003bc8 <handle_requestServerConnection+0x964>)
 80039bc:	f001 fb82 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80039c0:	4881      	ldr	r0, [pc, #516]	; (8003bc8 <handle_requestServerConnection+0x964>)
 80039c2:	f001 fb93 	bl	80050ec <softTimer_expired>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <handle_requestServerConnection+0x776>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3contype);
 80039cc:	4885      	ldr	r0, [pc, #532]	; (8003be4 <handle_requestServerConnection+0x980>)
 80039ce:	f000 fe9d 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_contype);
 80039d2:	2113      	movs	r1, #19
 80039d4:	487b      	ldr	r0, [pc, #492]	; (8003bc4 <handle_requestServerConnection+0x960>)
 80039d6:	f7fe fa8d 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80039da:	487a      	ldr	r0, [pc, #488]	; (8003bc4 <handle_requestServerConnection+0x960>)
 80039dc:	f7fe fab7 	bl	8001f4e <fsmManager_isStateOut>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8341 	beq.w	800406a <handle_requestServerConnection+0xe06>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80039e8:	4876      	ldr	r0, [pc, #472]	; (8003bc4 <handle_requestServerConnection+0x960>)
 80039ea:	f7fe faca 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80039ee:	e33c      	b.n	800406a <handle_requestServerConnection+0xe06>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_contype:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80039f0:	4874      	ldr	r0, [pc, #464]	; (8003bc4 <handle_requestServerConnection+0x960>)
 80039f2:	f7fe faa1 	bl	8001f38 <fsmManager_isStateIn>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <handle_requestServerConnection+0x7a8>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80039fc:	4871      	ldr	r0, [pc, #452]	; (8003bc4 <handle_requestServerConnection+0x960>)
 80039fe:	f7fe fab1 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1*1000);
 8003a02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a06:	4870      	ldr	r0, [pc, #448]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003a08:	f001 fb5c 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <handle_requestServerConnection+0x968>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4975      	ldr	r1, [pc, #468]	; (8003be8 <handle_requestServerConnection+0x984>)
 8003a14:	486f      	ldr	r0, [pc, #444]	; (8003bd4 <handle_requestServerConnection+0x970>)
 8003a16:	f002 fa56 	bl	8005ec6 <string_containsWithinLength>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <handle_requestServerConnection+0x7c6>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_apn);
 8003a20:	2114      	movs	r1, #20
 8003a22:	4868      	ldr	r0, [pc, #416]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003a24:	f7fe fa66 	bl	8001ef4 <fsmManager_gotoState>
 8003a28:	e009      	b.n	8003a3e <handle_requestServerConnection+0x7da>
			}
			else if(softTimer_expired(&timeout)) {
 8003a2a:	4867      	ldr	r0, [pc, #412]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003a2c:	f001 fb5e 	bl	80050ec <softTimer_expired>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <handle_requestServerConnection+0x7da>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 8003a36:	2112      	movs	r1, #18
 8003a38:	4862      	ldr	r0, [pc, #392]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003a3a:	f7fe fa5b 	bl	8001ef4 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003a3e:	4861      	ldr	r0, [pc, #388]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003a40:	f7fe fa85 	bl	8001f4e <fsmManager_isStateOut>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8311 	beq.w	800406e <handle_requestServerConnection+0xe0a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003a4c:	485d      	ldr	r0, [pc, #372]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003a4e:	f7fe fa98 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003a52:	e30c      	b.n	800406e <handle_requestServerConnection+0xe0a>



		case __gsmModule_requestServerConnection_send_atSapbr3_apn:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003a54:	485b      	ldr	r0, [pc, #364]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003a56:	f7fe fa6f 	bl	8001f38 <fsmManager_isStateIn>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <handle_requestServerConnection+0x80c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003a60:	4858      	ldr	r0, [pc, #352]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003a62:	f7fe fa7f 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003a66:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003a6a:	4857      	ldr	r0, [pc, #348]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003a6c:	f001 fb2a 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003a70:	4855      	ldr	r0, [pc, #340]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003a72:	f001 fb3b 	bl	80050ec <softTimer_expired>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <handle_requestServerConnection+0x82e>
				if(gsmModule_operator == __gsmModule_operator_personal) {
 8003a7c:	4b56      	ldr	r3, [pc, #344]	; (8003bd8 <handle_requestServerConnection+0x974>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d106      	bne.n	8003a92 <handle_requestServerConnection+0x82e>
					pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3apnPersonal);
 8003a84:	4859      	ldr	r0, [pc, #356]	; (8003bec <handle_requestServerConnection+0x988>)
 8003a86:	f000 fe41 	bl	800470c <pinGsmUartTx_transmit>
					fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_apn);
 8003a8a:	2115      	movs	r1, #21
 8003a8c:	484d      	ldr	r0, [pc, #308]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003a8e:	f7fe fa31 	bl	8001ef4 <fsmManager_gotoState>
				}
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003a92:	484c      	ldr	r0, [pc, #304]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003a94:	f7fe fa5b 	bl	8001f4e <fsmManager_isStateOut>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 82e9 	beq.w	8004072 <handle_requestServerConnection+0xe0e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003aa0:	4848      	ldr	r0, [pc, #288]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003aa2:	f7fe fa6e 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003aa6:	e2e4      	b.n	8004072 <handle_requestServerConnection+0xe0e>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_apn:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003aa8:	4846      	ldr	r0, [pc, #280]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003aaa:	f7fe fa45 	bl	8001f38 <fsmManager_isStateIn>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <handle_requestServerConnection+0x860>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003ab4:	4843      	ldr	r0, [pc, #268]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003ab6:	f7fe fa55 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8003aba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003abe:	4842      	ldr	r0, [pc, #264]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003ac0:	f001 fb00 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003ac4:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <handle_requestServerConnection+0x968>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4947      	ldr	r1, [pc, #284]	; (8003be8 <handle_requestServerConnection+0x984>)
 8003acc:	4841      	ldr	r0, [pc, #260]	; (8003bd4 <handle_requestServerConnection+0x970>)
 8003ace:	f002 f9fa 	bl	8005ec6 <string_containsWithinLength>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <handle_requestServerConnection+0x87e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_user);
 8003ad8:	2116      	movs	r1, #22
 8003ada:	483a      	ldr	r0, [pc, #232]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003adc:	f7fe fa0a 	bl	8001ef4 <fsmManager_gotoState>
 8003ae0:	e009      	b.n	8003af6 <handle_requestServerConnection+0x892>
			}
			else if(softTimer_expired(&timeout)) {
 8003ae2:	4839      	ldr	r0, [pc, #228]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003ae4:	f001 fb02 	bl	80050ec <softTimer_expired>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <handle_requestServerConnection+0x892>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_apn);
 8003aee:	2114      	movs	r1, #20
 8003af0:	4834      	ldr	r0, [pc, #208]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003af2:	f7fe f9ff 	bl	8001ef4 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003af6:	4833      	ldr	r0, [pc, #204]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003af8:	f7fe fa29 	bl	8001f4e <fsmManager_isStateOut>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 82b9 	beq.w	8004076 <handle_requestServerConnection+0xe12>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003b04:	482f      	ldr	r0, [pc, #188]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003b06:	f7fe fa3c 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003b0a:	e2b4      	b.n	8004076 <handle_requestServerConnection+0xe12>



		case __gsmModule_requestServerConnection_send_atSapbr3_user:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003b0c:	482d      	ldr	r0, [pc, #180]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003b0e:	f7fe fa13 	bl	8001f38 <fsmManager_isStateIn>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <handle_requestServerConnection+0x8c4>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003b18:	482a      	ldr	r0, [pc, #168]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003b1a:	f7fe fa23 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003b1e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003b22:	4829      	ldr	r0, [pc, #164]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003b24:	f001 face 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003b28:	4827      	ldr	r0, [pc, #156]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003b2a:	f001 fadf 	bl	80050ec <softTimer_expired>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <handle_requestServerConnection+0x8e6>
				if(gsmModule_operator == __gsmModule_operator_personal) {
 8003b34:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <handle_requestServerConnection+0x974>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d106      	bne.n	8003b4a <handle_requestServerConnection+0x8e6>
					pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3userPersonal);
 8003b3c:	482c      	ldr	r0, [pc, #176]	; (8003bf0 <handle_requestServerConnection+0x98c>)
 8003b3e:	f000 fde5 	bl	800470c <pinGsmUartTx_transmit>
					fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_user);
 8003b42:	2117      	movs	r1, #23
 8003b44:	481f      	ldr	r0, [pc, #124]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003b46:	f7fe f9d5 	bl	8001ef4 <fsmManager_gotoState>
				}
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003b4a:	481e      	ldr	r0, [pc, #120]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003b4c:	f7fe f9ff 	bl	8001f4e <fsmManager_isStateOut>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8291 	beq.w	800407a <handle_requestServerConnection+0xe16>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003b58:	481a      	ldr	r0, [pc, #104]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003b5a:	f7fe fa12 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003b5e:	e28c      	b.n	800407a <handle_requestServerConnection+0xe16>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_user:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003b60:	4818      	ldr	r0, [pc, #96]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003b62:	f7fe f9e9 	bl	8001f38 <fsmManager_isStateIn>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <handle_requestServerConnection+0x918>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003b6c:	4815      	ldr	r0, [pc, #84]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003b6e:	f7fe f9f9 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8003b72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b76:	4814      	ldr	r0, [pc, #80]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003b78:	f001 faa4 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003b7c:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <handle_requestServerConnection+0x968>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4919      	ldr	r1, [pc, #100]	; (8003be8 <handle_requestServerConnection+0x984>)
 8003b84:	4813      	ldr	r0, [pc, #76]	; (8003bd4 <handle_requestServerConnection+0x970>)
 8003b86:	f002 f99e 	bl	8005ec6 <string_containsWithinLength>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <handle_requestServerConnection+0x936>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_pwd);
 8003b90:	2118      	movs	r1, #24
 8003b92:	480c      	ldr	r0, [pc, #48]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003b94:	f7fe f9ae 	bl	8001ef4 <fsmManager_gotoState>
 8003b98:	e009      	b.n	8003bae <handle_requestServerConnection+0x94a>
			}
			else if(softTimer_expired(&timeout)) {
 8003b9a:	480b      	ldr	r0, [pc, #44]	; (8003bc8 <handle_requestServerConnection+0x964>)
 8003b9c:	f001 faa6 	bl	80050ec <softTimer_expired>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <handle_requestServerConnection+0x94a>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_user);
 8003ba6:	2116      	movs	r1, #22
 8003ba8:	4806      	ldr	r0, [pc, #24]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003baa:	f7fe f9a3 	bl	8001ef4 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003bae:	4805      	ldr	r0, [pc, #20]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003bb0:	f7fe f9cd 	bl	8001f4e <fsmManager_isStateOut>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8261 	beq.w	800407e <handle_requestServerConnection+0xe1a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003bbc:	4801      	ldr	r0, [pc, #4]	; (8003bc4 <handle_requestServerConnection+0x960>)
 8003bbe:	f7fe f9e0 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003bc2:	e25c      	b.n	800407e <handle_requestServerConnection+0xe1a>
 8003bc4:	2000063c 	.word	0x2000063c
 8003bc8:	200005f4 	.word	0x200005f4
 8003bcc:	200004a8 	.word	0x200004a8
 8003bd0:	0800b8f8 	.word	0x0800b8f8
 8003bd4:	200003d4 	.word	0x200003d4
 8003bd8:	20000740 	.word	0x20000740
 8003bdc:	0800b904 	.word	0x0800b904
 8003be0:	0800b90c 	.word	0x0800b90c
 8003be4:	0800ba0c 	.word	0x0800ba0c
 8003be8:	0800bb4c 	.word	0x0800bb4c
 8003bec:	0800ba2c 	.word	0x0800ba2c
 8003bf0:	0800ba58 	.word	0x0800ba58



		case __gsmModule_requestServerConnection_send_atSapbr3_pwd:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003bf4:	48b1      	ldr	r0, [pc, #708]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003bf6:	f7fe f99f 	bl	8001f38 <fsmManager_isStateIn>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <handle_requestServerConnection+0x9ac>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003c00:	48ae      	ldr	r0, [pc, #696]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003c02:	f7fe f9af 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003c06:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003c0a:	48ad      	ldr	r0, [pc, #692]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003c0c:	f001 fa5a 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003c10:	48ab      	ldr	r0, [pc, #684]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003c12:	f001 fa6b 	bl	80050ec <softTimer_expired>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <handle_requestServerConnection+0x9ce>
				if(gsmModule_operator == __gsmModule_operator_personal) {
 8003c1c:	4ba9      	ldr	r3, [pc, #676]	; (8003ec4 <handle_requestServerConnection+0xc60>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d106      	bne.n	8003c32 <handle_requestServerConnection+0x9ce>
					pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3pwdPersonal);
 8003c24:	48a8      	ldr	r0, [pc, #672]	; (8003ec8 <handle_requestServerConnection+0xc64>)
 8003c26:	f000 fd71 	bl	800470c <pinGsmUartTx_transmit>
					fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_pwd);
 8003c2a:	2119      	movs	r1, #25
 8003c2c:	48a3      	ldr	r0, [pc, #652]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003c2e:	f7fe f961 	bl	8001ef4 <fsmManager_gotoState>
				}
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003c32:	48a2      	ldr	r0, [pc, #648]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003c34:	f7fe f98b 	bl	8001f4e <fsmManager_isStateOut>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 8221 	beq.w	8004082 <handle_requestServerConnection+0xe1e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003c40:	489e      	ldr	r0, [pc, #632]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003c42:	f7fe f99e 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003c46:	e21c      	b.n	8004082 <handle_requestServerConnection+0xe1e>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_pwd:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003c48:	489c      	ldr	r0, [pc, #624]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003c4a:	f7fe f975 	bl	8001f38 <fsmManager_isStateIn>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <handle_requestServerConnection+0xa00>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003c54:	4899      	ldr	r0, [pc, #612]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003c56:	f7fe f985 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 3*1000);
 8003c5a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003c5e:	4898      	ldr	r0, [pc, #608]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003c60:	f001 fa30 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003c64:	4b99      	ldr	r3, [pc, #612]	; (8003ecc <handle_requestServerConnection+0xc68>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4999      	ldr	r1, [pc, #612]	; (8003ed0 <handle_requestServerConnection+0xc6c>)
 8003c6c:	4899      	ldr	r0, [pc, #612]	; (8003ed4 <handle_requestServerConnection+0xc70>)
 8003c6e:	f002 f92a 	bl	8005ec6 <string_containsWithinLength>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d004      	beq.n	8003c82 <handle_requestServerConnection+0xa1e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr1);
 8003c78:	211a      	movs	r1, #26
 8003c7a:	4890      	ldr	r0, [pc, #576]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003c7c:	f7fe f93a 	bl	8001ef4 <fsmManager_gotoState>
 8003c80:	e009      	b.n	8003c96 <handle_requestServerConnection+0xa32>
			}
			else if(softTimer_expired(&timeout)) {
 8003c82:	488f      	ldr	r0, [pc, #572]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003c84:	f001 fa32 	bl	80050ec <softTimer_expired>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <handle_requestServerConnection+0xa32>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_pwd);
 8003c8e:	2118      	movs	r1, #24
 8003c90:	488a      	ldr	r0, [pc, #552]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003c92:	f7fe f92f 	bl	8001ef4 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003c96:	4889      	ldr	r0, [pc, #548]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003c98:	f7fe f959 	bl	8001f4e <fsmManager_isStateOut>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 81f1 	beq.w	8004086 <handle_requestServerConnection+0xe22>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003ca4:	4885      	ldr	r0, [pc, #532]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003ca6:	f7fe f96c 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003caa:	e1ec      	b.n	8004086 <handle_requestServerConnection+0xe22>



		case __gsmModule_requestServerConnection_send_atSapbr1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003cac:	4883      	ldr	r0, [pc, #524]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003cae:	f7fe f943 	bl	8001f38 <fsmManager_isStateIn>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <handle_requestServerConnection+0xa64>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003cb8:	4880      	ldr	r0, [pc, #512]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003cba:	f7fe f953 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003cbe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003cc2:	487f      	ldr	r0, [pc, #508]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003cc4:	f001 f9fe 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003cc8:	487d      	ldr	r0, [pc, #500]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003cca:	f001 fa0f 	bl	80050ec <softTimer_expired>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d006      	beq.n	8003ce2 <handle_requestServerConnection+0xa7e>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr1);
 8003cd4:	4880      	ldr	r0, [pc, #512]	; (8003ed8 <handle_requestServerConnection+0xc74>)
 8003cd6:	f000 fd19 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr1);
 8003cda:	211b      	movs	r1, #27
 8003cdc:	4877      	ldr	r0, [pc, #476]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003cde:	f7fe f909 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003ce2:	4876      	ldr	r0, [pc, #472]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003ce4:	f7fe f933 	bl	8001f4e <fsmManager_isStateOut>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 81cd 	beq.w	800408a <handle_requestServerConnection+0xe26>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003cf0:	4872      	ldr	r0, [pc, #456]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003cf2:	f7fe f946 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003cf6:	e1c8      	b.n	800408a <handle_requestServerConnection+0xe26>



		case __gsmModule_requestServerConnection_waitOk_atSapbr1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003cf8:	4870      	ldr	r0, [pc, #448]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003cfa:	f7fe f91d 	bl	8001f38 <fsmManager_isStateIn>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <handle_requestServerConnection+0xab0>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003d04:	486d      	ldr	r0, [pc, #436]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003d06:	f7fe f92d 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 20*1000);
 8003d0a:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003d0e:	486c      	ldr	r0, [pc, #432]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003d10:	f001 f9d8 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003d14:	4b6d      	ldr	r3, [pc, #436]	; (8003ecc <handle_requestServerConnection+0xc68>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	496d      	ldr	r1, [pc, #436]	; (8003ed0 <handle_requestServerConnection+0xc6c>)
 8003d1c:	486d      	ldr	r0, [pc, #436]	; (8003ed4 <handle_requestServerConnection+0xc70>)
 8003d1e:	f002 f8d2 	bl	8005ec6 <string_containsWithinLength>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <handle_requestServerConnection+0xace>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr2);
 8003d28:	211c      	movs	r1, #28
 8003d2a:	4864      	ldr	r0, [pc, #400]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003d2c:	f7fe f8e2 	bl	8001ef4 <fsmManager_gotoState>
 8003d30:	e009      	b.n	8003d46 <handle_requestServerConnection+0xae2>
			}
			else if(softTimer_expired(&timeout)) {
 8003d32:	4863      	ldr	r0, [pc, #396]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003d34:	f001 f9da 	bl	80050ec <softTimer_expired>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <handle_requestServerConnection+0xae2>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr1);
 8003d3e:	211a      	movs	r1, #26
 8003d40:	485e      	ldr	r0, [pc, #376]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003d42:	f7fe f8d7 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003d46:	485d      	ldr	r0, [pc, #372]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003d48:	f7fe f901 	bl	8001f4e <fsmManager_isStateOut>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 819d 	beq.w	800408e <handle_requestServerConnection+0xe2a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003d54:	4859      	ldr	r0, [pc, #356]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003d56:	f7fe f914 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003d5a:	e198      	b.n	800408e <handle_requestServerConnection+0xe2a>



		case __gsmModule_requestServerConnection_send_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003d5c:	4857      	ldr	r0, [pc, #348]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003d5e:	f7fe f8eb 	bl	8001f38 <fsmManager_isStateIn>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <handle_requestServerConnection+0xb14>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003d68:	4854      	ldr	r0, [pc, #336]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003d6a:	f7fe f8fb 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003d6e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003d72:	4853      	ldr	r0, [pc, #332]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003d74:	f001 f9a6 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003d78:	4851      	ldr	r0, [pc, #324]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003d7a:	f001 f9b7 	bl	80050ec <softTimer_expired>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d006      	beq.n	8003d92 <handle_requestServerConnection+0xb2e>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr2);
 8003d84:	4855      	ldr	r0, [pc, #340]	; (8003edc <handle_requestServerConnection+0xc78>)
 8003d86:	f000 fcc1 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atSapbr2);
 8003d8a:	211d      	movs	r1, #29
 8003d8c:	484b      	ldr	r0, [pc, #300]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003d8e:	f7fe f8b1 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003d92:	484a      	ldr	r0, [pc, #296]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003d94:	f7fe f8db 	bl	8001f4e <fsmManager_isStateOut>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8179 	beq.w	8004092 <handle_requestServerConnection+0xe2e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003da0:	4846      	ldr	r0, [pc, #280]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003da2:	f7fe f8ee 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003da6:	e174      	b.n	8004092 <handle_requestServerConnection+0xe2e>



		case __gsmModule_requestServerConnection_check_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003da8:	4844      	ldr	r0, [pc, #272]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003daa:	f7fe f8c5 	bl	8001f38 <fsmManager_isStateIn>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <handle_requestServerConnection+0xb60>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003db4:	4841      	ldr	r0, [pc, #260]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003db6:	f7fe f8d5 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8003dba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003dbe:	4840      	ldr	r0, [pc, #256]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003dc0:	f001 f980 	bl	80050c4 <softTimer_start>
			}

			if(!string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "0.0.0.0", gsmRxDataChunkLen)) {
 8003dc4:	4b41      	ldr	r3, [pc, #260]	; (8003ecc <handle_requestServerConnection+0xc68>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4945      	ldr	r1, [pc, #276]	; (8003ee0 <handle_requestServerConnection+0xc7c>)
 8003dcc:	4841      	ldr	r0, [pc, #260]	; (8003ed4 <handle_requestServerConnection+0xc70>)
 8003dce:	f002 f87a 	bl	8005ec6 <string_containsWithinLength>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d104      	bne.n	8003de2 <handle_requestServerConnection+0xb7e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttpinit);
 8003dd8:	211e      	movs	r1, #30
 8003dda:	4838      	ldr	r0, [pc, #224]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003ddc:	f7fe f88a 	bl	8001ef4 <fsmManager_gotoState>
 8003de0:	e009      	b.n	8003df6 <handle_requestServerConnection+0xb92>
			}
			else if(softTimer_expired(&timeout)) {
 8003de2:	4837      	ldr	r0, [pc, #220]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003de4:	f001 f982 	bl	80050ec <softTimer_expired>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <handle_requestServerConnection+0xb92>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr2);
 8003dee:	211c      	movs	r1, #28
 8003df0:	4832      	ldr	r0, [pc, #200]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003df2:	f7fe f87f 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003df6:	4831      	ldr	r0, [pc, #196]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003df8:	f7fe f8a9 	bl	8001f4e <fsmManager_isStateOut>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8149 	beq.w	8004096 <handle_requestServerConnection+0xe32>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003e04:	482d      	ldr	r0, [pc, #180]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003e06:	f7fe f8bc 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003e0a:	e144      	b.n	8004096 <handle_requestServerConnection+0xe32>



		case __gsmModule_requestServerConnection_send_atHttpinit:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003e0c:	482b      	ldr	r0, [pc, #172]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003e0e:	f7fe f893 	bl	8001f38 <fsmManager_isStateIn>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <handle_requestServerConnection+0xbc4>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003e18:	4828      	ldr	r0, [pc, #160]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003e1a:	f7fe f8a3 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003e1e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003e22:	4827      	ldr	r0, [pc, #156]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003e24:	f001 f94e 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003e28:	4825      	ldr	r0, [pc, #148]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003e2a:	f001 f95f 	bl	80050ec <softTimer_expired>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d006      	beq.n	8003e42 <handle_requestServerConnection+0xbde>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpinit);
 8003e34:	482b      	ldr	r0, [pc, #172]	; (8003ee4 <handle_requestServerConnection+0xc80>)
 8003e36:	f000 fc69 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atHttpinit);
 8003e3a:	211f      	movs	r1, #31
 8003e3c:	481f      	ldr	r0, [pc, #124]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003e3e:	f7fe f859 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003e42:	481e      	ldr	r0, [pc, #120]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003e44:	f7fe f883 	bl	8001f4e <fsmManager_isStateOut>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8125 	beq.w	800409a <handle_requestServerConnection+0xe36>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003e50:	481a      	ldr	r0, [pc, #104]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003e52:	f7fe f896 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003e56:	e120      	b.n	800409a <handle_requestServerConnection+0xe36>



		case __gsmModule_requestServerConnection_waitOk_atHttpinit:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003e58:	4818      	ldr	r0, [pc, #96]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003e5a:	f7fe f86d 	bl	8001f38 <fsmManager_isStateIn>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d006      	beq.n	8003e72 <handle_requestServerConnection+0xc0e>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003e64:	4815      	ldr	r0, [pc, #84]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003e66:	f7fe f87d 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003e6a:	2164      	movs	r1, #100	; 0x64
 8003e6c:	4814      	ldr	r0, [pc, #80]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003e6e:	f001 f929 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003e72:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <handle_requestServerConnection+0xc68>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	4915      	ldr	r1, [pc, #84]	; (8003ed0 <handle_requestServerConnection+0xc6c>)
 8003e7a:	4816      	ldr	r0, [pc, #88]	; (8003ed4 <handle_requestServerConnection+0xc70>)
 8003e7c:	f002 f823 	bl	8005ec6 <string_containsWithinLength>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d004      	beq.n	8003e90 <handle_requestServerConnection+0xc2c>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttppara_cid);
 8003e86:	2120      	movs	r1, #32
 8003e88:	480c      	ldr	r0, [pc, #48]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003e8a:	f7fe f833 	bl	8001ef4 <fsmManager_gotoState>
 8003e8e:	e009      	b.n	8003ea4 <handle_requestServerConnection+0xc40>
			}
			else if(softTimer_expired(&timeout)) {
 8003e90:	480b      	ldr	r0, [pc, #44]	; (8003ec0 <handle_requestServerConnection+0xc5c>)
 8003e92:	f001 f92b 	bl	80050ec <softTimer_expired>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <handle_requestServerConnection+0xc40>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttpinit);
 8003e9c:	211e      	movs	r1, #30
 8003e9e:	4807      	ldr	r0, [pc, #28]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003ea0:	f7fe f828 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003ea4:	4805      	ldr	r0, [pc, #20]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003ea6:	f7fe f852 	bl	8001f4e <fsmManager_isStateOut>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80f6 	beq.w	800409e <handle_requestServerConnection+0xe3a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003eb2:	4802      	ldr	r0, [pc, #8]	; (8003ebc <handle_requestServerConnection+0xc58>)
 8003eb4:	f7fe f865 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003eb8:	e0f1      	b.n	800409e <handle_requestServerConnection+0xe3a>
 8003eba:	bf00      	nop
 8003ebc:	2000063c 	.word	0x2000063c
 8003ec0:	200005f4 	.word	0x200005f4
 8003ec4:	20000740 	.word	0x20000740
 8003ec8:	0800ba78 	.word	0x0800ba78
 8003ecc:	200004a8 	.word	0x200004a8
 8003ed0:	0800bb4c 	.word	0x0800bb4c
 8003ed4:	200003d4 	.word	0x200003d4
 8003ed8:	0800ba94 	.word	0x0800ba94
 8003edc:	0800baa4 	.word	0x0800baa4
 8003ee0:	0800b918 	.word	0x0800b918
 8003ee4:	0800bac0 	.word	0x0800bac0



		case __gsmModule_requestServerConnection_send_atHttppara_cid:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003ee8:	4872      	ldr	r0, [pc, #456]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003eea:	f7fe f825 	bl	8001f38 <fsmManager_isStateIn>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <handle_requestServerConnection+0xca0>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003ef4:	486f      	ldr	r0, [pc, #444]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003ef6:	f7fe f835 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1*1000);
 8003efa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003efe:	486e      	ldr	r0, [pc, #440]	; (80040b8 <handle_requestServerConnection+0xe54>)
 8003f00:	f001 f8e0 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8003f04:	486c      	ldr	r0, [pc, #432]	; (80040b8 <handle_requestServerConnection+0xe54>)
 8003f06:	f001 f8f1 	bl	80050ec <softTimer_expired>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d006      	beq.n	8003f1e <handle_requestServerConnection+0xcba>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httppara_cid);
 8003f10:	486a      	ldr	r0, [pc, #424]	; (80040bc <handle_requestServerConnection+0xe58>)
 8003f12:	f000 fbfb 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atHttppara_cid);
 8003f16:	2121      	movs	r1, #33	; 0x21
 8003f18:	4866      	ldr	r0, [pc, #408]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003f1a:	f7fd ffeb 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003f1e:	4865      	ldr	r0, [pc, #404]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003f20:	f7fe f815 	bl	8001f4e <fsmManager_isStateOut>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80bb 	beq.w	80040a2 <handle_requestServerConnection+0xe3e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003f2c:	4861      	ldr	r0, [pc, #388]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003f2e:	f7fe f828 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003f32:	e0b6      	b.n	80040a2 <handle_requestServerConnection+0xe3e>



		case __gsmModule_requestServerConnection_waitOk_atHttppara_cid:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003f34:	485f      	ldr	r0, [pc, #380]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003f36:	f7fd ffff 	bl	8001f38 <fsmManager_isStateIn>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <handle_requestServerConnection+0xcec>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003f40:	485c      	ldr	r0, [pc, #368]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003f42:	f7fe f80f 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003f46:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003f4a:	485b      	ldr	r0, [pc, #364]	; (80040b8 <handle_requestServerConnection+0xe54>)
 8003f4c:	f001 f8ba 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003f50:	4b5b      	ldr	r3, [pc, #364]	; (80040c0 <handle_requestServerConnection+0xe5c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	495b      	ldr	r1, [pc, #364]	; (80040c4 <handle_requestServerConnection+0xe60>)
 8003f58:	485b      	ldr	r0, [pc, #364]	; (80040c8 <handle_requestServerConnection+0xe64>)
 8003f5a:	f001 ffb4 	bl	8005ec6 <string_containsWithinLength>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00e      	beq.n	8003f82 <handle_requestServerConnection+0xd1e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 8003f64:	2100      	movs	r1, #0
 8003f66:	4853      	ldr	r0, [pc, #332]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003f68:	f7fd ffc4 	bl	8001ef4 <fsmManager_gotoState>

				flags_gsmModule.bits.isServerConnected = 1;
 8003f6c:	4a57      	ldr	r2, [pc, #348]	; (80040cc <handle_requestServerConnection+0xe68>)
 8003f6e:	7853      	ldrb	r3, [r2, #1]
 8003f70:	f043 0320 	orr.w	r3, r3, #32
 8003f74:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerConnection = 0;
 8003f76:	4a55      	ldr	r2, [pc, #340]	; (80040cc <handle_requestServerConnection+0xe68>)
 8003f78:	7813      	ldrb	r3, [r2, #0]
 8003f7a:	f36f 1345 	bfc	r3, #5, #1
 8003f7e:	7013      	strb	r3, [r2, #0]
 8003f80:	e009      	b.n	8003f96 <handle_requestServerConnection+0xd32>
			}
			else if(softTimer_expired(&timeout)) {
 8003f82:	484d      	ldr	r0, [pc, #308]	; (80040b8 <handle_requestServerConnection+0xe54>)
 8003f84:	f001 f8b2 	bl	80050ec <softTimer_expired>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <handle_requestServerConnection+0xd32>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttppara_cid);
 8003f8e:	2120      	movs	r1, #32
 8003f90:	4848      	ldr	r0, [pc, #288]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003f92:	f7fd ffaf 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003f96:	4847      	ldr	r0, [pc, #284]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003f98:	f7fd ffd9 	bl	8001f4e <fsmManager_isStateOut>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8081 	beq.w	80040a6 <handle_requestServerConnection+0xe42>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003fa4:	4843      	ldr	r0, [pc, #268]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003fa6:	f7fd ffec 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003faa:	e07c      	b.n	80040a6 <handle_requestServerConnection+0xe42>



		case __gsmModule_requestServerConnection_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003fac:	4841      	ldr	r0, [pc, #260]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003fae:	f7fd ffc3 	bl	8001f38 <fsmManager_isStateIn>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <handle_requestServerConnection+0xd5a>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003fb8:	483e      	ldr	r0, [pc, #248]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003fba:	f7fd ffd3 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverConnection = 1;
 8003fbe:	4a44      	ldr	r2, [pc, #272]	; (80040d0 <handle_requestServerConnection+0xe6c>)
 8003fc0:	7813      	ldrb	r3, [r2, #0]
 8003fc2:	f043 0320 	orr.w	r3, r3, #32
 8003fc6:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerConnection = 0;
 8003fc8:	4a40      	ldr	r2, [pc, #256]	; (80040cc <handle_requestServerConnection+0xe68>)
 8003fca:	7813      	ldrb	r3, [r2, #0]
 8003fcc:	f36f 1345 	bfc	r3, #5, #1
 8003fd0:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4837      	ldr	r0, [pc, #220]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003fd6:	f7fd ff8d 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003fda:	4836      	ldr	r0, [pc, #216]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003fdc:	f7fd ffb7 	bl	8001f4e <fsmManager_isStateOut>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d061      	beq.n	80040aa <handle_requestServerConnection+0xe46>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003fe6:	4833      	ldr	r0, [pc, #204]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003fe8:	f7fd ffcb 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8003fec:	e05d      	b.n	80040aa <handle_requestServerConnection+0xe46>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003fee:	4831      	ldr	r0, [pc, #196]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003ff0:	f7fd ffa2 	bl	8001f38 <fsmManager_isStateIn>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <handle_requestServerConnection+0xd9c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003ffa:	482e      	ldr	r0, [pc, #184]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8003ffc:	f7fd ffb2 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestServerConnection = 0;
 8004000:	4a32      	ldr	r2, [pc, #200]	; (80040cc <handle_requestServerConnection+0xe68>)
 8004002:	7813      	ldrb	r3, [r2, #0]
 8004004:	f36f 1345 	bfc	r3, #5, #1
 8004008:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 800400a:	2100      	movs	r1, #0
 800400c:	4829      	ldr	r0, [pc, #164]	; (80040b4 <handle_requestServerConnection+0xe50>)
 800400e:	f7fd ff71 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8004012:	4828      	ldr	r0, [pc, #160]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8004014:	f7fd ff9b 	bl	8001f4e <fsmManager_isStateOut>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d047      	beq.n	80040ae <handle_requestServerConnection+0xe4a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800401e:	4825      	ldr	r0, [pc, #148]	; (80040b4 <handle_requestServerConnection+0xe50>)
 8004020:	f7fd ffaf 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8004024:	e043      	b.n	80040ae <handle_requestServerConnection+0xe4a>
			break;
 8004026:	bf00      	nop
 8004028:	e042      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800402a:	bf00      	nop
 800402c:	e040      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800402e:	bf00      	nop
 8004030:	e03e      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004032:	bf00      	nop
 8004034:	e03c      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004036:	bf00      	nop
 8004038:	e03a      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800403a:	bf00      	nop
 800403c:	e038      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800403e:	bf00      	nop
 8004040:	e036      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004042:	bf00      	nop
 8004044:	e034      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004046:	bf00      	nop
 8004048:	e032      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800404a:	bf00      	nop
 800404c:	e030      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800404e:	bf00      	nop
 8004050:	e02e      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004052:	bf00      	nop
 8004054:	e02c      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004056:	bf00      	nop
 8004058:	e02a      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800405a:	bf00      	nop
 800405c:	e028      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800405e:	bf00      	nop
 8004060:	e026      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004062:	bf00      	nop
 8004064:	e024      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004066:	bf00      	nop
 8004068:	e022      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800406a:	bf00      	nop
 800406c:	e020      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800406e:	bf00      	nop
 8004070:	e01e      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004072:	bf00      	nop
 8004074:	e01c      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004076:	bf00      	nop
 8004078:	e01a      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800407a:	bf00      	nop
 800407c:	e018      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800407e:	bf00      	nop
 8004080:	e016      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004082:	bf00      	nop
 8004084:	e014      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004086:	bf00      	nop
 8004088:	e012      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800408a:	bf00      	nop
 800408c:	e010      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800408e:	bf00      	nop
 8004090:	e00e      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004092:	bf00      	nop
 8004094:	e00c      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 8004096:	bf00      	nop
 8004098:	e00a      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800409a:	bf00      	nop
 800409c:	e008      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 800409e:	bf00      	nop
 80040a0:	e006      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 80040a2:	bf00      	nop
 80040a4:	e004      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 80040a6:	bf00      	nop
 80040a8:	e002      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <handle_requestServerConnection+0xe4c>
			break;
 80040ae:	bf00      	nop
	}
}
 80040b0:	bf00      	nop
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	2000063c 	.word	0x2000063c
 80040b8:	200005f4 	.word	0x200005f4
 80040bc:	0800bad0 	.word	0x0800bad0
 80040c0:	200004a8 	.word	0x200004a8
 80040c4:	0800bb4c 	.word	0x0800bb4c
 80040c8:	200003d4 	.word	0x200003d4
 80040cc:	200005dc 	.word	0x200005dc
 80040d0:	200005e0 	.word	0x200005e0

080040d4 <handle_requestServerDataSend>:

static void handle_requestServerDataSend(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerDataSend_state)) {
 80040d8:	489a      	ldr	r0, [pc, #616]	; (8004344 <handle_requestServerDataSend+0x270>)
 80040da:	f7fd ff22 	bl	8001f22 <fsmManager_getState>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b05      	cmp	r3, #5
 80040e2:	f200 8109 	bhi.w	80042f8 <handle_requestServerDataSend+0x224>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <handle_requestServerDataSend+0x18>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004105 	.word	0x08004105
 80040f0:	08004135 	.word	0x08004135
 80040f4:	08004181 	.word	0x08004181
 80040f8:	080041e5 	.word	0x080041e5
 80040fc:	08004231 	.word	0x08004231
 8004100:	080042b7 	.word	0x080042b7
		case __gsmModule_requestServerDataSend_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8004104:	488f      	ldr	r0, [pc, #572]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004106:	f7fd ff17 	bl	8001f38 <fsmManager_isStateIn>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <handle_requestServerDataSend+0x42>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8004110:	488c      	ldr	r0, [pc, #560]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004112:	f7fd ff27 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_send_atHttppara_url);
 8004116:	2101      	movs	r1, #1
 8004118:	488a      	ldr	r0, [pc, #552]	; (8004344 <handle_requestServerDataSend+0x270>)
 800411a:	f7fd feeb 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 800411e:	4889      	ldr	r0, [pc, #548]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004120:	f7fd ff15 	bl	8001f4e <fsmManager_isStateOut>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80fd 	beq.w	8004326 <handle_requestServerDataSend+0x252>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 800412c:	4885      	ldr	r0, [pc, #532]	; (8004344 <handle_requestServerDataSend+0x270>)
 800412e:	f7fd ff28 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8004132:	e0f8      	b.n	8004326 <handle_requestServerDataSend+0x252>

		case __gsmModule_requestServerDataSend_send_atHttppara_url:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8004134:	4883      	ldr	r0, [pc, #524]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004136:	f7fd feff 	bl	8001f38 <fsmManager_isStateIn>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <handle_requestServerDataSend+0x7c>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8004140:	4880      	ldr	r0, [pc, #512]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004142:	f7fd ff0f 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 3*1000);
 8004146:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800414a:	487f      	ldr	r0, [pc, #508]	; (8004348 <handle_requestServerDataSend+0x274>)
 800414c:	f000 ffba 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8004150:	487d      	ldr	r0, [pc, #500]	; (8004348 <handle_requestServerDataSend+0x274>)
 8004152:	f000 ffcb 	bl	80050ec <softTimer_expired>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d006      	beq.n	800416a <handle_requestServerDataSend+0x96>
				pinGsmUartTx_transmit((uint8_t *) dataToSend);
 800415c:	487b      	ldr	r0, [pc, #492]	; (800434c <handle_requestServerDataSend+0x278>)
 800415e:	f000 fad5 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_waitOk_atHttppara_url);
 8004162:	2102      	movs	r1, #2
 8004164:	4877      	ldr	r0, [pc, #476]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004166:	f7fd fec5 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 800416a:	4876      	ldr	r0, [pc, #472]	; (8004344 <handle_requestServerDataSend+0x270>)
 800416c:	f7fd feef 	bl	8001f4e <fsmManager_isStateOut>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80d9 	beq.w	800432a <handle_requestServerDataSend+0x256>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8004178:	4872      	ldr	r0, [pc, #456]	; (8004344 <handle_requestServerDataSend+0x270>)
 800417a:	f7fd ff02 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800417e:	e0d4      	b.n	800432a <handle_requestServerDataSend+0x256>

		case __gsmModule_requestServerDataSend_waitOk_atHttppara_url:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8004180:	4870      	ldr	r0, [pc, #448]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004182:	f7fd fed9 	bl	8001f38 <fsmManager_isStateIn>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <handle_requestServerDataSend+0xc8>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 800418c:	486d      	ldr	r0, [pc, #436]	; (8004344 <handle_requestServerDataSend+0x270>)
 800418e:	f7fd fee9 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 5*1000);
 8004192:	f241 3188 	movw	r1, #5000	; 0x1388
 8004196:	486c      	ldr	r0, [pc, #432]	; (8004348 <handle_requestServerDataSend+0x274>)
 8004198:	f000 ff94 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800419c:	4b6c      	ldr	r3, [pc, #432]	; (8004350 <handle_requestServerDataSend+0x27c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	496c      	ldr	r1, [pc, #432]	; (8004354 <handle_requestServerDataSend+0x280>)
 80041a4:	486c      	ldr	r0, [pc, #432]	; (8004358 <handle_requestServerDataSend+0x284>)
 80041a6:	f001 fe8e 	bl	8005ec6 <string_containsWithinLength>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <handle_requestServerDataSend+0xe6>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_send_atHttpaction1);
 80041b0:	2103      	movs	r1, #3
 80041b2:	4864      	ldr	r0, [pc, #400]	; (8004344 <handle_requestServerDataSend+0x270>)
 80041b4:	f7fd fe9e 	bl	8001ef4 <fsmManager_gotoState>
 80041b8:	e009      	b.n	80041ce <handle_requestServerDataSend+0xfa>
			}
			else if(softTimer_expired(&timeout)) {
 80041ba:	4863      	ldr	r0, [pc, #396]	; (8004348 <handle_requestServerDataSend+0x274>)
 80041bc:	f000 ff96 	bl	80050ec <softTimer_expired>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <handle_requestServerDataSend+0xfa>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_send_atHttppara_url);
 80041c6:	2101      	movs	r1, #1
 80041c8:	485e      	ldr	r0, [pc, #376]	; (8004344 <handle_requestServerDataSend+0x270>)
 80041ca:	f7fd fe93 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 80041ce:	485d      	ldr	r0, [pc, #372]	; (8004344 <handle_requestServerDataSend+0x270>)
 80041d0:	f7fd febd 	bl	8001f4e <fsmManager_isStateOut>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80a9 	beq.w	800432e <handle_requestServerDataSend+0x25a>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 80041dc:	4859      	ldr	r0, [pc, #356]	; (8004344 <handle_requestServerDataSend+0x270>)
 80041de:	f7fd fed0 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80041e2:	e0a4      	b.n	800432e <handle_requestServerDataSend+0x25a>

		case __gsmModule_requestServerDataSend_send_atHttpaction1:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 80041e4:	4857      	ldr	r0, [pc, #348]	; (8004344 <handle_requestServerDataSend+0x270>)
 80041e6:	f7fd fea7 	bl	8001f38 <fsmManager_isStateIn>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d007      	beq.n	8004200 <handle_requestServerDataSend+0x12c>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 80041f0:	4854      	ldr	r0, [pc, #336]	; (8004344 <handle_requestServerDataSend+0x270>)
 80041f2:	f7fd feb7 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 3*1000);
 80041f6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80041fa:	4853      	ldr	r0, [pc, #332]	; (8004348 <handle_requestServerDataSend+0x274>)
 80041fc:	f000 ff62 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8004200:	4851      	ldr	r0, [pc, #324]	; (8004348 <handle_requestServerDataSend+0x274>)
 8004202:	f000 ff73 	bl	80050ec <softTimer_expired>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d006      	beq.n	800421a <handle_requestServerDataSend+0x146>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpaction1);
 800420c:	4853      	ldr	r0, [pc, #332]	; (800435c <handle_requestServerDataSend+0x288>)
 800420e:	f000 fa7d 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_waitOk_atHttpaction1);
 8004212:	2104      	movs	r1, #4
 8004214:	484b      	ldr	r0, [pc, #300]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004216:	f7fd fe6d 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 800421a:	484a      	ldr	r0, [pc, #296]	; (8004344 <handle_requestServerDataSend+0x270>)
 800421c:	f7fd fe97 	bl	8001f4e <fsmManager_isStateOut>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8085 	beq.w	8004332 <handle_requestServerDataSend+0x25e>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8004228:	4846      	ldr	r0, [pc, #280]	; (8004344 <handle_requestServerDataSend+0x270>)
 800422a:	f7fd feaa 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800422e:	e080      	b.n	8004332 <handle_requestServerDataSend+0x25e>

		case __gsmModule_requestServerDataSend_waitOk_atHttpaction1:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8004230:	4844      	ldr	r0, [pc, #272]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004232:	f7fd fe81 	bl	8001f38 <fsmManager_isStateIn>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d006      	beq.n	800424a <handle_requestServerDataSend+0x176>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 800423c:	4841      	ldr	r0, [pc, #260]	; (8004344 <handle_requestServerDataSend+0x270>)
 800423e:	f7fd fe91 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 120*1000);
 8004242:	4947      	ldr	r1, [pc, #284]	; (8004360 <handle_requestServerDataSend+0x28c>)
 8004244:	4840      	ldr	r0, [pc, #256]	; (8004348 <handle_requestServerDataSend+0x274>)
 8004246:	f000 ff3d 	bl	80050c4 <softTimer_start>
			}

			if(flags_gsmModuleUnsolicited.bits.httpActionOk == 1) {
 800424a:	4b46      	ldr	r3, [pc, #280]	; (8004364 <handle_requestServerDataSend+0x290>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00e      	beq.n	8004276 <handle_requestServerDataSend+0x1a2>
				flags_gsmModule.bits.isServerDataSent = 1;
 8004258:	4a43      	ldr	r2, [pc, #268]	; (8004368 <handle_requestServerDataSend+0x294>)
 800425a:	7853      	ldrb	r3, [r2, #1]
 800425c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004260:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerDataSend = 0;
 8004262:	4a41      	ldr	r2, [pc, #260]	; (8004368 <handle_requestServerDataSend+0x294>)
 8004264:	7813      	ldrb	r3, [r2, #0]
 8004266:	f36f 1386 	bfc	r3, #6, #1
 800426a:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 800426c:	2100      	movs	r1, #0
 800426e:	4835      	ldr	r0, [pc, #212]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004270:	f7fd fe40 	bl	8001ef4 <fsmManager_gotoState>
 8004274:	e015      	b.n	80042a2 <handle_requestServerDataSend+0x1ce>
			}
			else if(flags_gsmModuleUnsolicited.bits.httpActionError == 1) {
 8004276:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <handle_requestServerDataSend+0x290>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <handle_requestServerDataSend+0x1ba>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_error);
 8004284:	2105      	movs	r1, #5
 8004286:	482f      	ldr	r0, [pc, #188]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004288:	f7fd fe34 	bl	8001ef4 <fsmManager_gotoState>
 800428c:	e009      	b.n	80042a2 <handle_requestServerDataSend+0x1ce>
			}
			else if(softTimer_expired(&timeout)) {
 800428e:	482e      	ldr	r0, [pc, #184]	; (8004348 <handle_requestServerDataSend+0x274>)
 8004290:	f000 ff2c 	bl	80050ec <softTimer_expired>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <handle_requestServerDataSend+0x1ce>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_waitOk_atHttpaction1);
 800429a:	2104      	movs	r1, #4
 800429c:	4829      	ldr	r0, [pc, #164]	; (8004344 <handle_requestServerDataSend+0x270>)
 800429e:	f7fd fe29 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 80042a2:	4828      	ldr	r0, [pc, #160]	; (8004344 <handle_requestServerDataSend+0x270>)
 80042a4:	f7fd fe53 	bl	8001f4e <fsmManager_isStateOut>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d043      	beq.n	8004336 <handle_requestServerDataSend+0x262>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 80042ae:	4825      	ldr	r0, [pc, #148]	; (8004344 <handle_requestServerDataSend+0x270>)
 80042b0:	f7fd fe67 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80042b4:	e03f      	b.n	8004336 <handle_requestServerDataSend+0x262>

		case __gsmModule_requestServerDataSend_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 80042b6:	4823      	ldr	r0, [pc, #140]	; (8004344 <handle_requestServerDataSend+0x270>)
 80042b8:	f7fd fe3e 	bl	8001f38 <fsmManager_isStateIn>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <handle_requestServerDataSend+0x1f4>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 80042c2:	4820      	ldr	r0, [pc, #128]	; (8004344 <handle_requestServerDataSend+0x270>)
 80042c4:	f7fd fe4e 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverSendData = 1;
 80042c8:	4a28      	ldr	r2, [pc, #160]	; (800436c <handle_requestServerDataSend+0x298>)
 80042ca:	7813      	ldrb	r3, [r2, #0]
 80042cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d0:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerDataSend = 0;
 80042d2:	4a25      	ldr	r2, [pc, #148]	; (8004368 <handle_requestServerDataSend+0x294>)
 80042d4:	7813      	ldrb	r3, [r2, #0]
 80042d6:	f36f 1386 	bfc	r3, #6, #1
 80042da:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 80042dc:	2100      	movs	r1, #0
 80042de:	4819      	ldr	r0, [pc, #100]	; (8004344 <handle_requestServerDataSend+0x270>)
 80042e0:	f7fd fe08 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 80042e4:	4817      	ldr	r0, [pc, #92]	; (8004344 <handle_requestServerDataSend+0x270>)
 80042e6:	f7fd fe32 	bl	8001f4e <fsmManager_isStateOut>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d024      	beq.n	800433a <handle_requestServerDataSend+0x266>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 80042f0:	4814      	ldr	r0, [pc, #80]	; (8004344 <handle_requestServerDataSend+0x270>)
 80042f2:	f7fd fe46 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80042f6:	e020      	b.n	800433a <handle_requestServerDataSend+0x266>

		default:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 80042f8:	4812      	ldr	r0, [pc, #72]	; (8004344 <handle_requestServerDataSend+0x270>)
 80042fa:	f7fd fe1d 	bl	8001f38 <fsmManager_isStateIn>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <handle_requestServerDataSend+0x236>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8004304:	480f      	ldr	r0, [pc, #60]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004306:	f7fd fe2d 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 800430a:	2100      	movs	r1, #0
 800430c:	480d      	ldr	r0, [pc, #52]	; (8004344 <handle_requestServerDataSend+0x270>)
 800430e:	f7fd fdf1 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8004312:	480c      	ldr	r0, [pc, #48]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004314:	f7fd fe1b 	bl	8001f4e <fsmManager_isStateOut>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00f      	beq.n	800433e <handle_requestServerDataSend+0x26a>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 800431e:	4809      	ldr	r0, [pc, #36]	; (8004344 <handle_requestServerDataSend+0x270>)
 8004320:	f7fd fe2f 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8004324:	e00b      	b.n	800433e <handle_requestServerDataSend+0x26a>
			break;
 8004326:	bf00      	nop
 8004328:	e00a      	b.n	8004340 <handle_requestServerDataSend+0x26c>
			break;
 800432a:	bf00      	nop
 800432c:	e008      	b.n	8004340 <handle_requestServerDataSend+0x26c>
			break;
 800432e:	bf00      	nop
 8004330:	e006      	b.n	8004340 <handle_requestServerDataSend+0x26c>
			break;
 8004332:	bf00      	nop
 8004334:	e004      	b.n	8004340 <handle_requestServerDataSend+0x26c>
			break;
 8004336:	bf00      	nop
 8004338:	e002      	b.n	8004340 <handle_requestServerDataSend+0x26c>
			break;
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <handle_requestServerDataSend+0x26c>
			break;
 800433e:	bf00      	nop
	}
}
 8004340:	bf00      	nop
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000648 	.word	0x20000648
 8004348:	200005f4 	.word	0x200005f4
 800434c:	200004b0 	.word	0x200004b0
 8004350:	200004a8 	.word	0x200004a8
 8004354:	0800bb4c 	.word	0x0800bb4c
 8004358:	200003d4 	.word	0x200003d4
 800435c:	0800bb18 	.word	0x0800bb18
 8004360:	0001d4c0 	.word	0x0001d4c0
 8004364:	200005e4 	.word	0x200005e4
 8004368:	200005dc 	.word	0x200005dc
 800436c:	200005e0 	.word	0x200005e0

08004370 <handle_requestServerDisconnection>:

static void handle_requestServerDisconnection(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerDisconnection_state)) {
 8004374:	48c1      	ldr	r0, [pc, #772]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004376:	f7fd fdd4 	bl	8001f22 <fsmManager_getState>
 800437a:	4603      	mov	r3, r0
 800437c:	2b07      	cmp	r3, #7
 800437e:	f200 815b 	bhi.w	8004638 <handle_requestServerDisconnection+0x2c8>
 8004382:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <handle_requestServerDisconnection+0x18>)
 8004384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004388:	080043a9 	.word	0x080043a9
 800438c:	080043d9 	.word	0x080043d9
 8004390:	08004425 	.word	0x08004425
 8004394:	08004487 	.word	0x08004487
 8004398:	080044d3 	.word	0x080044d3
 800439c:	08004537 	.word	0x08004537
 80043a0:	08004583 	.word	0x08004583
 80043a4:	080045f7 	.word	0x080045f7
		case __gsmModule_requestServerDisconnection_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 80043a8:	48b4      	ldr	r0, [pc, #720]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80043aa:	f7fd fdc5 	bl	8001f38 <fsmManager_isStateIn>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <handle_requestServerDisconnection+0x4a>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 80043b4:	48b1      	ldr	r0, [pc, #708]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80043b6:	f7fd fdd5 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atHttpterm);
 80043ba:	2101      	movs	r1, #1
 80043bc:	48af      	ldr	r0, [pc, #700]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80043be:	f7fd fd99 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 80043c2:	48ae      	ldr	r0, [pc, #696]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80043c4:	f7fd fdc3 	bl	8001f4e <fsmManager_isStateOut>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8150 	beq.w	8004670 <handle_requestServerDisconnection+0x300>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 80043d0:	48aa      	ldr	r0, [pc, #680]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80043d2:	f7fd fdd6 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80043d6:	e14b      	b.n	8004670 <handle_requestServerDisconnection+0x300>



		case __gsmModule_requestServerDisconnection_send_atHttpterm:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 80043d8:	48a8      	ldr	r0, [pc, #672]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80043da:	f7fd fdad 	bl	8001f38 <fsmManager_isStateIn>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <handle_requestServerDisconnection+0x84>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 80043e4:	48a5      	ldr	r0, [pc, #660]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80043e6:	f7fd fdbd 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 80043ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80043ee:	48a4      	ldr	r0, [pc, #656]	; (8004680 <handle_requestServerDisconnection+0x310>)
 80043f0:	f000 fe68 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80043f4:	48a2      	ldr	r0, [pc, #648]	; (8004680 <handle_requestServerDisconnection+0x310>)
 80043f6:	f000 fe79 	bl	80050ec <softTimer_expired>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d006      	beq.n	800440e <handle_requestServerDisconnection+0x9e>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpterm);
 8004400:	48a0      	ldr	r0, [pc, #640]	; (8004684 <handle_requestServerDisconnection+0x314>)
 8004402:	f000 f983 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_waitOk_atHttpterm);
 8004406:	2102      	movs	r1, #2
 8004408:	489c      	ldr	r0, [pc, #624]	; (800467c <handle_requestServerDisconnection+0x30c>)
 800440a:	f7fd fd73 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 800440e:	489b      	ldr	r0, [pc, #620]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004410:	f7fd fd9d 	bl	8001f4e <fsmManager_isStateOut>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 812c 	beq.w	8004674 <handle_requestServerDisconnection+0x304>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 800441c:	4897      	ldr	r0, [pc, #604]	; (800467c <handle_requestServerDisconnection+0x30c>)
 800441e:	f7fd fdb0 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8004422:	e127      	b.n	8004674 <handle_requestServerDisconnection+0x304>



		case __gsmModule_requestServerDisconnection_waitOk_atHttpterm:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004424:	4895      	ldr	r0, [pc, #596]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004426:	f7fd fd87 	bl	8001f38 <fsmManager_isStateIn>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d006      	beq.n	800443e <handle_requestServerDisconnection+0xce>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8004430:	4892      	ldr	r0, [pc, #584]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004432:	f7fd fd97 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8004436:	2164      	movs	r1, #100	; 0x64
 8004438:	4891      	ldr	r0, [pc, #580]	; (8004680 <handle_requestServerDisconnection+0x310>)
 800443a:	f000 fe43 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 800443e:	4b92      	ldr	r3, [pc, #584]	; (8004688 <handle_requestServerDisconnection+0x318>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	4991      	ldr	r1, [pc, #580]	; (800468c <handle_requestServerDisconnection+0x31c>)
 8004446:	4892      	ldr	r0, [pc, #584]	; (8004690 <handle_requestServerDisconnection+0x320>)
 8004448:	f001 fd3d 	bl	8005ec6 <string_containsWithinLength>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <handle_requestServerDisconnection+0xec>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr0);
 8004452:	2103      	movs	r1, #3
 8004454:	4889      	ldr	r0, [pc, #548]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004456:	f7fd fd4d 	bl	8001ef4 <fsmManager_gotoState>
 800445a:	e009      	b.n	8004470 <handle_requestServerDisconnection+0x100>
			}
			else if(softTimer_expired(&timeout)) {
 800445c:	4888      	ldr	r0, [pc, #544]	; (8004680 <handle_requestServerDisconnection+0x310>)
 800445e:	f000 fe45 	bl	80050ec <softTimer_expired>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <handle_requestServerDisconnection+0x100>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atHttpterm);
 8004468:	2101      	movs	r1, #1
 800446a:	4884      	ldr	r0, [pc, #528]	; (800467c <handle_requestServerDisconnection+0x30c>)
 800446c:	f7fd fd42 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8004470:	4882      	ldr	r0, [pc, #520]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004472:	f7fd fd6c 	bl	8001f4e <fsmManager_isStateOut>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80fd 	beq.w	8004678 <handle_requestServerDisconnection+0x308>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 800447e:	487f      	ldr	r0, [pc, #508]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004480:	f7fd fd7f 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8004484:	e0f8      	b.n	8004678 <handle_requestServerDisconnection+0x308>



		case __gsmModule_requestServerDisconnection_send_atSapbr0:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004486:	487d      	ldr	r0, [pc, #500]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004488:	f7fd fd56 	bl	8001f38 <fsmManager_isStateIn>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <handle_requestServerDisconnection+0x132>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8004492:	487a      	ldr	r0, [pc, #488]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004494:	f7fd fd66 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8004498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800449c:	4878      	ldr	r0, [pc, #480]	; (8004680 <handle_requestServerDisconnection+0x310>)
 800449e:	f000 fe11 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80044a2:	4877      	ldr	r0, [pc, #476]	; (8004680 <handle_requestServerDisconnection+0x310>)
 80044a4:	f000 fe22 	bl	80050ec <softTimer_expired>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d006      	beq.n	80044bc <handle_requestServerDisconnection+0x14c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr0);
 80044ae:	4879      	ldr	r0, [pc, #484]	; (8004694 <handle_requestServerDisconnection+0x324>)
 80044b0:	f000 f92c 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_waitOk_atSapbr0);
 80044b4:	2104      	movs	r1, #4
 80044b6:	4871      	ldr	r0, [pc, #452]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80044b8:	f7fd fd1c 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 80044bc:	486f      	ldr	r0, [pc, #444]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80044be:	f7fd fd46 	bl	8001f4e <fsmManager_isStateOut>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80ef 	beq.w	80046a8 <handle_requestServerDisconnection+0x338>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 80044ca:	486c      	ldr	r0, [pc, #432]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80044cc:	f7fd fd59 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80044d0:	e0ea      	b.n	80046a8 <handle_requestServerDisconnection+0x338>



		case __gsmModule_requestServerDisconnection_waitOk_atSapbr0:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 80044d2:	486a      	ldr	r0, [pc, #424]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80044d4:	f7fd fd30 	bl	8001f38 <fsmManager_isStateIn>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <handle_requestServerDisconnection+0x17e>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 80044de:	4867      	ldr	r0, [pc, #412]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80044e0:	f7fd fd40 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 65*1000);
 80044e4:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 80044e8:	4865      	ldr	r0, [pc, #404]	; (8004680 <handle_requestServerDisconnection+0x310>)
 80044ea:	f000 fdeb 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80044ee:	4b66      	ldr	r3, [pc, #408]	; (8004688 <handle_requestServerDisconnection+0x318>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	4965      	ldr	r1, [pc, #404]	; (800468c <handle_requestServerDisconnection+0x31c>)
 80044f6:	4866      	ldr	r0, [pc, #408]	; (8004690 <handle_requestServerDisconnection+0x320>)
 80044f8:	f001 fce5 	bl	8005ec6 <string_containsWithinLength>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <handle_requestServerDisconnection+0x19c>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr2);
 8004502:	2105      	movs	r1, #5
 8004504:	485d      	ldr	r0, [pc, #372]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004506:	f7fd fcf5 	bl	8001ef4 <fsmManager_gotoState>
 800450a:	e009      	b.n	8004520 <handle_requestServerDisconnection+0x1b0>
			}
			else if(softTimer_expired(&timeout)) {
 800450c:	485c      	ldr	r0, [pc, #368]	; (8004680 <handle_requestServerDisconnection+0x310>)
 800450e:	f000 fded 	bl	80050ec <softTimer_expired>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <handle_requestServerDisconnection+0x1b0>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr0);
 8004518:	2103      	movs	r1, #3
 800451a:	4858      	ldr	r0, [pc, #352]	; (800467c <handle_requestServerDisconnection+0x30c>)
 800451c:	f7fd fcea 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8004520:	4856      	ldr	r0, [pc, #344]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004522:	f7fd fd14 	bl	8001f4e <fsmManager_isStateOut>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80bf 	beq.w	80046ac <handle_requestServerDisconnection+0x33c>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 800452e:	4853      	ldr	r0, [pc, #332]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004530:	f7fd fd27 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8004534:	e0ba      	b.n	80046ac <handle_requestServerDisconnection+0x33c>



		case __gsmModule_requestServerDisconnection_send_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004536:	4851      	ldr	r0, [pc, #324]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004538:	f7fd fcfe 	bl	8001f38 <fsmManager_isStateIn>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <handle_requestServerDisconnection+0x1e2>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8004542:	484e      	ldr	r0, [pc, #312]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004544:	f7fd fd0e 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8004548:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800454c:	484c      	ldr	r0, [pc, #304]	; (8004680 <handle_requestServerDisconnection+0x310>)
 800454e:	f000 fdb9 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8004552:	484b      	ldr	r0, [pc, #300]	; (8004680 <handle_requestServerDisconnection+0x310>)
 8004554:	f000 fdca 	bl	80050ec <softTimer_expired>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d006      	beq.n	800456c <handle_requestServerDisconnection+0x1fc>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr2);
 800455e:	484e      	ldr	r0, [pc, #312]	; (8004698 <handle_requestServerDisconnection+0x328>)
 8004560:	f000 f8d4 	bl	800470c <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_check_atSapbr2);
 8004564:	2106      	movs	r1, #6
 8004566:	4845      	ldr	r0, [pc, #276]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004568:	f7fd fcc4 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 800456c:	4843      	ldr	r0, [pc, #268]	; (800467c <handle_requestServerDisconnection+0x30c>)
 800456e:	f7fd fcee 	bl	8001f4e <fsmManager_isStateOut>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 809b 	beq.w	80046b0 <handle_requestServerDisconnection+0x340>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 800457a:	4840      	ldr	r0, [pc, #256]	; (800467c <handle_requestServerDisconnection+0x30c>)
 800457c:	f7fd fd01 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8004580:	e096      	b.n	80046b0 <handle_requestServerDisconnection+0x340>



		case __gsmModule_requestServerDisconnection_check_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004582:	483e      	ldr	r0, [pc, #248]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004584:	f7fd fcd8 	bl	8001f38 <fsmManager_isStateIn>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d006      	beq.n	800459c <handle_requestServerDisconnection+0x22c>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 800458e:	483b      	ldr	r0, [pc, #236]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004590:	f7fd fce8 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8004594:	2164      	movs	r1, #100	; 0x64
 8004596:	483a      	ldr	r0, [pc, #232]	; (8004680 <handle_requestServerDisconnection+0x310>)
 8004598:	f000 fd94 	bl	80050c4 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "0.0.0.0", gsmRxDataChunkLen)) {
 800459c:	4b3a      	ldr	r3, [pc, #232]	; (8004688 <handle_requestServerDisconnection+0x318>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	493e      	ldr	r1, [pc, #248]	; (800469c <handle_requestServerDisconnection+0x32c>)
 80045a4:	483a      	ldr	r0, [pc, #232]	; (8004690 <handle_requestServerDisconnection+0x320>)
 80045a6:	f001 fc8e 	bl	8005ec6 <string_containsWithinLength>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <handle_requestServerDisconnection+0x25e>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 80045b0:	2100      	movs	r1, #0
 80045b2:	4832      	ldr	r0, [pc, #200]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80045b4:	f7fd fc9e 	bl	8001ef4 <fsmManager_gotoState>

				flags_gsmModule.bits.isServerConnected = 0;
 80045b8:	4a39      	ldr	r2, [pc, #228]	; (80046a0 <handle_requestServerDisconnection+0x330>)
 80045ba:	7853      	ldrb	r3, [r2, #1]
 80045bc:	f36f 1345 	bfc	r3, #5, #1
 80045c0:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerDisconnection = 0;
 80045c2:	4a37      	ldr	r2, [pc, #220]	; (80046a0 <handle_requestServerDisconnection+0x330>)
 80045c4:	7853      	ldrb	r3, [r2, #1]
 80045c6:	f36f 0300 	bfc	r3, #0, #1
 80045ca:	7053      	strb	r3, [r2, #1]
 80045cc:	e009      	b.n	80045e2 <handle_requestServerDisconnection+0x272>
			}
			else if(softTimer_expired(&timeout)) {
 80045ce:	482c      	ldr	r0, [pc, #176]	; (8004680 <handle_requestServerDisconnection+0x310>)
 80045d0:	f000 fd8c 	bl	80050ec <softTimer_expired>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <handle_requestServerDisconnection+0x272>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr2);
 80045da:	2105      	movs	r1, #5
 80045dc:	4827      	ldr	r0, [pc, #156]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80045de:	f7fd fc89 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 80045e2:	4826      	ldr	r0, [pc, #152]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80045e4:	f7fd fcb3 	bl	8001f4e <fsmManager_isStateOut>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d062      	beq.n	80046b4 <handle_requestServerDisconnection+0x344>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 80045ee:	4823      	ldr	r0, [pc, #140]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80045f0:	f7fd fcc7 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80045f4:	e05e      	b.n	80046b4 <handle_requestServerDisconnection+0x344>



		case __gsmModule_requestServerDisconnection_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 80045f6:	4821      	ldr	r0, [pc, #132]	; (800467c <handle_requestServerDisconnection+0x30c>)
 80045f8:	f7fd fc9e 	bl	8001f38 <fsmManager_isStateIn>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <handle_requestServerDisconnection+0x298>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8004602:	481e      	ldr	r0, [pc, #120]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004604:	f7fd fcae 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverDisconnection = 1;
 8004608:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <handle_requestServerDisconnection+0x334>)
 800460a:	7813      	ldrb	r3, [r2, #0]
 800460c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004610:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerDisconnection = 0;
 8004612:	4a23      	ldr	r2, [pc, #140]	; (80046a0 <handle_requestServerDisconnection+0x330>)
 8004614:	7853      	ldrb	r3, [r2, #1]
 8004616:	f36f 0300 	bfc	r3, #0, #1
 800461a:	7053      	strb	r3, [r2, #1]
			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 800461c:	2100      	movs	r1, #0
 800461e:	4817      	ldr	r0, [pc, #92]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004620:	f7fd fc68 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8004624:	4815      	ldr	r0, [pc, #84]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004626:	f7fd fc92 	bl	8001f4e <fsmManager_isStateOut>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d043      	beq.n	80046b8 <handle_requestServerDisconnection+0x348>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8004630:	4812      	ldr	r0, [pc, #72]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004632:	f7fd fca6 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8004636:	e03f      	b.n	80046b8 <handle_requestServerDisconnection+0x348>




		default:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8004638:	4810      	ldr	r0, [pc, #64]	; (800467c <handle_requestServerDisconnection+0x30c>)
 800463a:	f7fd fc7d 	bl	8001f38 <fsmManager_isStateIn>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <handle_requestServerDisconnection+0x2da>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8004644:	480d      	ldr	r0, [pc, #52]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004646:	f7fd fc8d 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestServerDisconnection = 0;
 800464a:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <handle_requestServerDisconnection+0x330>)
 800464c:	7853      	ldrb	r3, [r2, #1]
 800464e:	f36f 0300 	bfc	r3, #0, #1
 8004652:	7053      	strb	r3, [r2, #1]
			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 8004654:	2100      	movs	r1, #0
 8004656:	4809      	ldr	r0, [pc, #36]	; (800467c <handle_requestServerDisconnection+0x30c>)
 8004658:	f7fd fc4c 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 800465c:	4807      	ldr	r0, [pc, #28]	; (800467c <handle_requestServerDisconnection+0x30c>)
 800465e:	f7fd fc76 	bl	8001f4e <fsmManager_isStateOut>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d029      	beq.n	80046bc <handle_requestServerDisconnection+0x34c>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8004668:	4804      	ldr	r0, [pc, #16]	; (800467c <handle_requestServerDisconnection+0x30c>)
 800466a:	f7fd fc8a 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800466e:	e025      	b.n	80046bc <handle_requestServerDisconnection+0x34c>
			break;
 8004670:	bf00      	nop
 8004672:	e024      	b.n	80046be <handle_requestServerDisconnection+0x34e>
			break;
 8004674:	bf00      	nop
 8004676:	e022      	b.n	80046be <handle_requestServerDisconnection+0x34e>
			break;
 8004678:	bf00      	nop
 800467a:	e020      	b.n	80046be <handle_requestServerDisconnection+0x34e>
 800467c:	20000660 	.word	0x20000660
 8004680:	200005f4 	.word	0x200005f4
 8004684:	0800bb3c 	.word	0x0800bb3c
 8004688:	200004a8 	.word	0x200004a8
 800468c:	0800bb4c 	.word	0x0800bb4c
 8004690:	200003d4 	.word	0x200003d4
 8004694:	0800bb2c 	.word	0x0800bb2c
 8004698:	0800baa4 	.word	0x0800baa4
 800469c:	0800b918 	.word	0x0800b918
 80046a0:	200005dc 	.word	0x200005dc
 80046a4:	200005e0 	.word	0x200005e0
			break;
 80046a8:	bf00      	nop
 80046aa:	e008      	b.n	80046be <handle_requestServerDisconnection+0x34e>
			break;
 80046ac:	bf00      	nop
 80046ae:	e006      	b.n	80046be <handle_requestServerDisconnection+0x34e>
			break;
 80046b0:	bf00      	nop
 80046b2:	e004      	b.n	80046be <handle_requestServerDisconnection+0x34e>
			break;
 80046b4:	bf00      	nop
 80046b6:	e002      	b.n	80046be <handle_requestServerDisconnection+0x34e>
			break;
 80046b8:	bf00      	nop
 80046ba:	e000      	b.n	80046be <handle_requestServerDisconnection+0x34e>
			break;
 80046bc:	bf00      	nop
	}
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop

080046c4 <pinGsmVdd_write>:
	GSM_UART_TX		output			uart
	GSM_UART_RX		input			uart
*/

static void pinGsmVdd_write(uint8_t value)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GSM_VDD_GPIO_Port, GSM_VDD_Pin, value);
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	461a      	mov	r2, r3
 80046d2:	2140      	movs	r1, #64	; 0x40
 80046d4:	4803      	ldr	r0, [pc, #12]	; (80046e4 <pinGsmVdd_write+0x20>)
 80046d6:	f002 feaf 	bl	8007438 <HAL_GPIO_WritePin>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40010c00 	.word	0x40010c00

080046e8 <pinGsmPwrkey_write>:

static void pinGsmPwrkey_write(uint8_t value)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GSM_PWRKEY_GPIO_Port, GSM_PWRKEY_Pin, value);
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	461a      	mov	r2, r3
 80046f6:	2108      	movs	r1, #8
 80046f8:	4803      	ldr	r0, [pc, #12]	; (8004708 <pinGsmPwrkey_write+0x20>)
 80046fa:	f002 fe9d 	bl	8007438 <HAL_GPIO_WritePin>
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40010c00 	.word	0x40010c00

0800470c <pinGsmUartTx_transmit>:

static void pinGsmUartTx_transmit(uint8_t *gsmModule_command)
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(gsmHuart, UART_IT_RXNE);
 8004714:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <pinGsmUartTx_transmit+0x78>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	4b19      	ldr	r3, [pc, #100]	; (8004784 <pinGsmUartTx_transmit+0x78>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0220 	bic.w	r2, r2, #32
 8004726:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(gsmHuart, UART_IT_TC);
 8004728:	4b16      	ldr	r3, [pc, #88]	; (8004784 <pinGsmUartTx_transmit+0x78>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	4b14      	ldr	r3, [pc, #80]	; (8004784 <pinGsmUartTx_transmit+0x78>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473a:	60da      	str	r2, [r3, #12]
	HAL_UART_Transmit_IT(gsmHuart, gsmModule_command, string_length(gsmModule_command));
 800473c:	4b11      	ldr	r3, [pc, #68]	; (8004784 <pinGsmUartTx_transmit+0x78>)
 800473e:	681c      	ldr	r4, [r3, #0]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f001 fba7 	bl	8005e94 <string_length>
 8004746:	4603      	mov	r3, r0
 8004748:	b29b      	uxth	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4620      	mov	r0, r4
 8004750:	f005 fa2b 	bl	8009baa <HAL_UART_Transmit_IT>
	__HAL_UART_DISABLE_IT(gsmHuart, UART_IT_TC);
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <pinGsmUartTx_transmit+0x78>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <pinGsmUartTx_transmit+0x78>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004766:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(gsmHuart, UART_IT_RXNE);
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <pinGsmUartTx_transmit+0x78>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <pinGsmUartTx_transmit+0x78>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0220 	orr.w	r2, r2, #32
 800477a:	60da      	str	r2, [r3, #12]
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bd90      	pop	{r4, r7, pc}
 8004784:	20000240 	.word	0x20000240

08004788 <pinGsmUartRx_receive>:

static void pinGsmUartRx_receive(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(gsmHuart, &gsmRxData[gsmRxPtrIn], 1);
 800478c:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <pinGsmUartRx_receive+0x40>)
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <pinGsmUartRx_receive+0x44>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <pinGsmUartRx_receive+0x48>)
 8004796:	4413      	add	r3, r2
 8004798:	2201      	movs	r2, #1
 800479a:	4619      	mov	r1, r3
 800479c:	f005 fa49 	bl	8009c32 <HAL_UART_Receive_IT>
	gsmRxPtrIn++;
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <pinGsmUartRx_receive+0x44>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3301      	adds	r3, #1
 80047a6:	4a09      	ldr	r2, [pc, #36]	; (80047cc <pinGsmUartRx_receive+0x44>)
 80047a8:	6013      	str	r3, [r2, #0]
	gsmRxPtrIn%=GSMRXDATA_LENGTH;
 80047aa:	4b08      	ldr	r3, [pc, #32]	; (80047cc <pinGsmUartRx_receive+0x44>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <pinGsmUartRx_receive+0x4c>)
 80047b0:	fba3 1302 	umull	r1, r3, r3, r2
 80047b4:	09db      	lsrs	r3, r3, #7
 80047b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	4a02      	ldr	r2, [pc, #8]	; (80047cc <pinGsmUartRx_receive+0x44>)
 80047c2:	6013      	str	r3, [r2, #0]
}
 80047c4:	bf00      	nop
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000240 	.word	0x20000240
 80047cc:	2000049c 	.word	0x2000049c
 80047d0:	20000244 	.word	0x20000244
 80047d4:	51eb851f 	.word	0x51eb851f

080047d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == gsmHuart->Instance) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_UART_RxCpltCallback+0x24>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_RxCpltCallback+0x1a>
		pinGsmUartRx_receive();
 80047ee:	f7ff ffcb 	bl	8004788 <pinGsmUartRx_receive>
	}
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000240 	.word	0x20000240

08004800 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]

}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
	softTimer_periodElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fcbe 	bl	800519c <softTimer_periodElapsedCallback>
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800482c:	f001 fe08 	bl	8006440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004830:	f000 f811 	bl	8004856 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004834:	f000 f9aa 	bl	8004b8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8004838:	f000 f862 	bl	8004900 <MX_ADC1_Init>
  MX_RTC_Init();
 800483c:	f000 f8be 	bl	80049bc <MX_RTC_Init>
  MX_TIM3_Init();
 8004840:	f000 f8d8 	bl	80049f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004844:	f000 f92a 	bl	8004a9c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004848:	f000 f976 	bl	8004b38 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dumpSensorManager_init();
 800484c:	f7fc fe6c 	bl	8001528 <dumpSensorManager_init>

  while (1)
  {
	  dumpSensorManager_handler();
 8004850:	f7fc febc 	bl	80015cc <dumpSensorManager_handler>
 8004854:	e7fc      	b.n	8004850 <main+0x28>

08004856 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b094      	sub	sp, #80	; 0x50
 800485a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800485c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004860:	2228      	movs	r2, #40	; 0x28
 8004862:	2100      	movs	r1, #0
 8004864:	4618      	mov	r0, r3
 8004866:	f005 fe15 	bl	800a494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800486a:	f107 0314 	add.w	r3, r7, #20
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	605a      	str	r2, [r3, #4]
 8004874:	609a      	str	r2, [r3, #8]
 8004876:	60da      	str	r2, [r3, #12]
 8004878:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800487a:	1d3b      	adds	r3, r7, #4
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004886:	230a      	movs	r3, #10
 8004888:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800488a:	2301      	movs	r3, #1
 800488c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800488e:	2310      	movs	r3, #16
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004892:	2301      	movs	r3, #1
 8004894:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004896:	2300      	movs	r3, #0
 8004898:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800489a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800489e:	4618      	mov	r0, r3
 80048a0:	f002 fe12 	bl	80074c8 <HAL_RCC_OscConfig>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <SystemClock_Config+0x58>
  {
    Error_Handler();
 80048aa:	f000 f9c3 	bl	8004c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048ae:	230f      	movs	r3, #15
 80048b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80048ba:	2300      	movs	r3, #0
 80048bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048be:	2300      	movs	r3, #0
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80048c2:	f107 0314 	add.w	r3, r7, #20
 80048c6:	2100      	movs	r1, #0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f003 f87d 	bl	80079c8 <HAL_RCC_ClockConfig>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80048d4:	f000 f9ae 	bl	8004c34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80048d8:	2303      	movs	r3, #3
 80048da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80048dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	4618      	mov	r0, r3
 80048ea:	f003 fa07 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80048f4:	f000 f99e 	bl	8004c34 <Error_Handler>
  }
}
 80048f8:	bf00      	nop
 80048fa:	3750      	adds	r7, #80	; 0x50
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004906:	1d3b      	adds	r3, r7, #4
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8004910:	4b28      	ldr	r3, [pc, #160]	; (80049b4 <MX_ADC1_Init+0xb4>)
 8004912:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <MX_ADC1_Init+0xb8>)
 8004914:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004916:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <MX_ADC1_Init+0xb4>)
 8004918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800491c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800491e:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <MX_ADC1_Init+0xb4>)
 8004920:	2201      	movs	r2, #1
 8004922:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004924:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <MX_ADC1_Init+0xb4>)
 8004926:	2200      	movs	r2, #0
 8004928:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800492a:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <MX_ADC1_Init+0xb4>)
 800492c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004930:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <MX_ADC1_Init+0xb4>)
 8004934:	2200      	movs	r2, #0
 8004936:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8004938:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <MX_ADC1_Init+0xb4>)
 800493a:	2203      	movs	r2, #3
 800493c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800493e:	481d      	ldr	r0, [pc, #116]	; (80049b4 <MX_ADC1_Init+0xb4>)
 8004940:	f001 fde0 	bl	8006504 <HAL_ADC_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800494a:	f000 f973 	bl	8004c34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800494e:	2306      	movs	r3, #6
 8004950:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004952:	2301      	movs	r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8004956:	2301      	movs	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	4619      	mov	r1, r3
 800495e:	4815      	ldr	r0, [pc, #84]	; (80049b4 <MX_ADC1_Init+0xb4>)
 8004960:	f002 f894 	bl	8006a8c <HAL_ADC_ConfigChannel>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800496a:	f000 f963 	bl	8004c34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800496e:	2304      	movs	r3, #4
 8004970:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004972:	2302      	movs	r3, #2
 8004974:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004976:	1d3b      	adds	r3, r7, #4
 8004978:	4619      	mov	r1, r3
 800497a:	480e      	ldr	r0, [pc, #56]	; (80049b4 <MX_ADC1_Init+0xb4>)
 800497c:	f002 f886 	bl	8006a8c <HAL_ADC_ConfigChannel>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8004986:	f000 f955 	bl	8004c34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800498a:	2310      	movs	r3, #16
 800498c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800498e:	2303      	movs	r3, #3
 8004990:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8004992:	2304      	movs	r3, #4
 8004994:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004996:	1d3b      	adds	r3, r7, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4806      	ldr	r0, [pc, #24]	; (80049b4 <MX_ADC1_Init+0xb4>)
 800499c:	f002 f876 	bl	8006a8c <HAL_ADC_ConfigChannel>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80049a6:	f000 f945 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	200007d4 	.word	0x200007d4
 80049b8:	40012400 	.word	0x40012400

080049bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <MX_RTC_Init+0x30>)
 80049c2:	4a0b      	ldr	r2, [pc, #44]	; (80049f0 <MX_RTC_Init+0x34>)
 80049c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <MX_RTC_Init+0x30>)
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295
 80049cc:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <MX_RTC_Init+0x30>)
 80049d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049d4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80049d6:	4805      	ldr	r0, [pc, #20]	; (80049ec <MX_RTC_Init+0x30>)
 80049d8:	f003 fb0a 	bl	8007ff0 <HAL_RTC_Init>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80049e2:	f000 f927 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000848 	.word	0x20000848
 80049f0:	40002800 	.word	0x40002800

080049f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049fa:	f107 0310 	add.w	r3, r7, #16
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004a04:	463b      	mov	r3, r7
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a10:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <MX_TIM3_Init+0xa0>)
 8004a12:	4a21      	ldr	r2, [pc, #132]	; (8004a98 <MX_TIM3_Init+0xa4>)
 8004a14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8004a16:	4b1f      	ldr	r3, [pc, #124]	; (8004a94 <MX_TIM3_Init+0xa0>)
 8004a18:	2207      	movs	r2, #7
 8004a1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a1c:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <MX_TIM3_Init+0xa0>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <MX_TIM3_Init+0xa0>)
 8004a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a2a:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <MX_TIM3_Init+0xa0>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a30:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <MX_TIM3_Init+0xa0>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004a36:	4817      	ldr	r0, [pc, #92]	; (8004a94 <MX_TIM3_Init+0xa0>)
 8004a38:	f004 f912 	bl	8008c60 <HAL_TIM_IC_Init>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004a42:	f000 f8f7 	bl	8004c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a4e:	f107 0310 	add.w	r3, r7, #16
 8004a52:	4619      	mov	r1, r3
 8004a54:	480f      	ldr	r0, [pc, #60]	; (8004a94 <MX_TIM3_Init+0xa0>)
 8004a56:	f004 ffeb 	bl	8009a30 <HAL_TIMEx_MasterConfigSynchronization>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004a60:	f000 f8e8 	bl	8004c34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004a64:	2300      	movs	r3, #0
 8004a66:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004a74:	463b      	mov	r3, r7
 8004a76:	2208      	movs	r2, #8
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4806      	ldr	r0, [pc, #24]	; (8004a94 <MX_TIM3_Init+0xa0>)
 8004a7c:	f004 fbf6 	bl	800926c <HAL_TIM_IC_ConfigChannel>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004a86:	f000 f8d5 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004a8a:	bf00      	nop
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	2000078c 	.word	0x2000078c
 8004a98:	40000400 	.word	0x40000400

08004a9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aa2:	f107 0308 	add.w	r3, r7, #8
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
 8004aac:	609a      	str	r2, [r3, #8]
 8004aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <MX_TIM4_Init+0x94>)
 8004aba:	4a1e      	ldr	r2, [pc, #120]	; (8004b34 <MX_TIM4_Init+0x98>)
 8004abc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 8004abe:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <MX_TIM4_Init+0x94>)
 8004ac0:	2207      	movs	r2, #7
 8004ac2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac4:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <MX_TIM4_Init+0x94>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8004aca:	4b19      	ldr	r3, [pc, #100]	; (8004b30 <MX_TIM4_Init+0x94>)
 8004acc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ad0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ad2:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <MX_TIM4_Init+0x94>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <MX_TIM4_Init+0x94>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004ade:	4814      	ldr	r0, [pc, #80]	; (8004b30 <MX_TIM4_Init+0x94>)
 8004ae0:	f004 f81c 	bl	8008b1c <HAL_TIM_Base_Init>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004aea:	f000 f8a3 	bl	8004c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004af2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004af4:	f107 0308 	add.w	r3, r7, #8
 8004af8:	4619      	mov	r1, r3
 8004afa:	480d      	ldr	r0, [pc, #52]	; (8004b30 <MX_TIM4_Init+0x94>)
 8004afc:	f004 fc4a 	bl	8009394 <HAL_TIM_ConfigClockSource>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004b06:	f000 f895 	bl	8004c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b12:	463b      	mov	r3, r7
 8004b14:	4619      	mov	r1, r3
 8004b16:	4806      	ldr	r0, [pc, #24]	; (8004b30 <MX_TIM4_Init+0x94>)
 8004b18:	f004 ff8a 	bl	8009a30 <HAL_TIMEx_MasterConfigSynchronization>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004b22:	f000 f887 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004b26:	bf00      	nop
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000744 	.word	0x20000744
 8004b34:	40000800 	.word	0x40000800

08004b38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004b3c:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b3e:	4a12      	ldr	r2, [pc, #72]	; (8004b88 <MX_USART1_UART_Init+0x50>)
 8004b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b5e:	220c      	movs	r2, #12
 8004b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b62:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b68:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b6e:	4805      	ldr	r0, [pc, #20]	; (8004b84 <MX_USART1_UART_Init+0x4c>)
 8004b70:	f004 ffce 	bl	8009b10 <HAL_UART_Init>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004b7a:	f000 f85b 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000804 	.word	0x20000804
 8004b88:	40013800 	.word	0x40013800

08004b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b92:	f107 0308 	add.w	r3, r7, #8
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	605a      	str	r2, [r3, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
 8004b9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ba0:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <MX_GPIO_Init+0x9c>)
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	4a20      	ldr	r2, [pc, #128]	; (8004c28 <MX_GPIO_Init+0x9c>)
 8004ba6:	f043 0304 	orr.w	r3, r3, #4
 8004baa:	6193      	str	r3, [r2, #24]
 8004bac:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <MX_GPIO_Init+0x9c>)
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <MX_GPIO_Init+0x9c>)
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	4a1a      	ldr	r2, [pc, #104]	; (8004c28 <MX_GPIO_Init+0x9c>)
 8004bbe:	f043 0308 	orr.w	r3, r3, #8
 8004bc2:	6193      	str	r3, [r2, #24]
 8004bc4:	4b18      	ldr	r3, [pc, #96]	; (8004c28 <MX_GPIO_Init+0x9c>)
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CH4_VDD_Pin|NH3_VDD_Pin, GPIO_PIN_RESET);
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	21a0      	movs	r1, #160	; 0xa0
 8004bd4:	4815      	ldr	r0, [pc, #84]	; (8004c2c <MX_GPIO_Init+0xa0>)
 8004bd6:	f002 fc2f 	bl	8007438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US_TRIGGER_Pin|US_VDD_Pin|GSM_PWRKEY_Pin|GSM_VDD_Pin, GPIO_PIN_RESET);
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f240 414a 	movw	r1, #1098	; 0x44a
 8004be0:	4813      	ldr	r0, [pc, #76]	; (8004c30 <MX_GPIO_Init+0xa4>)
 8004be2:	f002 fc29 	bl	8007438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CH4_VDD_Pin NH3_VDD_Pin */
  GPIO_InitStruct.Pin = CH4_VDD_Pin|NH3_VDD_Pin;
 8004be6:	23a0      	movs	r3, #160	; 0xa0
 8004be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bea:	2301      	movs	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf6:	f107 0308 	add.w	r3, r7, #8
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	480b      	ldr	r0, [pc, #44]	; (8004c2c <MX_GPIO_Init+0xa0>)
 8004bfe:	f002 fa97 	bl	8007130 <HAL_GPIO_Init>

  /*Configure GPIO pins : US_TRIGGER_Pin US_VDD_Pin GSM_PWRKEY_Pin GSM_VDD_Pin */
  GPIO_InitStruct.Pin = US_TRIGGER_Pin|US_VDD_Pin|GSM_PWRKEY_Pin|GSM_VDD_Pin;
 8004c02:	f240 434a 	movw	r3, #1098	; 0x44a
 8004c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c10:	2302      	movs	r3, #2
 8004c12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c14:	f107 0308 	add.w	r3, r7, #8
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4805      	ldr	r0, [pc, #20]	; (8004c30 <MX_GPIO_Init+0xa4>)
 8004c1c:	f002 fa88 	bl	8007130 <HAL_GPIO_Init>

}
 8004c20:	bf00      	nop
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40010800 	.word	0x40010800
 8004c30:	40010c00 	.word	0x40010c00

08004c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c38:	b672      	cpsid	i
}
 8004c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c3c:	e7fe      	b.n	8004c3c <Error_Handler+0x8>
	...

08004c40 <nh3Sensor_init>:




void nh3Sensor_init(ADC_HandleTypeDef *hadc)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	//ADC
	nh3Hadc = hadc;
 8004c48:	4a08      	ldr	r2, [pc, #32]	; (8004c6c <nh3Sensor_init+0x2c>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&nh3Sensor_state, __nh3Sensor_idle);
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4807      	ldr	r0, [pc, #28]	; (8004c70 <nh3Sensor_init+0x30>)
 8004c52:	f7fd f939 	bl	8001ec8 <fsmManager_init>

	//Flags
	flags_nh3Sensor.dword = 0;
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <nh3Sensor_init+0x34>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
	flags_nh3SensorError.dword = 0;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <nh3Sensor_init+0x38>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000674 	.word	0x20000674
 8004c70:	2000067c 	.word	0x2000067c
 8004c74:	20000688 	.word	0x20000688
 8004c78:	2000068c 	.word	0x2000068c
 8004c7c:	00000000 	.word	0x00000000

08004c80 <nh3Sensor_handler>:

void nh3Sensor_handler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&nh3Sensor_state)) {
 8004c84:	4862      	ldr	r0, [pc, #392]	; (8004e10 <nh3Sensor_handler+0x190>)
 8004c86:	f7fd f94c 	bl	8001f22 <fsmManager_getState>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <nh3Sensor_handler+0x16>
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d029      	beq.n	8004ce8 <nh3Sensor_handler+0x68>

				flags_nh3Sensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 8004c94:	e0b0      	b.n	8004df8 <nh3Sensor_handler+0x178>
			if(fsmManager_isStateIn(&nh3Sensor_state)) {
 8004c96:	485e      	ldr	r0, [pc, #376]	; (8004e10 <nh3Sensor_handler+0x190>)
 8004c98:	f7fd f94e 	bl	8001f38 <fsmManager_isStateIn>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <nh3Sensor_handler+0x32>
				fsmManager_stateIn(&nh3Sensor_state);
 8004ca2:	485b      	ldr	r0, [pc, #364]	; (8004e10 <nh3Sensor_handler+0x190>)
 8004ca4:	f7fd f95e 	bl	8001f64 <fsmManager_stateIn>
				flags_nh3Sensor.bits.isMeasuring = 0;
 8004ca8:	4a5a      	ldr	r2, [pc, #360]	; (8004e14 <nh3Sensor_handler+0x194>)
 8004caa:	7853      	ldrb	r3, [r2, #1]
 8004cac:	f36f 03c3 	bfc	r3, #3, #1
 8004cb0:	7053      	strb	r3, [r2, #1]
			if(flags_nh3Sensor.bits.requestMeasure) {
 8004cb2:	4b58      	ldr	r3, [pc, #352]	; (8004e14 <nh3Sensor_handler+0x194>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <nh3Sensor_handler+0x52>
				flags_nh3Sensor.bits.isMeasuring = 1;
 8004cc0:	4a54      	ldr	r2, [pc, #336]	; (8004e14 <nh3Sensor_handler+0x194>)
 8004cc2:	7853      	ldrb	r3, [r2, #1]
 8004cc4:	f043 0308 	orr.w	r3, r3, #8
 8004cc8:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&nh3Sensor_state,__nh3Sensor_getAmmoniac);
 8004cca:	2101      	movs	r1, #1
 8004ccc:	4850      	ldr	r0, [pc, #320]	; (8004e10 <nh3Sensor_handler+0x190>)
 8004cce:	f7fd f911 	bl	8001ef4 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&nh3Sensor_state)) {
 8004cd2:	484f      	ldr	r0, [pc, #316]	; (8004e10 <nh3Sensor_handler+0x190>)
 8004cd4:	f7fd f93b 	bl	8001f4e <fsmManager_isStateOut>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8089 	beq.w	8004df2 <nh3Sensor_handler+0x172>
				fsmManager_stateOut(&nh3Sensor_state);
 8004ce0:	484b      	ldr	r0, [pc, #300]	; (8004e10 <nh3Sensor_handler+0x190>)
 8004ce2:	f7fd f94e 	bl	8001f82 <fsmManager_stateOut>
			break;
 8004ce6:	e084      	b.n	8004df2 <nh3Sensor_handler+0x172>
			if(fsmManager_isStateIn(&nh3Sensor_state)) {
 8004ce8:	4849      	ldr	r0, [pc, #292]	; (8004e10 <nh3Sensor_handler+0x190>)
 8004cea:	f7fd f925 	bl	8001f38 <fsmManager_isStateIn>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <nh3Sensor_handler+0x7e>
				fsmManager_stateIn(&nh3Sensor_state);
 8004cf4:	4846      	ldr	r0, [pc, #280]	; (8004e10 <nh3Sensor_handler+0x190>)
 8004cf6:	f7fd f935 	bl	8001f64 <fsmManager_stateIn>
				nh3_adcStart();
 8004cfa:	f000 f8e5 	bl	8004ec8 <nh3_adcStart>
			nh3Ppm = (float)nh3_adcGetValue();
 8004cfe:	f000 f8f7 	bl	8004ef0 <nh3_adcGetValue>
 8004d02:	4603      	mov	r3, r0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fb ff95 	bl	8000c34 <__aeabi_ui2f>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4a42      	ldr	r2, [pc, #264]	; (8004e18 <nh3Sensor_handler+0x198>)
 8004d0e:	6013      	str	r3, [r2, #0]
			nh3Ppm = NH3_RL*(4095-nh3Ppm)/nh3Ppm;	//Gets Rs
 8004d10:	4b41      	ldr	r3, [pc, #260]	; (8004e18 <nh3Sensor_handler+0x198>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4619      	mov	r1, r3
 8004d16:	4841      	ldr	r0, [pc, #260]	; (8004e1c <nh3Sensor_handler+0x19c>)
 8004d18:	f7fb feda 	bl	8000ad0 <__aeabi_fsub>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4940      	ldr	r1, [pc, #256]	; (8004e20 <nh3Sensor_handler+0x1a0>)
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fb ffdf 	bl	8000ce4 <__aeabi_fmul>
 8004d26:	4603      	mov	r3, r0
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b3b      	ldr	r3, [pc, #236]	; (8004e18 <nh3Sensor_handler+0x198>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4610      	mov	r0, r2
 8004d32:	f7fc f88b 	bl	8000e4c <__aeabi_fdiv>
 8004d36:	4603      	mov	r3, r0
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4b37      	ldr	r3, [pc, #220]	; (8004e18 <nh3Sensor_handler+0x198>)
 8004d3c:	601a      	str	r2, [r3, #0]
			nh3Ppm = nh3Ppm/NH3_R0;					//Gets ratio
 8004d3e:	4b36      	ldr	r3, [pc, #216]	; (8004e18 <nh3Sensor_handler+0x198>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4938      	ldr	r1, [pc, #224]	; (8004e24 <nh3Sensor_handler+0x1a4>)
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fc f881 	bl	8000e4c <__aeabi_fdiv>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4b32      	ldr	r3, [pc, #200]	; (8004e18 <nh3Sensor_handler+0x198>)
 8004d50:	601a      	str	r2, [r3, #0]
			nh3Ppm = pow(10, ((log10(nh3Ppm) - NH3_COEF_B)/NH3_COEF_C + NH3_COEF_A));
 8004d52:	4b31      	ldr	r3, [pc, #196]	; (8004e18 <nh3Sensor_handler+0x198>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fb fb5e 	bl	8000418 <__aeabi_f2d>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4610      	mov	r0, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	f005 fb9e 	bl	800a4a4 <log10>
 8004d68:	a325      	add	r3, pc, #148	; (adr r3, 8004e00 <nh3Sensor_handler+0x180>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f7fb f9f3 	bl	8000158 <__aeabi_dsub>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	a323      	add	r3, pc, #140	; (adr r3, 8004e08 <nh3Sensor_handler+0x188>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f7fb fccc 	bl	800071c <__aeabi_ddiv>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <nh3Sensor_handler+0x1a8>)
 8004d92:	f7fb f9e3 	bl	800015c <__adddf3>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	f04f 0000 	mov.w	r0, #0
 8004d9e:	4923      	ldr	r1, [pc, #140]	; (8004e2c <nh3Sensor_handler+0x1ac>)
 8004da0:	f005 fbba 	bl	800a518 <pow>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	f7fb fe3c 	bl	8000a28 <__aeabi_d2f>
 8004db0:	4603      	mov	r3, r0
 8004db2:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <nh3Sensor_handler+0x198>)
 8004db4:	6013      	str	r3, [r2, #0]
			if(nh3SensorCallback != NULL) {
 8004db6:	4b1e      	ldr	r3, [pc, #120]	; (8004e30 <nh3Sensor_handler+0x1b0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <nh3Sensor_handler+0x148>
				nh3SensorCallback(__nh3SensorEvent_okMeasuring, (float *) &nh3Ppm);
 8004dbe:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <nh3Sensor_handler+0x1b0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4915      	ldr	r1, [pc, #84]	; (8004e18 <nh3Sensor_handler+0x198>)
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	4798      	blx	r3
			fsmManager_gotoState(&nh3Sensor_state,__nh3Sensor_idle);
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4811      	ldr	r0, [pc, #68]	; (8004e10 <nh3Sensor_handler+0x190>)
 8004dcc:	f7fd f892 	bl	8001ef4 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&nh3Sensor_state)) {
 8004dd0:	480f      	ldr	r0, [pc, #60]	; (8004e10 <nh3Sensor_handler+0x190>)
 8004dd2:	f7fd f8bc 	bl	8001f4e <fsmManager_isStateOut>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00c      	beq.n	8004df6 <nh3Sensor_handler+0x176>
				fsmManager_stateOut(&nh3Sensor_state);
 8004ddc:	480c      	ldr	r0, [pc, #48]	; (8004e10 <nh3Sensor_handler+0x190>)
 8004dde:	f7fd f8d0 	bl	8001f82 <fsmManager_stateOut>
				nh3_adcStop();
 8004de2:	f000 f891 	bl	8004f08 <nh3_adcStop>
				flags_nh3Sensor.bits.requestMeasure = 0;
 8004de6:	4a0b      	ldr	r2, [pc, #44]	; (8004e14 <nh3Sensor_handler+0x194>)
 8004de8:	7813      	ldrb	r3, [r2, #0]
 8004dea:	f36f 0300 	bfc	r3, #0, #1
 8004dee:	7013      	strb	r3, [r2, #0]
			break;
 8004df0:	e001      	b.n	8004df6 <nh3Sensor_handler+0x176>
			break;
 8004df2:	bf00      	nop
 8004df4:	e000      	b.n	8004df8 <nh3Sensor_handler+0x178>
			break;
 8004df6:	bf00      	nop
}
 8004df8:	bf00      	nop
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	f3af 8000 	nop.w
 8004e00:	a0000000 	.word	0xa0000000
 8004e04:	3fda3d70 	.word	0x3fda3d70
 8004e08:	a0000000 	.word	0xa0000000
 8004e0c:	bfda3d70 	.word	0xbfda3d70
 8004e10:	2000067c 	.word	0x2000067c
 8004e14:	20000688 	.word	0x20000688
 8004e18:	20000678 	.word	0x20000678
 8004e1c:	457ff000 	.word	0x457ff000
 8004e20:	41b00000 	.word	0x41b00000
 8004e24:	40c9999a 	.word	0x40c9999a
 8004e28:	3ff00000 	.word	0x3ff00000
 8004e2c:	40240000 	.word	0x40240000
 8004e30:	20000690 	.word	0x20000690

08004e34 <nh3Sensor_measure>:

void nh3Sensor_measure(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
	flags_nh3Sensor.bits.requestMeasure = 1;
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <nh3Sensor_measure+0x18>)
 8004e3a:	7813      	ldrb	r3, [r2, #0]
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	7013      	strb	r3, [r2, #0]
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000688 	.word	0x20000688

08004e50 <nh3Sensor_setCallback>:
{
	return flags_nh3Sensor.bits.isMeasuring;
}

void nh3Sensor_setCallback(void (*cb)(_nh3Sensor_event, void*))
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	nh3SensorCallback = cb;
 8004e58:	4a03      	ldr	r2, [pc, #12]	; (8004e68 <nh3Sensor_setCallback+0x18>)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6013      	str	r3, [r2, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr
 8004e68:	20000690 	.word	0x20000690

08004e6c <nh3Sensor_powerOn>:

void nh3Sensor_powerOn(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
	pinNh3Vdd_write(1);
 8004e70:	2001      	movs	r0, #1
 8004e72:	f000 f855 	bl	8004f20 <pinNh3Vdd_write>
}
 8004e76:	bf00      	nop
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <nh3Sensor_powerOff>:

void nh3Sensor_powerOff(void)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	af00      	add	r7, sp, #0
	pinNh3Vdd_write(0);
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f000 f84e 	bl	8004f20 <pinNh3Vdd_write>
}
 8004e84:	bf00      	nop
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <ADC_Select_CHNh3>:



static void ADC_Select_CHNh3(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8004e8e:	1d3b      	adds	r3, r7, #4
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_6;
 8004e98:	2306      	movs	r3, #6
 8004e9a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(nh3Hadc, &sConfig) != HAL_OK) {
 8004ea4:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <ADC_Select_CHNh3+0x3c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	1d3a      	adds	r2, r7, #4
 8004eaa:	4611      	mov	r1, r2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 fded 	bl	8006a8c <HAL_ADC_ConfigChannel>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <ADC_Select_CHNh3+0x34>
		Error_Handler();
 8004eb8:	f7ff febc 	bl	8004c34 <Error_Handler>
	}
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000674 	.word	0x20000674

08004ec8 <nh3_adcStart>:

static void nh3_adcStart(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
	ADC_Select_CHNh3();
 8004ecc:	f7ff ffdc 	bl	8004e88 <ADC_Select_CHNh3>
	HAL_ADC_Start(nh3Hadc);
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <nh3_adcStart+0x24>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f001 fbed 	bl	80066b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(nh3Hadc, 100);
 8004eda:	4b04      	ldr	r3, [pc, #16]	; (8004eec <nh3_adcStart+0x24>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2164      	movs	r1, #100	; 0x64
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 fcc1 	bl	8006868 <HAL_ADC_PollForConversion>
}
 8004ee6:	bf00      	nop
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000674 	.word	0x20000674

08004ef0 <nh3_adcGetValue>:

static uint32_t nh3_adcGetValue(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(nh3Hadc);
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <nh3_adcGetValue+0x14>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 fdbb 	bl	8006a74 <HAL_ADC_GetValue>
 8004efe:	4603      	mov	r3, r0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000674 	.word	0x20000674

08004f08 <nh3_adcStop>:

static void nh3_adcStop(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(nh3Hadc);
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <nh3_adcStop+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 fc7d 	bl	8006810 <HAL_ADC_Stop>
}
 8004f16:	bf00      	nop
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000674 	.word	0x20000674

08004f20 <pinNh3Vdd_write>:

static void pinNh3Vdd_write(uint8_t state)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NH3_SENSOR_VDD_PORT, NH3_SENSOR_VDD_PIN, state);
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2180      	movs	r1, #128	; 0x80
 8004f30:	4803      	ldr	r0, [pc, #12]	; (8004f40 <pinNh3Vdd_write+0x20>)
 8004f32:	f002 fa81 	bl	8007438 <HAL_GPIO_WritePin>
}
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40010800 	.word	0x40010800

08004f44 <nvm_init>:




void nvm_init(RTC_HandleTypeDef *hrtc)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	//RTC
	nvmHrtc = hrtc;
 8004f4c:	4a03      	ldr	r2, [pc, #12]	; (8004f5c <nvm_init+0x18>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6013      	str	r3, [r2, #0]
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr
 8004f5c:	20000694 	.word	0x20000694

08004f60 <nvm_readWord>:

uint32_t nvm_readWord(uint32_t nReg)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	return RTC_Read_BackupRegister(nReg);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f813 	bl	8004f94 <RTC_Read_BackupRegister>
 8004f6e:	4603      	mov	r3, r0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <nvm_writeWord>:

	return (wData & (1 << pos)) >> pos;
}

void nvm_writeWord(uint32_t nReg, uint32_t wData)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
	RTC_WriteWord_BackupRegister(nReg, wData);
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f817 	bl	8004fb8 <RTC_WriteWord_BackupRegister>
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <RTC_Read_BackupRegister>:




static uint32_t RTC_Read_BackupRegister(uint32_t backupRegister)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
    return HAL_RTCEx_BKUPRead(nvmHrtc, backupRegister);
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <RTC_Read_BackupRegister+0x20>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f003 fd9e 	bl	8008ae4 <HAL_RTCEx_BKUPRead>
 8004fa8:	4603      	mov	r3, r0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000694 	.word	0x20000694

08004fb8 <RTC_WriteWord_BackupRegister>:

static void RTC_WriteWord_BackupRegister(uint32_t backupRegister, uint32_t wData)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
    HAL_PWR_EnableBkUpAccess();
 8004fc2:	f002 fa51 	bl	8007468 <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(nvmHrtc, backupRegister, (uint16_t) wData);
 8004fc6:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <RTC_WriteWord_BackupRegister+0x2c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	b292      	uxth	r2, r2
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f003 fd6d 	bl	8008ab0 <HAL_RTCEx_BKUPWrite>
    HAL_PWR_DisableBkUpAccess();
 8004fd6:	f002 fa53 	bl	8007480 <HAL_PWR_DisableBkUpAccess>
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000694 	.word	0x20000694

08004fe8 <powerMode_init>:
static RTC_HandleTypeDef* powerHrtc;
static RTC_TimeTypeDef rtcTime;
RTC_AlarmTypeDef rtcAlarm;

void powerMode_init(RTC_HandleTypeDef* hrtc)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	powerHrtc = hrtc;
 8004ff0:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <powerMode_init+0x3c>)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6013      	str	r3, [r2, #0]

	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <powerMode_init+0x40>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d10b      	bne.n	800501a <powerMode_init+0x32>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <powerMode_init+0x40>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a08      	ldr	r2, [pc, #32]	; (8005028 <powerMode_init+0x40>)
 8005008:	f043 0308 	orr.w	r3, r3, #8
 800500c:	6013      	str	r3, [r2, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <powerMode_init+0x40>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a05      	ldr	r2, [pc, #20]	; (8005028 <powerMode_init+0x40>)
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	6013      	str	r3, [r2, #0]
	}
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	20000698 	.word	0x20000698
 8005028:	40007000 	.word	0x40007000

0800502c <powerMode_enterStandbyMode>:

void powerMode_enterStandbyMode(uint32_t sec)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

	// Ponemos la hora actual a 00:00:00
	HAL_RTC_WaitForSynchro(powerHrtc);
 8005034:	4b18      	ldr	r3, [pc, #96]	; (8005098 <powerMode_enterStandbyMode+0x6c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f003 fa97 	bl	800856c <HAL_RTC_WaitForSynchro>
	rtcTime.Hours = 0;
 800503e:	4b17      	ldr	r3, [pc, #92]	; (800509c <powerMode_enterStandbyMode+0x70>)
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
	rtcTime.Minutes = 0;
 8005044:	4b15      	ldr	r3, [pc, #84]	; (800509c <powerMode_enterStandbyMode+0x70>)
 8005046:	2200      	movs	r2, #0
 8005048:	705a      	strb	r2, [r3, #1]
	rtcTime.Seconds = 0;
 800504a:	4b14      	ldr	r3, [pc, #80]	; (800509c <powerMode_enterStandbyMode+0x70>)
 800504c:	2200      	movs	r2, #0
 800504e:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(powerHrtc, &rtcTime, RTC_FORMAT_BCD);
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <powerMode_enterStandbyMode+0x6c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2201      	movs	r2, #1
 8005056:	4911      	ldr	r1, [pc, #68]	; (800509c <powerMode_enterStandbyMode+0x70>)
 8005058:	4618      	mov	r0, r3
 800505a:	f003 f85f 	bl	800811c <HAL_RTC_SetTime>

	// Configuramos la alarma a las 00:00:10
	rtcAlarm.Alarm = RTC_ALARM_A;
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <powerMode_enterStandbyMode+0x74>)
 8005060:	2200      	movs	r2, #0
 8005062:	605a      	str	r2, [r3, #4]
	rtcAlarm.AlarmTime = rtcTime;
 8005064:	4b0e      	ldr	r3, [pc, #56]	; (80050a0 <powerMode_enterStandbyMode+0x74>)
 8005066:	4a0d      	ldr	r2, [pc, #52]	; (800509c <powerMode_enterStandbyMode+0x70>)
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	4611      	mov	r1, r2
 800506c:	8019      	strh	r1, [r3, #0]
 800506e:	3302      	adds	r3, #2
 8005070:	0c12      	lsrs	r2, r2, #16
 8005072:	701a      	strb	r2, [r3, #0]
	rtcAlarm.AlarmTime.Seconds = sec;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	b2da      	uxtb	r2, r3
 8005078:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <powerMode_enterStandbyMode+0x74>)
 800507a:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetAlarm_IT(powerHrtc, &rtcAlarm, RTC_FORMAT_BCD);
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <powerMode_enterStandbyMode+0x6c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2201      	movs	r2, #1
 8005082:	4907      	ldr	r1, [pc, #28]	; (80050a0 <powerMode_enterStandbyMode+0x74>)
 8005084:	4618      	mov	r0, r3
 8005086:	f003 f9b9 	bl	80083fc <HAL_RTC_SetAlarm_IT>

	// Entramos en Standby
	HAL_PWR_EnterSTANDBYMode();
 800508a:	f002 fa05 	bl	8007498 <HAL_PWR_EnterSTANDBYMode>
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000698 	.word	0x20000698
 800509c:	2000069c 	.word	0x2000069c
 80050a0:	2000085c 	.word	0x2000085c

080050a4 <softTimer_init>:




void softTimer_init(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	timerHtim = htim;
 80050ac:	4a04      	ldr	r2, [pc, #16]	; (80050c0 <softTimer_init+0x1c>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f003 fd82 	bl	8008bbc <HAL_TIM_Base_Start_IT>
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	200006a0 	.word	0x200006a0

080050c4 <softTimer_start>:

void softTimer_start(SoftTimer_t* timer, uint32_t interval)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
	timer->state = state_running;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	721a      	strb	r2, [r3, #8]
	timer->start = softTimer_getTicks();
 80050d4:	f000 f858 	bl	8005188 <softTimer_getTicks>
 80050d8:	4602      	mov	r2, r0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
	timer->interval = interval;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	605a      	str	r2, [r3, #4]
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <softTimer_expired>:

uint8_t softTimer_expired(SoftTimer_t* timer)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]

	if(timer->state == state_running) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	7a1b      	ldrb	r3, [r3, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d121      	bne.n	8005144 <softTimer_expired+0x58>
		if(systemTicks >= timer->start)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4b12      	ldr	r3, [pc, #72]	; (8005150 <softTimer_expired+0x64>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d80d      	bhi.n	8005128 <softTimer_expired+0x3c>
			ret = ((systemTicks - timer->start) > timer->interval) ? 1 : 0;
 800510c:	4b10      	ldr	r3, [pc, #64]	; (8005150 <softTimer_expired+0x64>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	1ad2      	subs	r2, r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	bf8c      	ite	hi
 800511e:	2301      	movhi	r3, #1
 8005120:	2300      	movls	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	73fb      	strb	r3, [r7, #15]
 8005126:	e00d      	b.n	8005144 <softTimer_expired+0x58>
		else
			ret = (((0xFFFFFFFF - timer->start)+systemTicks) > timer->interval) ? 1 : 0;
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <softTimer_expired+0x64>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	1e5a      	subs	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	429a      	cmp	r2, r3
 800513a:	bf8c      	ite	hi
 800513c:	2301      	movhi	r3, #1
 800513e:	2300      	movls	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	200006a4 	.word	0x200006a4

08005154 <softTimer_stop>:

void softTimer_stop(SoftTimer_t* timer)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	timer->state = state_stopped;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	721a      	strb	r2, [r3, #8]
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr

0800516c <softTimer_handler>:

void softTimer_handler(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
	systemTicks++;
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <softTimer_handler+0x18>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	4a03      	ldr	r2, [pc, #12]	; (8005184 <softTimer_handler+0x18>)
 8005178:	6013      	str	r3, [r2, #0]
}
 800517a:	bf00      	nop
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	200006a4 	.word	0x200006a4

08005188 <softTimer_getTicks>:

uint32_t softTimer_getTicks(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
	return systemTicks;
 800518c:	4b02      	ldr	r3, [pc, #8]	; (8005198 <softTimer_getTicks+0x10>)
 800518e:	681b      	ldr	r3, [r3, #0]
}
 8005190:	4618      	mov	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr
 8005198:	200006a4 	.word	0x200006a4

0800519c <softTimer_periodElapsedCallback>:




void softTimer_periodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == timerHtim->Instance) {
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <softTimer_periodElapsedCallback+0x24>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d101      	bne.n	80051b6 <softTimer_periodElapsedCallback+0x1a>
		softTimer_handler();
 80051b2:	f7ff ffdb 	bl	800516c <softTimer_handler>
	}
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	200006a0 	.word	0x200006a0

080051c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80051ca:	4b15      	ldr	r3, [pc, #84]	; (8005220 <HAL_MspInit+0x5c>)
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	4a14      	ldr	r2, [pc, #80]	; (8005220 <HAL_MspInit+0x5c>)
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	6193      	str	r3, [r2, #24]
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <HAL_MspInit+0x5c>)
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051e2:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <HAL_MspInit+0x5c>)
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <HAL_MspInit+0x5c>)
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ec:	61d3      	str	r3, [r2, #28]
 80051ee:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <HAL_MspInit+0x5c>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <HAL_MspInit+0x60>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	4a04      	ldr	r2, [pc, #16]	; (8005224 <HAL_MspInit+0x60>)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	bc80      	pop	{r7}
 800521e:	4770      	bx	lr
 8005220:	40021000 	.word	0x40021000
 8005224:	40010000 	.word	0x40010000

08005228 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005230:	f107 0310 	add.w	r3, r7, #16
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	605a      	str	r2, [r3, #4]
 800523a:	609a      	str	r2, [r3, #8]
 800523c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a14      	ldr	r2, [pc, #80]	; (8005294 <HAL_ADC_MspInit+0x6c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d121      	bne.n	800528c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005248:	4b13      	ldr	r3, [pc, #76]	; (8005298 <HAL_ADC_MspInit+0x70>)
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	4a12      	ldr	r2, [pc, #72]	; (8005298 <HAL_ADC_MspInit+0x70>)
 800524e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005252:	6193      	str	r3, [r2, #24]
 8005254:	4b10      	ldr	r3, [pc, #64]	; (8005298 <HAL_ADC_MspInit+0x70>)
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <HAL_ADC_MspInit+0x70>)
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	4a0c      	ldr	r2, [pc, #48]	; (8005298 <HAL_ADC_MspInit+0x70>)
 8005266:	f043 0304 	orr.w	r3, r3, #4
 800526a:	6193      	str	r3, [r2, #24]
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <HAL_ADC_MspInit+0x70>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = CH4_ADC_Pin|NH3_ADC_Pin;
 8005278:	2350      	movs	r3, #80	; 0x50
 800527a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800527c:	2303      	movs	r3, #3
 800527e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005280:	f107 0310 	add.w	r3, r7, #16
 8005284:	4619      	mov	r1, r3
 8005286:	4805      	ldr	r0, [pc, #20]	; (800529c <HAL_ADC_MspInit+0x74>)
 8005288:	f001 ff52 	bl	8007130 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800528c:	bf00      	nop
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40012400 	.word	0x40012400
 8005298:	40021000 	.word	0x40021000
 800529c:	40010800 	.word	0x40010800

080052a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a0b      	ldr	r2, [pc, #44]	; (80052dc <HAL_RTC_MspInit+0x3c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d110      	bne.n	80052d4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80052b2:	f002 f8d9 	bl	8007468 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <HAL_RTC_MspInit+0x40>)
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <HAL_RTC_MspInit+0x40>)
 80052bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052c0:	61d3      	str	r3, [r2, #28]
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <HAL_RTC_MspInit+0x40>)
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80052ce:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <HAL_RTC_MspInit+0x44>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80052d4:	bf00      	nop
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40002800 	.word	0x40002800
 80052e0:	40021000 	.word	0x40021000
 80052e4:	4242043c 	.word	0x4242043c

080052e8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f0:	f107 0310 	add.w	r3, r7, #16
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	605a      	str	r2, [r3, #4]
 80052fa:	609a      	str	r2, [r3, #8]
 80052fc:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a19      	ldr	r2, [pc, #100]	; (8005368 <HAL_TIM_IC_MspInit+0x80>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d12b      	bne.n	8005360 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005308:	4b18      	ldr	r3, [pc, #96]	; (800536c <HAL_TIM_IC_MspInit+0x84>)
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	4a17      	ldr	r2, [pc, #92]	; (800536c <HAL_TIM_IC_MspInit+0x84>)
 800530e:	f043 0302 	orr.w	r3, r3, #2
 8005312:	61d3      	str	r3, [r2, #28]
 8005314:	4b15      	ldr	r3, [pc, #84]	; (800536c <HAL_TIM_IC_MspInit+0x84>)
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005320:	4b12      	ldr	r3, [pc, #72]	; (800536c <HAL_TIM_IC_MspInit+0x84>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	4a11      	ldr	r2, [pc, #68]	; (800536c <HAL_TIM_IC_MspInit+0x84>)
 8005326:	f043 0308 	orr.w	r3, r3, #8
 800532a:	6193      	str	r3, [r2, #24]
 800532c:	4b0f      	ldr	r3, [pc, #60]	; (800536c <HAL_TIM_IC_MspInit+0x84>)
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = US_ECHO_Pin;
 8005338:	2301      	movs	r3, #1
 800533a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005340:	2300      	movs	r3, #0
 8005342:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 8005344:	f107 0310 	add.w	r3, r7, #16
 8005348:	4619      	mov	r1, r3
 800534a:	4809      	ldr	r0, [pc, #36]	; (8005370 <HAL_TIM_IC_MspInit+0x88>)
 800534c:	f001 fef0 	bl	8007130 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005350:	2200      	movs	r2, #0
 8005352:	2100      	movs	r1, #0
 8005354:	201d      	movs	r0, #29
 8005356:	f001 fe04 	bl	8006f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800535a:	201d      	movs	r0, #29
 800535c:	f001 fe1d 	bl	8006f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005360:	bf00      	nop
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40000400 	.word	0x40000400
 800536c:	40021000 	.word	0x40021000
 8005370:	40010c00 	.word	0x40010c00

08005374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0d      	ldr	r2, [pc, #52]	; (80053b8 <HAL_TIM_Base_MspInit+0x44>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d113      	bne.n	80053ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <HAL_TIM_Base_MspInit+0x48>)
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	4a0c      	ldr	r2, [pc, #48]	; (80053bc <HAL_TIM_Base_MspInit+0x48>)
 800538c:	f043 0304 	orr.w	r3, r3, #4
 8005390:	61d3      	str	r3, [r2, #28]
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <HAL_TIM_Base_MspInit+0x48>)
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800539e:	2200      	movs	r2, #0
 80053a0:	2100      	movs	r1, #0
 80053a2:	201e      	movs	r0, #30
 80053a4:	f001 fddd 	bl	8006f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80053a8:	201e      	movs	r0, #30
 80053aa:	f001 fdf6 	bl	8006f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40021000 	.word	0x40021000

080053c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c8:	f107 0310 	add.w	r3, r7, #16
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a20      	ldr	r2, [pc, #128]	; (800545c <HAL_UART_MspInit+0x9c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d139      	bne.n	8005454 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80053e0:	4b1f      	ldr	r3, [pc, #124]	; (8005460 <HAL_UART_MspInit+0xa0>)
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	4a1e      	ldr	r2, [pc, #120]	; (8005460 <HAL_UART_MspInit+0xa0>)
 80053e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053ea:	6193      	str	r3, [r2, #24]
 80053ec:	4b1c      	ldr	r3, [pc, #112]	; (8005460 <HAL_UART_MspInit+0xa0>)
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053f8:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_UART_MspInit+0xa0>)
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	4a18      	ldr	r2, [pc, #96]	; (8005460 <HAL_UART_MspInit+0xa0>)
 80053fe:	f043 0304 	orr.w	r3, r3, #4
 8005402:	6193      	str	r3, [r2, #24]
 8005404:	4b16      	ldr	r3, [pc, #88]	; (8005460 <HAL_UART_MspInit+0xa0>)
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GSM_RX_Pin;
 8005410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005414:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005416:	2302      	movs	r3, #2
 8005418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800541a:	2303      	movs	r3, #3
 800541c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 800541e:	f107 0310 	add.w	r3, r7, #16
 8005422:	4619      	mov	r1, r3
 8005424:	480f      	ldr	r0, [pc, #60]	; (8005464 <HAL_UART_MspInit+0xa4>)
 8005426:	f001 fe83 	bl	8007130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_TX_Pin;
 800542a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800542e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 8005438:	f107 0310 	add.w	r3, r7, #16
 800543c:	4619      	mov	r1, r3
 800543e:	4809      	ldr	r0, [pc, #36]	; (8005464 <HAL_UART_MspInit+0xa4>)
 8005440:	f001 fe76 	bl	8007130 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005444:	2200      	movs	r2, #0
 8005446:	2100      	movs	r1, #0
 8005448:	2025      	movs	r0, #37	; 0x25
 800544a:	f001 fd8a 	bl	8006f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800544e:	2025      	movs	r0, #37	; 0x25
 8005450:	f001 fda3 	bl	8006f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005454:	bf00      	nop
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40013800 	.word	0x40013800
 8005460:	40021000 	.word	0x40021000
 8005464:	40010800 	.word	0x40010800

08005468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800546c:	e7fe      	b.n	800546c <NMI_Handler+0x4>

0800546e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800546e:	b480      	push	{r7}
 8005470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005472:	e7fe      	b.n	8005472 <HardFault_Handler+0x4>

08005474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005478:	e7fe      	b.n	8005478 <MemManage_Handler+0x4>

0800547a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800547a:	b480      	push	{r7}
 800547c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800547e:	e7fe      	b.n	800547e <BusFault_Handler+0x4>

08005480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005484:	e7fe      	b.n	8005484 <UsageFault_Handler+0x4>

08005486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005486:	b480      	push	{r7}
 8005488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800548a:	bf00      	nop
 800548c:	46bd      	mov	sp, r7
 800548e:	bc80      	pop	{r7}
 8005490:	4770      	bx	lr

08005492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005492:	b480      	push	{r7}
 8005494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005496:	bf00      	nop
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800549e:	b480      	push	{r7}
 80054a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr

080054aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054ae:	f001 f80d 	bl	80064cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054b2:	bf00      	nop
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80054bc:	4802      	ldr	r0, [pc, #8]	; (80054c8 <TIM3_IRQHandler+0x10>)
 80054be:	f003 fdcd 	bl	800905c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80054c2:	bf00      	nop
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	2000078c 	.word	0x2000078c

080054cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80054d0:	4802      	ldr	r0, [pc, #8]	; (80054dc <TIM4_IRQHandler+0x10>)
 80054d2:	f003 fdc3 	bl	800905c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000744 	.word	0x20000744

080054e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80054e4:	4802      	ldr	r0, [pc, #8]	; (80054f0 <USART1_IRQHandler+0x10>)
 80054e6:	f004 fbd5 	bl	8009c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80054ea:	bf00      	nop
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000804 	.word	0x20000804

080054f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054f8:	bf00      	nop
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <tempSensor_init>:




void tempSensor_init(ADC_HandleTypeDef *hadc)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	//ADC
	tempHadc = hadc;
 8005508:	4a08      	ldr	r2, [pc, #32]	; (800552c <tempSensor_init+0x2c>)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&tempSensor_state, __tempSensor_idle);
 800550e:	2100      	movs	r1, #0
 8005510:	4807      	ldr	r0, [pc, #28]	; (8005530 <tempSensor_init+0x30>)
 8005512:	f7fc fcd9 	bl	8001ec8 <fsmManager_init>

	//Flags
	flags_tempSensor.dword = 0;
 8005516:	4b07      	ldr	r3, [pc, #28]	; (8005534 <tempSensor_init+0x34>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
	flags_tempSensorError.dword = 0;
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <tempSensor_init+0x38>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	200006a8 	.word	0x200006a8
 8005530:	200006b0 	.word	0x200006b0
 8005534:	200006bc 	.word	0x200006bc
 8005538:	200006c0 	.word	0x200006c0
 800553c:	00000000 	.word	0x00000000

08005540 <tempSensor_handler>:

void tempSensor_handler(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&tempSensor_state)) {
 8005544:	4856      	ldr	r0, [pc, #344]	; (80056a0 <tempSensor_handler+0x160>)
 8005546:	f7fc fcec 	bl	8001f22 <fsmManager_getState>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <tempSensor_handler+0x16>
 8005550:	2b01      	cmp	r3, #1
 8005552:	d028      	beq.n	80055a6 <tempSensor_handler+0x66>

				flags_tempSensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 8005554:	e08f      	b.n	8005676 <tempSensor_handler+0x136>
			if(fsmManager_isStateIn(&tempSensor_state)) {
 8005556:	4852      	ldr	r0, [pc, #328]	; (80056a0 <tempSensor_handler+0x160>)
 8005558:	f7fc fcee 	bl	8001f38 <fsmManager_isStateIn>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <tempSensor_handler+0x32>
				fsmManager_stateIn(&tempSensor_state);
 8005562:	484f      	ldr	r0, [pc, #316]	; (80056a0 <tempSensor_handler+0x160>)
 8005564:	f7fc fcfe 	bl	8001f64 <fsmManager_stateIn>
				flags_tempSensor.bits.isMeasuring = 0;
 8005568:	4a4e      	ldr	r2, [pc, #312]	; (80056a4 <tempSensor_handler+0x164>)
 800556a:	7853      	ldrb	r3, [r2, #1]
 800556c:	f36f 03c3 	bfc	r3, #3, #1
 8005570:	7053      	strb	r3, [r2, #1]
			if(flags_tempSensor.bits.requestMeasure) {
 8005572:	4b4c      	ldr	r3, [pc, #304]	; (80056a4 <tempSensor_handler+0x164>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <tempSensor_handler+0x52>
				flags_tempSensor.bits.isMeasuring = 1;
 8005580:	4a48      	ldr	r2, [pc, #288]	; (80056a4 <tempSensor_handler+0x164>)
 8005582:	7853      	ldrb	r3, [r2, #1]
 8005584:	f043 0308 	orr.w	r3, r3, #8
 8005588:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&tempSensor_state,__tempSensor_getTemperature);
 800558a:	2101      	movs	r1, #1
 800558c:	4844      	ldr	r0, [pc, #272]	; (80056a0 <tempSensor_handler+0x160>)
 800558e:	f7fc fcb1 	bl	8001ef4 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&tempSensor_state)) {
 8005592:	4843      	ldr	r0, [pc, #268]	; (80056a0 <tempSensor_handler+0x160>)
 8005594:	f7fc fcdb 	bl	8001f4e <fsmManager_isStateOut>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d068      	beq.n	8005670 <tempSensor_handler+0x130>
				fsmManager_stateOut(&tempSensor_state);
 800559e:	4840      	ldr	r0, [pc, #256]	; (80056a0 <tempSensor_handler+0x160>)
 80055a0:	f7fc fcef 	bl	8001f82 <fsmManager_stateOut>
			break;
 80055a4:	e064      	b.n	8005670 <tempSensor_handler+0x130>
			if(fsmManager_isStateIn(&tempSensor_state)) {
 80055a6:	483e      	ldr	r0, [pc, #248]	; (80056a0 <tempSensor_handler+0x160>)
 80055a8:	f7fc fcc6 	bl	8001f38 <fsmManager_isStateIn>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d004      	beq.n	80055bc <tempSensor_handler+0x7c>
				fsmManager_stateIn(&tempSensor_state);
 80055b2:	483b      	ldr	r0, [pc, #236]	; (80056a0 <tempSensor_handler+0x160>)
 80055b4:	f7fc fcd6 	bl	8001f64 <fsmManager_stateIn>
				temp_adcStart();
 80055b8:	f000 f8b8 	bl	800572c <temp_adcStart>
			tCelcius = (3.3*((float)temp_adcGetValue())/4095 - V_25)/AVG_SLOPE + 25;
 80055bc:	f000 f8ca 	bl	8005754 <temp_adcGetValue>
 80055c0:	4603      	mov	r3, r0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fb fb36 	bl	8000c34 <__aeabi_ui2f>
 80055c8:	4603      	mov	r3, r0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fa ff24 	bl	8000418 <__aeabi_f2d>
 80055d0:	a32b      	add	r3, pc, #172	; (adr r3, 8005680 <tempSensor_handler+0x140>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fa ff77 	bl	80004c8 <__aeabi_dmul>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	a329      	add	r3, pc, #164	; (adr r3, 8005688 <tempSensor_handler+0x148>)
 80055e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e8:	f7fb f898 	bl	800071c <__aeabi_ddiv>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4610      	mov	r0, r2
 80055f2:	4619      	mov	r1, r3
 80055f4:	a326      	add	r3, pc, #152	; (adr r3, 8005690 <tempSensor_handler+0x150>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	f7fa fdad 	bl	8000158 <__aeabi_dsub>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4610      	mov	r0, r2
 8005604:	4619      	mov	r1, r3
 8005606:	a324      	add	r3, pc, #144	; (adr r3, 8005698 <tempSensor_handler+0x158>)
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f7fb f886 	bl	800071c <__aeabi_ddiv>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4610      	mov	r0, r2
 8005616:	4619      	mov	r1, r3
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	4b22      	ldr	r3, [pc, #136]	; (80056a8 <tempSensor_handler+0x168>)
 800561e:	f7fa fd9d 	bl	800015c <__adddf3>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4610      	mov	r0, r2
 8005628:	4619      	mov	r1, r3
 800562a:	f7fb f9fd 	bl	8000a28 <__aeabi_d2f>
 800562e:	4603      	mov	r3, r0
 8005630:	4a1e      	ldr	r2, [pc, #120]	; (80056ac <tempSensor_handler+0x16c>)
 8005632:	6013      	str	r3, [r2, #0]
			if(tempSensorCallback != NULL) {
 8005634:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <tempSensor_handler+0x170>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <tempSensor_handler+0x106>
				tempSensorCallback(__tempSensorEvent_okMeasuring, (float *) &tCelcius);
 800563c:	4b1c      	ldr	r3, [pc, #112]	; (80056b0 <tempSensor_handler+0x170>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	491a      	ldr	r1, [pc, #104]	; (80056ac <tempSensor_handler+0x16c>)
 8005642:	2000      	movs	r0, #0
 8005644:	4798      	blx	r3
			fsmManager_gotoState(&tempSensor_state,__tempSensor_idle);
 8005646:	2100      	movs	r1, #0
 8005648:	4815      	ldr	r0, [pc, #84]	; (80056a0 <tempSensor_handler+0x160>)
 800564a:	f7fc fc53 	bl	8001ef4 <fsmManager_gotoState>
			if(fsmManager_isStateOut(&tempSensor_state)) {
 800564e:	4814      	ldr	r0, [pc, #80]	; (80056a0 <tempSensor_handler+0x160>)
 8005650:	f7fc fc7d 	bl	8001f4e <fsmManager_isStateOut>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <tempSensor_handler+0x134>
				fsmManager_stateOut(&tempSensor_state);
 800565a:	4811      	ldr	r0, [pc, #68]	; (80056a0 <tempSensor_handler+0x160>)
 800565c:	f7fc fc91 	bl	8001f82 <fsmManager_stateOut>
				temp_adcStop();
 8005660:	f000 f884 	bl	800576c <temp_adcStop>
				flags_tempSensor.bits.requestMeasure = 0;
 8005664:	4a0f      	ldr	r2, [pc, #60]	; (80056a4 <tempSensor_handler+0x164>)
 8005666:	7813      	ldrb	r3, [r2, #0]
 8005668:	f36f 0300 	bfc	r3, #0, #1
 800566c:	7013      	strb	r3, [r2, #0]
			break;
 800566e:	e001      	b.n	8005674 <tempSensor_handler+0x134>
			break;
 8005670:	bf00      	nop
 8005672:	e000      	b.n	8005676 <tempSensor_handler+0x136>
			break;
 8005674:	bf00      	nop
}
 8005676:	bf00      	nop
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	f3af 8000 	nop.w
 8005680:	66666666 	.word	0x66666666
 8005684:	400a6666 	.word	0x400a6666
 8005688:	00000000 	.word	0x00000000
 800568c:	40affe00 	.word	0x40affe00
 8005690:	851eb852 	.word	0x851eb852
 8005694:	3fe851eb 	.word	0x3fe851eb
 8005698:	9999999a 	.word	0x9999999a
 800569c:	3f999999 	.word	0x3f999999
 80056a0:	200006b0 	.word	0x200006b0
 80056a4:	200006bc 	.word	0x200006bc
 80056a8:	40390000 	.word	0x40390000
 80056ac:	200006ac 	.word	0x200006ac
 80056b0:	200006c4 	.word	0x200006c4

080056b4 <tempSensor_measure>:

void tempSensor_measure(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
	flags_tempSensor.bits.requestMeasure = 1;
 80056b8:	4a04      	ldr	r2, [pc, #16]	; (80056cc <tempSensor_measure+0x18>)
 80056ba:	7813      	ldrb	r3, [r2, #0]
 80056bc:	f043 0301 	orr.w	r3, r3, #1
 80056c0:	7013      	strb	r3, [r2, #0]
}
 80056c2:	bf00      	nop
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	200006bc 	.word	0x200006bc

080056d0 <tempSensor_setCallback>:
{
	return flags_tempSensor.bits.isMeasuring;
}

void tempSensor_setCallback(void (*cb)(_tempSensor_event, void*))
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	tempSensorCallback = cb;
 80056d8:	4a03      	ldr	r2, [pc, #12]	; (80056e8 <tempSensor_setCallback+0x18>)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6013      	str	r3, [r2, #0]
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr
 80056e8:	200006c4 	.word	0x200006c4

080056ec <ADC_Select_CHTemp>:




static void ADC_Select_CHTemp(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80056fc:	2310      	movs	r3, #16
 80056fe:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8005700:	2301      	movs	r3, #1
 8005702:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8005704:	2304      	movs	r3, #4
 8005706:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(tempHadc, &sConfig) != HAL_OK) {
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <ADC_Select_CHTemp+0x3c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	1d3a      	adds	r2, r7, #4
 800570e:	4611      	mov	r1, r2
 8005710:	4618      	mov	r0, r3
 8005712:	f001 f9bb 	bl	8006a8c <HAL_ADC_ConfigChannel>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <ADC_Select_CHTemp+0x34>
		Error_Handler();
 800571c:	f7ff fa8a 	bl	8004c34 <Error_Handler>
	}
}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	200006a8 	.word	0x200006a8

0800572c <temp_adcStart>:

static void temp_adcStart(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
	ADC_Select_CHTemp();
 8005730:	f7ff ffdc 	bl	80056ec <ADC_Select_CHTemp>
	HAL_ADC_Start(tempHadc);
 8005734:	4b06      	ldr	r3, [pc, #24]	; (8005750 <temp_adcStart+0x24>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f000 ffbb 	bl	80066b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(tempHadc, 100);
 800573e:	4b04      	ldr	r3, [pc, #16]	; (8005750 <temp_adcStart+0x24>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2164      	movs	r1, #100	; 0x64
 8005744:	4618      	mov	r0, r3
 8005746:	f001 f88f 	bl	8006868 <HAL_ADC_PollForConversion>
}
 800574a:	bf00      	nop
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	200006a8 	.word	0x200006a8

08005754 <temp_adcGetValue>:

static uint32_t temp_adcGetValue(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(tempHadc);
 8005758:	4b03      	ldr	r3, [pc, #12]	; (8005768 <temp_adcGetValue+0x14>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f001 f989 	bl	8006a74 <HAL_ADC_GetValue>
 8005762:	4603      	mov	r3, r0
}
 8005764:	4618      	mov	r0, r3
 8005766:	bd80      	pop	{r7, pc}
 8005768:	200006a8 	.word	0x200006a8

0800576c <temp_adcStop>:

static void temp_adcStop(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(tempHadc);
 8005770:	4b03      	ldr	r3, [pc, #12]	; (8005780 <temp_adcStop+0x14>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f001 f84b 	bl	8006810 <HAL_ADC_Stop>
}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	200006a8 	.word	0x200006a8

08005784 <usSensor_init>:




void usSensor_init(TIM_HandleTypeDef *htim)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	//Timer
	usHtim = htim;
 800578c:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <usSensor_init+0x80>)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&usSensor_state, __usSensor_idle);
 8005792:	2100      	movs	r1, #0
 8005794:	481c      	ldr	r0, [pc, #112]	; (8005808 <usSensor_init+0x84>)
 8005796:	f7fc fb97 	bl	8001ec8 <fsmManager_init>

	//Pin
	pinUsVdd_write(0);
 800579a:	2000      	movs	r0, #0
 800579c:	f000 fa58 	bl	8005c50 <pinUsVdd_write>
	pinUsTrigger_write(0);
 80057a0:	2000      	movs	r0, #0
 80057a2:	f000 fa67 	bl	8005c74 <pinUsTrigger_write>
	//pinUsEcho_inputCaptureStop();
	//HAL_TIM_IC_Start_IT(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);

	//Flags
	flags_usSensor.dword = 0;
 80057a6:	4b19      	ldr	r3, [pc, #100]	; (800580c <usSensor_init+0x88>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
	flags_usSensorError.dword = 0;
 80057ac:	4b18      	ldr	r3, [pc, #96]	; (8005810 <usSensor_init+0x8c>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]

	//Variables
	echoTime = 0;
 80057b2:	4b18      	ldr	r3, [pc, #96]	; (8005814 <usSensor_init+0x90>)
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
	usDistance = 0;
 80057ba:	4b17      	ldr	r3, [pc, #92]	; (8005818 <usSensor_init+0x94>)
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
	soundSpeed = numberFloat_getLinearValue(US_SENSOR_DEFAULT_TEMPERATURE, tableTempVsSpeed, sizeof(tableTempVsSpeed)/(sizeof(float)*2));		//Default 25 celcius
 80057c2:	220f      	movs	r2, #15
 80057c4:	4915      	ldr	r1, [pc, #84]	; (800581c <usSensor_init+0x98>)
 80057c6:	4816      	ldr	r0, [pc, #88]	; (8005820 <usSensor_init+0x9c>)
 80057c8:	f000 fd1f 	bl	800620a <numberFloat_getLinearValue>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4a15      	ldr	r2, [pc, #84]	; (8005824 <usSensor_init+0xa0>)
 80057d0:	6013      	str	r3, [r2, #0]

	//Callback
	usSensorCallback = NULL;
 80057d2:	4b15      	ldr	r3, [pc, #84]	; (8005828 <usSensor_init+0xa4>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]

	//Reference clock for Input Capture
	mFactor = 1000000*(usHtim->Init.Prescaler+1)/HAL_RCC_GetSysClockFreq();
 80057d8:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <usSensor_init+0x80>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	3301      	adds	r3, #1
 80057e0:	4a12      	ldr	r2, [pc, #72]	; (800582c <usSensor_init+0xa8>)
 80057e2:	fb02 f403 	mul.w	r4, r2, r3
 80057e6:	f002 f9d9 	bl	8007b9c <HAL_RCC_GetSysClockFreq>
 80057ea:	4603      	mov	r3, r0
 80057ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fb fa1f 	bl	8000c34 <__aeabi_ui2f>
 80057f6:	4603      	mov	r3, r0
 80057f8:	4a0d      	ldr	r2, [pc, #52]	; (8005830 <usSensor_init+0xac>)
 80057fa:	6013      	str	r3, [r2, #0]
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	bd90      	pop	{r4, r7, pc}
 8005804:	200006cc 	.word	0x200006cc
 8005808:	200006e8 	.word	0x200006e8
 800580c:	200006f4 	.word	0x200006f4
 8005810:	200006f8 	.word	0x200006f8
 8005814:	2000070c 	.word	0x2000070c
 8005818:	20000710 	.word	0x20000710
 800581c:	20000004 	.word	0x20000004
 8005820:	41a00000 	.word	0x41a00000
 8005824:	20000714 	.word	0x20000714
 8005828:	20000718 	.word	0x20000718
 800582c:	000f4240 	.word	0x000f4240
 8005830:	20000708 	.word	0x20000708

08005834 <usSensor_handler>:

void usSensor_handler(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&usSensor_state)) {
 8005838:	48b4      	ldr	r0, [pc, #720]	; (8005b0c <usSensor_handler+0x2d8>)
 800583a:	f7fc fb72 	bl	8001f22 <fsmManager_getState>
 800583e:	4603      	mov	r3, r0
 8005840:	2b07      	cmp	r3, #7
 8005842:	f200 8190 	bhi.w	8005b66 <usSensor_handler+0x332>
 8005846:	a201      	add	r2, pc, #4	; (adr r2, 800584c <usSensor_handler+0x18>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	0800586d 	.word	0x0800586d
 8005850:	080058df 	.word	0x080058df
 8005854:	08005925 	.word	0x08005925
 8005858:	0800597f 	.word	0x0800597f
 800585c:	080059ef 	.word	0x080059ef
 8005860:	08005a79 	.word	0x08005a79
 8005864:	08005ac3 	.word	0x08005ac3
 8005868:	08005b39 	.word	0x08005b39
		case __usSensor_idle:
			if(fsmManager_isStateIn(&usSensor_state)) {
 800586c:	48a7      	ldr	r0, [pc, #668]	; (8005b0c <usSensor_handler+0x2d8>)
 800586e:	f7fc fb63 	bl	8001f38 <fsmManager_isStateIn>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d012      	beq.n	800589e <usSensor_handler+0x6a>
				fsmManager_stateIn(&usSensor_state);
 8005878:	48a4      	ldr	r0, [pc, #656]	; (8005b0c <usSensor_handler+0x2d8>)
 800587a:	f7fc fb73 	bl	8001f64 <fsmManager_stateIn>

				//Clear signals
				pinUsTrigger_write(0);
 800587e:	2000      	movs	r0, #0
 8005880:	f000 f9f8 	bl	8005c74 <pinUsTrigger_write>

				//Clear variables
				echoTime = 0;
 8005884:	4ba2      	ldr	r3, [pc, #648]	; (8005b10 <usSensor_handler+0x2dc>)
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
				usDistance = 0;
 800588c:	4ba1      	ldr	r3, [pc, #644]	; (8005b14 <usSensor_handler+0x2e0>)
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
				flags_usSensor.bits.isMeasuring = 0;
 8005894:	4aa0      	ldr	r2, [pc, #640]	; (8005b18 <usSensor_handler+0x2e4>)
 8005896:	7853      	ldrb	r3, [r2, #1]
 8005898:	f36f 03c3 	bfc	r3, #3, #1
 800589c:	7053      	strb	r3, [r2, #1]
			}

			if(flags_usSensor.bits.requestMeasure) {
 800589e:	4b9e      	ldr	r3, [pc, #632]	; (8005b18 <usSensor_handler+0x2e4>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00d      	beq.n	80058c8 <usSensor_handler+0x94>
				flags_usSensor.bits.requestMeasure = 0;
 80058ac:	4a9a      	ldr	r2, [pc, #616]	; (8005b18 <usSensor_handler+0x2e4>)
 80058ae:	7813      	ldrb	r3, [r2, #0]
 80058b0:	f36f 0300 	bfc	r3, #0, #1
 80058b4:	7013      	strb	r3, [r2, #0]
				flags_usSensor.bits.isMeasuring = 1;
 80058b6:	4a98      	ldr	r2, [pc, #608]	; (8005b18 <usSensor_handler+0x2e4>)
 80058b8:	7853      	ldrb	r3, [r2, #1]
 80058ba:	f043 0308 	orr.w	r3, r3, #8
 80058be:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&usSensor_state,__usSensor_delay);
 80058c0:	2101      	movs	r1, #1
 80058c2:	4892      	ldr	r0, [pc, #584]	; (8005b0c <usSensor_handler+0x2d8>)
 80058c4:	f7fc fb16 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 80058c8:	4890      	ldr	r0, [pc, #576]	; (8005b0c <usSensor_handler+0x2d8>)
 80058ca:	f7fc fb40 	bl	8001f4e <fsmManager_isStateOut>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 815f 	beq.w	8005b94 <usSensor_handler+0x360>
				fsmManager_stateOut(&usSensor_state);
 80058d6:	488d      	ldr	r0, [pc, #564]	; (8005b0c <usSensor_handler+0x2d8>)
 80058d8:	f7fc fb53 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 80058dc:	e15a      	b.n	8005b94 <usSensor_handler+0x360>



		case __usSensor_delay:
			if(fsmManager_isStateIn(&usSensor_state)) {
 80058de:	488b      	ldr	r0, [pc, #556]	; (8005b0c <usSensor_handler+0x2d8>)
 80058e0:	f7fc fb2a 	bl	8001f38 <fsmManager_isStateIn>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <usSensor_handler+0xc6>
				fsmManager_stateIn(&usSensor_state);
 80058ea:	4888      	ldr	r0, [pc, #544]	; (8005b0c <usSensor_handler+0x2d8>)
 80058ec:	f7fc fb3a 	bl	8001f64 <fsmManager_stateIn>

				softTimer_start(&timer, 1000);
 80058f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80058f4:	4889      	ldr	r0, [pc, #548]	; (8005b1c <usSensor_handler+0x2e8>)
 80058f6:	f7ff fbe5 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 80058fa:	4888      	ldr	r0, [pc, #544]	; (8005b1c <usSensor_handler+0x2e8>)
 80058fc:	f7ff fbf6 	bl	80050ec <softTimer_expired>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <usSensor_handler+0xda>
				fsmManager_gotoState(&usSensor_state,__usSensor_pinUsTrigger_write);
 8005906:	2102      	movs	r1, #2
 8005908:	4880      	ldr	r0, [pc, #512]	; (8005b0c <usSensor_handler+0x2d8>)
 800590a:	f7fc faf3 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 800590e:	487f      	ldr	r0, [pc, #508]	; (8005b0c <usSensor_handler+0x2d8>)
 8005910:	f7fc fb1d 	bl	8001f4e <fsmManager_isStateOut>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 813e 	beq.w	8005b98 <usSensor_handler+0x364>
				fsmManager_stateOut(&usSensor_state);
 800591c:	487b      	ldr	r0, [pc, #492]	; (8005b0c <usSensor_handler+0x2d8>)
 800591e:	f7fc fb30 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8005922:	e139      	b.n	8005b98 <usSensor_handler+0x364>



		case __usSensor_pinUsTrigger_write:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005924:	4879      	ldr	r0, [pc, #484]	; (8005b0c <usSensor_handler+0x2d8>)
 8005926:	f7fc fb07 	bl	8001f38 <fsmManager_isStateIn>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d009      	beq.n	8005944 <usSensor_handler+0x110>
				fsmManager_stateIn(&usSensor_state);
 8005930:	4876      	ldr	r0, [pc, #472]	; (8005b0c <usSensor_handler+0x2d8>)
 8005932:	f7fc fb17 	bl	8001f64 <fsmManager_stateIn>

				//Set trigger during 1 mseg
				pinUsTrigger_write(1);
 8005936:	2001      	movs	r0, #1
 8005938:	f000 f99c 	bl	8005c74 <pinUsTrigger_write>
				softTimer_start(&timer, 10);
 800593c:	210a      	movs	r1, #10
 800593e:	4877      	ldr	r0, [pc, #476]	; (8005b1c <usSensor_handler+0x2e8>)
 8005940:	f7ff fbc0 	bl	80050c4 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 8005944:	4875      	ldr	r0, [pc, #468]	; (8005b1c <usSensor_handler+0x2e8>)
 8005946:	f7ff fbd1 	bl	80050ec <softTimer_expired>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00b      	beq.n	8005968 <usSensor_handler+0x134>
				softTimer_stop(&timer);
 8005950:	4872      	ldr	r0, [pc, #456]	; (8005b1c <usSensor_handler+0x2e8>)
 8005952:	f7ff fbff 	bl	8005154 <softTimer_stop>

				//Finished setting trigger
				pinUsTrigger_write(0);
 8005956:	2000      	movs	r0, #0
 8005958:	f000 f98c 	bl	8005c74 <pinUsTrigger_write>

				//Enable input capture for echo
				pinUsEcho_inputCaptureStart();
 800595c:	f000 f99c 	bl	8005c98 <pinUsEcho_inputCaptureStart>

				fsmManager_gotoState(&usSensor_state,__usSensor_waitEcho);
 8005960:	2103      	movs	r1, #3
 8005962:	486a      	ldr	r0, [pc, #424]	; (8005b0c <usSensor_handler+0x2d8>)
 8005964:	f7fc fac6 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005968:	4868      	ldr	r0, [pc, #416]	; (8005b0c <usSensor_handler+0x2d8>)
 800596a:	f7fc faf0 	bl	8001f4e <fsmManager_isStateOut>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 8113 	beq.w	8005b9c <usSensor_handler+0x368>
				fsmManager_stateOut(&usSensor_state);
 8005976:	4865      	ldr	r0, [pc, #404]	; (8005b0c <usSensor_handler+0x2d8>)
 8005978:	f7fc fb03 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 800597c:	e10e      	b.n	8005b9c <usSensor_handler+0x368>



		case __usSensor_waitEcho:
			if(fsmManager_isStateIn(&usSensor_state)) {
 800597e:	4863      	ldr	r0, [pc, #396]	; (8005b0c <usSensor_handler+0x2d8>)
 8005980:	f7fc fada 	bl	8001f38 <fsmManager_isStateIn>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <usSensor_handler+0x164>
				fsmManager_stateIn(&usSensor_state);
 800598a:	4860      	ldr	r0, [pc, #384]	; (8005b0c <usSensor_handler+0x2d8>)
 800598c:	f7fc faea 	bl	8001f64 <fsmManager_stateIn>

				//Set 100mseg timeout
				softTimer_start(&timeout, 100);
 8005990:	2164      	movs	r1, #100	; 0x64
 8005992:	4863      	ldr	r0, [pc, #396]	; (8005b20 <usSensor_handler+0x2ec>)
 8005994:	f7ff fb96 	bl	80050c4 <softTimer_start>
			}

			//Echo received
			if(flags_usSensor.bits.receivedEcho == 1) {
 8005998:	4b5f      	ldr	r3, [pc, #380]	; (8005b18 <usSensor_handler+0x2e4>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <usSensor_handler+0x186>
				flags_usSensor.bits.receivedEcho = 0;
 80059a6:	4a5c      	ldr	r2, [pc, #368]	; (8005b18 <usSensor_handler+0x2e4>)
 80059a8:	7813      	ldrb	r3, [r2, #0]
 80059aa:	f36f 1386 	bfc	r3, #6, #1
 80059ae:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&usSensor_state,__usSensor_getDistance);
 80059b0:	2104      	movs	r1, #4
 80059b2:	4856      	ldr	r0, [pc, #344]	; (8005b0c <usSensor_handler+0x2d8>)
 80059b4:	f7fc fa9e 	bl	8001ef4 <fsmManager_gotoState>
 80059b8:	e00c      	b.n	80059d4 <usSensor_handler+0x1a0>
			} else if(softTimer_expired(&timeout)) {
 80059ba:	4859      	ldr	r0, [pc, #356]	; (8005b20 <usSensor_handler+0x2ec>)
 80059bc:	f7ff fb96 	bl	80050ec <softTimer_expired>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d006      	beq.n	80059d4 <usSensor_handler+0x1a0>
				softTimer_stop(&timeout);
 80059c6:	4856      	ldr	r0, [pc, #344]	; (8005b20 <usSensor_handler+0x2ec>)
 80059c8:	f7ff fbc4 	bl	8005154 <softTimer_stop>

				fsmManager_gotoState(&usSensor_state,__usSensor_errorWaitEcho);
 80059cc:	2105      	movs	r1, #5
 80059ce:	484f      	ldr	r0, [pc, #316]	; (8005b0c <usSensor_handler+0x2d8>)
 80059d0:	f7fc fa90 	bl	8001ef4 <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 80059d4:	484d      	ldr	r0, [pc, #308]	; (8005b0c <usSensor_handler+0x2d8>)
 80059d6:	f7fc faba 	bl	8001f4e <fsmManager_isStateOut>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80df 	beq.w	8005ba0 <usSensor_handler+0x36c>
				fsmManager_stateOut(&usSensor_state);
 80059e2:	484a      	ldr	r0, [pc, #296]	; (8005b0c <usSensor_handler+0x2d8>)
 80059e4:	f7fc facd 	bl	8001f82 <fsmManager_stateOut>

				pinUsEcho_inputCaptureStop();
 80059e8:	f000 f962 	bl	8005cb0 <pinUsEcho_inputCaptureStop>
			}
			break;
 80059ec:	e0d8      	b.n	8005ba0 <usSensor_handler+0x36c>



		case __usSensor_getDistance:
			if(fsmManager_isStateIn(&usSensor_state)) {
 80059ee:	4847      	ldr	r0, [pc, #284]	; (8005b0c <usSensor_handler+0x2d8>)
 80059f0:	f7fc faa2 	bl	8001f38 <fsmManager_isStateIn>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <usSensor_handler+0x1cc>
				fsmManager_stateIn(&usSensor_state);
 80059fa:	4844      	ldr	r0, [pc, #272]	; (8005b0c <usSensor_handler+0x2d8>)
 80059fc:	f7fc fab2 	bl	8001f64 <fsmManager_stateIn>
			}

			//Get speed of sound based on temperature
			soundSpeed = getSoundSpeed();
 8005a00:	f000 f900 	bl	8005c04 <getSoundSpeed>
 8005a04:	4603      	mov	r3, r0
 8005a06:	4a47      	ldr	r2, [pc, #284]	; (8005b24 <usSensor_handler+0x2f0>)
 8005a08:	6013      	str	r3, [r2, #0]

			//Calculate usDistance
			usDistance = (echoTime*soundSpeed/2000); //[mm]
 8005a0a:	4b41      	ldr	r3, [pc, #260]	; (8005b10 <usSensor_handler+0x2dc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a45      	ldr	r2, [pc, #276]	; (8005b24 <usSensor_handler+0x2f0>)
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fb f965 	bl	8000ce4 <__aeabi_fmul>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4942      	ldr	r1, [pc, #264]	; (8005b28 <usSensor_handler+0x2f4>)
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fb fa14 	bl	8000e4c <__aeabi_fdiv>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	4b3a      	ldr	r3, [pc, #232]	; (8005b14 <usSensor_handler+0x2e0>)
 8005a2a:	601a      	str	r2, [r3, #0]

			if(usDistance > US_SENSOR_DISTANCE_MAX_MILIMETER) {
 8005a2c:	4b39      	ldr	r3, [pc, #228]	; (8005b14 <usSensor_handler+0x2e0>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	493e      	ldr	r1, [pc, #248]	; (8005b2c <usSensor_handler+0x2f8>)
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fb fb12 	bl	800105c <__aeabi_fcmpgt>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <usSensor_handler+0x214>
				fsmManager_gotoState(&usSensor_state,__usSensor_errorEchoOverflow);
 8005a3e:	2106      	movs	r1, #6
 8005a40:	4832      	ldr	r0, [pc, #200]	; (8005b0c <usSensor_handler+0x2d8>)
 8005a42:	f7fc fa57 	bl	8001ef4 <fsmManager_gotoState>
 8005a46:	e00c      	b.n	8005a62 <usSensor_handler+0x22e>
			} else {
				//Informs to higher layer
				if(usSensorCallback != NULL) {
 8005a48:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <usSensor_handler+0x2fc>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <usSensor_handler+0x226>
					usSensorCallback(__usSensorEvent_okMeasuring, (float *) &usDistance);
 8005a50:	4b37      	ldr	r3, [pc, #220]	; (8005b30 <usSensor_handler+0x2fc>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	492f      	ldr	r1, [pc, #188]	; (8005b14 <usSensor_handler+0x2e0>)
 8005a56:	2000      	movs	r0, #0
 8005a58:	4798      	blx	r3
				}

				fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	482b      	ldr	r0, [pc, #172]	; (8005b0c <usSensor_handler+0x2d8>)
 8005a5e:	f7fc fa49 	bl	8001ef4 <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&usSensor_state)) {
 8005a62:	482a      	ldr	r0, [pc, #168]	; (8005b0c <usSensor_handler+0x2d8>)
 8005a64:	f7fc fa73 	bl	8001f4e <fsmManager_isStateOut>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 809a 	beq.w	8005ba4 <usSensor_handler+0x370>
				fsmManager_stateOut(&usSensor_state);
 8005a70:	4826      	ldr	r0, [pc, #152]	; (8005b0c <usSensor_handler+0x2d8>)
 8005a72:	f7fc fa86 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8005a76:	e095      	b.n	8005ba4 <usSensor_handler+0x370>



		case __usSensor_errorWaitEcho:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005a78:	4824      	ldr	r0, [pc, #144]	; (8005b0c <usSensor_handler+0x2d8>)
 8005a7a:	f7fc fa5d 	bl	8001f38 <fsmManager_isStateIn>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <usSensor_handler+0x256>
				fsmManager_stateIn(&usSensor_state);
 8005a84:	4821      	ldr	r0, [pc, #132]	; (8005b0c <usSensor_handler+0x2d8>)
 8005a86:	f7fc fa6d 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_usSensorError.bits.echo = 1;
 8005a8a:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <usSensor_handler+0x300>)
 8005a8c:	7813      	ldrb	r3, [r2, #0]
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	7013      	strb	r3, [r2, #0]

			//Informs to higher layer
			if(usSensorCallback != NULL) {
 8005a94:	4b26      	ldr	r3, [pc, #152]	; (8005b30 <usSensor_handler+0x2fc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <usSensor_handler+0x272>
				usSensorCallback(__usSensorEvent_errorEcho, NULL);
 8005a9c:	4b24      	ldr	r3, [pc, #144]	; (8005b30 <usSensor_handler+0x2fc>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	4798      	blx	r3
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_error);
 8005aa6:	2107      	movs	r1, #7
 8005aa8:	4818      	ldr	r0, [pc, #96]	; (8005b0c <usSensor_handler+0x2d8>)
 8005aaa:	f7fc fa23 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005aae:	4817      	ldr	r0, [pc, #92]	; (8005b0c <usSensor_handler+0x2d8>)
 8005ab0:	f7fc fa4d 	bl	8001f4e <fsmManager_isStateOut>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d076      	beq.n	8005ba8 <usSensor_handler+0x374>
				fsmManager_stateOut(&usSensor_state);
 8005aba:	4814      	ldr	r0, [pc, #80]	; (8005b0c <usSensor_handler+0x2d8>)
 8005abc:	f7fc fa61 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8005ac0:	e072      	b.n	8005ba8 <usSensor_handler+0x374>



		case __usSensor_errorEchoOverflow:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005ac2:	4812      	ldr	r0, [pc, #72]	; (8005b0c <usSensor_handler+0x2d8>)
 8005ac4:	f7fc fa38 	bl	8001f38 <fsmManager_isStateIn>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <usSensor_handler+0x2a0>
				fsmManager_stateIn(&usSensor_state);
 8005ace:	480f      	ldr	r0, [pc, #60]	; (8005b0c <usSensor_handler+0x2d8>)
 8005ad0:	f7fc fa48 	bl	8001f64 <fsmManager_stateIn>
			}

			flags_usSensorError.bits.echo = 1;
 8005ad4:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <usSensor_handler+0x300>)
 8005ad6:	7813      	ldrb	r3, [r2, #0]
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	7013      	strb	r3, [r2, #0]

			//Informs to higher layer
			if(usSensorCallback != NULL) {
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <usSensor_handler+0x2fc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <usSensor_handler+0x2bc>
				usSensorCallback(__usSensorEvent_errorEcho, NULL);
 8005ae6:	4b12      	ldr	r3, [pc, #72]	; (8005b30 <usSensor_handler+0x2fc>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2100      	movs	r1, #0
 8005aec:	2001      	movs	r0, #1
 8005aee:	4798      	blx	r3
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_error);
 8005af0:	2107      	movs	r1, #7
 8005af2:	4806      	ldr	r0, [pc, #24]	; (8005b0c <usSensor_handler+0x2d8>)
 8005af4:	f7fc f9fe 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005af8:	4804      	ldr	r0, [pc, #16]	; (8005b0c <usSensor_handler+0x2d8>)
 8005afa:	f7fc fa28 	bl	8001f4e <fsmManager_isStateOut>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d053      	beq.n	8005bac <usSensor_handler+0x378>
				fsmManager_stateOut(&usSensor_state);
 8005b04:	4801      	ldr	r0, [pc, #4]	; (8005b0c <usSensor_handler+0x2d8>)
 8005b06:	f7fc fa3c 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8005b0a:	e04f      	b.n	8005bac <usSensor_handler+0x378>
 8005b0c:	200006e8 	.word	0x200006e8
 8005b10:	2000070c 	.word	0x2000070c
 8005b14:	20000710 	.word	0x20000710
 8005b18:	200006f4 	.word	0x200006f4
 8005b1c:	200006d0 	.word	0x200006d0
 8005b20:	200006dc 	.word	0x200006dc
 8005b24:	20000714 	.word	0x20000714
 8005b28:	44fa0000 	.word	0x44fa0000
 8005b2c:	45bb8000 	.word	0x45bb8000
 8005b30:	20000718 	.word	0x20000718
 8005b34:	200006f8 	.word	0x200006f8



		case __usSensor_error:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005b38:	481f      	ldr	r0, [pc, #124]	; (8005bb8 <usSensor_handler+0x384>)
 8005b3a:	f7fc f9fd 	bl	8001f38 <fsmManager_isStateIn>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <usSensor_handler+0x316>
				fsmManager_stateIn(&usSensor_state);
 8005b44:	481c      	ldr	r0, [pc, #112]	; (8005bb8 <usSensor_handler+0x384>)
 8005b46:	f7fc fa0d 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	481a      	ldr	r0, [pc, #104]	; (8005bb8 <usSensor_handler+0x384>)
 8005b4e:	f7fc f9d1 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005b52:	4819      	ldr	r0, [pc, #100]	; (8005bb8 <usSensor_handler+0x384>)
 8005b54:	f7fc f9fb 	bl	8001f4e <fsmManager_isStateOut>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d028      	beq.n	8005bb0 <usSensor_handler+0x37c>
				fsmManager_stateOut(&usSensor_state);
 8005b5e:	4816      	ldr	r0, [pc, #88]	; (8005bb8 <usSensor_handler+0x384>)
 8005b60:	f7fc fa0f 	bl	8001f82 <fsmManager_stateOut>
			}
			break;
 8005b64:	e024      	b.n	8005bb0 <usSensor_handler+0x37c>



		default:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005b66:	4814      	ldr	r0, [pc, #80]	; (8005bb8 <usSensor_handler+0x384>)
 8005b68:	f7fc f9e6 	bl	8001f38 <fsmManager_isStateIn>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <usSensor_handler+0x344>
				fsmManager_stateIn(&usSensor_state);
 8005b72:	4811      	ldr	r0, [pc, #68]	; (8005bb8 <usSensor_handler+0x384>)
 8005b74:	f7fc f9f6 	bl	8001f64 <fsmManager_stateIn>
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 8005b78:	2100      	movs	r1, #0
 8005b7a:	480f      	ldr	r0, [pc, #60]	; (8005bb8 <usSensor_handler+0x384>)
 8005b7c:	f7fc f9ba 	bl	8001ef4 <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005b80:	480d      	ldr	r0, [pc, #52]	; (8005bb8 <usSensor_handler+0x384>)
 8005b82:	f7fc f9e4 	bl	8001f4e <fsmManager_isStateOut>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d012      	beq.n	8005bb2 <usSensor_handler+0x37e>
				fsmManager_stateOut(&usSensor_state);
 8005b8c:	480a      	ldr	r0, [pc, #40]	; (8005bb8 <usSensor_handler+0x384>)
 8005b8e:	f7fc f9f8 	bl	8001f82 <fsmManager_stateOut>
			}
	}
}
 8005b92:	e00e      	b.n	8005bb2 <usSensor_handler+0x37e>
			break;
 8005b94:	bf00      	nop
 8005b96:	e00c      	b.n	8005bb2 <usSensor_handler+0x37e>
			break;
 8005b98:	bf00      	nop
 8005b9a:	e00a      	b.n	8005bb2 <usSensor_handler+0x37e>
			break;
 8005b9c:	bf00      	nop
 8005b9e:	e008      	b.n	8005bb2 <usSensor_handler+0x37e>
			break;
 8005ba0:	bf00      	nop
 8005ba2:	e006      	b.n	8005bb2 <usSensor_handler+0x37e>
			break;
 8005ba4:	bf00      	nop
 8005ba6:	e004      	b.n	8005bb2 <usSensor_handler+0x37e>
			break;
 8005ba8:	bf00      	nop
 8005baa:	e002      	b.n	8005bb2 <usSensor_handler+0x37e>
			break;
 8005bac:	bf00      	nop
 8005bae:	e000      	b.n	8005bb2 <usSensor_handler+0x37e>
			break;
 8005bb0:	bf00      	nop
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	200006e8 	.word	0x200006e8

08005bbc <usSensor_powerOn>:

void usSensor_powerOn(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
	pinUsVdd_write(1);
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	f000 f845 	bl	8005c50 <pinUsVdd_write>
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <usSensor_powerOff>:

void usSensor_powerOff(void)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	af00      	add	r7, sp, #0
	pinUsVdd_write(0);
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f000 f83e 	bl	8005c50 <pinUsVdd_write>
}
 8005bd4:	bf00      	nop
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <usSensor_measure>:

void usSensor_measure(float temp)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	temperature = temp;
 8005be0:	4a06      	ldr	r2, [pc, #24]	; (8005bfc <usSensor_measure+0x24>)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6013      	str	r3, [r2, #0]

	flags_usSensor.bits.requestMeasure = 1;
 8005be6:	4a06      	ldr	r2, [pc, #24]	; (8005c00 <usSensor_measure+0x28>)
 8005be8:	7813      	ldrb	r3, [r2, #0]
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	7013      	strb	r3, [r2, #0]
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	200006c8 	.word	0x200006c8
 8005c00:	200006f4 	.word	0x200006f4

08005c04 <getSoundSpeed>:




static float getSoundSpeed(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
	float speed = 0;
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	607b      	str	r3, [r7, #4]

	speed = numberFloat_getLinearValue(temperature, tableTempVsSpeed, sizeof(tableTempVsSpeed)/(sizeof(float)*2));
 8005c10:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <getSoundSpeed+0x28>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	220f      	movs	r2, #15
 8005c16:	4906      	ldr	r1, [pc, #24]	; (8005c30 <getSoundSpeed+0x2c>)
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 faf6 	bl	800620a <numberFloat_getLinearValue>
 8005c1e:	6078      	str	r0, [r7, #4]

	return speed;
 8005c20:	687b      	ldr	r3, [r7, #4]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	200006c8 	.word	0x200006c8
 8005c30:	20000004 	.word	0x20000004

08005c34 <usSensor_setCallback>:

void usSensor_setCallback(void (*cb)(_usSensor_event, void*))
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	usSensorCallback = cb;
 8005c3c:	4a03      	ldr	r2, [pc, #12]	; (8005c4c <usSensor_setCallback+0x18>)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6013      	str	r3, [r2, #0]
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr
 8005c4c:	20000718 	.word	0x20000718

08005c50 <pinUsVdd_write>:
	US_TRIGGER		input			gpio
	US_ECHO			output			input capture
*/

static void pinUsVdd_write(uint8_t state)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(US_SENSOR_VDD_PORT, US_SENSOR_VDD_PIN, state);
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c62:	4803      	ldr	r0, [pc, #12]	; (8005c70 <pinUsVdd_write+0x20>)
 8005c64:	f001 fbe8 	bl	8007438 <HAL_GPIO_WritePin>
}
 8005c68:	bf00      	nop
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40010c00 	.word	0x40010c00

08005c74 <pinUsTrigger_write>:

static void pinUsTrigger_write(uint8_t state)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(US_SENSOR_TRIGGER_PORT, US_SENSOR_TRIGGER_PIN, state);
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	461a      	mov	r2, r3
 8005c82:	2102      	movs	r1, #2
 8005c84:	4803      	ldr	r0, [pc, #12]	; (8005c94 <pinUsTrigger_write+0x20>)
 8005c86:	f001 fbd7 	bl	8007438 <HAL_GPIO_WritePin>
}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40010c00 	.word	0x40010c00

08005c98 <pinUsEcho_inputCaptureStart>:

static void pinUsEcho_inputCaptureStart(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005c9c:	4b03      	ldr	r3, [pc, #12]	; (8005cac <pinUsEcho_inputCaptureStart+0x14>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2108      	movs	r1, #8
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f003 f82c 	bl	8008d00 <HAL_TIM_IC_Start_IT>
}
 8005ca8:	bf00      	nop
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	200006cc 	.word	0x200006cc

08005cb0 <pinUsEcho_inputCaptureStop>:

static void pinUsEcho_inputCaptureStop(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Stop_IT(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005cb4:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <pinUsEcho_inputCaptureStop+0x14>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2108      	movs	r1, #8
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f003 f926 	bl	8008f0c <HAL_TIM_IC_Stop_IT>
}
 8005cc0:	bf00      	nop
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	200006cc 	.word	0x200006cc

08005cc8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == usHtim->Instance && htim->Channel == usHtim->Channel) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	4b49      	ldr	r3, [pc, #292]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	f040 8089 	bne.w	8005df2 <HAL_TIM_IC_CaptureCallback+0x12a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7f1a      	ldrb	r2, [r3, #28]
 8005ce4:	4b45      	ldr	r3, [pc, #276]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	7f1b      	ldrb	r3, [r3, #28]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	f040 8081 	bne.w	8005df2 <HAL_TIM_IC_CaptureCallback+0x12a>
		if(flags_usSensor.bits.isFirstCaptured == 0) {
 8005cf0:	4b43      	ldr	r3, [pc, #268]	; (8005e00 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IC_CaptureCallback+0x7c>
			flags_usSensor.bits.isFirstCaptured = 1;
 8005cfe:	4a40      	ldr	r2, [pc, #256]	; (8005e00 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005d00:	7853      	ldrb	r3, [r2, #1]
 8005d02:	f043 0304 	orr.w	r3, r3, #4
 8005d06:	7053      	strb	r3, [r2, #1]

			icVal1 = HAL_TIM_ReadCapturedValue(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005d08:	4b3c      	ldr	r3, [pc, #240]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2108      	movs	r1, #8
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f003 fc04 	bl	800951c <HAL_TIM_ReadCapturedValue>
 8005d14:	4603      	mov	r3, r0
 8005d16:	4a3b      	ldr	r2, [pc, #236]	; (8005e04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005d18:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(usHtim, US_SENSOR_ECHO_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
 8005d1a:	4b38      	ldr	r3, [pc, #224]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a1a      	ldr	r2, [r3, #32]
 8005d22:	4b36      	ldr	r3, [pc, #216]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d2c:	621a      	str	r2, [r3, #32]
 8005d2e:	4b33      	ldr	r3, [pc, #204]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6a1a      	ldr	r2, [r3, #32]
 8005d36:	4b31      	ldr	r3, [pc, #196]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d40:	621a      	str	r2, [r3, #32]

			flags_usSensor.bits.receivedEcho = 1;
			__HAL_TIM_SET_CAPTUREPOLARITY(usHtim, US_SENSOR_ECHO_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8005d42:	e056      	b.n	8005df2 <HAL_TIM_IC_CaptureCallback+0x12a>
			flags_usSensor.bits.isFirstCaptured = 0;
 8005d44:	4a2e      	ldr	r2, [pc, #184]	; (8005e00 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005d46:	7853      	ldrb	r3, [r2, #1]
 8005d48:	f36f 0382 	bfc	r3, #2, #1
 8005d4c:	7053      	strb	r3, [r2, #1]
			icVal2 = HAL_TIM_ReadCapturedValue(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005d4e:	4b2b      	ldr	r3, [pc, #172]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2108      	movs	r1, #8
 8005d54:	4618      	mov	r0, r3
 8005d56:	f003 fbe1 	bl	800951c <HAL_TIM_ReadCapturedValue>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4a2a      	ldr	r2, [pc, #168]	; (8005e08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005d5e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(usHtim, 0);
 8005d60:	4b26      	ldr	r3, [pc, #152]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2200      	movs	r2, #0
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24
			if(icVal2 > icVal1) icDif = icVal2-icVal1;
 8005d6a:	4b27      	ldr	r3, [pc, #156]	; (8005e08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4b25      	ldr	r3, [pc, #148]	; (8005e04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d906      	bls.n	8005d84 <HAL_TIM_IC_CaptureCallback+0xbc>
 8005d76:	4b24      	ldr	r3, [pc, #144]	; (8005e08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4b22      	ldr	r3, [pc, #136]	; (8005e04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	4a22      	ldr	r2, [pc, #136]	; (8005e0c <HAL_TIM_IC_CaptureCallback+0x144>)
 8005d82:	6013      	str	r3, [r2, #0]
			if(icVal1 > icVal2) icDif = (0xffff-icVal1)+icVal2;
 8005d84:	4b1f      	ldr	r3, [pc, #124]	; (8005e04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	4b1f      	ldr	r3, [pc, #124]	; (8005e08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d909      	bls.n	8005da4 <HAL_TIM_IC_CaptureCallback+0xdc>
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005d9e:	33ff      	adds	r3, #255	; 0xff
 8005da0:	4a1a      	ldr	r2, [pc, #104]	; (8005e0c <HAL_TIM_IC_CaptureCallback+0x144>)
 8005da2:	6013      	str	r3, [r2, #0]
			echoTime = icDif*mFactor;
 8005da4:	4b19      	ldr	r3, [pc, #100]	; (8005e0c <HAL_TIM_IC_CaptureCallback+0x144>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fa ff43 	bl	8000c34 <__aeabi_ui2f>
 8005dae:	4602      	mov	r2, r0
 8005db0:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <HAL_TIM_IC_CaptureCallback+0x148>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4619      	mov	r1, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f7fa ff94 	bl	8000ce4 <__aeabi_fmul>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4b14      	ldr	r3, [pc, #80]	; (8005e14 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8005dc2:	601a      	str	r2, [r3, #0]
			flags_usSensor.bits.receivedEcho = 1;
 8005dc4:	4a0e      	ldr	r2, [pc, #56]	; (8005e00 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005dc6:	7813      	ldrb	r3, [r2, #0]
 8005dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dcc:	7013      	strb	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(usHtim, US_SENSOR_ECHO_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
 8005dce:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005de0:	621a      	str	r2, [r3, #32]
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <HAL_TIM_IC_CaptureCallback+0x134>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6a12      	ldr	r2, [r2, #32]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200006cc 	.word	0x200006cc
 8005e00:	200006f4 	.word	0x200006f4
 8005e04:	200006fc 	.word	0x200006fc
 8005e08:	20000700 	.word	0x20000700
 8005e0c:	20000704 	.word	0x20000704
 8005e10:	20000708 	.word	0x20000708
 8005e14:	2000070c 	.word	0x2000070c

08005e18 <string_writeStr>:
 */ 

#include "utilities.h"

uint32_t string_writeStr(uint8_t *strDest, uint8_t *strSrc)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
    return string_writeStr_fromPos(strDest, strSrc, 0);
 8005e22:	2200      	movs	r2, #0
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f805 	bl	8005e36 <string_writeStr_fromPos>
 8005e2c:	4603      	mov	r3, r0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <string_writeStr_fromPos>:

uint32_t string_writeStr_fromPos(uint8_t *strDest, uint8_t *strSrc, uint32_t pos)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b087      	sub	sp, #28
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
    uint32_t i = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]

    if(strDest != NULL && strSrc != NULL) {
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d016      	beq.n	8005e7a <string_writeStr_fromPos+0x44>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d013      	beq.n	8005e7a <string_writeStr_fromPos+0x44>
        while(strSrc[i] != '\0') {
 8005e52:	e00c      	b.n	8005e6e <string_writeStr_fromPos+0x38>
            strDest[pos+i] = strSrc[i];
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	441a      	add	r2, r3
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	440b      	add	r3, r1
 8005e60:	68f9      	ldr	r1, [r7, #12]
 8005e62:	440b      	add	r3, r1
 8005e64:	7812      	ldrb	r2, [r2, #0]
 8005e66:	701a      	strb	r2, [r3, #0]
            i++;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	617b      	str	r3, [r7, #20]
        while(strSrc[i] != '\0') {
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	4413      	add	r3, r2
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1ec      	bne.n	8005e54 <string_writeStr_fromPos+0x1e>
        }
    }

    strDest[pos+i] = '\0';
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	4413      	add	r3, r2
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	2200      	movs	r2, #0
 8005e86:	701a      	strb	r2, [r3, #0]

    return i;
 8005e88:	697b      	ldr	r3, [r7, #20]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr

08005e94 <string_length>:

    return i;
}

uint32_t string_length(uint8_t *str)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]

    if(str != NULL) {
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d009      	beq.n	8005eba <string_length+0x26>
        while(str[len] != '\0') {
 8005ea6:	e002      	b.n	8005eae <string_length+0x1a>
            len++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
        while(str[len] != '\0') {
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f6      	bne.n	8005ea8 <string_length+0x14>
        }
    }

    return len;
 8005eba:	68fb      	ldr	r3, [r7, #12]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr

08005ec6 <string_containsWithinLength>:

    return contains;
}

uint8_t string_containsWithinLength(uint8_t *str, uint8_t *subStr, uint32_t lenStr)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b088      	sub	sp, #32
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
	uint32_t pos = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
	uint32_t i = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
    uint8_t contains = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	75fb      	strb	r3, [r7, #23]
    uint32_t lenSubStr;
    
    if(subStr != NULL && lenStr != 0) {
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d038      	beq.n	8005f56 <string_containsWithinLength+0x90>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d035      	beq.n	8005f56 <string_containsWithinLength+0x90>
        lenSubStr = string_length(subStr);
 8005eea:	68b8      	ldr	r0, [r7, #8]
 8005eec:	f7ff ffd2 	bl	8005e94 <string_length>
 8005ef0:	6138      	str	r0, [r7, #16]

        if(lenSubStr <= lenStr) {
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d82d      	bhi.n	8005f56 <string_containsWithinLength+0x90>
            while(pos < lenStr && contains == 0) {
 8005efa:	e025      	b.n	8005f48 <string_containsWithinLength+0x82>
                i = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]

                while((pos + i) < lenStr) {
 8005f00:	e019      	b.n	8005f36 <string_containsWithinLength+0x70>
                    if(str[pos + i] != subStr[i]) {
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	4413      	add	r3, r2
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	440b      	add	r3, r1
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d002      	beq.n	8005f20 <string_containsWithinLength+0x5a>
                        contains = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	75fb      	strb	r3, [r7, #23]
                        break;
 8005f1e:	e010      	b.n	8005f42 <string_containsWithinLength+0x7c>
                    }
                    else if ((lenSubStr - 1) == i) {
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d102      	bne.n	8005f30 <string_containsWithinLength+0x6a>
                        contains = 1;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	75fb      	strb	r3, [r7, #23]
                        break;
 8005f2e:	e008      	b.n	8005f42 <string_containsWithinLength+0x7c>
                    }

                    i++;
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	3301      	adds	r3, #1
 8005f34:	61bb      	str	r3, [r7, #24]
                while((pos + i) < lenStr) {
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d8df      	bhi.n	8005f02 <string_containsWithinLength+0x3c>
                }

                pos++;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	3301      	adds	r3, #1
 8005f46:	61fb      	str	r3, [r7, #28]
            while(pos < lenStr && contains == 0) {
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d202      	bcs.n	8005f56 <string_containsWithinLength+0x90>
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0d2      	beq.n	8005efc <string_containsWithinLength+0x36>
    		}
        }
    }

    return contains;
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <string_indexOf>:

    return starts;
}

uint32_t string_indexOf(uint8_t *str, uint8_t c)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
    uint32_t i = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
    uint32_t len;

    if(str != NULL) {
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01f      	beq.n	8005fb6 <string_indexOf+0x56>
        len = string_length(str);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff ff8c 	bl	8005e94 <string_length>
 8005f7c:	60b8      	str	r0, [r7, #8]

        while(i < len) {
 8005f7e:	e009      	b.n	8005f94 <string_indexOf+0x34>
            if(str[i] == c) {
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	78fa      	ldrb	r2, [r7, #3]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d007      	beq.n	8005f9e <string_indexOf+0x3e>
                break;
            }

            i++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
        while(i < len) {
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d3f1      	bcc.n	8005f80 <string_indexOf+0x20>
 8005f9c:	e000      	b.n	8005fa0 <string_indexOf+0x40>
                break;
 8005f9e:	bf00      	nop
        }

        i = (str[i] == c) ? i : 0;
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	78fa      	ldrb	r2, [r7, #3]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d101      	bne.n	8005fb2 <string_indexOf+0x52>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	e000      	b.n	8005fb4 <string_indexOf+0x54>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
    }

    return i;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <string_appendChar>:

uint32_t string_appendChar(uint8_t *str, uint8_t c)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
    uint32_t i = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]
    uint32_t len;
    
    if(str != NULL) {
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d012      	beq.n	8005ffc <string_appendChar+0x3c>
        len = string_length(str);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff ff5c 	bl	8005e94 <string_length>
 8005fdc:	60b8      	str	r0, [r7, #8]

        str[len] = c;
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	78fa      	ldrb	r2, [r7, #3]
 8005fe6:	701a      	strb	r2, [r3, #0]
        str[len+1] = '\0';
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	3301      	adds	r3, #1
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	4413      	add	r3, r2
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]

        i = len++;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	60ba      	str	r2, [r7, #8]
 8005ffa:	60fb      	str	r3, [r7, #12]
    }

    return i;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <string_appendString>:

uint32_t string_appendString(uint8_t *str1, uint8_t *str2)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b086      	sub	sp, #24
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
    uint32_t lenStr1;
    uint32_t lenStr2;
    
    if(str1 != NULL && str2 != NULL) {
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01c      	beq.n	8006054 <string_appendString+0x4e>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d019      	beq.n	8006054 <string_appendString+0x4e>
        lenStr1 = string_length(str1);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ff37 	bl	8005e94 <string_length>
 8006026:	6138      	str	r0, [r7, #16]
        lenStr2 = string_length(str2);
 8006028:	6838      	ldr	r0, [r7, #0]
 800602a:	f7ff ff33 	bl	8005e94 <string_length>
 800602e:	60f8      	str	r0, [r7, #12]

        while(i < lenStr2) {
 8006030:	e00c      	b.n	800604c <string_appendString+0x46>
            str1[lenStr1 + i] = str2[i];
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	441a      	add	r2, r3
 8006038:	6939      	ldr	r1, [r7, #16]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	440b      	add	r3, r1
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	440b      	add	r3, r1
 8006042:	7812      	ldrb	r2, [r2, #0]
 8006044:	701a      	strb	r2, [r3, #0]

            i++;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	3301      	adds	r3, #1
 800604a:	617b      	str	r3, [r7, #20]
        while(i < lenStr2) {
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	429a      	cmp	r2, r3
 8006052:	d3ee      	bcc.n	8006032 <string_appendString+0x2c>
        }
    }

    return i;
 8006054:	697b      	ldr	r3, [r7, #20]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <string_split>:

uint32_t string_split(uint8_t *str, uint8_t c, uint8_t *strOut)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b088      	sub	sp, #32
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	460b      	mov	r3, r1
 8006068:	607a      	str	r2, [r7, #4]
 800606a:	72fb      	strb	r3, [r7, #11]
    uint32_t strLen = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	613b      	str	r3, [r7, #16]
    uint32_t pos = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	61fb      	str	r3, [r7, #28]

    if(str != NULL && strOut != NULL) {
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d042      	beq.n	8006100 <string_split+0xa2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d03f      	beq.n	8006100 <string_split+0xa2>
        strLen = string_length(str);
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff ff07 	bl	8005e94 <string_length>
 8006086:	6138      	str	r0, [r7, #16]

        pos = string_indexOf(str, c);
 8006088:	7afb      	ldrb	r3, [r7, #11]
 800608a:	4619      	mov	r1, r3
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff ff67 	bl	8005f60 <string_indexOf>
 8006092:	61f8      	str	r0, [r7, #28]

        if(pos > 0) {
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d032      	beq.n	8006100 <string_split+0xa2>
            for(uint32_t i = 0; i < pos; i++) {
 800609a:	2300      	movs	r3, #0
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	e00a      	b.n	80060b6 <string_split+0x58>
                strOut[i] = str[i];
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	441a      	add	r2, r3
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	440b      	add	r3, r1
 80060ac:	7812      	ldrb	r2, [r2, #0]
 80060ae:	701a      	strb	r2, [r3, #0]
            for(uint32_t i = 0; i < pos; i++) {
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	3301      	adds	r3, #1
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d3f0      	bcc.n	80060a0 <string_split+0x42>
            }
            strOut[pos] = '\0';
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4413      	add	r3, r2
 80060c4:	2200      	movs	r2, #0
 80060c6:	701a      	strb	r2, [r3, #0]

            for(uint32_t i = pos; i < strLen; i++) {
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e00d      	b.n	80060ea <string_split+0x8c>
                str[i - pos] = str[i + 1];
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	3301      	adds	r3, #1
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	441a      	add	r2, r3
 80060d6:	6979      	ldr	r1, [r7, #20]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	1acb      	subs	r3, r1, r3
 80060dc:	68f9      	ldr	r1, [r7, #12]
 80060de:	440b      	add	r3, r1
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	701a      	strb	r2, [r3, #0]
            for(uint32_t i = pos; i < strLen; i++) {
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	3301      	adds	r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d3ed      	bcc.n	80060ce <string_split+0x70>
            }
            str[strLen - pos] = '\0';
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]
        }
    }

    return pos;
 8006100:	69fb      	ldr	r3, [r7, #28]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <ascii_convertNum>:

uint32_t ascii_convertNum(uint8_t *strAscii, uint32_t num)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
    uint32_t digits = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	60bb      	str	r3, [r7, #8]
    digits = number_getDigits(num);
 800611e:	6838      	ldr	r0, [r7, #0]
 8006120:	f000 f834 	bl	800618c <number_getDigits>
 8006124:	60b8      	str	r0, [r7, #8]

    if(strAscii != NULL) {
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d028      	beq.n	800617e <ascii_convertNum+0x72>
        for(i = 0; i < digits; i++) {
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	e01c      	b.n	800616c <ascii_convertNum+0x60>
            strAscii[digits - 1 - i] = num % 10 + '0';
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	4b14      	ldr	r3, [pc, #80]	; (8006188 <ascii_convertNum+0x7c>)
 8006136:	fba3 2301 	umull	r2, r3, r3, r1
 800613a:	08da      	lsrs	r2, r3, #3
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	1aca      	subs	r2, r1, r3
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	1acb      	subs	r3, r1, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	440b      	add	r3, r1
 8006154:	3230      	adds	r2, #48	; 0x30
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
            num /= 10;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	4a0a      	ldr	r2, [pc, #40]	; (8006188 <ascii_convertNum+0x7c>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	08db      	lsrs	r3, r3, #3
 8006164:	603b      	str	r3, [r7, #0]
        for(i = 0; i < digits; i++) {
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3301      	adds	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	429a      	cmp	r2, r3
 8006172:	d3de      	bcc.n	8006132 <ascii_convertNum+0x26>
        }

        strAscii[digits] = '\0';
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4413      	add	r3, r2
 800617a:	2200      	movs	r2, #0
 800617c:	701a      	strb	r2, [r3, #0]
    }

    return i;
 800617e:	68fb      	ldr	r3, [r7, #12]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	cccccccd 	.word	0xcccccccd

0800618c <number_getDigits>:




uint32_t number_getDigits(uint32_t num)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
    uint32_t digits = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]

	do {
		num /= 10;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a08      	ldr	r2, [pc, #32]	; (80061bc <number_getDigits+0x30>)
 800619c:	fba2 2303 	umull	r2, r3, r2, r3
 80061a0:	08db      	lsrs	r3, r3, #3
 80061a2:	607b      	str	r3, [r7, #4]
		digits++;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3301      	adds	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]
	} while(num != 0);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1f3      	bne.n	8006198 <number_getDigits+0xc>

	return digits;
 80061b0:	68fb      	ldr	r3, [r7, #12]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr
 80061bc:	cccccccd 	.word	0xcccccccd

080061c0 <number_convertUint32_toArrayOfUint8>:
    return isBin;
}


void number_convertUint32_toArrayOfUint8(uint8_t *hex, uint32_t value)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
    for(uint8_t i = 0; i < 8; i++) {
 80061ca:	2300      	movs	r3, #0
 80061cc:	73fb      	strb	r3, [r7, #15]
 80061ce:	e013      	b.n	80061f8 <number_convertUint32_toArrayOfUint8+0x38>
        hex[i] = ((value >> (4 * (7 - i))) & 0xF) + '0';
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	f1c3 0307 	rsb	r3, r3, #7
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	fa22 f303 	lsr.w	r3, r2, r3
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	440b      	add	r3, r1
 80061ec:	3230      	adds	r2, #48	; 0x30
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < 8; i++) {
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	3301      	adds	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b07      	cmp	r3, #7
 80061fc:	d9e8      	bls.n	80061d0 <number_convertUint32_toArrayOfUint8+0x10>
    }
}
 80061fe:	bf00      	nop
 8006200:	bf00      	nop
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr

0800620a <numberFloat_getLinearValue>:

    return pos;
}

float numberFloat_getLinearValue(float x, float table[][2], uint32_t size)
{
 800620a:	b590      	push	{r4, r7, lr}
 800620c:	b089      	sub	sp, #36	; 0x24
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
    float y = 0;
 8006216:	f04f 0300 	mov.w	r3, #0
 800621a:	61bb      	str	r3, [r7, #24]
    float m = 0;
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
    uint32_t nSegment = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	61fb      	str	r3, [r7, #28]

    while(x > table[nSegment][0] && nSegment < size) {
 8006226:	e002      	b.n	800622e <numberFloat_getLinearValue+0x24>
        nSegment++;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	3301      	adds	r3, #1
 800622c:	61fb      	str	r3, [r7, #28]
    while(x > table[nSegment][0] && nSegment < size) {
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	4413      	add	r3, r2
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4619      	mov	r1, r3
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7fa ff0e 	bl	800105c <__aeabi_fcmpgt>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <numberFloat_getLinearValue+0x44>
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	429a      	cmp	r2, r3
 800624c:	d3ec      	bcc.n	8006228 <numberFloat_getLinearValue+0x1e>
    }

    if(nSegment == 0) {
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d102      	bne.n	800625a <numberFloat_getLinearValue+0x50>
        nSegment = 1;
 8006254:	2301      	movs	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	e006      	b.n	8006268 <numberFloat_getLinearValue+0x5e>
    }
    else if(nSegment == size) {
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	429a      	cmp	r2, r3
 8006260:	d102      	bne.n	8006268 <numberFloat_getLinearValue+0x5e>
        nSegment = size - 1;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3b01      	subs	r3, #1
 8006266:	61fb      	str	r3, [r7, #28]
    }

    m = (table[nSegment][1]-table[nSegment-1][1]) / (table[nSegment][0]-table[nSegment-1][0]);
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	4413      	add	r3, r2
 8006270:	6858      	ldr	r0, [r3, #4]
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006278:	3b01      	subs	r3, #1
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	4413      	add	r3, r2
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	4619      	mov	r1, r3
 8006284:	f7fa fc24 	bl	8000ad0 <__aeabi_fsub>
 8006288:	4603      	mov	r3, r0
 800628a:	461c      	mov	r4, r3
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	4413      	add	r3, r2
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800629c:	3b01      	subs	r3, #1
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	4413      	add	r3, r2
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4619      	mov	r1, r3
 80062a8:	f7fa fc12 	bl	8000ad0 <__aeabi_fsub>
 80062ac:	4603      	mov	r3, r0
 80062ae:	4619      	mov	r1, r3
 80062b0:	4620      	mov	r0, r4
 80062b2:	f7fa fdcb 	bl	8000e4c <__aeabi_fdiv>
 80062b6:	4603      	mov	r3, r0
 80062b8:	617b      	str	r3, [r7, #20]
    y = m * (x - table[nSegment-1][0]) + table[nSegment-1][1];
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80062c0:	3b01      	subs	r3, #1
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	4413      	add	r3, r2
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4619      	mov	r1, r3
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7fa fbff 	bl	8000ad0 <__aeabi_fsub>
 80062d2:	4603      	mov	r3, r0
 80062d4:	6979      	ldr	r1, [r7, #20]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fa fd04 	bl	8000ce4 <__aeabi_fmul>
 80062dc:	4603      	mov	r3, r0
 80062de:	4618      	mov	r0, r3
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80062e6:	3b01      	subs	r3, #1
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	4413      	add	r3, r2
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	4619      	mov	r1, r3
 80062f2:	f7fa fbef 	bl	8000ad4 <__addsf3>
 80062f6:	4603      	mov	r3, r0
 80062f8:	61bb      	str	r3, [r7, #24]

    return y;
 80062fa:	69bb      	ldr	r3, [r7, #24]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3724      	adds	r7, #36	; 0x24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd90      	pop	{r4, r7, pc}

08006304 <ringBufferOfUint8_indexOf>:
		array[i] = 0;
	}
}

uint32_t ringBufferOfUint8_indexOf(uint8_t *rb, uint32_t ptrStart, uint32_t ptrEnd, uint8_t c, uint32_t rbLen)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	70fb      	strb	r3, [r7, #3]
    uint32_t i = ptrStart;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	617b      	str	r3, [r7, #20]
    uint8_t matched = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	74fb      	strb	r3, [r7, #19]

	while( i != ptrEnd) {
 800631a:	e015      	b.n	8006348 <ringBufferOfUint8_indexOf+0x44>

		if(rb[i] == c) {
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4413      	add	r3, r2
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	78fa      	ldrb	r2, [r7, #3]
 8006326:	429a      	cmp	r2, r3
 8006328:	d102      	bne.n	8006330 <ringBufferOfUint8_indexOf+0x2c>
            matched = 1;
 800632a:	2301      	movs	r3, #1
 800632c:	74fb      	strb	r3, [r7, #19]
			break;
 800632e:	e00f      	b.n	8006350 <ringBufferOfUint8_indexOf+0x4c>
		}

		i++;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	3301      	adds	r3, #1
 8006334:	617b      	str	r3, [r7, #20]
        i%=rbLen;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	6a3a      	ldr	r2, [r7, #32]
 800633a:	fbb3 f2f2 	udiv	r2, r3, r2
 800633e:	6a39      	ldr	r1, [r7, #32]
 8006340:	fb01 f202 	mul.w	r2, r1, r2
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	617b      	str	r3, [r7, #20]
	while( i != ptrEnd) {
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	429a      	cmp	r2, r3
 800634e:	d1e5      	bne.n	800631c <ringBufferOfUint8_indexOf+0x18>
	}

	i = (matched == 1) ? i+1 : 0;
 8006350:	7cfb      	ldrb	r3, [r7, #19]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d102      	bne.n	800635c <ringBufferOfUint8_indexOf+0x58>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	3301      	adds	r3, #1
 800635a:	e000      	b.n	800635e <ringBufferOfUint8_indexOf+0x5a>
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]

	return i;
 8006360:	697b      	ldr	r3, [r7, #20]
}
 8006362:	4618      	mov	r0, r3
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr

0800636c <ringBufferOfUint8_popChunk>:

uint32_t ringBufferOfUint8_popChunk(uint8_t *rb, uint32_t ptrStart, uint32_t ptrEnd, uint8_t c, uint32_t rbLen, uint8_t *chunk)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08a      	sub	sp, #40	; 0x28
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	70fb      	strb	r3, [r7, #3]
    uint32_t pos = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
    uint32_t chunkPos = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	61fb      	str	r3, [r7, #28]

	pos = ringBufferOfUint8_indexOf(rb, ptrStart, ptrEnd, c, rbLen);
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7ff ffb8 	bl	8006304 <ringBufferOfUint8_indexOf>
 8006394:	6178      	str	r0, [r7, #20]

	if(pos > 0) {
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d026      	beq.n	80063ea <ringBufferOfUint8_popChunk+0x7e>
		pos -= 1;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	3b01      	subs	r3, #1
 80063a0:	617b      	str	r3, [r7, #20]

		for(uint32_t i = ptrStart; i != pos + 1; i++, chunkPos++) {
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	61bb      	str	r3, [r7, #24]
 80063a6:	e016      	b.n	80063d6 <ringBufferOfUint8_popChunk+0x6a>
			i%=rbLen;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80063b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063b2:	fb01 f202 	mul.w	r2, r1, r2
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	61bb      	str	r3, [r7, #24]
			chunk[chunkPos] = rb[i];
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	441a      	add	r2, r3
 80063c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	440b      	add	r3, r1
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	701a      	strb	r2, [r3, #0]
		for(uint32_t i = ptrStart; i != pos + 1; i++, chunkPos++) {
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	3301      	adds	r3, #1
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	3301      	adds	r3, #1
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	3301      	adds	r3, #1
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d1e3      	bne.n	80063a8 <ringBufferOfUint8_popChunk+0x3c>
		}
		chunk[chunkPos] = '\0';
 80063e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]
	}

	return chunkPos;
 80063ea:	69fb      	ldr	r3, [r7, #28]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3720      	adds	r7, #32
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80063f4:	480c      	ldr	r0, [pc, #48]	; (8006428 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80063f6:	490d      	ldr	r1, [pc, #52]	; (800642c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80063f8:	4a0d      	ldr	r2, [pc, #52]	; (8006430 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80063fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063fc:	e002      	b.n	8006404 <LoopCopyDataInit>

080063fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006402:	3304      	adds	r3, #4

08006404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006408:	d3f9      	bcc.n	80063fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800640a:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800640c:	4c0a      	ldr	r4, [pc, #40]	; (8006438 <LoopFillZerobss+0x22>)
  movs r3, #0
 800640e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006410:	e001      	b.n	8006416 <LoopFillZerobss>

08006412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006414:	3204      	adds	r2, #4

08006416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006418:	d3fb      	bcc.n	8006412 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800641a:	f7ff f86b 	bl	80054f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800641e:	f004 f815 	bl	800a44c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006422:	f7fe fa01 	bl	8004828 <main>
  bx lr
 8006426:	4770      	bx	lr
  ldr r0, =_sdata
 8006428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800642c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8006430:	0800bc48 	.word	0x0800bc48
  ldr r2, =_sbss
 8006434:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8006438:	20000868 	.word	0x20000868

0800643c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800643c:	e7fe      	b.n	800643c <ADC1_2_IRQHandler>
	...

08006440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006444:	4b08      	ldr	r3, [pc, #32]	; (8006468 <HAL_Init+0x28>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a07      	ldr	r2, [pc, #28]	; (8006468 <HAL_Init+0x28>)
 800644a:	f043 0310 	orr.w	r3, r3, #16
 800644e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006450:	2003      	movs	r0, #3
 8006452:	f000 fd7b 	bl	8006f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006456:	200f      	movs	r0, #15
 8006458:	f000 f808 	bl	800646c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800645c:	f7fe feb2 	bl	80051c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40022000 	.word	0x40022000

0800646c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006474:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <HAL_InitTick+0x54>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <HAL_InitTick+0x58>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006482:	fbb3 f3f1 	udiv	r3, r3, r1
 8006486:	fbb2 f3f3 	udiv	r3, r2, r3
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fd93 	bl	8006fb6 <HAL_SYSTICK_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e00e      	b.n	80064b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b0f      	cmp	r3, #15
 800649e:	d80a      	bhi.n	80064b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064a0:	2200      	movs	r2, #0
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295
 80064a8:	f000 fd5b 	bl	8006f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064ac:	4a06      	ldr	r2, [pc, #24]	; (80064c8 <HAL_InitTick+0x5c>)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e000      	b.n	80064b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000000 	.word	0x20000000
 80064c4:	20000080 	.word	0x20000080
 80064c8:	2000007c 	.word	0x2000007c

080064cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <HAL_IncTick+0x1c>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	461a      	mov	r2, r3
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <HAL_IncTick+0x20>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4413      	add	r3, r2
 80064dc:	4a03      	ldr	r2, [pc, #12]	; (80064ec <HAL_IncTick+0x20>)
 80064de:	6013      	str	r3, [r2, #0]
}
 80064e0:	bf00      	nop
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr
 80064e8:	20000080 	.word	0x20000080
 80064ec:	20000864 	.word	0x20000864

080064f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  return uwTick;
 80064f4:	4b02      	ldr	r3, [pc, #8]	; (8006500 <HAL_GetTick+0x10>)
 80064f6:	681b      	ldr	r3, [r3, #0]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr
 8006500:	20000864 	.word	0x20000864

08006504 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e0be      	b.n	80066a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	2b00      	cmp	r3, #0
 8006532:	d109      	bne.n	8006548 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7fe fe70 	bl	8005228 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fbf1 	bl	8006d30 <ADC_ConversionStop_Disable>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b00      	cmp	r3, #0
 800655c:	f040 8099 	bne.w	8006692 <HAL_ADC_Init+0x18e>
 8006560:	7dfb      	ldrb	r3, [r7, #23]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 8095 	bne.w	8006692 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006570:	f023 0302 	bic.w	r3, r3, #2
 8006574:	f043 0202 	orr.w	r2, r3, #2
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006584:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	7b1b      	ldrb	r3, [r3, #12]
 800658a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800658c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	4313      	orrs	r3, r2
 8006592:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659c:	d003      	beq.n	80065a6 <HAL_ADC_Init+0xa2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d102      	bne.n	80065ac <HAL_ADC_Init+0xa8>
 80065a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065aa:	e000      	b.n	80065ae <HAL_ADC_Init+0xaa>
 80065ac:	2300      	movs	r3, #0
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	7d1b      	ldrb	r3, [r3, #20]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d119      	bne.n	80065f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	7b1b      	ldrb	r3, [r3, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	3b01      	subs	r3, #1
 80065ca:	035a      	lsls	r2, r3, #13
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	e00b      	b.n	80065f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	f043 0220 	orr.w	r2, r3, #32
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	f043 0201 	orr.w	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	430a      	orrs	r2, r1
 8006602:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	4b28      	ldr	r3, [pc, #160]	; (80066ac <HAL_ADC_Init+0x1a8>)
 800660c:	4013      	ands	r3, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	430b      	orrs	r3, r1
 8006616:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006620:	d003      	beq.n	800662a <HAL_ADC_Init+0x126>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d104      	bne.n	8006634 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	3b01      	subs	r3, #1
 8006630:	051b      	lsls	r3, r3, #20
 8006632:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	430a      	orrs	r2, r1
 8006646:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	4b18      	ldr	r3, [pc, #96]	; (80066b0 <HAL_ADC_Init+0x1ac>)
 8006650:	4013      	ands	r3, r2
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	429a      	cmp	r2, r3
 8006656:	d10b      	bne.n	8006670 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	f043 0201 	orr.w	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800666e:	e018      	b.n	80066a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	f023 0312 	bic.w	r3, r3, #18
 8006678:	f043 0210 	orr.w	r2, r3, #16
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	f043 0201 	orr.w	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006690:	e007      	b.n	80066a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	f043 0210 	orr.w	r2, r3, #16
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	ffe1f7fd 	.word	0xffe1f7fd
 80066b0:	ff1f0efe 	.word	0xff1f0efe

080066b4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_ADC_Start+0x1a>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e098      	b.n	8006800 <HAL_ADC_Start+0x14c>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fad0 	bl	8006c7c <ADC_Enable>
 80066dc:	4603      	mov	r3, r0
 80066de:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f040 8087 	bne.w	80067f6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f0:	f023 0301 	bic.w	r3, r3, #1
 80066f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a41      	ldr	r2, [pc, #260]	; (8006808 <HAL_ADC_Start+0x154>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d105      	bne.n	8006712 <HAL_ADC_Start+0x5e>
 8006706:	4b41      	ldr	r3, [pc, #260]	; (800680c <HAL_ADC_Start+0x158>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d115      	bne.n	800673e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006716:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006728:	2b00      	cmp	r3, #0
 800672a:	d026      	beq.n	800677a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006734:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800673c:	e01d      	b.n	800677a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a2f      	ldr	r2, [pc, #188]	; (800680c <HAL_ADC_Start+0x158>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d004      	beq.n	800675e <HAL_ADC_Start+0xaa>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a2b      	ldr	r2, [pc, #172]	; (8006808 <HAL_ADC_Start+0x154>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d10d      	bne.n	800677a <HAL_ADC_Start+0xc6>
 800675e:	4b2b      	ldr	r3, [pc, #172]	; (800680c <HAL_ADC_Start+0x158>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006772:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d006      	beq.n	8006794 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	f023 0206 	bic.w	r2, r3, #6
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	62da      	str	r2, [r3, #44]	; 0x2c
 8006792:	e002      	b.n	800679a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f06f 0202 	mvn.w	r2, #2
 80067aa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80067b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80067ba:	d113      	bne.n	80067e4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80067c0:	4a11      	ldr	r2, [pc, #68]	; (8006808 <HAL_ADC_Start+0x154>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d105      	bne.n	80067d2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <HAL_ADC_Start+0x158>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d108      	bne.n	80067e4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80067e0:	609a      	str	r2, [r3, #8]
 80067e2:	e00c      	b.n	80067fe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80067f2:	609a      	str	r2, [r3, #8]
 80067f4:	e003      	b.n	80067fe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	40012800 	.word	0x40012800
 800680c:	40012400 	.word	0x40012400

08006810 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_ADC_Stop+0x1a>
 8006826:	2302      	movs	r3, #2
 8006828:	e01a      	b.n	8006860 <HAL_ADC_Stop+0x50>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa7c 	bl	8006d30 <ADC_ConversionStop_Disable>
 8006838:	4603      	mov	r3, r0
 800683a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	f043 0201 	orr.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006868:	b590      	push	{r4, r7, lr}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800687e:	f7ff fe37 	bl	80064f0 <HAL_GetTick>
 8006882:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00b      	beq.n	80068aa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	f043 0220 	orr.w	r2, r3, #32
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e0d3      	b.n	8006a52 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d131      	bne.n	800691c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d12a      	bne.n	800691c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80068c6:	e021      	b.n	800690c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d01d      	beq.n	800690c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <HAL_ADC_PollForConversion+0x7e>
 80068d6:	f7ff fe0b 	bl	80064f0 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d212      	bcs.n	800690c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	f043 0204 	orr.w	r2, r3, #4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e0a2      	b.n	8006a52 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0d6      	beq.n	80068c8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800691a:	e070      	b.n	80069fe <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800691c:	4b4f      	ldr	r3, [pc, #316]	; (8006a5c <HAL_ADC_PollForConversion+0x1f4>)
 800691e:	681c      	ldr	r4, [r3, #0]
 8006920:	2002      	movs	r0, #2
 8006922:	f001 faa1 	bl	8007e68 <HAL_RCCEx_GetPeriphCLKFreq>
 8006926:	4603      	mov	r3, r0
 8006928:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6919      	ldr	r1, [r3, #16]
 8006932:	4b4b      	ldr	r3, [pc, #300]	; (8006a60 <HAL_ADC_PollForConversion+0x1f8>)
 8006934:	400b      	ands	r3, r1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d118      	bne.n	800696c <HAL_ADC_PollForConversion+0x104>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68d9      	ldr	r1, [r3, #12]
 8006940:	4b48      	ldr	r3, [pc, #288]	; (8006a64 <HAL_ADC_PollForConversion+0x1fc>)
 8006942:	400b      	ands	r3, r1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d111      	bne.n	800696c <HAL_ADC_PollForConversion+0x104>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6919      	ldr	r1, [r3, #16]
 800694e:	4b46      	ldr	r3, [pc, #280]	; (8006a68 <HAL_ADC_PollForConversion+0x200>)
 8006950:	400b      	ands	r3, r1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d108      	bne.n	8006968 <HAL_ADC_PollForConversion+0x100>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68d9      	ldr	r1, [r3, #12]
 800695c:	4b43      	ldr	r3, [pc, #268]	; (8006a6c <HAL_ADC_PollForConversion+0x204>)
 800695e:	400b      	ands	r3, r1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_ADC_PollForConversion+0x100>
 8006964:	2314      	movs	r3, #20
 8006966:	e020      	b.n	80069aa <HAL_ADC_PollForConversion+0x142>
 8006968:	2329      	movs	r3, #41	; 0x29
 800696a:	e01e      	b.n	80069aa <HAL_ADC_PollForConversion+0x142>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6919      	ldr	r1, [r3, #16]
 8006972:	4b3d      	ldr	r3, [pc, #244]	; (8006a68 <HAL_ADC_PollForConversion+0x200>)
 8006974:	400b      	ands	r3, r1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <HAL_ADC_PollForConversion+0x120>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68d9      	ldr	r1, [r3, #12]
 8006980:	4b3a      	ldr	r3, [pc, #232]	; (8006a6c <HAL_ADC_PollForConversion+0x204>)
 8006982:	400b      	ands	r3, r1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00d      	beq.n	80069a4 <HAL_ADC_PollForConversion+0x13c>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6919      	ldr	r1, [r3, #16]
 800698e:	4b38      	ldr	r3, [pc, #224]	; (8006a70 <HAL_ADC_PollForConversion+0x208>)
 8006990:	400b      	ands	r3, r1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d108      	bne.n	80069a8 <HAL_ADC_PollForConversion+0x140>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68d9      	ldr	r1, [r3, #12]
 800699c:	4b34      	ldr	r3, [pc, #208]	; (8006a70 <HAL_ADC_PollForConversion+0x208>)
 800699e:	400b      	ands	r3, r1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_ADC_PollForConversion+0x140>
 80069a4:	2354      	movs	r3, #84	; 0x54
 80069a6:	e000      	b.n	80069aa <HAL_ADC_PollForConversion+0x142>
 80069a8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80069aa:	fb02 f303 	mul.w	r3, r2, r3
 80069ae:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80069b0:	e021      	b.n	80069f6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b8:	d01a      	beq.n	80069f0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d007      	beq.n	80069d0 <HAL_ADC_PollForConversion+0x168>
 80069c0:	f7ff fd96 	bl	80064f0 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d20f      	bcs.n	80069f0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d90b      	bls.n	80069f0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	f043 0204 	orr.w	r2, r3, #4
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e030      	b.n	8006a52 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d8d9      	bhi.n	80069b2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f06f 0212 	mvn.w	r2, #18
 8006a06:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006a1e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006a22:	d115      	bne.n	8006a50 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d111      	bne.n	8006a50 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d105      	bne.n	8006a50 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a48:	f043 0201 	orr.w	r2, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd90      	pop	{r4, r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000000 	.word	0x20000000
 8006a60:	24924924 	.word	0x24924924
 8006a64:	00924924 	.word	0x00924924
 8006a68:	12492492 	.word	0x12492492
 8006a6c:	00492492 	.word	0x00492492
 8006a70:	00249249 	.word	0x00249249

08006a74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_ADC_ConfigChannel+0x20>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e0dc      	b.n	8006c66 <HAL_ADC_ConfigChannel+0x1da>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2b06      	cmp	r3, #6
 8006aba:	d81c      	bhi.n	8006af6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	3b05      	subs	r3, #5
 8006ace:	221f      	movs	r2, #31
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	4019      	ands	r1, r3
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3b05      	subs	r3, #5
 8006ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	635a      	str	r2, [r3, #52]	; 0x34
 8006af4:	e03c      	b.n	8006b70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b0c      	cmp	r3, #12
 8006afc:	d81c      	bhi.n	8006b38 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	3b23      	subs	r3, #35	; 0x23
 8006b10:	221f      	movs	r2, #31
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	43db      	mvns	r3, r3
 8006b18:	4019      	ands	r1, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	3b23      	subs	r3, #35	; 0x23
 8006b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	631a      	str	r2, [r3, #48]	; 0x30
 8006b36:	e01b      	b.n	8006b70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	3b41      	subs	r3, #65	; 0x41
 8006b4a:	221f      	movs	r2, #31
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	43db      	mvns	r3, r3
 8006b52:	4019      	ands	r1, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	3b41      	subs	r3, #65	; 0x41
 8006b64:	fa00 f203 	lsl.w	r2, r0, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	d91c      	bls.n	8006bb2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68d9      	ldr	r1, [r3, #12]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4613      	mov	r3, r2
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	4413      	add	r3, r2
 8006b88:	3b1e      	subs	r3, #30
 8006b8a:	2207      	movs	r2, #7
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	43db      	mvns	r3, r3
 8006b92:	4019      	ands	r1, r3
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	6898      	ldr	r0, [r3, #8]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3b1e      	subs	r3, #30
 8006ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	60da      	str	r2, [r3, #12]
 8006bb0:	e019      	b.n	8006be6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6919      	ldr	r1, [r3, #16]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	4413      	add	r3, r2
 8006bc2:	2207      	movs	r2, #7
 8006bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc8:	43db      	mvns	r3, r3
 8006bca:	4019      	ands	r1, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	6898      	ldr	r0, [r3, #8]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	4413      	add	r3, r2
 8006bda:	fa00 f203 	lsl.w	r2, r0, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b10      	cmp	r3, #16
 8006bec:	d003      	beq.n	8006bf6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006bf2:	2b11      	cmp	r3, #17
 8006bf4:	d132      	bne.n	8006c5c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a1d      	ldr	r2, [pc, #116]	; (8006c70 <HAL_ADC_ConfigChannel+0x1e4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d125      	bne.n	8006c4c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d126      	bne.n	8006c5c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006c1c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b10      	cmp	r3, #16
 8006c24:	d11a      	bne.n	8006c5c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006c26:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <HAL_ADC_ConfigChannel+0x1e8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a13      	ldr	r2, [pc, #76]	; (8006c78 <HAL_ADC_ConfigChannel+0x1ec>)
 8006c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c30:	0c9a      	lsrs	r2, r3, #18
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006c3c:	e002      	b.n	8006c44 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f9      	bne.n	8006c3e <HAL_ADC_ConfigChannel+0x1b2>
 8006c4a:	e007      	b.n	8006c5c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	f043 0220 	orr.w	r2, r3, #32
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr
 8006c70:	40012400 	.word	0x40012400
 8006c74:	20000000 	.word	0x20000000
 8006c78:	431bde83 	.word	0x431bde83

08006c7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d040      	beq.n	8006d1c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f042 0201 	orr.w	r2, r2, #1
 8006ca8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006caa:	4b1f      	ldr	r3, [pc, #124]	; (8006d28 <ADC_Enable+0xac>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1f      	ldr	r2, [pc, #124]	; (8006d2c <ADC_Enable+0xb0>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	0c9b      	lsrs	r3, r3, #18
 8006cb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006cb8:	e002      	b.n	8006cc0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1f9      	bne.n	8006cba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006cc6:	f7ff fc13 	bl	80064f0 <HAL_GetTick>
 8006cca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006ccc:	e01f      	b.n	8006d0e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006cce:	f7ff fc0f 	bl	80064f0 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d918      	bls.n	8006d0e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d011      	beq.n	8006d0e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	f043 0210 	orr.w	r2, r3, #16
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	f043 0201 	orr.w	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e007      	b.n	8006d1e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d1d8      	bne.n	8006cce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000000 	.word	0x20000000
 8006d2c:	431bde83 	.word	0x431bde83

08006d30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d12e      	bne.n	8006da8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0201 	bic.w	r2, r2, #1
 8006d58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d5a:	f7ff fbc9 	bl	80064f0 <HAL_GetTick>
 8006d5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006d60:	e01b      	b.n	8006d9a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006d62:	f7ff fbc5 	bl	80064f0 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d914      	bls.n	8006d9a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d10d      	bne.n	8006d9a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	f043 0210 	orr.w	r2, r3, #16
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	f043 0201 	orr.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e007      	b.n	8006daa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d0dc      	beq.n	8006d62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <__NVIC_SetPriorityGrouping+0x44>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006de6:	4a04      	ldr	r2, [pc, #16]	; (8006df8 <__NVIC_SetPriorityGrouping+0x44>)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	60d3      	str	r3, [r2, #12]
}
 8006dec:	bf00      	nop
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	e000ed00 	.word	0xe000ed00

08006dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e00:	4b04      	ldr	r3, [pc, #16]	; (8006e14 <__NVIC_GetPriorityGrouping+0x18>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	0a1b      	lsrs	r3, r3, #8
 8006e06:	f003 0307 	and.w	r3, r3, #7
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	e000ed00 	.word	0xe000ed00

08006e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	db0b      	blt.n	8006e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	f003 021f 	and.w	r2, r3, #31
 8006e30:	4906      	ldr	r1, [pc, #24]	; (8006e4c <__NVIC_EnableIRQ+0x34>)
 8006e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	2001      	movs	r0, #1
 8006e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8006e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr
 8006e4c:	e000e100 	.word	0xe000e100

08006e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	6039      	str	r1, [r7, #0]
 8006e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	db0a      	blt.n	8006e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	490c      	ldr	r1, [pc, #48]	; (8006e9c <__NVIC_SetPriority+0x4c>)
 8006e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6e:	0112      	lsls	r2, r2, #4
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	440b      	add	r3, r1
 8006e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e78:	e00a      	b.n	8006e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	4908      	ldr	r1, [pc, #32]	; (8006ea0 <__NVIC_SetPriority+0x50>)
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	3b04      	subs	r3, #4
 8006e88:	0112      	lsls	r2, r2, #4
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	761a      	strb	r2, [r3, #24]
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	e000e100 	.word	0xe000e100
 8006ea0:	e000ed00 	.word	0xe000ed00

08006ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b089      	sub	sp, #36	; 0x24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f1c3 0307 	rsb	r3, r3, #7
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	bf28      	it	cs
 8006ec2:	2304      	movcs	r3, #4
 8006ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	2b06      	cmp	r3, #6
 8006ecc:	d902      	bls.n	8006ed4 <NVIC_EncodePriority+0x30>
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	3b03      	subs	r3, #3
 8006ed2:	e000      	b.n	8006ed6 <NVIC_EncodePriority+0x32>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee2:	43da      	mvns	r2, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	401a      	ands	r2, r3
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006eec:	f04f 31ff 	mov.w	r1, #4294967295
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	43d9      	mvns	r1, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006efc:	4313      	orrs	r3, r2
         );
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3724      	adds	r7, #36	; 0x24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f18:	d301      	bcc.n	8006f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e00f      	b.n	8006f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f1e:	4a0a      	ldr	r2, [pc, #40]	; (8006f48 <SysTick_Config+0x40>)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f26:	210f      	movs	r1, #15
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	f7ff ff90 	bl	8006e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <SysTick_Config+0x40>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f36:	4b04      	ldr	r3, [pc, #16]	; (8006f48 <SysTick_Config+0x40>)
 8006f38:	2207      	movs	r2, #7
 8006f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	e000e010 	.word	0xe000e010

08006f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff ff2d 	bl	8006db4 <__NVIC_SetPriorityGrouping>
}
 8006f5a:	bf00      	nop
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	4603      	mov	r3, r0
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f74:	f7ff ff42 	bl	8006dfc <__NVIC_GetPriorityGrouping>
 8006f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	68b9      	ldr	r1, [r7, #8]
 8006f7e:	6978      	ldr	r0, [r7, #20]
 8006f80:	f7ff ff90 	bl	8006ea4 <NVIC_EncodePriority>
 8006f84:	4602      	mov	r2, r0
 8006f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff ff5f 	bl	8006e50 <__NVIC_SetPriority>
}
 8006f92:	bf00      	nop
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff ff35 	bl	8006e18 <__NVIC_EnableIRQ>
}
 8006fae:	bf00      	nop
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b082      	sub	sp, #8
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff ffa2 	bl	8006f08 <SysTick_Config>
 8006fc4:	4603      	mov	r3, r0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d008      	beq.n	8006ff6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e020      	b.n	8007038 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 020e 	bic.w	r2, r2, #14
 8007004:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0201 	bic.w	r2, r2, #1
 8007014:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	2101      	movs	r1, #1
 8007020:	fa01 f202 	lsl.w	r2, r1, r2
 8007024:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007036:	7bfb      	ldrb	r3, [r7, #15]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr
	...

08007044 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007056:	2b02      	cmp	r3, #2
 8007058:	d005      	beq.n	8007066 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2204      	movs	r2, #4
 800705e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
 8007064:	e051      	b.n	800710a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 020e 	bic.w	r2, r2, #14
 8007074:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0201 	bic.w	r2, r2, #1
 8007084:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a22      	ldr	r2, [pc, #136]	; (8007114 <HAL_DMA_Abort_IT+0xd0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d029      	beq.n	80070e4 <HAL_DMA_Abort_IT+0xa0>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a20      	ldr	r2, [pc, #128]	; (8007118 <HAL_DMA_Abort_IT+0xd4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d022      	beq.n	80070e0 <HAL_DMA_Abort_IT+0x9c>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a1f      	ldr	r2, [pc, #124]	; (800711c <HAL_DMA_Abort_IT+0xd8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d01a      	beq.n	80070da <HAL_DMA_Abort_IT+0x96>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1d      	ldr	r2, [pc, #116]	; (8007120 <HAL_DMA_Abort_IT+0xdc>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d012      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x90>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <HAL_DMA_Abort_IT+0xe0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00a      	beq.n	80070ce <HAL_DMA_Abort_IT+0x8a>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1a      	ldr	r2, [pc, #104]	; (8007128 <HAL_DMA_Abort_IT+0xe4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d102      	bne.n	80070c8 <HAL_DMA_Abort_IT+0x84>
 80070c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80070c6:	e00e      	b.n	80070e6 <HAL_DMA_Abort_IT+0xa2>
 80070c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070cc:	e00b      	b.n	80070e6 <HAL_DMA_Abort_IT+0xa2>
 80070ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070d2:	e008      	b.n	80070e6 <HAL_DMA_Abort_IT+0xa2>
 80070d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070d8:	e005      	b.n	80070e6 <HAL_DMA_Abort_IT+0xa2>
 80070da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070de:	e002      	b.n	80070e6 <HAL_DMA_Abort_IT+0xa2>
 80070e0:	2310      	movs	r3, #16
 80070e2:	e000      	b.n	80070e6 <HAL_DMA_Abort_IT+0xa2>
 80070e4:	2301      	movs	r3, #1
 80070e6:	4a11      	ldr	r2, [pc, #68]	; (800712c <HAL_DMA_Abort_IT+0xe8>)
 80070e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
    } 
  }
  return status;
 800710a:	7bfb      	ldrb	r3, [r7, #15]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	40020008 	.word	0x40020008
 8007118:	4002001c 	.word	0x4002001c
 800711c:	40020030 	.word	0x40020030
 8007120:	40020044 	.word	0x40020044
 8007124:	40020058 	.word	0x40020058
 8007128:	4002006c 	.word	0x4002006c
 800712c:	40020000 	.word	0x40020000

08007130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007130:	b480      	push	{r7}
 8007132:	b08b      	sub	sp, #44	; 0x2c
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800713a:	2300      	movs	r3, #0
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800713e:	2300      	movs	r3, #0
 8007140:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007142:	e169      	b.n	8007418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007144:	2201      	movs	r2, #1
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	4013      	ands	r3, r2
 8007156:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	429a      	cmp	r2, r3
 800715e:	f040 8158 	bne.w	8007412 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	4a9a      	ldr	r2, [pc, #616]	; (80073d0 <HAL_GPIO_Init+0x2a0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d05e      	beq.n	800722a <HAL_GPIO_Init+0xfa>
 800716c:	4a98      	ldr	r2, [pc, #608]	; (80073d0 <HAL_GPIO_Init+0x2a0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d875      	bhi.n	800725e <HAL_GPIO_Init+0x12e>
 8007172:	4a98      	ldr	r2, [pc, #608]	; (80073d4 <HAL_GPIO_Init+0x2a4>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d058      	beq.n	800722a <HAL_GPIO_Init+0xfa>
 8007178:	4a96      	ldr	r2, [pc, #600]	; (80073d4 <HAL_GPIO_Init+0x2a4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d86f      	bhi.n	800725e <HAL_GPIO_Init+0x12e>
 800717e:	4a96      	ldr	r2, [pc, #600]	; (80073d8 <HAL_GPIO_Init+0x2a8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d052      	beq.n	800722a <HAL_GPIO_Init+0xfa>
 8007184:	4a94      	ldr	r2, [pc, #592]	; (80073d8 <HAL_GPIO_Init+0x2a8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d869      	bhi.n	800725e <HAL_GPIO_Init+0x12e>
 800718a:	4a94      	ldr	r2, [pc, #592]	; (80073dc <HAL_GPIO_Init+0x2ac>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d04c      	beq.n	800722a <HAL_GPIO_Init+0xfa>
 8007190:	4a92      	ldr	r2, [pc, #584]	; (80073dc <HAL_GPIO_Init+0x2ac>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d863      	bhi.n	800725e <HAL_GPIO_Init+0x12e>
 8007196:	4a92      	ldr	r2, [pc, #584]	; (80073e0 <HAL_GPIO_Init+0x2b0>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d046      	beq.n	800722a <HAL_GPIO_Init+0xfa>
 800719c:	4a90      	ldr	r2, [pc, #576]	; (80073e0 <HAL_GPIO_Init+0x2b0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d85d      	bhi.n	800725e <HAL_GPIO_Init+0x12e>
 80071a2:	2b12      	cmp	r3, #18
 80071a4:	d82a      	bhi.n	80071fc <HAL_GPIO_Init+0xcc>
 80071a6:	2b12      	cmp	r3, #18
 80071a8:	d859      	bhi.n	800725e <HAL_GPIO_Init+0x12e>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <HAL_GPIO_Init+0x80>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	0800722b 	.word	0x0800722b
 80071b4:	08007205 	.word	0x08007205
 80071b8:	08007217 	.word	0x08007217
 80071bc:	08007259 	.word	0x08007259
 80071c0:	0800725f 	.word	0x0800725f
 80071c4:	0800725f 	.word	0x0800725f
 80071c8:	0800725f 	.word	0x0800725f
 80071cc:	0800725f 	.word	0x0800725f
 80071d0:	0800725f 	.word	0x0800725f
 80071d4:	0800725f 	.word	0x0800725f
 80071d8:	0800725f 	.word	0x0800725f
 80071dc:	0800725f 	.word	0x0800725f
 80071e0:	0800725f 	.word	0x0800725f
 80071e4:	0800725f 	.word	0x0800725f
 80071e8:	0800725f 	.word	0x0800725f
 80071ec:	0800725f 	.word	0x0800725f
 80071f0:	0800725f 	.word	0x0800725f
 80071f4:	0800720d 	.word	0x0800720d
 80071f8:	08007221 	.word	0x08007221
 80071fc:	4a79      	ldr	r2, [pc, #484]	; (80073e4 <HAL_GPIO_Init+0x2b4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d013      	beq.n	800722a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007202:	e02c      	b.n	800725e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	623b      	str	r3, [r7, #32]
          break;
 800720a:	e029      	b.n	8007260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	3304      	adds	r3, #4
 8007212:	623b      	str	r3, [r7, #32]
          break;
 8007214:	e024      	b.n	8007260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	3308      	adds	r3, #8
 800721c:	623b      	str	r3, [r7, #32]
          break;
 800721e:	e01f      	b.n	8007260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	330c      	adds	r3, #12
 8007226:	623b      	str	r3, [r7, #32]
          break;
 8007228:	e01a      	b.n	8007260 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d102      	bne.n	8007238 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007232:	2304      	movs	r3, #4
 8007234:	623b      	str	r3, [r7, #32]
          break;
 8007236:	e013      	b.n	8007260 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d105      	bne.n	800724c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007240:	2308      	movs	r3, #8
 8007242:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	611a      	str	r2, [r3, #16]
          break;
 800724a:	e009      	b.n	8007260 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800724c:	2308      	movs	r3, #8
 800724e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	615a      	str	r2, [r3, #20]
          break;
 8007256:	e003      	b.n	8007260 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007258:	2300      	movs	r3, #0
 800725a:	623b      	str	r3, [r7, #32]
          break;
 800725c:	e000      	b.n	8007260 <HAL_GPIO_Init+0x130>
          break;
 800725e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2bff      	cmp	r3, #255	; 0xff
 8007264:	d801      	bhi.n	800726a <HAL_GPIO_Init+0x13a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	e001      	b.n	800726e <HAL_GPIO_Init+0x13e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3304      	adds	r3, #4
 800726e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2bff      	cmp	r3, #255	; 0xff
 8007274:	d802      	bhi.n	800727c <HAL_GPIO_Init+0x14c>
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	e002      	b.n	8007282 <HAL_GPIO_Init+0x152>
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	3b08      	subs	r3, #8
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	210f      	movs	r1, #15
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	fa01 f303 	lsl.w	r3, r1, r3
 8007290:	43db      	mvns	r3, r3
 8007292:	401a      	ands	r2, r3
 8007294:	6a39      	ldr	r1, [r7, #32]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	fa01 f303 	lsl.w	r3, r1, r3
 800729c:	431a      	orrs	r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 80b1 	beq.w	8007412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80072b0:	4b4d      	ldr	r3, [pc, #308]	; (80073e8 <HAL_GPIO_Init+0x2b8>)
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	4a4c      	ldr	r2, [pc, #304]	; (80073e8 <HAL_GPIO_Init+0x2b8>)
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	6193      	str	r3, [r2, #24]
 80072bc:	4b4a      	ldr	r3, [pc, #296]	; (80073e8 <HAL_GPIO_Init+0x2b8>)
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80072c8:	4a48      	ldr	r2, [pc, #288]	; (80073ec <HAL_GPIO_Init+0x2bc>)
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	089b      	lsrs	r3, r3, #2
 80072ce:	3302      	adds	r3, #2
 80072d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	220f      	movs	r2, #15
 80072e0:	fa02 f303 	lsl.w	r3, r2, r3
 80072e4:	43db      	mvns	r3, r3
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	4013      	ands	r3, r2
 80072ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a40      	ldr	r2, [pc, #256]	; (80073f0 <HAL_GPIO_Init+0x2c0>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d013      	beq.n	800731c <HAL_GPIO_Init+0x1ec>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a3f      	ldr	r2, [pc, #252]	; (80073f4 <HAL_GPIO_Init+0x2c4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00d      	beq.n	8007318 <HAL_GPIO_Init+0x1e8>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a3e      	ldr	r2, [pc, #248]	; (80073f8 <HAL_GPIO_Init+0x2c8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d007      	beq.n	8007314 <HAL_GPIO_Init+0x1e4>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a3d      	ldr	r2, [pc, #244]	; (80073fc <HAL_GPIO_Init+0x2cc>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d101      	bne.n	8007310 <HAL_GPIO_Init+0x1e0>
 800730c:	2303      	movs	r3, #3
 800730e:	e006      	b.n	800731e <HAL_GPIO_Init+0x1ee>
 8007310:	2304      	movs	r3, #4
 8007312:	e004      	b.n	800731e <HAL_GPIO_Init+0x1ee>
 8007314:	2302      	movs	r3, #2
 8007316:	e002      	b.n	800731e <HAL_GPIO_Init+0x1ee>
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <HAL_GPIO_Init+0x1ee>
 800731c:	2300      	movs	r3, #0
 800731e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007320:	f002 0203 	and.w	r2, r2, #3
 8007324:	0092      	lsls	r2, r2, #2
 8007326:	4093      	lsls	r3, r2
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800732e:	492f      	ldr	r1, [pc, #188]	; (80073ec <HAL_GPIO_Init+0x2bc>)
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	089b      	lsrs	r3, r3, #2
 8007334:	3302      	adds	r3, #2
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d006      	beq.n	8007356 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007348:	4b2d      	ldr	r3, [pc, #180]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	492c      	ldr	r1, [pc, #176]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	4313      	orrs	r3, r2
 8007352:	600b      	str	r3, [r1, #0]
 8007354:	e006      	b.n	8007364 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007356:	4b2a      	ldr	r3, [pc, #168]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	43db      	mvns	r3, r3
 800735e:	4928      	ldr	r1, [pc, #160]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 8007360:	4013      	ands	r3, r2
 8007362:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d006      	beq.n	800737e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007370:	4b23      	ldr	r3, [pc, #140]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	4922      	ldr	r1, [pc, #136]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	4313      	orrs	r3, r2
 800737a:	604b      	str	r3, [r1, #4]
 800737c:	e006      	b.n	800738c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800737e:	4b20      	ldr	r3, [pc, #128]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	43db      	mvns	r3, r3
 8007386:	491e      	ldr	r1, [pc, #120]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 8007388:	4013      	ands	r3, r2
 800738a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d006      	beq.n	80073a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007398:	4b19      	ldr	r3, [pc, #100]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	4918      	ldr	r1, [pc, #96]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	608b      	str	r3, [r1, #8]
 80073a4:	e006      	b.n	80073b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80073a6:	4b16      	ldr	r3, [pc, #88]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	43db      	mvns	r3, r3
 80073ae:	4914      	ldr	r1, [pc, #80]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d021      	beq.n	8007404 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	490e      	ldr	r1, [pc, #56]	; (8007400 <HAL_GPIO_Init+0x2d0>)
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60cb      	str	r3, [r1, #12]
 80073cc:	e021      	b.n	8007412 <HAL_GPIO_Init+0x2e2>
 80073ce:	bf00      	nop
 80073d0:	10320000 	.word	0x10320000
 80073d4:	10310000 	.word	0x10310000
 80073d8:	10220000 	.word	0x10220000
 80073dc:	10210000 	.word	0x10210000
 80073e0:	10120000 	.word	0x10120000
 80073e4:	10110000 	.word	0x10110000
 80073e8:	40021000 	.word	0x40021000
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40010800 	.word	0x40010800
 80073f4:	40010c00 	.word	0x40010c00
 80073f8:	40011000 	.word	0x40011000
 80073fc:	40011400 	.word	0x40011400
 8007400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007404:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <HAL_GPIO_Init+0x304>)
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	43db      	mvns	r3, r3
 800740c:	4909      	ldr	r1, [pc, #36]	; (8007434 <HAL_GPIO_Init+0x304>)
 800740e:	4013      	ands	r3, r2
 8007410:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	3301      	adds	r3, #1
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	fa22 f303 	lsr.w	r3, r2, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	f47f ae8e 	bne.w	8007144 <HAL_GPIO_Init+0x14>
  }
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	372c      	adds	r7, #44	; 0x2c
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr
 8007434:	40010400 	.word	0x40010400

08007438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	807b      	strh	r3, [r7, #2]
 8007444:	4613      	mov	r3, r2
 8007446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007448:	787b      	ldrb	r3, [r7, #1]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800744e:	887a      	ldrh	r2, [r7, #2]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007454:	e003      	b.n	800745e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007456:	887b      	ldrh	r3, [r7, #2]
 8007458:	041a      	lsls	r2, r3, #16
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	611a      	str	r2, [r3, #16]
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	bc80      	pop	{r7}
 8007466:	4770      	bx	lr

08007468 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800746c:	4b03      	ldr	r3, [pc, #12]	; (800747c <HAL_PWR_EnableBkUpAccess+0x14>)
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]
}
 8007472:	bf00      	nop
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	420e0020 	.word	0x420e0020

08007480 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8007484:	4b03      	ldr	r3, [pc, #12]	; (8007494 <HAL_PWR_DisableBkUpAccess+0x14>)
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
}
 800748a:	bf00      	nop
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	420e0020 	.word	0x420e0020

08007498 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800749c:	4b08      	ldr	r3, [pc, #32]	; (80074c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a07      	ldr	r2, [pc, #28]	; (80074c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80074a2:	f043 0302 	orr.w	r3, r3, #2
 80074a6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80074a8:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	4a05      	ldr	r2, [pc, #20]	; (80074c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80074ae:	f043 0304 	orr.w	r3, r3, #4
 80074b2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80074b4:	bf30      	wfi
}
 80074b6:	bf00      	nop
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bc80      	pop	{r7}
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40007000 	.word	0x40007000
 80074c4:	e000ed00 	.word	0xe000ed00

080074c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e26c      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 8087 	beq.w	80075f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074e8:	4b92      	ldr	r3, [pc, #584]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f003 030c 	and.w	r3, r3, #12
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d00c      	beq.n	800750e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80074f4:	4b8f      	ldr	r3, [pc, #572]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f003 030c 	and.w	r3, r3, #12
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d112      	bne.n	8007526 <HAL_RCC_OscConfig+0x5e>
 8007500:	4b8c      	ldr	r3, [pc, #560]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800750c:	d10b      	bne.n	8007526 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800750e:	4b89      	ldr	r3, [pc, #548]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d06c      	beq.n	80075f4 <HAL_RCC_OscConfig+0x12c>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d168      	bne.n	80075f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e246      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752e:	d106      	bne.n	800753e <HAL_RCC_OscConfig+0x76>
 8007530:	4b80      	ldr	r3, [pc, #512]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a7f      	ldr	r2, [pc, #508]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	e02e      	b.n	800759c <HAL_RCC_OscConfig+0xd4>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10c      	bne.n	8007560 <HAL_RCC_OscConfig+0x98>
 8007546:	4b7b      	ldr	r3, [pc, #492]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a7a      	ldr	r2, [pc, #488]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 800754c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	4b78      	ldr	r3, [pc, #480]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a77      	ldr	r2, [pc, #476]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	e01d      	b.n	800759c <HAL_RCC_OscConfig+0xd4>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007568:	d10c      	bne.n	8007584 <HAL_RCC_OscConfig+0xbc>
 800756a:	4b72      	ldr	r3, [pc, #456]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a71      	ldr	r2, [pc, #452]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	4b6f      	ldr	r3, [pc, #444]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a6e      	ldr	r2, [pc, #440]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 800757c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	e00b      	b.n	800759c <HAL_RCC_OscConfig+0xd4>
 8007584:	4b6b      	ldr	r3, [pc, #428]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a6a      	ldr	r2, [pc, #424]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 800758a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	4b68      	ldr	r3, [pc, #416]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a67      	ldr	r2, [pc, #412]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800759a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d013      	beq.n	80075cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a4:	f7fe ffa4 	bl	80064f0 <HAL_GetTick>
 80075a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075ac:	f7fe ffa0 	bl	80064f0 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b64      	cmp	r3, #100	; 0x64
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e1fa      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075be:	4b5d      	ldr	r3, [pc, #372]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0f0      	beq.n	80075ac <HAL_RCC_OscConfig+0xe4>
 80075ca:	e014      	b.n	80075f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075cc:	f7fe ff90 	bl	80064f0 <HAL_GetTick>
 80075d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075d2:	e008      	b.n	80075e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075d4:	f7fe ff8c 	bl	80064f0 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b64      	cmp	r3, #100	; 0x64
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e1e6      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075e6:	4b53      	ldr	r3, [pc, #332]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1f0      	bne.n	80075d4 <HAL_RCC_OscConfig+0x10c>
 80075f2:	e000      	b.n	80075f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d063      	beq.n	80076ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007602:	4b4c      	ldr	r3, [pc, #304]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f003 030c 	and.w	r3, r3, #12
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00b      	beq.n	8007626 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800760e:	4b49      	ldr	r3, [pc, #292]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f003 030c 	and.w	r3, r3, #12
 8007616:	2b08      	cmp	r3, #8
 8007618:	d11c      	bne.n	8007654 <HAL_RCC_OscConfig+0x18c>
 800761a:	4b46      	ldr	r3, [pc, #280]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d116      	bne.n	8007654 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007626:	4b43      	ldr	r3, [pc, #268]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d005      	beq.n	800763e <HAL_RCC_OscConfig+0x176>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d001      	beq.n	800763e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e1ba      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763e:	4b3d      	ldr	r3, [pc, #244]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	4939      	ldr	r1, [pc, #228]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 800764e:	4313      	orrs	r3, r2
 8007650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007652:	e03a      	b.n	80076ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d020      	beq.n	800769e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800765c:	4b36      	ldr	r3, [pc, #216]	; (8007738 <HAL_RCC_OscConfig+0x270>)
 800765e:	2201      	movs	r2, #1
 8007660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007662:	f7fe ff45 	bl	80064f0 <HAL_GetTick>
 8007666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007668:	e008      	b.n	800767c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800766a:	f7fe ff41 	bl	80064f0 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	2b02      	cmp	r3, #2
 8007676:	d901      	bls.n	800767c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e19b      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800767c:	4b2d      	ldr	r3, [pc, #180]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0f0      	beq.n	800766a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007688:	4b2a      	ldr	r3, [pc, #168]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	00db      	lsls	r3, r3, #3
 8007696:	4927      	ldr	r1, [pc, #156]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007698:	4313      	orrs	r3, r2
 800769a:	600b      	str	r3, [r1, #0]
 800769c:	e015      	b.n	80076ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800769e:	4b26      	ldr	r3, [pc, #152]	; (8007738 <HAL_RCC_OscConfig+0x270>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a4:	f7fe ff24 	bl	80064f0 <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076aa:	e008      	b.n	80076be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076ac:	f7fe ff20 	bl	80064f0 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e17a      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076be:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1f0      	bne.n	80076ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0308 	and.w	r3, r3, #8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d03a      	beq.n	800774c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d019      	beq.n	8007712 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076de:	4b17      	ldr	r3, [pc, #92]	; (800773c <HAL_RCC_OscConfig+0x274>)
 80076e0:	2201      	movs	r2, #1
 80076e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076e4:	f7fe ff04 	bl	80064f0 <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076ec:	f7fe ff00 	bl	80064f0 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e15a      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <HAL_RCC_OscConfig+0x26c>)
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0f0      	beq.n	80076ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800770a:	2001      	movs	r0, #1
 800770c:	f000 fad8 	bl	8007cc0 <RCC_Delay>
 8007710:	e01c      	b.n	800774c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007712:	4b0a      	ldr	r3, [pc, #40]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007718:	f7fe feea 	bl	80064f0 <HAL_GetTick>
 800771c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800771e:	e00f      	b.n	8007740 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007720:	f7fe fee6 	bl	80064f0 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d908      	bls.n	8007740 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e140      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
 8007732:	bf00      	nop
 8007734:	40021000 	.word	0x40021000
 8007738:	42420000 	.word	0x42420000
 800773c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007740:	4b9e      	ldr	r3, [pc, #632]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e9      	bne.n	8007720 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80a6 	beq.w	80078a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800775a:	2300      	movs	r3, #0
 800775c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800775e:	4b97      	ldr	r3, [pc, #604]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10d      	bne.n	8007786 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800776a:	4b94      	ldr	r3, [pc, #592]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	4a93      	ldr	r2, [pc, #588]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007774:	61d3      	str	r3, [r2, #28]
 8007776:	4b91      	ldr	r3, [pc, #580]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800777e:	60bb      	str	r3, [r7, #8]
 8007780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007782:	2301      	movs	r3, #1
 8007784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007786:	4b8e      	ldr	r3, [pc, #568]	; (80079c0 <HAL_RCC_OscConfig+0x4f8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778e:	2b00      	cmp	r3, #0
 8007790:	d118      	bne.n	80077c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007792:	4b8b      	ldr	r3, [pc, #556]	; (80079c0 <HAL_RCC_OscConfig+0x4f8>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a8a      	ldr	r2, [pc, #552]	; (80079c0 <HAL_RCC_OscConfig+0x4f8>)
 8007798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800779c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800779e:	f7fe fea7 	bl	80064f0 <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077a6:	f7fe fea3 	bl	80064f0 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b64      	cmp	r3, #100	; 0x64
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e0fd      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077b8:	4b81      	ldr	r3, [pc, #516]	; (80079c0 <HAL_RCC_OscConfig+0x4f8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0f0      	beq.n	80077a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d106      	bne.n	80077da <HAL_RCC_OscConfig+0x312>
 80077cc:	4b7b      	ldr	r3, [pc, #492]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	4a7a      	ldr	r2, [pc, #488]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	6213      	str	r3, [r2, #32]
 80077d8:	e02d      	b.n	8007836 <HAL_RCC_OscConfig+0x36e>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10c      	bne.n	80077fc <HAL_RCC_OscConfig+0x334>
 80077e2:	4b76      	ldr	r3, [pc, #472]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	4a75      	ldr	r2, [pc, #468]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 80077e8:	f023 0301 	bic.w	r3, r3, #1
 80077ec:	6213      	str	r3, [r2, #32]
 80077ee:	4b73      	ldr	r3, [pc, #460]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	4a72      	ldr	r2, [pc, #456]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 80077f4:	f023 0304 	bic.w	r3, r3, #4
 80077f8:	6213      	str	r3, [r2, #32]
 80077fa:	e01c      	b.n	8007836 <HAL_RCC_OscConfig+0x36e>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2b05      	cmp	r3, #5
 8007802:	d10c      	bne.n	800781e <HAL_RCC_OscConfig+0x356>
 8007804:	4b6d      	ldr	r3, [pc, #436]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	4a6c      	ldr	r2, [pc, #432]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 800780a:	f043 0304 	orr.w	r3, r3, #4
 800780e:	6213      	str	r3, [r2, #32]
 8007810:	4b6a      	ldr	r3, [pc, #424]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	4a69      	ldr	r2, [pc, #420]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007816:	f043 0301 	orr.w	r3, r3, #1
 800781a:	6213      	str	r3, [r2, #32]
 800781c:	e00b      	b.n	8007836 <HAL_RCC_OscConfig+0x36e>
 800781e:	4b67      	ldr	r3, [pc, #412]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	4a66      	ldr	r2, [pc, #408]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007824:	f023 0301 	bic.w	r3, r3, #1
 8007828:	6213      	str	r3, [r2, #32]
 800782a:	4b64      	ldr	r3, [pc, #400]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	4a63      	ldr	r2, [pc, #396]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007830:	f023 0304 	bic.w	r3, r3, #4
 8007834:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d015      	beq.n	800786a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800783e:	f7fe fe57 	bl	80064f0 <HAL_GetTick>
 8007842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007844:	e00a      	b.n	800785c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007846:	f7fe fe53 	bl	80064f0 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	f241 3288 	movw	r2, #5000	; 0x1388
 8007854:	4293      	cmp	r3, r2
 8007856:	d901      	bls.n	800785c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e0ab      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800785c:	4b57      	ldr	r3, [pc, #348]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d0ee      	beq.n	8007846 <HAL_RCC_OscConfig+0x37e>
 8007868:	e014      	b.n	8007894 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800786a:	f7fe fe41 	bl	80064f0 <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007870:	e00a      	b.n	8007888 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007872:	f7fe fe3d 	bl	80064f0 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007880:	4293      	cmp	r3, r2
 8007882:	d901      	bls.n	8007888 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e095      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007888:	4b4c      	ldr	r3, [pc, #304]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1ee      	bne.n	8007872 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d105      	bne.n	80078a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800789a:	4b48      	ldr	r3, [pc, #288]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	4a47      	ldr	r2, [pc, #284]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 80078a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 8081 	beq.w	80079b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078b0:	4b42      	ldr	r3, [pc, #264]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f003 030c 	and.w	r3, r3, #12
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d061      	beq.n	8007980 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d146      	bne.n	8007952 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078c4:	4b3f      	ldr	r3, [pc, #252]	; (80079c4 <HAL_RCC_OscConfig+0x4fc>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ca:	f7fe fe11 	bl	80064f0 <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078d2:	f7fe fe0d 	bl	80064f0 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e067      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078e4:	4b35      	ldr	r3, [pc, #212]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1f0      	bne.n	80078d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f8:	d108      	bne.n	800790c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80078fa:	4b30      	ldr	r3, [pc, #192]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	492d      	ldr	r1, [pc, #180]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007908:	4313      	orrs	r3, r2
 800790a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800790c:	4b2b      	ldr	r3, [pc, #172]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a19      	ldr	r1, [r3, #32]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	430b      	orrs	r3, r1
 800791e:	4927      	ldr	r1, [pc, #156]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007920:	4313      	orrs	r3, r2
 8007922:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007924:	4b27      	ldr	r3, [pc, #156]	; (80079c4 <HAL_RCC_OscConfig+0x4fc>)
 8007926:	2201      	movs	r2, #1
 8007928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800792a:	f7fe fde1 	bl	80064f0 <HAL_GetTick>
 800792e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007930:	e008      	b.n	8007944 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007932:	f7fe fddd 	bl	80064f0 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e037      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007944:	4b1d      	ldr	r3, [pc, #116]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0f0      	beq.n	8007932 <HAL_RCC_OscConfig+0x46a>
 8007950:	e02f      	b.n	80079b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007952:	4b1c      	ldr	r3, [pc, #112]	; (80079c4 <HAL_RCC_OscConfig+0x4fc>)
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007958:	f7fe fdca 	bl	80064f0 <HAL_GetTick>
 800795c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800795e:	e008      	b.n	8007972 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007960:	f7fe fdc6 	bl	80064f0 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e020      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007972:	4b12      	ldr	r3, [pc, #72]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1f0      	bne.n	8007960 <HAL_RCC_OscConfig+0x498>
 800797e:	e018      	b.n	80079b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e013      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800798c:	4b0b      	ldr	r3, [pc, #44]	; (80079bc <HAL_RCC_OscConfig+0x4f4>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	429a      	cmp	r2, r3
 800799e:	d106      	bne.n	80079ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d001      	beq.n	80079b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40021000 	.word	0x40021000
 80079c0:	40007000 	.word	0x40007000
 80079c4:	42420060 	.word	0x42420060

080079c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e0d0      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079dc:	4b6a      	ldr	r3, [pc, #424]	; (8007b88 <HAL_RCC_ClockConfig+0x1c0>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d910      	bls.n	8007a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ea:	4b67      	ldr	r3, [pc, #412]	; (8007b88 <HAL_RCC_ClockConfig+0x1c0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f023 0207 	bic.w	r2, r3, #7
 80079f2:	4965      	ldr	r1, [pc, #404]	; (8007b88 <HAL_RCC_ClockConfig+0x1c0>)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fa:	4b63      	ldr	r3, [pc, #396]	; (8007b88 <HAL_RCC_ClockConfig+0x1c0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d001      	beq.n	8007a0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e0b8      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d020      	beq.n	8007a5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d005      	beq.n	8007a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a24:	4b59      	ldr	r3, [pc, #356]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4a58      	ldr	r2, [pc, #352]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007a2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a3c:	4b53      	ldr	r3, [pc, #332]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4a52      	ldr	r2, [pc, #328]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007a42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007a46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a48:	4b50      	ldr	r3, [pc, #320]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	494d      	ldr	r1, [pc, #308]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d040      	beq.n	8007ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d107      	bne.n	8007a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a6e:	4b47      	ldr	r3, [pc, #284]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d115      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e07f      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d107      	bne.n	8007a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a86:	4b41      	ldr	r3, [pc, #260]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e073      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a96:	4b3d      	ldr	r3, [pc, #244]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e06b      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aa6:	4b39      	ldr	r3, [pc, #228]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f023 0203 	bic.w	r2, r3, #3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	4936      	ldr	r1, [pc, #216]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ab8:	f7fe fd1a 	bl	80064f0 <HAL_GetTick>
 8007abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007abe:	e00a      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ac0:	f7fe fd16 	bl	80064f0 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e053      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad6:	4b2d      	ldr	r3, [pc, #180]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f003 020c 	and.w	r2, r3, #12
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d1eb      	bne.n	8007ac0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ae8:	4b27      	ldr	r3, [pc, #156]	; (8007b88 <HAL_RCC_ClockConfig+0x1c0>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d210      	bcs.n	8007b18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007af6:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <HAL_RCC_ClockConfig+0x1c0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f023 0207 	bic.w	r2, r3, #7
 8007afe:	4922      	ldr	r1, [pc, #136]	; (8007b88 <HAL_RCC_ClockConfig+0x1c0>)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b06:	4b20      	ldr	r3, [pc, #128]	; (8007b88 <HAL_RCC_ClockConfig+0x1c0>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d001      	beq.n	8007b18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e032      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d008      	beq.n	8007b36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b24:	4b19      	ldr	r3, [pc, #100]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	4916      	ldr	r1, [pc, #88]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d009      	beq.n	8007b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007b42:	4b12      	ldr	r3, [pc, #72]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	490e      	ldr	r1, [pc, #56]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b56:	f000 f821 	bl	8007b9c <HAL_RCC_GetSysClockFreq>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	091b      	lsrs	r3, r3, #4
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	490a      	ldr	r1, [pc, #40]	; (8007b90 <HAL_RCC_ClockConfig+0x1c8>)
 8007b68:	5ccb      	ldrb	r3, [r1, r3]
 8007b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6e:	4a09      	ldr	r2, [pc, #36]	; (8007b94 <HAL_RCC_ClockConfig+0x1cc>)
 8007b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <HAL_RCC_ClockConfig+0x1d0>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fc78 	bl	800646c <HAL_InitTick>

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40022000 	.word	0x40022000
 8007b8c:	40021000 	.word	0x40021000
 8007b90:	0800bbe4 	.word	0x0800bbe4
 8007b94:	20000000 	.word	0x20000000
 8007b98:	2000007c 	.word	0x2000007c

08007b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b9c:	b490      	push	{r4, r7}
 8007b9e:	b08a      	sub	sp, #40	; 0x28
 8007ba0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007ba2:	4b2a      	ldr	r3, [pc, #168]	; (8007c4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007ba4:	1d3c      	adds	r4, r7, #4
 8007ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007bac:	f240 2301 	movw	r3, #513	; 0x201
 8007bb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61bb      	str	r3, [r7, #24]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007bc6:	4b22      	ldr	r3, [pc, #136]	; (8007c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f003 030c 	and.w	r3, r3, #12
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d002      	beq.n	8007bdc <HAL_RCC_GetSysClockFreq+0x40>
 8007bd6:	2b08      	cmp	r3, #8
 8007bd8:	d003      	beq.n	8007be2 <HAL_RCC_GetSysClockFreq+0x46>
 8007bda:	e02d      	b.n	8007c38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007bdc:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007bde:	623b      	str	r3, [r7, #32]
      break;
 8007be0:	e02d      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	0c9b      	lsrs	r3, r3, #18
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007bee:	4413      	add	r3, r2
 8007bf0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007bf4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d013      	beq.n	8007c28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c00:	4b13      	ldr	r3, [pc, #76]	; (8007c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	0c5b      	lsrs	r3, r3, #17
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007c0e:	4413      	add	r3, r2
 8007c10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007c14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	4a0e      	ldr	r2, [pc, #56]	; (8007c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c1a:	fb02 f203 	mul.w	r2, r2, r3
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c24:	627b      	str	r3, [r7, #36]	; 0x24
 8007c26:	e004      	b.n	8007c32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	4a0b      	ldr	r2, [pc, #44]	; (8007c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	623b      	str	r3, [r7, #32]
      break;
 8007c36:	e002      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007c38:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c3a:	623b      	str	r3, [r7, #32]
      break;
 8007c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3728      	adds	r7, #40	; 0x28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc90      	pop	{r4, r7}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	0800b920 	.word	0x0800b920
 8007c50:	40021000 	.word	0x40021000
 8007c54:	007a1200 	.word	0x007a1200
 8007c58:	003d0900 	.word	0x003d0900

08007c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c60:	4b02      	ldr	r3, [pc, #8]	; (8007c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8007c62:	681b      	ldr	r3, [r3, #0]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr
 8007c6c:	20000000 	.word	0x20000000

08007c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c74:	f7ff fff2 	bl	8007c5c <HAL_RCC_GetHCLKFreq>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	0a1b      	lsrs	r3, r3, #8
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	4903      	ldr	r1, [pc, #12]	; (8007c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c86:	5ccb      	ldrb	r3, [r1, r3]
 8007c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40021000 	.word	0x40021000
 8007c94:	0800bbf4 	.word	0x0800bbf4

08007c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c9c:	f7ff ffde 	bl	8007c5c <HAL_RCC_GetHCLKFreq>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	0adb      	lsrs	r3, r3, #11
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	4903      	ldr	r1, [pc, #12]	; (8007cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cae:	5ccb      	ldrb	r3, [r1, r3]
 8007cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40021000 	.word	0x40021000
 8007cbc:	0800bbf4 	.word	0x0800bbf4

08007cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007cc8:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <RCC_Delay+0x34>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a0a      	ldr	r2, [pc, #40]	; (8007cf8 <RCC_Delay+0x38>)
 8007cce:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd2:	0a5b      	lsrs	r3, r3, #9
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	fb02 f303 	mul.w	r3, r2, r3
 8007cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007cdc:	bf00      	nop
  }
  while (Delay --);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1e5a      	subs	r2, r3, #1
 8007ce2:	60fa      	str	r2, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1f9      	bne.n	8007cdc <RCC_Delay+0x1c>
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr
 8007cf4:	20000000 	.word	0x20000000
 8007cf8:	10624dd3 	.word	0x10624dd3

08007cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	613b      	str	r3, [r7, #16]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d07d      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d1c:	4b4f      	ldr	r3, [pc, #316]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10d      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d28:	4b4c      	ldr	r3, [pc, #304]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	4a4b      	ldr	r2, [pc, #300]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d32:	61d3      	str	r3, [r2, #28]
 8007d34:	4b49      	ldr	r3, [pc, #292]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d3c:	60bb      	str	r3, [r7, #8]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d40:	2301      	movs	r3, #1
 8007d42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d44:	4b46      	ldr	r3, [pc, #280]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d118      	bne.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d50:	4b43      	ldr	r3, [pc, #268]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a42      	ldr	r2, [pc, #264]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d5c:	f7fe fbc8 	bl	80064f0 <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d62:	e008      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d64:	f7fe fbc4 	bl	80064f0 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b64      	cmp	r3, #100	; 0x64
 8007d70:	d901      	bls.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e06d      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d76:	4b3a      	ldr	r3, [pc, #232]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0f0      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d82:	4b36      	ldr	r3, [pc, #216]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d02e      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d027      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007da0:	4b2e      	ldr	r3, [pc, #184]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007daa:	4b2e      	ldr	r3, [pc, #184]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007db0:	4b2c      	ldr	r3, [pc, #176]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007db6:	4a29      	ldr	r2, [pc, #164]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d014      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dc6:	f7fe fb93 	bl	80064f0 <HAL_GetTick>
 8007dca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dcc:	e00a      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dce:	f7fe fb8f 	bl	80064f0 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e036      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007de4:	4b1d      	ldr	r3, [pc, #116]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0ee      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007df0:	4b1a      	ldr	r3, [pc, #104]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	4917      	ldr	r1, [pc, #92]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d105      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e08:	4b14      	ldr	r3, [pc, #80]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	4a13      	ldr	r2, [pc, #76]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d008      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e20:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	490b      	ldr	r1, [pc, #44]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0310 	and.w	r3, r3, #16
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d008      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e3e:	4b07      	ldr	r3, [pc, #28]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	4904      	ldr	r1, [pc, #16]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40021000 	.word	0x40021000
 8007e60:	40007000 	.word	0x40007000
 8007e64:	42420440 	.word	0x42420440

08007e68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b08d      	sub	sp, #52	; 0x34
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007e70:	4b5a      	ldr	r3, [pc, #360]	; (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8007e72:	f107 040c 	add.w	r4, r7, #12
 8007e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007e7c:	f240 2301 	movw	r3, #513	; 0x201
 8007e80:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	627b      	str	r3, [r7, #36]	; 0x24
 8007e86:	2300      	movs	r3, #0
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
 8007e92:	2300      	movs	r3, #0
 8007e94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b10      	cmp	r3, #16
 8007e9a:	d00a      	beq.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b10      	cmp	r3, #16
 8007ea0:	f200 8091 	bhi.w	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d04c      	beq.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d07c      	beq.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007eb0:	e089      	b.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8007eb2:	4b4b      	ldr	r3, [pc, #300]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007eb8:	4b49      	ldr	r3, [pc, #292]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8082 	beq.w	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	0c9b      	lsrs	r3, r3, #18
 8007eca:	f003 030f 	and.w	r3, r3, #15
 8007ece:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007ed8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d018      	beq.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007ee4:	4b3e      	ldr	r3, [pc, #248]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	0c5b      	lsrs	r3, r3, #17
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00d      	beq.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007f04:	4a37      	ldr	r2, [pc, #220]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	fb02 f303 	mul.w	r3, r2, r3
 8007f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f14:	e004      	b.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	4a33      	ldr	r2, [pc, #204]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8007f1a:	fb02 f303 	mul.w	r3, r2, r3
 8007f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007f20:	4b2f      	ldr	r3, [pc, #188]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f2c:	d102      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007f32:	e04a      	b.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8007f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	4a2c      	ldr	r2, [pc, #176]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8007f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007f42:	e042      	b.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8007f44:	4b26      	ldr	r3, [pc, #152]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f54:	d108      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8007f60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f66:	e01f      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f72:	d109      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007f74:	4b1a      	ldr	r3, [pc, #104]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8007f80:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f86:	e00f      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f92:	d11c      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8007f94:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d016      	beq.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8007fa0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007fa6:	e012      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8007fa8:	e011      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007faa:	f7ff fe75 	bl	8007c98 <HAL_RCC_GetPCLK2Freq>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	0b9b      	lsrs	r3, r3, #14
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	3301      	adds	r3, #1
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007fc4:	e004      	b.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8007fc6:	bf00      	nop
 8007fc8:	e002      	b.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8007fca:	bf00      	nop
 8007fcc:	e000      	b.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8007fce:	bf00      	nop
    }
  }
  return (frequency);
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3734      	adds	r7, #52	; 0x34
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd90      	pop	{r4, r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	0800b930 	.word	0x0800b930
 8007fe0:	40021000 	.word	0x40021000
 8007fe4:	007a1200 	.word	0x007a1200
 8007fe8:	003d0900 	.word	0x003d0900
 8007fec:	aaaaaaab 	.word	0xaaaaaaab

08007ff0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e084      	b.n	8008110 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	7c5b      	ldrb	r3, [r3, #17]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7fd f942 	bl	80052a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 faa2 	bl	800856c <HAL_RTC_WaitForSynchro>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2204      	movs	r2, #4
 8008032:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e06b      	b.n	8008110 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fb5b 	bl	80086f4 <RTC_EnterInitMode>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d004      	beq.n	800804e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2204      	movs	r2, #4
 8008048:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e060      	b.n	8008110 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0207 	bic.w	r2, r2, #7
 800805c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d005      	beq.n	8008072 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8008066:	4b2c      	ldr	r3, [pc, #176]	; (8008118 <HAL_RTC_Init+0x128>)
 8008068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806a:	4a2b      	ldr	r2, [pc, #172]	; (8008118 <HAL_RTC_Init+0x128>)
 800806c:	f023 0301 	bic.w	r3, r3, #1
 8008070:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8008072:	4b29      	ldr	r3, [pc, #164]	; (8008118 <HAL_RTC_Init+0x128>)
 8008074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008076:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	4926      	ldr	r1, [pc, #152]	; (8008118 <HAL_RTC_Init+0x128>)
 8008080:	4313      	orrs	r3, r2
 8008082:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d003      	beq.n	8008096 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	e00e      	b.n	80080b4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8008096:	2001      	movs	r0, #1
 8008098:	f7ff fee6 	bl	8007e68 <HAL_RCCEx_GetPeriphCLKFreq>
 800809c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d104      	bne.n	80080ae <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2204      	movs	r2, #4
 80080a8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e030      	b.n	8008110 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f023 010f 	bic.w	r1, r3, #15
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	0c1a      	lsrs	r2, r3, #16
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	0c1b      	lsrs	r3, r3, #16
 80080d2:	041b      	lsls	r3, r3, #16
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	b291      	uxth	r1, r2
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	430b      	orrs	r3, r1
 80080de:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fb2f 	bl	8008744 <RTC_ExitInitMode>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d004      	beq.n	80080f6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2204      	movs	r2, #4
 80080f0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e00c      	b.n	8008110 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800810e:	2300      	movs	r3, #0
  }
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	40006c00 	.word	0x40006c00

0800811c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800811c:	b590      	push	{r4, r7, lr}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	2300      	movs	r3, #0
 800812e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <HAL_RTC_SetTime+0x20>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e080      	b.n	8008242 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	7c1b      	ldrb	r3, [r3, #16]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d101      	bne.n	800814c <HAL_RTC_SetTime+0x30>
 8008148:	2302      	movs	r3, #2
 800814a:	e07a      	b.n	8008242 <HAL_RTC_SetTime+0x126>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2201      	movs	r2, #1
 8008150:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2202      	movs	r2, #2
 8008156:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d113      	bne.n	8008186 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008168:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	785b      	ldrb	r3, [r3, #1]
 8008170:	4619      	mov	r1, r3
 8008172:	460b      	mov	r3, r1
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	1a5b      	subs	r3, r3, r1
 8008178:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800817a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008180:	4413      	add	r3, r2
 8008182:	617b      	str	r3, [r7, #20]
 8008184:	e01e      	b.n	80081c4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fb1f 	bl	80087ce <RTC_Bcd2ToByte>
 8008190:	4603      	mov	r3, r0
 8008192:	461a      	mov	r2, r3
 8008194:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008198:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	785b      	ldrb	r3, [r3, #1]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fb14 	bl	80087ce <RTC_Bcd2ToByte>
 80081a6:	4603      	mov	r3, r0
 80081a8:	461a      	mov	r2, r3
 80081aa:	4613      	mov	r3, r2
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80081b2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	789b      	ldrb	r3, [r3, #2]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 fb08 	bl	80087ce <RTC_Bcd2ToByte>
 80081be:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80081c0:	4423      	add	r3, r4
 80081c2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80081c4:	6979      	ldr	r1, [r7, #20]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 fa2d 	bl	8008626 <RTC_WriteTimeCounter>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d007      	beq.n	80081e2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2204      	movs	r2, #4
 80081d6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e02f      	b.n	8008242 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0205 	bic.w	r2, r2, #5
 80081f0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 fa3e 	bl	8008674 <RTC_ReadAlarmCounter>
 80081f8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008200:	d018      	beq.n	8008234 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	429a      	cmp	r2, r3
 8008208:	d214      	bcs.n	8008234 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008210:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008214:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008216:	6939      	ldr	r1, [r7, #16]
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 fa44 	bl	80086a6 <RTC_WriteAlarmCounter>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d007      	beq.n	8008234 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2204      	movs	r2, #4
 8008228:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e006      	b.n	8008242 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8008240:	2300      	movs	r3, #0
  }
}
 8008242:	4618      	mov	r0, r3
 8008244:	371c      	adds	r7, #28
 8008246:	46bd      	mov	sp, r7
 8008248:	bd90      	pop	{r4, r7, pc}
	...

0800824c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b088      	sub	sp, #32
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	61bb      	str	r3, [r7, #24]
 800825c:	2300      	movs	r3, #0
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	2300      	movs	r3, #0
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	2300      	movs	r3, #0
 8008266:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <HAL_RTC_GetTime+0x28>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e0b5      	b.n	80083e4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e0ac      	b.n	80083e4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f99b 	bl	80085c6 <RTC_ReadTimeCounter>
 8008290:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	4a55      	ldr	r2, [pc, #340]	; (80083ec <HAL_RTC_GetTime+0x1a0>)
 8008296:	fba2 2303 	umull	r2, r3, r2, r3
 800829a:	0adb      	lsrs	r3, r3, #11
 800829c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	4b52      	ldr	r3, [pc, #328]	; (80083ec <HAL_RTC_GetTime+0x1a0>)
 80082a2:	fba3 1302 	umull	r1, r3, r3, r2
 80082a6:	0adb      	lsrs	r3, r3, #11
 80082a8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80082ac:	fb01 f303 	mul.w	r3, r1, r3
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	4a4f      	ldr	r2, [pc, #316]	; (80083f0 <HAL_RTC_GetTime+0x1a4>)
 80082b4:	fba2 2303 	umull	r2, r3, r2, r3
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	4a4a      	ldr	r2, [pc, #296]	; (80083ec <HAL_RTC_GetTime+0x1a0>)
 80082c4:	fba2 1203 	umull	r1, r2, r2, r3
 80082c8:	0ad2      	lsrs	r2, r2, #11
 80082ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80082ce:	fb01 f202 	mul.w	r2, r1, r2
 80082d2:	1a9a      	subs	r2, r3, r2
 80082d4:	4b46      	ldr	r3, [pc, #280]	; (80083f0 <HAL_RTC_GetTime+0x1a4>)
 80082d6:	fba3 1302 	umull	r1, r3, r3, r2
 80082da:	0959      	lsrs	r1, r3, #5
 80082dc:	460b      	mov	r3, r1
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	1a5b      	subs	r3, r3, r1
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	1ad1      	subs	r1, r2, r3
 80082e6:	b2ca      	uxtb	r2, r1
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	2b17      	cmp	r3, #23
 80082f0:	d955      	bls.n	800839e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	4a3f      	ldr	r2, [pc, #252]	; (80083f4 <HAL_RTC_GetTime+0x1a8>)
 80082f6:	fba2 2303 	umull	r2, r3, r2, r3
 80082fa:	091b      	lsrs	r3, r3, #4
 80082fc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80082fe:	6939      	ldr	r1, [r7, #16]
 8008300:	4b3c      	ldr	r3, [pc, #240]	; (80083f4 <HAL_RTC_GetTime+0x1a8>)
 8008302:	fba3 2301 	umull	r2, r3, r3, r1
 8008306:	091a      	lsrs	r2, r3, #4
 8008308:	4613      	mov	r3, r2
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	4413      	add	r3, r2
 800830e:	00db      	lsls	r3, r3, #3
 8008310:	1aca      	subs	r2, r1, r3
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 f9ab 	bl	8008674 <RTC_ReadAlarmCounter>
 800831e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008326:	d008      	beq.n	800833a <HAL_RTC_GetTime+0xee>
 8008328:	69fa      	ldr	r2, [r7, #28]
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	429a      	cmp	r2, r3
 800832e:	d904      	bls.n	800833a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8008330:	69fa      	ldr	r2, [r7, #28]
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	61fb      	str	r3, [r7, #28]
 8008338:	e002      	b.n	8008340 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800833a:	f04f 33ff 	mov.w	r3, #4294967295
 800833e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	4a2d      	ldr	r2, [pc, #180]	; (80083f8 <HAL_RTC_GetTime+0x1ac>)
 8008344:	fb02 f303 	mul.w	r3, r2, r3
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800834e:	69b9      	ldr	r1, [r7, #24]
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f968 	bl	8008626 <RTC_WriteTimeCounter>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e041      	b.n	80083e4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008366:	d00c      	beq.n	8008382 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8008368:	69fa      	ldr	r2, [r7, #28]
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	4413      	add	r3, r2
 800836e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008370:	69f9      	ldr	r1, [r7, #28]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f997 	bl	80086a6 <RTC_WriteAlarmCounter>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e030      	b.n	80083e4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008382:	69f9      	ldr	r1, [r7, #28]
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f98e 	bl	80086a6 <RTC_WriteAlarmCounter>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e027      	b.n	80083e4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8008394:	6979      	ldr	r1, [r7, #20]
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 fa36 	bl	8008808 <RTC_DateUpdate>
 800839c:	e003      	b.n	80083a6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01a      	beq.n	80083e2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 f9ef 	bl	8008794 <RTC_ByteToBcd2>
 80083b6:	4603      	mov	r3, r0
 80083b8:	461a      	mov	r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	785b      	ldrb	r3, [r3, #1]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f9e6 	bl	8008794 <RTC_ByteToBcd2>
 80083c8:	4603      	mov	r3, r0
 80083ca:	461a      	mov	r2, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	789b      	ldrb	r3, [r3, #2]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 f9dd 	bl	8008794 <RTC_ByteToBcd2>
 80083da:	4603      	mov	r3, r0
 80083dc:	461a      	mov	r2, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3720      	adds	r7, #32
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	91a2b3c5 	.word	0x91a2b3c5
 80083f0:	88888889 	.word	0x88888889
 80083f4:	aaaaaaab 	.word	0xaaaaaaab
 80083f8:	00015180 	.word	0x00015180

080083fc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80083fc:	b590      	push	{r4, r7, lr}
 80083fe:	b089      	sub	sp, #36	; 0x24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8008408:	2300      	movs	r3, #0
 800840a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800840c:	f107 0314 	add.w	r3, r7, #20
 8008410:	2100      	movs	r1, #0
 8008412:	460a      	mov	r2, r1
 8008414:	801a      	strh	r2, [r3, #0]
 8008416:	460a      	mov	r2, r1
 8008418:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <HAL_RTC_SetAlarm_IT+0x2a>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e099      	b.n	800855e <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	7c1b      	ldrb	r3, [r3, #16]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <HAL_RTC_SetAlarm_IT+0x3a>
 8008432:	2302      	movs	r3, #2
 8008434:	e093      	b.n	800855e <HAL_RTC_SetAlarm_IT+0x162>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2202      	movs	r2, #2
 8008440:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8008442:	f107 0314 	add.w	r3, r7, #20
 8008446:	2200      	movs	r2, #0
 8008448:	4619      	mov	r1, r3
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7ff fefe 	bl	800824c <HAL_RTC_GetTime>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e081      	b.n	800855e <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800845a:	7d3b      	ldrb	r3, [r7, #20]
 800845c:	461a      	mov	r2, r3
 800845e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008462:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8008466:	7d7b      	ldrb	r3, [r7, #21]
 8008468:	4619      	mov	r1, r3
 800846a:	460b      	mov	r3, r1
 800846c:	011b      	lsls	r3, r3, #4
 800846e:	1a5b      	subs	r3, r3, r1
 8008470:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8008472:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8008474:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8008476:	4413      	add	r3, r2
 8008478:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d113      	bne.n	80084a8 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800848a:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	785b      	ldrb	r3, [r3, #1]
 8008492:	4619      	mov	r1, r3
 8008494:	460b      	mov	r3, r1
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	1a5b      	subs	r3, r3, r1
 800849a:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800849c:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80084a2:	4413      	add	r3, r2
 80084a4:	61fb      	str	r3, [r7, #28]
 80084a6:	e01e      	b.n	80084e6 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 f98e 	bl	80087ce <RTC_Bcd2ToByte>
 80084b2:	4603      	mov	r3, r0
 80084b4:	461a      	mov	r2, r3
 80084b6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80084ba:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	785b      	ldrb	r3, [r3, #1]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f983 	bl	80087ce <RTC_Bcd2ToByte>
 80084c8:	4603      	mov	r3, r0
 80084ca:	461a      	mov	r2, r3
 80084cc:	4613      	mov	r3, r2
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80084d4:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	789b      	ldrb	r3, [r3, #2]
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 f977 	bl	80087ce <RTC_Bcd2ToByte>
 80084e0:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80084e2:	4423      	add	r3, r4
 80084e4:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d205      	bcs.n	80084fa <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80084f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80084f8:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80084fa:	69f9      	ldr	r1, [r7, #28]
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 f8d2 	bl	80086a6 <RTC_WriteAlarmCounter>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2204      	movs	r2, #4
 800850c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e022      	b.n	800855e <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0202 	bic.w	r2, r2, #2
 8008526:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f042 0202 	orr.w	r2, r2, #2
 8008536:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008538:	4b0b      	ldr	r3, [pc, #44]	; (8008568 <HAL_RTC_SetAlarm_IT+0x16c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a0a      	ldr	r2, [pc, #40]	; (8008568 <HAL_RTC_SetAlarm_IT+0x16c>)
 800853e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008542:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008544:	4b08      	ldr	r3, [pc, #32]	; (8008568 <HAL_RTC_SetAlarm_IT+0x16c>)
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	4a07      	ldr	r2, [pc, #28]	; (8008568 <HAL_RTC_SetAlarm_IT+0x16c>)
 800854a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800854e:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800855c:	2300      	movs	r3, #0
  }
}
 800855e:	4618      	mov	r0, r3
 8008560:	3724      	adds	r7, #36	; 0x24
 8008562:	46bd      	mov	sp, r7
 8008564:	bd90      	pop	{r4, r7, pc}
 8008566:	bf00      	nop
 8008568:	40010400 	.word	0x40010400

0800856c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e01d      	b.n	80085be <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0208 	bic.w	r2, r2, #8
 8008590:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008592:	f7fd ffad 	bl	80064f0 <HAL_GetTick>
 8008596:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008598:	e009      	b.n	80085ae <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800859a:	f7fd ffa9 	bl	80064f0 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085a8:	d901      	bls.n	80085ae <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e007      	b.n	80085be <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f003 0308 	and.w	r3, r3, #8
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0ee      	beq.n	800859a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b087      	sub	sp, #28
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	827b      	strh	r3, [r7, #18]
 80085d2:	2300      	movs	r3, #0
 80085d4:	823b      	strh	r3, [r7, #16]
 80085d6:	2300      	movs	r3, #0
 80085d8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80085f6:	8a7a      	ldrh	r2, [r7, #18]
 80085f8:	8a3b      	ldrh	r3, [r7, #16]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d008      	beq.n	8008610 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80085fe:	8a3b      	ldrh	r3, [r7, #16]
 8008600:	041a      	lsls	r2, r3, #16
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	b29b      	uxth	r3, r3
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]
 800860e:	e004      	b.n	800861a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8008610:	8a7b      	ldrh	r3, [r7, #18]
 8008612:	041a      	lsls	r2, r3, #16
 8008614:	89fb      	ldrh	r3, [r7, #14]
 8008616:	4313      	orrs	r3, r2
 8008618:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800861a:	697b      	ldr	r3, [r7, #20]
}
 800861c:	4618      	mov	r0, r3
 800861e:	371c      	adds	r7, #28
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f85d 	bl	80086f4 <RTC_EnterInitMode>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	73fb      	strb	r3, [r7, #15]
 8008644:	e011      	b.n	800866a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	0c12      	lsrs	r2, r2, #16
 800864e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	b292      	uxth	r2, r2
 8008658:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f872 	bl	8008744 <RTC_ExitInitMode>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	81fb      	strh	r3, [r7, #14]
 8008680:	2300      	movs	r3, #0
 8008682:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8008694:	89fb      	ldrh	r3, [r7, #14]
 8008696:	041a      	lsls	r2, r3, #16
 8008698:	89bb      	ldrh	r3, [r7, #12]
 800869a:	4313      	orrs	r3, r2
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr

080086a6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f81d 	bl	80086f4 <RTC_EnterInitMode>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	73fb      	strb	r3, [r7, #15]
 80086c4:	e011      	b.n	80086ea <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	0c12      	lsrs	r2, r2, #16
 80086ce:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	b292      	uxth	r2, r2
 80086d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f832 	bl	8008744 <RTC_ExitInitMode>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8008700:	f7fd fef6 	bl	80064f0 <HAL_GetTick>
 8008704:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008706:	e009      	b.n	800871c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008708:	f7fd fef2 	bl	80064f0 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008716:	d901      	bls.n	800871c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e00f      	b.n	800873c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0ee      	beq.n	8008708 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f042 0210 	orr.w	r2, r2, #16
 8008738:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0210 	bic.w	r2, r2, #16
 800875e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008760:	f7fd fec6 	bl	80064f0 <HAL_GetTick>
 8008764:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008766:	e009      	b.n	800877c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008768:	f7fd fec2 	bl	80064f0 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008776:	d901      	bls.n	800877c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e007      	b.n	800878c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f003 0320 	and.w	r3, r3, #32
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0ee      	beq.n	8008768 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80087a2:	e005      	b.n	80087b0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	3b0a      	subs	r3, #10
 80087ae:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b09      	cmp	r3, #9
 80087b4:	d8f6      	bhi.n	80087a4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	b2db      	uxtb	r3, r3
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bc80      	pop	{r7}
 80087cc:	4770      	bx	lr

080087ce <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b085      	sub	sp, #20
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	4603      	mov	r3, r0
 80087d6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	091b      	lsrs	r3, r3, #4
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	461a      	mov	r2, r3
 80087e4:	4613      	mov	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	f003 030f 	and.w	r3, r3, #15
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	4413      	add	r3, r2
 80087fc:	b2db      	uxtb	r3, r3
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr

08008808 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	2300      	movs	r3, #0
 8008818:	613b      	str	r3, [r7, #16]
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	7bdb      	ldrb	r3, [r3, #15]
 8008826:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	7b5b      	ldrb	r3, [r3, #13]
 800882c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	7b9b      	ldrb	r3, [r3, #14]
 8008832:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8008834:	2300      	movs	r3, #0
 8008836:	60bb      	str	r3, [r7, #8]
 8008838:	e06f      	b.n	800891a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d011      	beq.n	8008864 <RTC_DateUpdate+0x5c>
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	2b03      	cmp	r3, #3
 8008844:	d00e      	beq.n	8008864 <RTC_DateUpdate+0x5c>
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	2b05      	cmp	r3, #5
 800884a:	d00b      	beq.n	8008864 <RTC_DateUpdate+0x5c>
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	2b07      	cmp	r3, #7
 8008850:	d008      	beq.n	8008864 <RTC_DateUpdate+0x5c>
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	2b08      	cmp	r3, #8
 8008856:	d005      	beq.n	8008864 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2b0a      	cmp	r3, #10
 800885c:	d002      	beq.n	8008864 <RTC_DateUpdate+0x5c>
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2b0c      	cmp	r3, #12
 8008862:	d117      	bne.n	8008894 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b1e      	cmp	r3, #30
 8008868:	d803      	bhi.n	8008872 <RTC_DateUpdate+0x6a>
      {
        day++;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3301      	adds	r3, #1
 800886e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008870:	e050      	b.n	8008914 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b0c      	cmp	r3, #12
 8008876:	d005      	beq.n	8008884 <RTC_DateUpdate+0x7c>
        {
          month++;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	3301      	adds	r3, #1
 800887c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800887e:	2301      	movs	r3, #1
 8008880:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008882:	e047      	b.n	8008914 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8008884:	2301      	movs	r3, #1
 8008886:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008888:	2301      	movs	r3, #1
 800888a:	60fb      	str	r3, [r7, #12]
          year++;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	3301      	adds	r3, #1
 8008890:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8008892:	e03f      	b.n	8008914 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2b04      	cmp	r3, #4
 8008898:	d008      	beq.n	80088ac <RTC_DateUpdate+0xa4>
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b06      	cmp	r3, #6
 800889e:	d005      	beq.n	80088ac <RTC_DateUpdate+0xa4>
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	2b09      	cmp	r3, #9
 80088a4:	d002      	beq.n	80088ac <RTC_DateUpdate+0xa4>
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b0b      	cmp	r3, #11
 80088aa:	d10c      	bne.n	80088c6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b1d      	cmp	r3, #29
 80088b0:	d803      	bhi.n	80088ba <RTC_DateUpdate+0xb2>
      {
        day++;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80088b8:	e02c      	b.n	8008914 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	3301      	adds	r3, #1
 80088be:	613b      	str	r3, [r7, #16]
        day = 1U;
 80088c0:	2301      	movs	r3, #1
 80088c2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80088c4:	e026      	b.n	8008914 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d123      	bne.n	8008914 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b1b      	cmp	r3, #27
 80088d0:	d803      	bhi.n	80088da <RTC_DateUpdate+0xd2>
      {
        day++;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3301      	adds	r3, #1
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e01c      	b.n	8008914 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b1c      	cmp	r3, #28
 80088de:	d111      	bne.n	8008904 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 f839 	bl	800895c <RTC_IsLeapYear>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d003      	beq.n	80088f8 <RTC_DateUpdate+0xf0>
        {
          day++;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3301      	adds	r3, #1
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	e00d      	b.n	8008914 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	3301      	adds	r3, #1
 80088fc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80088fe:	2301      	movs	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	e007      	b.n	8008914 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b1d      	cmp	r3, #29
 8008908:	d104      	bne.n	8008914 <RTC_DateUpdate+0x10c>
      {
        month++;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	3301      	adds	r3, #1
 800890e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008910:	2301      	movs	r3, #1
 8008912:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	3301      	adds	r3, #1
 8008918:	60bb      	str	r3, [r7, #8]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	429a      	cmp	r2, r3
 8008920:	d38b      	bcc.n	800883a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	b2da      	uxtb	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	b2da      	uxtb	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	b2da      	uxtb	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	b2d2      	uxtb	r2, r2
 8008942:	4619      	mov	r1, r3
 8008944:	6978      	ldr	r0, [r7, #20]
 8008946:	f000 f83b 	bl	80089c0 <RTC_WeekDayNum>
 800894a:	4603      	mov	r3, r0
 800894c:	461a      	mov	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	731a      	strb	r2, [r3, #12]
}
 8008952:	bf00      	nop
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	e01d      	b.n	80089b2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8008976:	88fb      	ldrh	r3, [r7, #6]
 8008978:	4a10      	ldr	r2, [pc, #64]	; (80089bc <RTC_IsLeapYear+0x60>)
 800897a:	fba2 1203 	umull	r1, r2, r2, r3
 800897e:	0952      	lsrs	r2, r2, #5
 8008980:	2164      	movs	r1, #100	; 0x64
 8008982:	fb01 f202 	mul.w	r2, r1, r2
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	b29b      	uxth	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800898e:	2301      	movs	r3, #1
 8008990:	e00f      	b.n	80089b2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8008992:	88fb      	ldrh	r3, [r7, #6]
 8008994:	4a09      	ldr	r2, [pc, #36]	; (80089bc <RTC_IsLeapYear+0x60>)
 8008996:	fba2 1203 	umull	r1, r2, r2, r3
 800899a:	09d2      	lsrs	r2, r2, #7
 800899c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80089a0:	fb01 f202 	mul.w	r2, r1, r2
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e000      	b.n	80089b2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80089b0:	2300      	movs	r3, #0
  }
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bc80      	pop	{r7}
 80089ba:	4770      	bx	lr
 80089bc:	51eb851f 	.word	0x51eb851f

080089c0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
 80089cc:	4613      	mov	r3, r2
 80089ce:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	60bb      	str	r3, [r7, #8]
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80089de:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d82d      	bhi.n	8008a42 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80089e6:	78fa      	ldrb	r2, [r7, #3]
 80089e8:	4613      	mov	r3, r2
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	4413      	add	r3, r2
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	1a9b      	subs	r3, r3, r2
 80089f2:	4a2c      	ldr	r2, [pc, #176]	; (8008aa4 <RTC_WeekDayNum+0xe4>)
 80089f4:	fba2 2303 	umull	r2, r3, r2, r3
 80089f8:	085a      	lsrs	r2, r3, #1
 80089fa:	78bb      	ldrb	r3, [r7, #2]
 80089fc:	441a      	add	r2, r3
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	441a      	add	r2, r3
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	3b01      	subs	r3, #1
 8008a06:	089b      	lsrs	r3, r3, #2
 8008a08:	441a      	add	r2, r3
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	4926      	ldr	r1, [pc, #152]	; (8008aa8 <RTC_WeekDayNum+0xe8>)
 8008a10:	fba1 1303 	umull	r1, r3, r1, r3
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	1ad2      	subs	r2, r2, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	4922      	ldr	r1, [pc, #136]	; (8008aa8 <RTC_WeekDayNum+0xe8>)
 8008a1e:	fba1 1303 	umull	r1, r3, r1, r3
 8008a22:	09db      	lsrs	r3, r3, #7
 8008a24:	4413      	add	r3, r2
 8008a26:	1d1a      	adds	r2, r3, #4
 8008a28:	4b20      	ldr	r3, [pc, #128]	; (8008aac <RTC_WeekDayNum+0xec>)
 8008a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8008a2e:	1ad1      	subs	r1, r2, r3
 8008a30:	0849      	lsrs	r1, r1, #1
 8008a32:	440b      	add	r3, r1
 8008a34:	0899      	lsrs	r1, r3, #2
 8008a36:	460b      	mov	r3, r1
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	1a5b      	subs	r3, r3, r1
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	e029      	b.n	8008a96 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8008a42:	78fa      	ldrb	r2, [r7, #3]
 8008a44:	4613      	mov	r3, r2
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	4413      	add	r3, r2
 8008a4a:	00db      	lsls	r3, r3, #3
 8008a4c:	1a9b      	subs	r3, r3, r2
 8008a4e:	4a15      	ldr	r2, [pc, #84]	; (8008aa4 <RTC_WeekDayNum+0xe4>)
 8008a50:	fba2 2303 	umull	r2, r3, r2, r3
 8008a54:	085a      	lsrs	r2, r3, #1
 8008a56:	78bb      	ldrb	r3, [r7, #2]
 8008a58:	441a      	add	r2, r3
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	441a      	add	r2, r3
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	089b      	lsrs	r3, r3, #2
 8008a62:	441a      	add	r2, r3
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	4910      	ldr	r1, [pc, #64]	; (8008aa8 <RTC_WeekDayNum+0xe8>)
 8008a68:	fba1 1303 	umull	r1, r3, r1, r3
 8008a6c:	095b      	lsrs	r3, r3, #5
 8008a6e:	1ad2      	subs	r2, r2, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	490d      	ldr	r1, [pc, #52]	; (8008aa8 <RTC_WeekDayNum+0xe8>)
 8008a74:	fba1 1303 	umull	r1, r3, r1, r3
 8008a78:	09db      	lsrs	r3, r3, #7
 8008a7a:	4413      	add	r3, r2
 8008a7c:	1c9a      	adds	r2, r3, #2
 8008a7e:	4b0b      	ldr	r3, [pc, #44]	; (8008aac <RTC_WeekDayNum+0xec>)
 8008a80:	fba3 1302 	umull	r1, r3, r3, r2
 8008a84:	1ad1      	subs	r1, r2, r3
 8008a86:	0849      	lsrs	r1, r1, #1
 8008a88:	440b      	add	r3, r1
 8008a8a:	0899      	lsrs	r1, r3, #2
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	1a5b      	subs	r3, r3, r1
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	b2db      	uxtb	r3, r3
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bc80      	pop	{r7}
 8008aa2:	4770      	bx	lr
 8008aa4:	38e38e39 	.word	0x38e38e39
 8008aa8:	51eb851f 	.word	0x51eb851f
 8008aac:	24924925 	.word	0x24924925

08008ab0 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8008ac0:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <HAL_RTCEx_BKUPWrite+0x30>)
 8008ac2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	4413      	add	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	b292      	uxth	r2, r2
 8008ad4:	601a      	str	r2, [r3, #0]
}
 8008ad6:	bf00      	nop
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bc80      	pop	{r7}
 8008ade:	4770      	bx	lr
 8008ae0:	40006c00 	.word	0x40006c00

08008ae4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8008af6:	4b08      	ldr	r3, [pc, #32]	; (8008b18 <HAL_RTCEx_BKUPRead+0x34>)
 8008af8:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	4413      	add	r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bc80      	pop	{r7}
 8008b16:	4770      	bx	lr
 8008b18:	40006c00 	.word	0x40006c00

08008b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e041      	b.n	8008bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d106      	bne.n	8008b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7fc fc16 	bl	8005374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	f000 fd3e 	bl	80095dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d001      	beq.n	8008bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e03a      	b.n	8008c4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68da      	ldr	r2, [r3, #12]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f042 0201 	orr.w	r2, r2, #1
 8008bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a18      	ldr	r2, [pc, #96]	; (8008c54 <HAL_TIM_Base_Start_IT+0x98>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d00e      	beq.n	8008c14 <HAL_TIM_Base_Start_IT+0x58>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bfe:	d009      	beq.n	8008c14 <HAL_TIM_Base_Start_IT+0x58>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a14      	ldr	r2, [pc, #80]	; (8008c58 <HAL_TIM_Base_Start_IT+0x9c>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d004      	beq.n	8008c14 <HAL_TIM_Base_Start_IT+0x58>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a13      	ldr	r2, [pc, #76]	; (8008c5c <HAL_TIM_Base_Start_IT+0xa0>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d111      	bne.n	8008c38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b06      	cmp	r3, #6
 8008c24:	d010      	beq.n	8008c48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f042 0201 	orr.w	r2, r2, #1
 8008c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c36:	e007      	b.n	8008c48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f042 0201 	orr.w	r2, r2, #1
 8008c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr
 8008c54:	40012c00 	.word	0x40012c00
 8008c58:	40000400 	.word	0x40000400
 8008c5c:	40000800 	.word	0x40000800

08008c60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e041      	b.n	8008cf6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d106      	bne.n	8008c8c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7fc fb2e 	bl	80052e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	f000 fc9c 	bl	80095dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
	...

08008d00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <HAL_TIM_IC_Start_IT+0x1a>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	e013      	b.n	8008d42 <HAL_TIM_IC_Start_IT+0x42>
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d104      	bne.n	8008d2a <HAL_TIM_IC_Start_IT+0x2a>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	e00b      	b.n	8008d42 <HAL_TIM_IC_Start_IT+0x42>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d104      	bne.n	8008d3a <HAL_TIM_IC_Start_IT+0x3a>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	e003      	b.n	8008d42 <HAL_TIM_IC_Start_IT+0x42>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d104      	bne.n	8008d54 <HAL_TIM_IC_Start_IT+0x54>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	e013      	b.n	8008d7c <HAL_TIM_IC_Start_IT+0x7c>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d104      	bne.n	8008d64 <HAL_TIM_IC_Start_IT+0x64>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	e00b      	b.n	8008d7c <HAL_TIM_IC_Start_IT+0x7c>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b08      	cmp	r3, #8
 8008d68:	d104      	bne.n	8008d74 <HAL_TIM_IC_Start_IT+0x74>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	e003      	b.n	8008d7c <HAL_TIM_IC_Start_IT+0x7c>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d102      	bne.n	8008d8a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d001      	beq.n	8008d8e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e0b3      	b.n	8008ef6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d104      	bne.n	8008d9e <HAL_TIM_IC_Start_IT+0x9e>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d9c:	e013      	b.n	8008dc6 <HAL_TIM_IC_Start_IT+0xc6>
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b04      	cmp	r3, #4
 8008da2:	d104      	bne.n	8008dae <HAL_TIM_IC_Start_IT+0xae>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dac:	e00b      	b.n	8008dc6 <HAL_TIM_IC_Start_IT+0xc6>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d104      	bne.n	8008dbe <HAL_TIM_IC_Start_IT+0xbe>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dbc:	e003      	b.n	8008dc6 <HAL_TIM_IC_Start_IT+0xc6>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d104      	bne.n	8008dd6 <HAL_TIM_IC_Start_IT+0xd6>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dd4:	e013      	b.n	8008dfe <HAL_TIM_IC_Start_IT+0xfe>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d104      	bne.n	8008de6 <HAL_TIM_IC_Start_IT+0xe6>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2202      	movs	r2, #2
 8008de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008de4:	e00b      	b.n	8008dfe <HAL_TIM_IC_Start_IT+0xfe>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d104      	bne.n	8008df6 <HAL_TIM_IC_Start_IT+0xf6>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008df4:	e003      	b.n	8008dfe <HAL_TIM_IC_Start_IT+0xfe>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b0c      	cmp	r3, #12
 8008e02:	d841      	bhi.n	8008e88 <HAL_TIM_IC_Start_IT+0x188>
 8008e04:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <HAL_TIM_IC_Start_IT+0x10c>)
 8008e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0a:	bf00      	nop
 8008e0c:	08008e41 	.word	0x08008e41
 8008e10:	08008e89 	.word	0x08008e89
 8008e14:	08008e89 	.word	0x08008e89
 8008e18:	08008e89 	.word	0x08008e89
 8008e1c:	08008e53 	.word	0x08008e53
 8008e20:	08008e89 	.word	0x08008e89
 8008e24:	08008e89 	.word	0x08008e89
 8008e28:	08008e89 	.word	0x08008e89
 8008e2c:	08008e65 	.word	0x08008e65
 8008e30:	08008e89 	.word	0x08008e89
 8008e34:	08008e89 	.word	0x08008e89
 8008e38:	08008e89 	.word	0x08008e89
 8008e3c:	08008e77 	.word	0x08008e77
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 0202 	orr.w	r2, r2, #2
 8008e4e:	60da      	str	r2, [r3, #12]
      break;
 8008e50:	e01b      	b.n	8008e8a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f042 0204 	orr.w	r2, r2, #4
 8008e60:	60da      	str	r2, [r3, #12]
      break;
 8008e62:	e012      	b.n	8008e8a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f042 0208 	orr.w	r2, r2, #8
 8008e72:	60da      	str	r2, [r3, #12]
      break;
 8008e74:	e009      	b.n	8008e8a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f042 0210 	orr.w	r2, r2, #16
 8008e84:	60da      	str	r2, [r3, #12]
      break;
 8008e86:	e000      	b.n	8008e8a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8008e88:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fda7 	bl	80099e6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a18      	ldr	r2, [pc, #96]	; (8008f00 <HAL_TIM_IC_Start_IT+0x200>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00e      	beq.n	8008ec0 <HAL_TIM_IC_Start_IT+0x1c0>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eaa:	d009      	beq.n	8008ec0 <HAL_TIM_IC_Start_IT+0x1c0>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a14      	ldr	r2, [pc, #80]	; (8008f04 <HAL_TIM_IC_Start_IT+0x204>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d004      	beq.n	8008ec0 <HAL_TIM_IC_Start_IT+0x1c0>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a13      	ldr	r2, [pc, #76]	; (8008f08 <HAL_TIM_IC_Start_IT+0x208>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d111      	bne.n	8008ee4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b06      	cmp	r3, #6
 8008ed0:	d010      	beq.n	8008ef4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0201 	orr.w	r2, r2, #1
 8008ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee2:	e007      	b.n	8008ef4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	40012c00 	.word	0x40012c00
 8008f04:	40000400 	.word	0x40000400
 8008f08:	40000800 	.word	0x40000800

08008f0c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b0c      	cmp	r3, #12
 8008f1a:	d841      	bhi.n	8008fa0 <HAL_TIM_IC_Stop_IT+0x94>
 8008f1c:	a201      	add	r2, pc, #4	; (adr r2, 8008f24 <HAL_TIM_IC_Stop_IT+0x18>)
 8008f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f22:	bf00      	nop
 8008f24:	08008f59 	.word	0x08008f59
 8008f28:	08008fa1 	.word	0x08008fa1
 8008f2c:	08008fa1 	.word	0x08008fa1
 8008f30:	08008fa1 	.word	0x08008fa1
 8008f34:	08008f6b 	.word	0x08008f6b
 8008f38:	08008fa1 	.word	0x08008fa1
 8008f3c:	08008fa1 	.word	0x08008fa1
 8008f40:	08008fa1 	.word	0x08008fa1
 8008f44:	08008f7d 	.word	0x08008f7d
 8008f48:	08008fa1 	.word	0x08008fa1
 8008f4c:	08008fa1 	.word	0x08008fa1
 8008f50:	08008fa1 	.word	0x08008fa1
 8008f54:	08008f8f 	.word	0x08008f8f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68da      	ldr	r2, [r3, #12]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0202 	bic.w	r2, r2, #2
 8008f66:	60da      	str	r2, [r3, #12]
      break;
 8008f68:	e01b      	b.n	8008fa2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f022 0204 	bic.w	r2, r2, #4
 8008f78:	60da      	str	r2, [r3, #12]
      break;
 8008f7a:	e012      	b.n	8008fa2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0208 	bic.w	r2, r2, #8
 8008f8a:	60da      	str	r2, [r3, #12]
      break;
 8008f8c:	e009      	b.n	8008fa2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 0210 	bic.w	r2, r2, #16
 8008f9c:	60da      	str	r2, [r3, #12]
      break;
 8008f9e:	e000      	b.n	8008fa2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8008fa0:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fd1b 	bl	80099e6 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6a1a      	ldr	r2, [r3, #32]
 8008fb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10f      	bne.n	8008fe0 <HAL_TIM_IC_Stop_IT+0xd4>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6a1a      	ldr	r2, [r3, #32]
 8008fc6:	f240 4344 	movw	r3, #1092	; 0x444
 8008fca:	4013      	ands	r3, r2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d107      	bne.n	8008fe0 <HAL_TIM_IC_Stop_IT+0xd4>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f022 0201 	bic.w	r2, r2, #1
 8008fde:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d104      	bne.n	8008ff0 <HAL_TIM_IC_Stop_IT+0xe4>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fee:	e013      	b.n	8009018 <HAL_TIM_IC_Stop_IT+0x10c>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d104      	bne.n	8009000 <HAL_TIM_IC_Stop_IT+0xf4>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ffe:	e00b      	b.n	8009018 <HAL_TIM_IC_Stop_IT+0x10c>
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2b08      	cmp	r3, #8
 8009004:	d104      	bne.n	8009010 <HAL_TIM_IC_Stop_IT+0x104>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800900e:	e003      	b.n	8009018 <HAL_TIM_IC_Stop_IT+0x10c>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d104      	bne.n	8009028 <HAL_TIM_IC_Stop_IT+0x11c>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009026:	e013      	b.n	8009050 <HAL_TIM_IC_Stop_IT+0x144>
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2b04      	cmp	r3, #4
 800902c:	d104      	bne.n	8009038 <HAL_TIM_IC_Stop_IT+0x12c>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009036:	e00b      	b.n	8009050 <HAL_TIM_IC_Stop_IT+0x144>
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b08      	cmp	r3, #8
 800903c:	d104      	bne.n	8009048 <HAL_TIM_IC_Stop_IT+0x13c>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009046:	e003      	b.n	8009050 <HAL_TIM_IC_Stop_IT+0x144>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop

0800905c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b02      	cmp	r3, #2
 8009070:	d122      	bne.n	80090b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b02      	cmp	r3, #2
 800907e:	d11b      	bne.n	80090b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f06f 0202 	mvn.w	r2, #2
 8009088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7fc fe12 	bl	8005cc8 <HAL_TIM_IC_CaptureCallback>
 80090a4:	e005      	b.n	80090b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fa7c 	bl	80095a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fa82 	bl	80095b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	f003 0304 	and.w	r3, r3, #4
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	d122      	bne.n	800910c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	d11b      	bne.n	800910c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f06f 0204 	mvn.w	r2, #4
 80090dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2202      	movs	r2, #2
 80090e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7fc fde8 	bl	8005cc8 <HAL_TIM_IC_CaptureCallback>
 80090f8:	e005      	b.n	8009106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa52 	bl	80095a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fa58 	bl	80095b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	f003 0308 	and.w	r3, r3, #8
 8009116:	2b08      	cmp	r3, #8
 8009118:	d122      	bne.n	8009160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	f003 0308 	and.w	r3, r3, #8
 8009124:	2b08      	cmp	r3, #8
 8009126:	d11b      	bne.n	8009160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f06f 0208 	mvn.w	r2, #8
 8009130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2204      	movs	r2, #4
 8009136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	f003 0303 	and.w	r3, r3, #3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7fc fdbe 	bl	8005cc8 <HAL_TIM_IC_CaptureCallback>
 800914c:	e005      	b.n	800915a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fa28 	bl	80095a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fa2e 	bl	80095b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f003 0310 	and.w	r3, r3, #16
 800916a:	2b10      	cmp	r3, #16
 800916c:	d122      	bne.n	80091b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b10      	cmp	r3, #16
 800917a:	d11b      	bne.n	80091b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f06f 0210 	mvn.w	r2, #16
 8009184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2208      	movs	r2, #8
 800918a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7fc fd94 	bl	8005cc8 <HAL_TIM_IC_CaptureCallback>
 80091a0:	e005      	b.n	80091ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f9fe 	bl	80095a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fa04 	bl	80095b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d10e      	bne.n	80091e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d107      	bne.n	80091e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f06f 0201 	mvn.w	r2, #1
 80091d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7fb fb19 	bl	8004812 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ea:	2b80      	cmp	r3, #128	; 0x80
 80091ec:	d10e      	bne.n	800920c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f8:	2b80      	cmp	r3, #128	; 0x80
 80091fa:	d107      	bne.n	800920c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fc79 	bl	8009afe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009216:	2b40      	cmp	r3, #64	; 0x40
 8009218:	d10e      	bne.n	8009238 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009224:	2b40      	cmp	r3, #64	; 0x40
 8009226:	d107      	bne.n	8009238 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f9c8 	bl	80095c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	f003 0320 	and.w	r3, r3, #32
 8009242:	2b20      	cmp	r3, #32
 8009244:	d10e      	bne.n	8009264 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	f003 0320 	and.w	r3, r3, #32
 8009250:	2b20      	cmp	r3, #32
 8009252:	d107      	bne.n	8009264 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f06f 0220 	mvn.w	r2, #32
 800925c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fc44 	bl	8009aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009264:	bf00      	nop
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009282:	2302      	movs	r3, #2
 8009284:	e082      	b.n	800938c <HAL_TIM_IC_ConfigChannel+0x120>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d11b      	bne.n	80092cc <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6818      	ldr	r0, [r3, #0]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	6819      	ldr	r1, [r3, #0]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	f000 f9fc 	bl	80096a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	699a      	ldr	r2, [r3, #24]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 020c 	bic.w	r2, r2, #12
 80092b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6999      	ldr	r1, [r3, #24]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	689a      	ldr	r2, [r3, #8]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	619a      	str	r2, [r3, #24]
 80092ca:	e05a      	b.n	8009382 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	d11c      	bne.n	800930c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6818      	ldr	r0, [r3, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	6819      	ldr	r1, [r3, #0]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	f000 fa65 	bl	80097b0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	699a      	ldr	r2, [r3, #24]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80092f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6999      	ldr	r1, [r3, #24]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	021a      	lsls	r2, r3, #8
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	619a      	str	r2, [r3, #24]
 800930a:	e03a      	b.n	8009382 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b08      	cmp	r3, #8
 8009310:	d11b      	bne.n	800934a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6819      	ldr	r1, [r3, #0]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f000 fab0 	bl	8009886 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69da      	ldr	r2, [r3, #28]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f022 020c 	bic.w	r2, r2, #12
 8009334:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69d9      	ldr	r1, [r3, #28]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	61da      	str	r2, [r3, #28]
 8009348:	e01b      	b.n	8009382 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	6819      	ldr	r1, [r3, #0]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f000 facf 	bl	80098fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69da      	ldr	r2, [r3, #28]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800936c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	69d9      	ldr	r1, [r3, #28]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	021a      	lsls	r2, r3, #8
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d101      	bne.n	80093ac <HAL_TIM_ConfigClockSource+0x18>
 80093a8:	2302      	movs	r3, #2
 80093aa:	e0b3      	b.n	8009514 <HAL_TIM_ConfigClockSource+0x180>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2202      	movs	r2, #2
 80093b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80093ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093e4:	d03e      	beq.n	8009464 <HAL_TIM_ConfigClockSource+0xd0>
 80093e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ea:	f200 8087 	bhi.w	80094fc <HAL_TIM_ConfigClockSource+0x168>
 80093ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f2:	f000 8085 	beq.w	8009500 <HAL_TIM_ConfigClockSource+0x16c>
 80093f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093fa:	d87f      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x168>
 80093fc:	2b70      	cmp	r3, #112	; 0x70
 80093fe:	d01a      	beq.n	8009436 <HAL_TIM_ConfigClockSource+0xa2>
 8009400:	2b70      	cmp	r3, #112	; 0x70
 8009402:	d87b      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x168>
 8009404:	2b60      	cmp	r3, #96	; 0x60
 8009406:	d050      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x116>
 8009408:	2b60      	cmp	r3, #96	; 0x60
 800940a:	d877      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x168>
 800940c:	2b50      	cmp	r3, #80	; 0x50
 800940e:	d03c      	beq.n	800948a <HAL_TIM_ConfigClockSource+0xf6>
 8009410:	2b50      	cmp	r3, #80	; 0x50
 8009412:	d873      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x168>
 8009414:	2b40      	cmp	r3, #64	; 0x40
 8009416:	d058      	beq.n	80094ca <HAL_TIM_ConfigClockSource+0x136>
 8009418:	2b40      	cmp	r3, #64	; 0x40
 800941a:	d86f      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x168>
 800941c:	2b30      	cmp	r3, #48	; 0x30
 800941e:	d064      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x156>
 8009420:	2b30      	cmp	r3, #48	; 0x30
 8009422:	d86b      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x168>
 8009424:	2b20      	cmp	r3, #32
 8009426:	d060      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x156>
 8009428:	2b20      	cmp	r3, #32
 800942a:	d867      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x168>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d05c      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x156>
 8009430:	2b10      	cmp	r3, #16
 8009432:	d05a      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009434:	e062      	b.n	80094fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	6899      	ldr	r1, [r3, #8]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f000 faaf 	bl	80099a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009458:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	609a      	str	r2, [r3, #8]
      break;
 8009462:	e04e      	b.n	8009502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6818      	ldr	r0, [r3, #0]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	6899      	ldr	r1, [r3, #8]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f000 fa98 	bl	80099a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	689a      	ldr	r2, [r3, #8]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009486:	609a      	str	r2, [r3, #8]
      break;
 8009488:	e03b      	b.n	8009502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6859      	ldr	r1, [r3, #4]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	461a      	mov	r2, r3
 8009498:	f000 f95c 	bl	8009754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2150      	movs	r1, #80	; 0x50
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fa66 	bl	8009974 <TIM_ITRx_SetConfig>
      break;
 80094a8:	e02b      	b.n	8009502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	6859      	ldr	r1, [r3, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	461a      	mov	r2, r3
 80094b8:	f000 f9b6 	bl	8009828 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2160      	movs	r1, #96	; 0x60
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 fa56 	bl	8009974 <TIM_ITRx_SetConfig>
      break;
 80094c8:	e01b      	b.n	8009502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6818      	ldr	r0, [r3, #0]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	6859      	ldr	r1, [r3, #4]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	461a      	mov	r2, r3
 80094d8:	f000 f93c 	bl	8009754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2140      	movs	r1, #64	; 0x40
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 fa46 	bl	8009974 <TIM_ITRx_SetConfig>
      break;
 80094e8:	e00b      	b.n	8009502 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4619      	mov	r1, r3
 80094f4:	4610      	mov	r0, r2
 80094f6:	f000 fa3d 	bl	8009974 <TIM_ITRx_SetConfig>
        break;
 80094fa:	e002      	b.n	8009502 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80094fc:	bf00      	nop
 80094fe:	e000      	b.n	8009502 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009500:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2b0c      	cmp	r3, #12
 800952e:	d831      	bhi.n	8009594 <HAL_TIM_ReadCapturedValue+0x78>
 8009530:	a201      	add	r2, pc, #4	; (adr r2, 8009538 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009536:	bf00      	nop
 8009538:	0800956d 	.word	0x0800956d
 800953c:	08009595 	.word	0x08009595
 8009540:	08009595 	.word	0x08009595
 8009544:	08009595 	.word	0x08009595
 8009548:	08009577 	.word	0x08009577
 800954c:	08009595 	.word	0x08009595
 8009550:	08009595 	.word	0x08009595
 8009554:	08009595 	.word	0x08009595
 8009558:	08009581 	.word	0x08009581
 800955c:	08009595 	.word	0x08009595
 8009560:	08009595 	.word	0x08009595
 8009564:	08009595 	.word	0x08009595
 8009568:	0800958b 	.word	0x0800958b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009572:	60fb      	str	r3, [r7, #12]

      break;
 8009574:	e00f      	b.n	8009596 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957c:	60fb      	str	r3, [r7, #12]

      break;
 800957e:	e00a      	b.n	8009596 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009586:	60fb      	str	r3, [r7, #12]

      break;
 8009588:	e005      	b.n	8009596 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009590:	60fb      	str	r3, [r7, #12]

      break;
 8009592:	e000      	b.n	8009596 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009594:	bf00      	nop
  }

  return tmpreg;
 8009596:	68fb      	ldr	r3, [r7, #12]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	bc80      	pop	{r7}
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop

080095a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bc80      	pop	{r7}
 80095b4:	4770      	bx	lr

080095b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bc80      	pop	{r7}
 80095c6:	4770      	bx	lr

080095c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bc80      	pop	{r7}
 80095d8:	4770      	bx	lr
	...

080095dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a29      	ldr	r2, [pc, #164]	; (8009694 <TIM_Base_SetConfig+0xb8>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d00b      	beq.n	800960c <TIM_Base_SetConfig+0x30>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095fa:	d007      	beq.n	800960c <TIM_Base_SetConfig+0x30>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a26      	ldr	r2, [pc, #152]	; (8009698 <TIM_Base_SetConfig+0xbc>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d003      	beq.n	800960c <TIM_Base_SetConfig+0x30>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a25      	ldr	r2, [pc, #148]	; (800969c <TIM_Base_SetConfig+0xc0>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d108      	bne.n	800961e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	4313      	orrs	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a1c      	ldr	r2, [pc, #112]	; (8009694 <TIM_Base_SetConfig+0xb8>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d00b      	beq.n	800963e <TIM_Base_SetConfig+0x62>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800962c:	d007      	beq.n	800963e <TIM_Base_SetConfig+0x62>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a19      	ldr	r2, [pc, #100]	; (8009698 <TIM_Base_SetConfig+0xbc>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <TIM_Base_SetConfig+0x62>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a18      	ldr	r2, [pc, #96]	; (800969c <TIM_Base_SetConfig+0xc0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d108      	bne.n	8009650 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	4313      	orrs	r3, r2
 800965c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a07      	ldr	r2, [pc, #28]	; (8009694 <TIM_Base_SetConfig+0xb8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d103      	bne.n	8009684 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	691a      	ldr	r2, [r3, #16]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	615a      	str	r2, [r3, #20]
}
 800968a:	bf00      	nop
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	bc80      	pop	{r7}
 8009692:	4770      	bx	lr
 8009694:	40012c00 	.word	0x40012c00
 8009698:	40000400 	.word	0x40000400
 800969c:	40000800 	.word	0x40000800

080096a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	f023 0201 	bic.w	r2, r3, #1
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <TIM_TI1_SetConfig+0xa8>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d00b      	beq.n	80096e6 <TIM_TI1_SetConfig+0x46>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096d4:	d007      	beq.n	80096e6 <TIM_TI1_SetConfig+0x46>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	4a1c      	ldr	r2, [pc, #112]	; (800974c <TIM_TI1_SetConfig+0xac>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d003      	beq.n	80096e6 <TIM_TI1_SetConfig+0x46>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4a1b      	ldr	r2, [pc, #108]	; (8009750 <TIM_TI1_SetConfig+0xb0>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d101      	bne.n	80096ea <TIM_TI1_SetConfig+0x4a>
 80096e6:	2301      	movs	r3, #1
 80096e8:	e000      	b.n	80096ec <TIM_TI1_SetConfig+0x4c>
 80096ea:	2300      	movs	r3, #0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d008      	beq.n	8009702 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f023 0303 	bic.w	r3, r3, #3
 80096f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	e003      	b.n	800970a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f043 0301 	orr.w	r3, r3, #1
 8009708:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	b2db      	uxtb	r3, r3
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	4313      	orrs	r3, r2
 800971c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f023 030a 	bic.w	r3, r3, #10
 8009724:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	f003 030a 	and.w	r3, r3, #10
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	4313      	orrs	r3, r2
 8009730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	621a      	str	r2, [r3, #32]
}
 800973e:	bf00      	nop
 8009740:	371c      	adds	r7, #28
 8009742:	46bd      	mov	sp, r7
 8009744:	bc80      	pop	{r7}
 8009746:	4770      	bx	lr
 8009748:	40012c00 	.word	0x40012c00
 800974c:	40000400 	.word	0x40000400
 8009750:	40000800 	.word	0x40000800

08009754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6a1b      	ldr	r3, [r3, #32]
 8009764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	f023 0201 	bic.w	r2, r3, #1
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800977e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	4313      	orrs	r3, r2
 8009788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f023 030a 	bic.w	r3, r3, #10
 8009790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	4313      	orrs	r3, r2
 8009798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	621a      	str	r2, [r3, #32]
}
 80097a6:	bf00      	nop
 80097a8:	371c      	adds	r7, #28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bc80      	pop	{r7}
 80097ae:	4770      	bx	lr

080097b0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	f023 0210 	bic.w	r2, r3, #16
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	021b      	lsls	r3, r3, #8
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	031b      	lsls	r3, r3, #12
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009802:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	011b      	lsls	r3, r3, #4
 8009808:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	4313      	orrs	r3, r2
 8009810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	621a      	str	r2, [r3, #32]
}
 800981e:	bf00      	nop
 8009820:	371c      	adds	r7, #28
 8009822:	46bd      	mov	sp, r7
 8009824:	bc80      	pop	{r7}
 8009826:	4770      	bx	lr

08009828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009828:	b480      	push	{r7}
 800982a:	b087      	sub	sp, #28
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	f023 0210 	bic.w	r2, r3, #16
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009852:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	031b      	lsls	r3, r3, #12
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	4313      	orrs	r3, r2
 800985c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009864:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	011b      	lsls	r3, r3, #4
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	4313      	orrs	r3, r2
 800986e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	621a      	str	r2, [r3, #32]
}
 800987c:	bf00      	nop
 800987e:	371c      	adds	r7, #28
 8009880:	46bd      	mov	sp, r7
 8009882:	bc80      	pop	{r7}
 8009884:	4770      	bx	lr

08009886 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009886:	b480      	push	{r7}
 8009888:	b087      	sub	sp, #28
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	607a      	str	r2, [r7, #4]
 8009892:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	f023 0303 	bic.w	r3, r3, #3
 80098b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	011b      	lsls	r3, r3, #4
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	021b      	lsls	r3, r3, #8
 80098dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	621a      	str	r2, [r3, #32]
}
 80098f2:	bf00      	nop
 80098f4:	371c      	adds	r7, #28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bc80      	pop	{r7}
 80098fa:	4770      	bx	lr

080098fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6a1b      	ldr	r3, [r3, #32]
 8009920:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009928:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	021b      	lsls	r3, r3, #8
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	4313      	orrs	r3, r2
 8009932:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800993a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	031b      	lsls	r3, r3, #12
 8009940:	b29b      	uxth	r3, r3
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	4313      	orrs	r3, r2
 8009946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800994e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	031b      	lsls	r3, r3, #12
 8009954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	4313      	orrs	r3, r2
 800995c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	621a      	str	r2, [r3, #32]
}
 800996a:	bf00      	nop
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	bc80      	pop	{r7}
 8009972:	4770      	bx	lr

08009974 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800998a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4313      	orrs	r3, r2
 8009992:	f043 0307 	orr.w	r3, r3, #7
 8009996:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	609a      	str	r2, [r3, #8]
}
 800999e:	bf00      	nop
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bc80      	pop	{r7}
 80099a6:	4770      	bx	lr

080099a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	021a      	lsls	r2, r3, #8
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	431a      	orrs	r2, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	609a      	str	r2, [r3, #8]
}
 80099dc:	bf00      	nop
 80099de:	371c      	adds	r7, #28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bc80      	pop	{r7}
 80099e4:	4770      	bx	lr

080099e6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b087      	sub	sp, #28
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	60b9      	str	r1, [r7, #8]
 80099f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	f003 031f 	and.w	r3, r3, #31
 80099f8:	2201      	movs	r2, #1
 80099fa:	fa02 f303 	lsl.w	r3, r2, r3
 80099fe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6a1a      	ldr	r2, [r3, #32]
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	43db      	mvns	r3, r3
 8009a08:	401a      	ands	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6a1a      	ldr	r2, [r3, #32]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f003 031f 	and.w	r3, r3, #31
 8009a18:	6879      	ldr	r1, [r7, #4]
 8009a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a1e:	431a      	orrs	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	621a      	str	r2, [r3, #32]
}
 8009a24:	bf00      	nop
 8009a26:	371c      	adds	r7, #28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bc80      	pop	{r7}
 8009a2c:	4770      	bx	lr
	...

08009a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d101      	bne.n	8009a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a44:	2302      	movs	r3, #2
 8009a46:	e046      	b.n	8009ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a16      	ldr	r2, [pc, #88]	; (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d00e      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a94:	d009      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a12      	ldr	r2, [pc, #72]	; (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d004      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a10      	ldr	r2, [pc, #64]	; (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d10c      	bne.n	8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bc80      	pop	{r7}
 8009ade:	4770      	bx	lr
 8009ae0:	40012c00 	.word	0x40012c00
 8009ae4:	40000400 	.word	0x40000400
 8009ae8:	40000800 	.word	0x40000800

08009aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bc80      	pop	{r7}
 8009afc:	4770      	bx	lr

08009afe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b06:	bf00      	nop
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bc80      	pop	{r7}
 8009b0e:	4770      	bx	lr

08009b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e03f      	b.n	8009ba2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d106      	bne.n	8009b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7fb fc42 	bl	80053c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2224      	movs	r2, #36	; 0x24
 8009b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fbe5 	bl	800a324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	691a      	ldr	r2, [r3, #16]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	695a      	ldr	r2, [r3, #20]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68da      	ldr	r2, [r3, #12]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2220      	movs	r2, #32
 8009b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b085      	sub	sp, #20
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	60b9      	str	r1, [r7, #8]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b20      	cmp	r3, #32
 8009bc2:	d130      	bne.n	8009c26 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <HAL_UART_Transmit_IT+0x26>
 8009bca:	88fb      	ldrh	r3, [r7, #6]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e029      	b.n	8009c28 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d101      	bne.n	8009be2 <HAL_UART_Transmit_IT+0x38>
 8009bde:	2302      	movs	r3, #2
 8009be0:	e022      	b.n	8009c28 <HAL_UART_Transmit_IT+0x7e>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	88fa      	ldrh	r2, [r7, #6]
 8009bf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	88fa      	ldrh	r2, [r7, #6]
 8009bfa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2221      	movs	r2, #33	; 0x21
 8009c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68da      	ldr	r2, [r3, #12]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c20:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	e000      	b.n	8009c28 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009c26:	2302      	movs	r3, #2
  }
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bc80      	pop	{r7}
 8009c30:	4770      	bx	lr

08009c32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b20      	cmp	r3, #32
 8009c4a:	d11d      	bne.n	8009c88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <HAL_UART_Receive_IT+0x26>
 8009c52:	88fb      	ldrh	r3, [r7, #6]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e016      	b.n	8009c8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d101      	bne.n	8009c6a <HAL_UART_Receive_IT+0x38>
 8009c66:	2302      	movs	r3, #2
 8009c68:	e00f      	b.n	8009c8a <HAL_UART_Receive_IT+0x58>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009c78:	88fb      	ldrh	r3, [r7, #6]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	68b9      	ldr	r1, [r7, #8]
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 f9c6 	bl	800a010 <UART_Start_Receive_IT>
 8009c84:	4603      	mov	r3, r0
 8009c86:	e000      	b.n	8009c8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009c88:	2302      	movs	r3, #2
  }
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08a      	sub	sp, #40	; 0x28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	f003 030f 	and.w	r3, r3, #15
 8009cc2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10d      	bne.n	8009ce6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	f003 0320 	and.w	r3, r3, #32
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d008      	beq.n	8009ce6 <HAL_UART_IRQHandler+0x52>
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	f003 0320 	and.w	r3, r3, #32
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fa76 	bl	800a1d0 <UART_Receive_IT>
      return;
 8009ce4:	e17b      	b.n	8009fde <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 80b1 	beq.w	8009e50 <HAL_UART_IRQHandler+0x1bc>
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d105      	bne.n	8009d04 <HAL_UART_IRQHandler+0x70>
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 80a6 	beq.w	8009e50 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <HAL_UART_IRQHandler+0x90>
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d005      	beq.n	8009d24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1c:	f043 0201 	orr.w	r2, r3, #1
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00a      	beq.n	8009d44 <HAL_UART_IRQHandler+0xb0>
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d005      	beq.n	8009d44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3c:	f043 0202 	orr.w	r2, r3, #2
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	f003 0302 	and.w	r3, r3, #2
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00a      	beq.n	8009d64 <HAL_UART_IRQHandler+0xd0>
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d005      	beq.n	8009d64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5c:	f043 0204 	orr.w	r2, r3, #4
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00f      	beq.n	8009d8e <HAL_UART_IRQHandler+0xfa>
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	f003 0320 	and.w	r3, r3, #32
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d104      	bne.n	8009d82 <HAL_UART_IRQHandler+0xee>
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	f003 0301 	and.w	r3, r3, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d005      	beq.n	8009d8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d86:	f043 0208 	orr.w	r2, r3, #8
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 811e 	beq.w	8009fd4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9a:	f003 0320 	and.w	r3, r3, #32
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d007      	beq.n	8009db2 <HAL_UART_IRQHandler+0x11e>
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	f003 0320 	and.w	r3, r3, #32
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fa0f 	bl	800a1d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	bf14      	ite	ne
 8009dc0:	2301      	movne	r3, #1
 8009dc2:	2300      	moveq	r3, #0
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dcc:	f003 0308 	and.w	r3, r3, #8
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d102      	bne.n	8009dda <HAL_UART_IRQHandler+0x146>
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d031      	beq.n	8009e3e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f951 	bl	800a082 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d023      	beq.n	8009e36 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695a      	ldr	r2, [r3, #20]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dfc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d013      	beq.n	8009e2e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0a:	4a76      	ldr	r2, [pc, #472]	; (8009fe4 <HAL_UART_IRQHandler+0x350>)
 8009e0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fd f916 	bl	8007044 <HAL_DMA_Abort_IT>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d016      	beq.n	8009e4c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e2c:	e00e      	b.n	8009e4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f8da 	bl	8009fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e34:	e00a      	b.n	8009e4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f8d6 	bl	8009fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e3c:	e006      	b.n	8009e4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f8d2 	bl	8009fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009e4a:	e0c3      	b.n	8009fd4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e4c:	bf00      	nop
    return;
 8009e4e:	e0c1      	b.n	8009fd4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	f040 80a1 	bne.w	8009f9c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	f003 0310 	and.w	r3, r3, #16
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 809b 	beq.w	8009f9c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	f003 0310 	and.w	r3, r3, #16
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 8095 	beq.w	8009f9c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e72:	2300      	movs	r3, #0
 8009e74:	60fb      	str	r3, [r7, #12]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	60fb      	str	r3, [r7, #12]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	60fb      	str	r3, [r7, #12]
 8009e86:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d04e      	beq.n	8009f34 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009ea0:	8a3b      	ldrh	r3, [r7, #16]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 8098 	beq.w	8009fd8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009eac:	8a3a      	ldrh	r2, [r7, #16]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	f080 8092 	bcs.w	8009fd8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	8a3a      	ldrh	r2, [r7, #16]
 8009eb8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	2b20      	cmp	r3, #32
 8009ec2:	d02b      	beq.n	8009f1c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68da      	ldr	r2, [r3, #12]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ed2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	695a      	ldr	r2, [r3, #20]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f022 0201 	bic.w	r2, r2, #1
 8009ee2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	695a      	ldr	r2, [r3, #20]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ef2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68da      	ldr	r2, [r3, #12]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f022 0210 	bic.w	r2, r2, #16
 8009f10:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fd f859 	bl	8006fce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f864 	bl	8009ffa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009f32:	e051      	b.n	8009fd8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d047      	beq.n	8009fdc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009f4c:	8a7b      	ldrh	r3, [r7, #18]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d044      	beq.n	8009fdc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68da      	ldr	r2, [r3, #12]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009f60:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	695a      	ldr	r2, [r3, #20]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f022 0201 	bic.w	r2, r2, #1
 8009f70:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2220      	movs	r2, #32
 8009f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68da      	ldr	r2, [r3, #12]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f022 0210 	bic.w	r2, r2, #16
 8009f8e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f90:	8a7b      	ldrh	r3, [r7, #18]
 8009f92:	4619      	mov	r1, r3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f830 	bl	8009ffa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009f9a:	e01f      	b.n	8009fdc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d008      	beq.n	8009fb8 <HAL_UART_IRQHandler+0x324>
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d003      	beq.n	8009fb8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f8a6 	bl	800a102 <UART_Transmit_IT>
    return;
 8009fb6:	e012      	b.n	8009fde <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00d      	beq.n	8009fde <HAL_UART_IRQHandler+0x34a>
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d008      	beq.n	8009fde <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f8e7 	bl	800a1a0 <UART_EndTransmit_IT>
    return;
 8009fd2:	e004      	b.n	8009fde <HAL_UART_IRQHandler+0x34a>
    return;
 8009fd4:	bf00      	nop
 8009fd6:	e002      	b.n	8009fde <HAL_UART_IRQHandler+0x34a>
      return;
 8009fd8:	bf00      	nop
 8009fda:	e000      	b.n	8009fde <HAL_UART_IRQHandler+0x34a>
      return;
 8009fdc:	bf00      	nop
  }
}
 8009fde:	3728      	adds	r7, #40	; 0x28
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	0800a0db 	.word	0x0800a0db

08009fe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bc80      	pop	{r7}
 8009ff8:	4770      	bx	lr

08009ffa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b083      	sub	sp, #12
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	460b      	mov	r3, r1
 800a004:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a006:	bf00      	nop
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bc80      	pop	{r7}
 800a00e:	4770      	bx	lr

0800a010 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	4613      	mov	r3, r2
 800a01c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	88fa      	ldrh	r2, [r7, #6]
 800a028:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	88fa      	ldrh	r2, [r7, #6]
 800a02e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2222      	movs	r2, #34	; 0x22
 800a03a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68da      	ldr	r2, [r3, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a054:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	695a      	ldr	r2, [r3, #20]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f042 0201 	orr.w	r2, r2, #1
 800a064:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68da      	ldr	r2, [r3, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f042 0220 	orr.w	r2, r2, #32
 800a074:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bc80      	pop	{r7}
 800a080:	4770      	bx	lr

0800a082 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a082:	b480      	push	{r7}
 800a084:	b083      	sub	sp, #12
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68da      	ldr	r2, [r3, #12]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a098:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	695a      	ldr	r2, [r3, #20]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f022 0201 	bic.w	r2, r2, #1
 800a0a8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d107      	bne.n	800a0c2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68da      	ldr	r2, [r3, #12]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0210 	bic.w	r2, r2, #16
 800a0c0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bc80      	pop	{r7}
 800a0d8:	4770      	bx	lr

0800a0da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7ff ff77 	bl	8009fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0fa:	bf00      	nop
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a102:	b480      	push	{r7}
 800a104:	b085      	sub	sp, #20
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b21      	cmp	r3, #33	; 0x21
 800a114:	d13e      	bne.n	800a194 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a11e:	d114      	bne.n	800a14a <UART_Transmit_IT+0x48>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d110      	bne.n	800a14a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a13c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	1c9a      	adds	r2, r3, #2
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	621a      	str	r2, [r3, #32]
 800a148:	e008      	b.n	800a15c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	1c59      	adds	r1, r3, #1
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	6211      	str	r1, [r2, #32]
 800a154:	781a      	ldrb	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a160:	b29b      	uxth	r3, r3
 800a162:	3b01      	subs	r3, #1
 800a164:	b29b      	uxth	r3, r3
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	4619      	mov	r1, r3
 800a16a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10f      	bne.n	800a190 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68da      	ldr	r2, [r3, #12]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a17e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a18e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	e000      	b.n	800a196 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a194:	2302      	movs	r3, #2
  }
}
 800a196:	4618      	mov	r0, r3
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bc80      	pop	{r7}
 800a19e:	4770      	bx	lr

0800a1a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68da      	ldr	r2, [r3, #12]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7fa fb1d 	bl	8004800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	2b22      	cmp	r3, #34	; 0x22
 800a1e2:	f040 8099 	bne.w	800a318 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ee:	d117      	bne.n	800a220 <UART_Receive_IT+0x50>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d113      	bne.n	800a220 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a200:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	b29b      	uxth	r3, r3
 800a20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a20e:	b29a      	uxth	r2, r3
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	1c9a      	adds	r2, r3, #2
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	629a      	str	r2, [r3, #40]	; 0x28
 800a21e:	e026      	b.n	800a26e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a224:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a232:	d007      	beq.n	800a244 <UART_Receive_IT+0x74>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10a      	bne.n	800a252 <UART_Receive_IT+0x82>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d106      	bne.n	800a252 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	701a      	strb	r2, [r3, #0]
 800a250:	e008      	b.n	800a264 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a272:	b29b      	uxth	r3, r3
 800a274:	3b01      	subs	r3, #1
 800a276:	b29b      	uxth	r3, r3
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	4619      	mov	r1, r3
 800a27c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d148      	bne.n	800a314 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68da      	ldr	r2, [r3, #12]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f022 0220 	bic.w	r2, r2, #32
 800a290:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68da      	ldr	r2, [r3, #12]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	695a      	ldr	r2, [r3, #20]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f022 0201 	bic.w	r2, r2, #1
 800a2b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d123      	bne.n	800a30a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68da      	ldr	r2, [r3, #12]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f022 0210 	bic.w	r2, r2, #16
 800a2d6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0310 	and.w	r3, r3, #16
 800a2e2:	2b10      	cmp	r3, #16
 800a2e4:	d10a      	bne.n	800a2fc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60fb      	str	r3, [r7, #12]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	60fb      	str	r3, [r7, #12]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	60fb      	str	r3, [r7, #12]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a300:	4619      	mov	r1, r3
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f7ff fe79 	bl	8009ffa <HAL_UARTEx_RxEventCallback>
 800a308:	e002      	b.n	800a310 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7fa fa64 	bl	80047d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	e002      	b.n	800a31a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	e000      	b.n	800a31a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a318:	2302      	movs	r3, #2
  }
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68da      	ldr	r2, [r3, #12]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	431a      	orrs	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	4313      	orrs	r3, r2
 800a352:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a35e:	f023 030c 	bic.w	r3, r3, #12
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	6812      	ldr	r2, [r2, #0]
 800a366:	68b9      	ldr	r1, [r7, #8]
 800a368:	430b      	orrs	r3, r1
 800a36a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	699a      	ldr	r2, [r3, #24]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a2c      	ldr	r2, [pc, #176]	; (800a438 <UART_SetConfig+0x114>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d103      	bne.n	800a394 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a38c:	f7fd fc84 	bl	8007c98 <HAL_RCC_GetPCLK2Freq>
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	e002      	b.n	800a39a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a394:	f7fd fc6c 	bl	8007c70 <HAL_RCC_GetPCLK1Freq>
 800a398:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4613      	mov	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	009a      	lsls	r2, r3, #2
 800a3a4:	441a      	add	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b0:	4a22      	ldr	r2, [pc, #136]	; (800a43c <UART_SetConfig+0x118>)
 800a3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b6:	095b      	lsrs	r3, r3, #5
 800a3b8:	0119      	lsls	r1, r3, #4
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	009a      	lsls	r2, r3, #2
 800a3c4:	441a      	add	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3d0:	4b1a      	ldr	r3, [pc, #104]	; (800a43c <UART_SetConfig+0x118>)
 800a3d2:	fba3 0302 	umull	r0, r3, r3, r2
 800a3d6:	095b      	lsrs	r3, r3, #5
 800a3d8:	2064      	movs	r0, #100	; 0x64
 800a3da:	fb00 f303 	mul.w	r3, r0, r3
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	011b      	lsls	r3, r3, #4
 800a3e2:	3332      	adds	r3, #50	; 0x32
 800a3e4:	4a15      	ldr	r2, [pc, #84]	; (800a43c <UART_SetConfig+0x118>)
 800a3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ea:	095b      	lsrs	r3, r3, #5
 800a3ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3f0:	4419      	add	r1, r3
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4413      	add	r3, r2
 800a3fa:	009a      	lsls	r2, r3, #2
 800a3fc:	441a      	add	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	fbb2 f2f3 	udiv	r2, r2, r3
 800a408:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <UART_SetConfig+0x118>)
 800a40a:	fba3 0302 	umull	r0, r3, r3, r2
 800a40e:	095b      	lsrs	r3, r3, #5
 800a410:	2064      	movs	r0, #100	; 0x64
 800a412:	fb00 f303 	mul.w	r3, r0, r3
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	011b      	lsls	r3, r3, #4
 800a41a:	3332      	adds	r3, #50	; 0x32
 800a41c:	4a07      	ldr	r2, [pc, #28]	; (800a43c <UART_SetConfig+0x118>)
 800a41e:	fba2 2303 	umull	r2, r3, r2, r3
 800a422:	095b      	lsrs	r3, r3, #5
 800a424:	f003 020f 	and.w	r2, r3, #15
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	440a      	add	r2, r1
 800a42e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a430:	bf00      	nop
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	40013800 	.word	0x40013800
 800a43c:	51eb851f 	.word	0x51eb851f

0800a440 <__errno>:
 800a440:	4b01      	ldr	r3, [pc, #4]	; (800a448 <__errno+0x8>)
 800a442:	6818      	ldr	r0, [r3, #0]
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	20000084 	.word	0x20000084

0800a44c <__libc_init_array>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	2600      	movs	r6, #0
 800a450:	4d0c      	ldr	r5, [pc, #48]	; (800a484 <__libc_init_array+0x38>)
 800a452:	4c0d      	ldr	r4, [pc, #52]	; (800a488 <__libc_init_array+0x3c>)
 800a454:	1b64      	subs	r4, r4, r5
 800a456:	10a4      	asrs	r4, r4, #2
 800a458:	42a6      	cmp	r6, r4
 800a45a:	d109      	bne.n	800a470 <__libc_init_array+0x24>
 800a45c:	f001 fa22 	bl	800b8a4 <_init>
 800a460:	2600      	movs	r6, #0
 800a462:	4d0a      	ldr	r5, [pc, #40]	; (800a48c <__libc_init_array+0x40>)
 800a464:	4c0a      	ldr	r4, [pc, #40]	; (800a490 <__libc_init_array+0x44>)
 800a466:	1b64      	subs	r4, r4, r5
 800a468:	10a4      	asrs	r4, r4, #2
 800a46a:	42a6      	cmp	r6, r4
 800a46c:	d105      	bne.n	800a47a <__libc_init_array+0x2e>
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
 800a470:	f855 3b04 	ldr.w	r3, [r5], #4
 800a474:	4798      	blx	r3
 800a476:	3601      	adds	r6, #1
 800a478:	e7ee      	b.n	800a458 <__libc_init_array+0xc>
 800a47a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a47e:	4798      	blx	r3
 800a480:	3601      	adds	r6, #1
 800a482:	e7f2      	b.n	800a46a <__libc_init_array+0x1e>
 800a484:	0800bc40 	.word	0x0800bc40
 800a488:	0800bc40 	.word	0x0800bc40
 800a48c:	0800bc40 	.word	0x0800bc40
 800a490:	0800bc44 	.word	0x0800bc44

0800a494 <memset>:
 800a494:	4603      	mov	r3, r0
 800a496:	4402      	add	r2, r0
 800a498:	4293      	cmp	r3, r2
 800a49a:	d100      	bne.n	800a49e <memset+0xa>
 800a49c:	4770      	bx	lr
 800a49e:	f803 1b01 	strb.w	r1, [r3], #1
 800a4a2:	e7f9      	b.n	800a498 <memset+0x4>

0800a4a4 <log10>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	460d      	mov	r5, r1
 800a4aa:	f000 f8e1 	bl	800a670 <__ieee754_log10>
 800a4ae:	4b17      	ldr	r3, [pc, #92]	; (800a50c <log10+0x68>)
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	f993 3000 	ldrsb.w	r3, [r3]
 800a4b6:	460f      	mov	r7, r1
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	d01a      	beq.n	800a4f2 <log10+0x4e>
 800a4bc:	4622      	mov	r2, r4
 800a4be:	462b      	mov	r3, r5
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	f7f6 fa9a 	bl	80009fc <__aeabi_dcmpun>
 800a4c8:	b998      	cbnz	r0, 800a4f2 <log10+0x4e>
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	f7f6 fa75 	bl	80009c0 <__aeabi_dcmple>
 800a4d6:	b160      	cbz	r0, 800a4f2 <log10+0x4e>
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2300      	movs	r3, #0
 800a4dc:	4620      	mov	r0, r4
 800a4de:	4629      	mov	r1, r5
 800a4e0:	f7f6 fa5a 	bl	8000998 <__aeabi_dcmpeq>
 800a4e4:	b140      	cbz	r0, 800a4f8 <log10+0x54>
 800a4e6:	f7ff ffab 	bl	800a440 <__errno>
 800a4ea:	2322      	movs	r3, #34	; 0x22
 800a4ec:	2600      	movs	r6, #0
 800a4ee:	4f08      	ldr	r7, [pc, #32]	; (800a510 <log10+0x6c>)
 800a4f0:	6003      	str	r3, [r0, #0]
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	4639      	mov	r1, r7
 800a4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f8:	f7ff ffa2 	bl	800a440 <__errno>
 800a4fc:	2321      	movs	r3, #33	; 0x21
 800a4fe:	6003      	str	r3, [r0, #0]
 800a500:	4804      	ldr	r0, [pc, #16]	; (800a514 <log10+0x70>)
 800a502:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a506:	f000 bf03 	b.w	800b310 <nan>
 800a50a:	bf00      	nop
 800a50c:	200000e8 	.word	0x200000e8
 800a510:	fff00000 	.word	0xfff00000
 800a514:	0800bbfc 	.word	0x0800bbfc

0800a518 <pow>:
 800a518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a51c:	461f      	mov	r7, r3
 800a51e:	4680      	mov	r8, r0
 800a520:	4689      	mov	r9, r1
 800a522:	4616      	mov	r6, r2
 800a524:	f000 f928 	bl	800a778 <__ieee754_pow>
 800a528:	4b4d      	ldr	r3, [pc, #308]	; (800a660 <pow+0x148>)
 800a52a:	4604      	mov	r4, r0
 800a52c:	f993 3000 	ldrsb.w	r3, [r3]
 800a530:	460d      	mov	r5, r1
 800a532:	3301      	adds	r3, #1
 800a534:	d015      	beq.n	800a562 <pow+0x4a>
 800a536:	4632      	mov	r2, r6
 800a538:	463b      	mov	r3, r7
 800a53a:	4630      	mov	r0, r6
 800a53c:	4639      	mov	r1, r7
 800a53e:	f7f6 fa5d 	bl	80009fc <__aeabi_dcmpun>
 800a542:	b970      	cbnz	r0, 800a562 <pow+0x4a>
 800a544:	4642      	mov	r2, r8
 800a546:	464b      	mov	r3, r9
 800a548:	4640      	mov	r0, r8
 800a54a:	4649      	mov	r1, r9
 800a54c:	f7f6 fa56 	bl	80009fc <__aeabi_dcmpun>
 800a550:	2200      	movs	r2, #0
 800a552:	2300      	movs	r3, #0
 800a554:	b148      	cbz	r0, 800a56a <pow+0x52>
 800a556:	4630      	mov	r0, r6
 800a558:	4639      	mov	r1, r7
 800a55a:	f7f6 fa1d 	bl	8000998 <__aeabi_dcmpeq>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d17b      	bne.n	800a65a <pow+0x142>
 800a562:	4620      	mov	r0, r4
 800a564:	4629      	mov	r1, r5
 800a566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56a:	4640      	mov	r0, r8
 800a56c:	4649      	mov	r1, r9
 800a56e:	f7f6 fa13 	bl	8000998 <__aeabi_dcmpeq>
 800a572:	b1e0      	cbz	r0, 800a5ae <pow+0x96>
 800a574:	2200      	movs	r2, #0
 800a576:	2300      	movs	r3, #0
 800a578:	4630      	mov	r0, r6
 800a57a:	4639      	mov	r1, r7
 800a57c:	f7f6 fa0c 	bl	8000998 <__aeabi_dcmpeq>
 800a580:	2800      	cmp	r0, #0
 800a582:	d16a      	bne.n	800a65a <pow+0x142>
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f000 febb 	bl	800b302 <finite>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d0e8      	beq.n	800a562 <pow+0x4a>
 800a590:	2200      	movs	r2, #0
 800a592:	2300      	movs	r3, #0
 800a594:	4630      	mov	r0, r6
 800a596:	4639      	mov	r1, r7
 800a598:	f7f6 fa08 	bl	80009ac <__aeabi_dcmplt>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d0e0      	beq.n	800a562 <pow+0x4a>
 800a5a0:	f7ff ff4e 	bl	800a440 <__errno>
 800a5a4:	2321      	movs	r3, #33	; 0x21
 800a5a6:	2400      	movs	r4, #0
 800a5a8:	6003      	str	r3, [r0, #0]
 800a5aa:	4d2e      	ldr	r5, [pc, #184]	; (800a664 <pow+0x14c>)
 800a5ac:	e7d9      	b.n	800a562 <pow+0x4a>
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	f000 fea6 	bl	800b302 <finite>
 800a5b6:	bba8      	cbnz	r0, 800a624 <pow+0x10c>
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	f000 fea1 	bl	800b302 <finite>
 800a5c0:	b380      	cbz	r0, 800a624 <pow+0x10c>
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	f000 fe9c 	bl	800b302 <finite>
 800a5ca:	b358      	cbz	r0, 800a624 <pow+0x10c>
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	462b      	mov	r3, r5
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	4629      	mov	r1, r5
 800a5d4:	f7f6 fa12 	bl	80009fc <__aeabi_dcmpun>
 800a5d8:	b160      	cbz	r0, 800a5f4 <pow+0xdc>
 800a5da:	f7ff ff31 	bl	800a440 <__errno>
 800a5de:	2321      	movs	r3, #33	; 0x21
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	6003      	str	r3, [r0, #0]
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	f7f6 f897 	bl	800071c <__aeabi_ddiv>
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	460d      	mov	r5, r1
 800a5f2:	e7b6      	b.n	800a562 <pow+0x4a>
 800a5f4:	f7ff ff24 	bl	800a440 <__errno>
 800a5f8:	2322      	movs	r3, #34	; 0x22
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	6003      	str	r3, [r0, #0]
 800a5fe:	4649      	mov	r1, r9
 800a600:	2300      	movs	r3, #0
 800a602:	4640      	mov	r0, r8
 800a604:	f7f6 f9d2 	bl	80009ac <__aeabi_dcmplt>
 800a608:	2400      	movs	r4, #0
 800a60a:	b148      	cbz	r0, 800a620 <pow+0x108>
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f000 fe84 	bl	800b31c <rint>
 800a614:	4632      	mov	r2, r6
 800a616:	463b      	mov	r3, r7
 800a618:	f7f6 f9be 	bl	8000998 <__aeabi_dcmpeq>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d0c4      	beq.n	800a5aa <pow+0x92>
 800a620:	4d11      	ldr	r5, [pc, #68]	; (800a668 <pow+0x150>)
 800a622:	e79e      	b.n	800a562 <pow+0x4a>
 800a624:	2200      	movs	r2, #0
 800a626:	2300      	movs	r3, #0
 800a628:	4620      	mov	r0, r4
 800a62a:	4629      	mov	r1, r5
 800a62c:	f7f6 f9b4 	bl	8000998 <__aeabi_dcmpeq>
 800a630:	2800      	cmp	r0, #0
 800a632:	d096      	beq.n	800a562 <pow+0x4a>
 800a634:	4640      	mov	r0, r8
 800a636:	4649      	mov	r1, r9
 800a638:	f000 fe63 	bl	800b302 <finite>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d090      	beq.n	800a562 <pow+0x4a>
 800a640:	4630      	mov	r0, r6
 800a642:	4639      	mov	r1, r7
 800a644:	f000 fe5d 	bl	800b302 <finite>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d08a      	beq.n	800a562 <pow+0x4a>
 800a64c:	f7ff fef8 	bl	800a440 <__errno>
 800a650:	2322      	movs	r3, #34	; 0x22
 800a652:	2400      	movs	r4, #0
 800a654:	2500      	movs	r5, #0
 800a656:	6003      	str	r3, [r0, #0]
 800a658:	e783      	b.n	800a562 <pow+0x4a>
 800a65a:	2400      	movs	r4, #0
 800a65c:	4d03      	ldr	r5, [pc, #12]	; (800a66c <pow+0x154>)
 800a65e:	e780      	b.n	800a562 <pow+0x4a>
 800a660:	200000e8 	.word	0x200000e8
 800a664:	fff00000 	.word	0xfff00000
 800a668:	7ff00000 	.word	0x7ff00000
 800a66c:	3ff00000 	.word	0x3ff00000

0800a670 <__ieee754_log10>:
 800a670:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a678:	4604      	mov	r4, r0
 800a67a:	460d      	mov	r5, r1
 800a67c:	460b      	mov	r3, r1
 800a67e:	da26      	bge.n	800a6ce <__ieee754_log10+0x5e>
 800a680:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a684:	4302      	orrs	r2, r0
 800a686:	d107      	bne.n	800a698 <__ieee754_log10+0x28>
 800a688:	2200      	movs	r2, #0
 800a68a:	2300      	movs	r3, #0
 800a68c:	2000      	movs	r0, #0
 800a68e:	4936      	ldr	r1, [pc, #216]	; (800a768 <__ieee754_log10+0xf8>)
 800a690:	f7f6 f844 	bl	800071c <__aeabi_ddiv>
 800a694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a698:	2900      	cmp	r1, #0
 800a69a:	da05      	bge.n	800a6a8 <__ieee754_log10+0x38>
 800a69c:	4602      	mov	r2, r0
 800a69e:	f7f5 fd5b 	bl	8000158 <__aeabi_dsub>
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e7f3      	b.n	800a690 <__ieee754_log10+0x20>
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	4b30      	ldr	r3, [pc, #192]	; (800a76c <__ieee754_log10+0xfc>)
 800a6ac:	f7f5 ff0c 	bl	80004c8 <__aeabi_dmul>
 800a6b0:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	492d      	ldr	r1, [pc, #180]	; (800a770 <__ieee754_log10+0x100>)
 800a6bc:	428b      	cmp	r3, r1
 800a6be:	dd08      	ble.n	800a6d2 <__ieee754_log10+0x62>
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f7f5 fd48 	bl	800015c <__adddf3>
 800a6cc:	e7e2      	b.n	800a694 <__ieee754_log10+0x24>
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	e7f3      	b.n	800a6ba <__ieee754_log10+0x4a>
 800a6d2:	1518      	asrs	r0, r3, #20
 800a6d4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800a6d8:	4410      	add	r0, r2
 800a6da:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800a6de:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800a6e2:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800a6e6:	f7f5 fe85 	bl	80003f4 <__aeabi_i2d>
 800a6ea:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800a6ee:	3303      	adds	r3, #3
 800a6f0:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	460f      	mov	r7, r1
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f000 ff20 	bl	800b540 <__ieee754_log>
 800a700:	a313      	add	r3, pc, #76	; (adr r3, 800a750 <__ieee754_log10+0xe0>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	4680      	mov	r8, r0
 800a708:	4689      	mov	r9, r1
 800a70a:	4630      	mov	r0, r6
 800a70c:	4639      	mov	r1, r7
 800a70e:	f7f5 fedb 	bl	80004c8 <__aeabi_dmul>
 800a712:	a311      	add	r3, pc, #68	; (adr r3, 800a758 <__ieee754_log10+0xe8>)
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	4604      	mov	r4, r0
 800a71a:	460d      	mov	r5, r1
 800a71c:	4640      	mov	r0, r8
 800a71e:	4649      	mov	r1, r9
 800a720:	f7f5 fed2 	bl	80004c8 <__aeabi_dmul>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4620      	mov	r0, r4
 800a72a:	4629      	mov	r1, r5
 800a72c:	f7f5 fd16 	bl	800015c <__adddf3>
 800a730:	a30b      	add	r3, pc, #44	; (adr r3, 800a760 <__ieee754_log10+0xf0>)
 800a732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a736:	4604      	mov	r4, r0
 800a738:	460d      	mov	r5, r1
 800a73a:	4630      	mov	r0, r6
 800a73c:	4639      	mov	r1, r7
 800a73e:	f7f5 fec3 	bl	80004c8 <__aeabi_dmul>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	4620      	mov	r0, r4
 800a748:	4629      	mov	r1, r5
 800a74a:	e7bd      	b.n	800a6c8 <__ieee754_log10+0x58>
 800a74c:	f3af 8000 	nop.w
 800a750:	11f12b36 	.word	0x11f12b36
 800a754:	3d59fef3 	.word	0x3d59fef3
 800a758:	1526e50e 	.word	0x1526e50e
 800a75c:	3fdbcb7b 	.word	0x3fdbcb7b
 800a760:	509f6000 	.word	0x509f6000
 800a764:	3fd34413 	.word	0x3fd34413
 800a768:	c3500000 	.word	0xc3500000
 800a76c:	43500000 	.word	0x43500000
 800a770:	7fefffff 	.word	0x7fefffff
 800a774:	00000000 	.word	0x00000000

0800a778 <__ieee754_pow>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	b093      	sub	sp, #76	; 0x4c
 800a77e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a782:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a786:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a78a:	ea55 0302 	orrs.w	r3, r5, r2
 800a78e:	4607      	mov	r7, r0
 800a790:	4688      	mov	r8, r1
 800a792:	f000 84bf 	beq.w	800b114 <__ieee754_pow+0x99c>
 800a796:	4b7e      	ldr	r3, [pc, #504]	; (800a990 <__ieee754_pow+0x218>)
 800a798:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a79c:	429c      	cmp	r4, r3
 800a79e:	4689      	mov	r9, r1
 800a7a0:	4682      	mov	sl, r0
 800a7a2:	dc09      	bgt.n	800a7b8 <__ieee754_pow+0x40>
 800a7a4:	d103      	bne.n	800a7ae <__ieee754_pow+0x36>
 800a7a6:	b978      	cbnz	r0, 800a7c8 <__ieee754_pow+0x50>
 800a7a8:	42a5      	cmp	r5, r4
 800a7aa:	dd02      	ble.n	800a7b2 <__ieee754_pow+0x3a>
 800a7ac:	e00c      	b.n	800a7c8 <__ieee754_pow+0x50>
 800a7ae:	429d      	cmp	r5, r3
 800a7b0:	dc02      	bgt.n	800a7b8 <__ieee754_pow+0x40>
 800a7b2:	429d      	cmp	r5, r3
 800a7b4:	d10e      	bne.n	800a7d4 <__ieee754_pow+0x5c>
 800a7b6:	b16a      	cbz	r2, 800a7d4 <__ieee754_pow+0x5c>
 800a7b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a7bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a7c0:	ea54 030a 	orrs.w	r3, r4, sl
 800a7c4:	f000 84a6 	beq.w	800b114 <__ieee754_pow+0x99c>
 800a7c8:	4872      	ldr	r0, [pc, #456]	; (800a994 <__ieee754_pow+0x21c>)
 800a7ca:	b013      	add	sp, #76	; 0x4c
 800a7cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	f000 bd9e 	b.w	800b310 <nan>
 800a7d4:	f1b9 0f00 	cmp.w	r9, #0
 800a7d8:	da39      	bge.n	800a84e <__ieee754_pow+0xd6>
 800a7da:	4b6f      	ldr	r3, [pc, #444]	; (800a998 <__ieee754_pow+0x220>)
 800a7dc:	429d      	cmp	r5, r3
 800a7de:	dc54      	bgt.n	800a88a <__ieee754_pow+0x112>
 800a7e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a7e4:	429d      	cmp	r5, r3
 800a7e6:	f340 84a6 	ble.w	800b136 <__ieee754_pow+0x9be>
 800a7ea:	152b      	asrs	r3, r5, #20
 800a7ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a7f0:	2b14      	cmp	r3, #20
 800a7f2:	dd0f      	ble.n	800a814 <__ieee754_pow+0x9c>
 800a7f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a7f8:	fa22 f103 	lsr.w	r1, r2, r3
 800a7fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a800:	4293      	cmp	r3, r2
 800a802:	f040 8498 	bne.w	800b136 <__ieee754_pow+0x9be>
 800a806:	f001 0101 	and.w	r1, r1, #1
 800a80a:	f1c1 0302 	rsb	r3, r1, #2
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	b182      	cbz	r2, 800a834 <__ieee754_pow+0xbc>
 800a812:	e05e      	b.n	800a8d2 <__ieee754_pow+0x15a>
 800a814:	2a00      	cmp	r2, #0
 800a816:	d15a      	bne.n	800a8ce <__ieee754_pow+0x156>
 800a818:	f1c3 0314 	rsb	r3, r3, #20
 800a81c:	fa45 f103 	asr.w	r1, r5, r3
 800a820:	fa01 f303 	lsl.w	r3, r1, r3
 800a824:	42ab      	cmp	r3, r5
 800a826:	f040 8483 	bne.w	800b130 <__ieee754_pow+0x9b8>
 800a82a:	f001 0101 	and.w	r1, r1, #1
 800a82e:	f1c1 0302 	rsb	r3, r1, #2
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	4b59      	ldr	r3, [pc, #356]	; (800a99c <__ieee754_pow+0x224>)
 800a836:	429d      	cmp	r5, r3
 800a838:	d130      	bne.n	800a89c <__ieee754_pow+0x124>
 800a83a:	2e00      	cmp	r6, #0
 800a83c:	f280 8474 	bge.w	800b128 <__ieee754_pow+0x9b0>
 800a840:	463a      	mov	r2, r7
 800a842:	4643      	mov	r3, r8
 800a844:	2000      	movs	r0, #0
 800a846:	4955      	ldr	r1, [pc, #340]	; (800a99c <__ieee754_pow+0x224>)
 800a848:	f7f5 ff68 	bl	800071c <__aeabi_ddiv>
 800a84c:	e02f      	b.n	800a8ae <__ieee754_pow+0x136>
 800a84e:	2300      	movs	r3, #0
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	2a00      	cmp	r2, #0
 800a854:	d13d      	bne.n	800a8d2 <__ieee754_pow+0x15a>
 800a856:	4b4e      	ldr	r3, [pc, #312]	; (800a990 <__ieee754_pow+0x218>)
 800a858:	429d      	cmp	r5, r3
 800a85a:	d1eb      	bne.n	800a834 <__ieee754_pow+0xbc>
 800a85c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a860:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a864:	ea53 030a 	orrs.w	r3, r3, sl
 800a868:	f000 8454 	beq.w	800b114 <__ieee754_pow+0x99c>
 800a86c:	4b4c      	ldr	r3, [pc, #304]	; (800a9a0 <__ieee754_pow+0x228>)
 800a86e:	429c      	cmp	r4, r3
 800a870:	dd0d      	ble.n	800a88e <__ieee754_pow+0x116>
 800a872:	2e00      	cmp	r6, #0
 800a874:	f280 8454 	bge.w	800b120 <__ieee754_pow+0x9a8>
 800a878:	f04f 0b00 	mov.w	fp, #0
 800a87c:	f04f 0c00 	mov.w	ip, #0
 800a880:	4658      	mov	r0, fp
 800a882:	4661      	mov	r1, ip
 800a884:	b013      	add	sp, #76	; 0x4c
 800a886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88a:	2302      	movs	r3, #2
 800a88c:	e7e0      	b.n	800a850 <__ieee754_pow+0xd8>
 800a88e:	2e00      	cmp	r6, #0
 800a890:	daf2      	bge.n	800a878 <__ieee754_pow+0x100>
 800a892:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a896:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a89a:	e7f1      	b.n	800a880 <__ieee754_pow+0x108>
 800a89c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a8a0:	d108      	bne.n	800a8b4 <__ieee754_pow+0x13c>
 800a8a2:	463a      	mov	r2, r7
 800a8a4:	4643      	mov	r3, r8
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	4641      	mov	r1, r8
 800a8aa:	f7f5 fe0d 	bl	80004c8 <__aeabi_dmul>
 800a8ae:	4683      	mov	fp, r0
 800a8b0:	468c      	mov	ip, r1
 800a8b2:	e7e5      	b.n	800a880 <__ieee754_pow+0x108>
 800a8b4:	4b3b      	ldr	r3, [pc, #236]	; (800a9a4 <__ieee754_pow+0x22c>)
 800a8b6:	429e      	cmp	r6, r3
 800a8b8:	d10b      	bne.n	800a8d2 <__ieee754_pow+0x15a>
 800a8ba:	f1b9 0f00 	cmp.w	r9, #0
 800a8be:	db08      	blt.n	800a8d2 <__ieee754_pow+0x15a>
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	4641      	mov	r1, r8
 800a8c4:	b013      	add	sp, #76	; 0x4c
 800a8c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ca:	f000 bc6b 	b.w	800b1a4 <__ieee754_sqrt>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	4641      	mov	r1, r8
 800a8d6:	f000 fd11 	bl	800b2fc <fabs>
 800a8da:	4683      	mov	fp, r0
 800a8dc:	468c      	mov	ip, r1
 800a8de:	f1ba 0f00 	cmp.w	sl, #0
 800a8e2:	d129      	bne.n	800a938 <__ieee754_pow+0x1c0>
 800a8e4:	b124      	cbz	r4, 800a8f0 <__ieee754_pow+0x178>
 800a8e6:	4b2d      	ldr	r3, [pc, #180]	; (800a99c <__ieee754_pow+0x224>)
 800a8e8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d123      	bne.n	800a938 <__ieee754_pow+0x1c0>
 800a8f0:	2e00      	cmp	r6, #0
 800a8f2:	da07      	bge.n	800a904 <__ieee754_pow+0x18c>
 800a8f4:	465a      	mov	r2, fp
 800a8f6:	4663      	mov	r3, ip
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	4928      	ldr	r1, [pc, #160]	; (800a99c <__ieee754_pow+0x224>)
 800a8fc:	f7f5 ff0e 	bl	800071c <__aeabi_ddiv>
 800a900:	4683      	mov	fp, r0
 800a902:	468c      	mov	ip, r1
 800a904:	f1b9 0f00 	cmp.w	r9, #0
 800a908:	daba      	bge.n	800a880 <__ieee754_pow+0x108>
 800a90a:	9b00      	ldr	r3, [sp, #0]
 800a90c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a910:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a914:	4323      	orrs	r3, r4
 800a916:	d108      	bne.n	800a92a <__ieee754_pow+0x1b2>
 800a918:	465a      	mov	r2, fp
 800a91a:	4663      	mov	r3, ip
 800a91c:	4658      	mov	r0, fp
 800a91e:	4661      	mov	r1, ip
 800a920:	f7f5 fc1a 	bl	8000158 <__aeabi_dsub>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	e78e      	b.n	800a848 <__ieee754_pow+0xd0>
 800a92a:	9b00      	ldr	r3, [sp, #0]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d1a7      	bne.n	800a880 <__ieee754_pow+0x108>
 800a930:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a934:	469c      	mov	ip, r3
 800a936:	e7a3      	b.n	800a880 <__ieee754_pow+0x108>
 800a938:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a93c:	3b01      	subs	r3, #1
 800a93e:	930c      	str	r3, [sp, #48]	; 0x30
 800a940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a942:	9b00      	ldr	r3, [sp, #0]
 800a944:	4313      	orrs	r3, r2
 800a946:	d104      	bne.n	800a952 <__ieee754_pow+0x1da>
 800a948:	463a      	mov	r2, r7
 800a94a:	4643      	mov	r3, r8
 800a94c:	4638      	mov	r0, r7
 800a94e:	4641      	mov	r1, r8
 800a950:	e7e6      	b.n	800a920 <__ieee754_pow+0x1a8>
 800a952:	4b15      	ldr	r3, [pc, #84]	; (800a9a8 <__ieee754_pow+0x230>)
 800a954:	429d      	cmp	r5, r3
 800a956:	f340 80f9 	ble.w	800ab4c <__ieee754_pow+0x3d4>
 800a95a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a95e:	429d      	cmp	r5, r3
 800a960:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <__ieee754_pow+0x228>)
 800a962:	dd09      	ble.n	800a978 <__ieee754_pow+0x200>
 800a964:	429c      	cmp	r4, r3
 800a966:	dc0c      	bgt.n	800a982 <__ieee754_pow+0x20a>
 800a968:	2e00      	cmp	r6, #0
 800a96a:	da85      	bge.n	800a878 <__ieee754_pow+0x100>
 800a96c:	a306      	add	r3, pc, #24	; (adr r3, 800a988 <__ieee754_pow+0x210>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	4610      	mov	r0, r2
 800a974:	4619      	mov	r1, r3
 800a976:	e798      	b.n	800a8aa <__ieee754_pow+0x132>
 800a978:	429c      	cmp	r4, r3
 800a97a:	dbf5      	blt.n	800a968 <__ieee754_pow+0x1f0>
 800a97c:	4b07      	ldr	r3, [pc, #28]	; (800a99c <__ieee754_pow+0x224>)
 800a97e:	429c      	cmp	r4, r3
 800a980:	dd14      	ble.n	800a9ac <__ieee754_pow+0x234>
 800a982:	2e00      	cmp	r6, #0
 800a984:	dcf2      	bgt.n	800a96c <__ieee754_pow+0x1f4>
 800a986:	e777      	b.n	800a878 <__ieee754_pow+0x100>
 800a988:	8800759c 	.word	0x8800759c
 800a98c:	7e37e43c 	.word	0x7e37e43c
 800a990:	7ff00000 	.word	0x7ff00000
 800a994:	0800bbfc 	.word	0x0800bbfc
 800a998:	433fffff 	.word	0x433fffff
 800a99c:	3ff00000 	.word	0x3ff00000
 800a9a0:	3fefffff 	.word	0x3fefffff
 800a9a4:	3fe00000 	.word	0x3fe00000
 800a9a8:	41e00000 	.word	0x41e00000
 800a9ac:	4661      	mov	r1, ip
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	4658      	mov	r0, fp
 800a9b2:	4b61      	ldr	r3, [pc, #388]	; (800ab38 <__ieee754_pow+0x3c0>)
 800a9b4:	f7f5 fbd0 	bl	8000158 <__aeabi_dsub>
 800a9b8:	a355      	add	r3, pc, #340	; (adr r3, 800ab10 <__ieee754_pow+0x398>)
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	4604      	mov	r4, r0
 800a9c0:	460d      	mov	r5, r1
 800a9c2:	f7f5 fd81 	bl	80004c8 <__aeabi_dmul>
 800a9c6:	a354      	add	r3, pc, #336	; (adr r3, 800ab18 <__ieee754_pow+0x3a0>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	460f      	mov	r7, r1
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	f7f5 fd78 	bl	80004c8 <__aeabi_dmul>
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4682      	mov	sl, r0
 800a9dc:	468b      	mov	fp, r1
 800a9de:	4620      	mov	r0, r4
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	4b56      	ldr	r3, [pc, #344]	; (800ab3c <__ieee754_pow+0x3c4>)
 800a9e4:	f7f5 fd70 	bl	80004c8 <__aeabi_dmul>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	a14c      	add	r1, pc, #304	; (adr r1, 800ab20 <__ieee754_pow+0x3a8>)
 800a9ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9f2:	f7f5 fbb1 	bl	8000158 <__aeabi_dsub>
 800a9f6:	4622      	mov	r2, r4
 800a9f8:	462b      	mov	r3, r5
 800a9fa:	f7f5 fd65 	bl	80004c8 <__aeabi_dmul>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	2000      	movs	r0, #0
 800aa04:	494e      	ldr	r1, [pc, #312]	; (800ab40 <__ieee754_pow+0x3c8>)
 800aa06:	f7f5 fba7 	bl	8000158 <__aeabi_dsub>
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	4680      	mov	r8, r0
 800aa10:	4689      	mov	r9, r1
 800aa12:	4620      	mov	r0, r4
 800aa14:	4629      	mov	r1, r5
 800aa16:	f7f5 fd57 	bl	80004c8 <__aeabi_dmul>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	4640      	mov	r0, r8
 800aa20:	4649      	mov	r1, r9
 800aa22:	f7f5 fd51 	bl	80004c8 <__aeabi_dmul>
 800aa26:	a340      	add	r3, pc, #256	; (adr r3, 800ab28 <__ieee754_pow+0x3b0>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	f7f5 fd4c 	bl	80004c8 <__aeabi_dmul>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4650      	mov	r0, sl
 800aa36:	4659      	mov	r1, fp
 800aa38:	f7f5 fb8e 	bl	8000158 <__aeabi_dsub>
 800aa3c:	f04f 0a00 	mov.w	sl, #0
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4604      	mov	r4, r0
 800aa46:	460d      	mov	r5, r1
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f5 fb86 	bl	800015c <__adddf3>
 800aa50:	4632      	mov	r2, r6
 800aa52:	463b      	mov	r3, r7
 800aa54:	4650      	mov	r0, sl
 800aa56:	468b      	mov	fp, r1
 800aa58:	f7f5 fb7e 	bl	8000158 <__aeabi_dsub>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	460b      	mov	r3, r1
 800aa60:	4620      	mov	r0, r4
 800aa62:	4629      	mov	r1, r5
 800aa64:	f7f5 fb78 	bl	8000158 <__aeabi_dsub>
 800aa68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa6c:	9b00      	ldr	r3, [sp, #0]
 800aa6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa70:	3b01      	subs	r3, #1
 800aa72:	4313      	orrs	r3, r2
 800aa74:	f04f 0600 	mov.w	r6, #0
 800aa78:	f04f 0200 	mov.w	r2, #0
 800aa7c:	bf0c      	ite	eq
 800aa7e:	4b31      	ldreq	r3, [pc, #196]	; (800ab44 <__ieee754_pow+0x3cc>)
 800aa80:	4b2d      	ldrne	r3, [pc, #180]	; (800ab38 <__ieee754_pow+0x3c0>)
 800aa82:	4604      	mov	r4, r0
 800aa84:	460d      	mov	r5, r1
 800aa86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa8a:	e9cd 2300 	strd	r2, r3, [sp]
 800aa8e:	4632      	mov	r2, r6
 800aa90:	463b      	mov	r3, r7
 800aa92:	f7f5 fb61 	bl	8000158 <__aeabi_dsub>
 800aa96:	4652      	mov	r2, sl
 800aa98:	465b      	mov	r3, fp
 800aa9a:	f7f5 fd15 	bl	80004c8 <__aeabi_dmul>
 800aa9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aaa2:	4680      	mov	r8, r0
 800aaa4:	4689      	mov	r9, r1
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	f7f5 fd0d 	bl	80004c8 <__aeabi_dmul>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4640      	mov	r0, r8
 800aab4:	4649      	mov	r1, r9
 800aab6:	f7f5 fb51 	bl	800015c <__adddf3>
 800aaba:	4632      	mov	r2, r6
 800aabc:	463b      	mov	r3, r7
 800aabe:	4680      	mov	r8, r0
 800aac0:	4689      	mov	r9, r1
 800aac2:	4650      	mov	r0, sl
 800aac4:	4659      	mov	r1, fp
 800aac6:	f7f5 fcff 	bl	80004c8 <__aeabi_dmul>
 800aaca:	4604      	mov	r4, r0
 800aacc:	460d      	mov	r5, r1
 800aace:	460b      	mov	r3, r1
 800aad0:	4602      	mov	r2, r0
 800aad2:	4649      	mov	r1, r9
 800aad4:	4640      	mov	r0, r8
 800aad6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aada:	f7f5 fb3f 	bl	800015c <__adddf3>
 800aade:	4b1a      	ldr	r3, [pc, #104]	; (800ab48 <__ieee754_pow+0x3d0>)
 800aae0:	4682      	mov	sl, r0
 800aae2:	4299      	cmp	r1, r3
 800aae4:	460f      	mov	r7, r1
 800aae6:	460e      	mov	r6, r1
 800aae8:	f340 82ed 	ble.w	800b0c6 <__ieee754_pow+0x94e>
 800aaec:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aaf0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aaf4:	4303      	orrs	r3, r0
 800aaf6:	f000 81e7 	beq.w	800aec8 <__ieee754_pow+0x750>
 800aafa:	a30d      	add	r3, pc, #52	; (adr r3, 800ab30 <__ieee754_pow+0x3b8>)
 800aafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab04:	f7f5 fce0 	bl	80004c8 <__aeabi_dmul>
 800ab08:	a309      	add	r3, pc, #36	; (adr r3, 800ab30 <__ieee754_pow+0x3b8>)
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	e6cc      	b.n	800a8aa <__ieee754_pow+0x132>
 800ab10:	60000000 	.word	0x60000000
 800ab14:	3ff71547 	.word	0x3ff71547
 800ab18:	f85ddf44 	.word	0xf85ddf44
 800ab1c:	3e54ae0b 	.word	0x3e54ae0b
 800ab20:	55555555 	.word	0x55555555
 800ab24:	3fd55555 	.word	0x3fd55555
 800ab28:	652b82fe 	.word	0x652b82fe
 800ab2c:	3ff71547 	.word	0x3ff71547
 800ab30:	8800759c 	.word	0x8800759c
 800ab34:	7e37e43c 	.word	0x7e37e43c
 800ab38:	3ff00000 	.word	0x3ff00000
 800ab3c:	3fd00000 	.word	0x3fd00000
 800ab40:	3fe00000 	.word	0x3fe00000
 800ab44:	bff00000 	.word	0xbff00000
 800ab48:	408fffff 	.word	0x408fffff
 800ab4c:	4bd4      	ldr	r3, [pc, #848]	; (800aea0 <__ieee754_pow+0x728>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	ea09 0303 	and.w	r3, r9, r3
 800ab54:	b943      	cbnz	r3, 800ab68 <__ieee754_pow+0x3f0>
 800ab56:	4658      	mov	r0, fp
 800ab58:	4661      	mov	r1, ip
 800ab5a:	4bd2      	ldr	r3, [pc, #840]	; (800aea4 <__ieee754_pow+0x72c>)
 800ab5c:	f7f5 fcb4 	bl	80004c8 <__aeabi_dmul>
 800ab60:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ab64:	4683      	mov	fp, r0
 800ab66:	460c      	mov	r4, r1
 800ab68:	1523      	asrs	r3, r4, #20
 800ab6a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ab6e:	4413      	add	r3, r2
 800ab70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab72:	4bcd      	ldr	r3, [pc, #820]	; (800aea8 <__ieee754_pow+0x730>)
 800ab74:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ab78:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ab7c:	429c      	cmp	r4, r3
 800ab7e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ab82:	dd08      	ble.n	800ab96 <__ieee754_pow+0x41e>
 800ab84:	4bc9      	ldr	r3, [pc, #804]	; (800aeac <__ieee754_pow+0x734>)
 800ab86:	429c      	cmp	r4, r3
 800ab88:	f340 819c 	ble.w	800aec4 <__ieee754_pow+0x74c>
 800ab8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ab92:	3301      	adds	r3, #1
 800ab94:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab96:	2600      	movs	r6, #0
 800ab98:	00f3      	lsls	r3, r6, #3
 800ab9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab9c:	4bc4      	ldr	r3, [pc, #784]	; (800aeb0 <__ieee754_pow+0x738>)
 800ab9e:	4658      	mov	r0, fp
 800aba0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aba4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aba8:	4629      	mov	r1, r5
 800abaa:	461a      	mov	r2, r3
 800abac:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800abb0:	4623      	mov	r3, r4
 800abb2:	f7f5 fad1 	bl	8000158 <__aeabi_dsub>
 800abb6:	46da      	mov	sl, fp
 800abb8:	462b      	mov	r3, r5
 800abba:	4652      	mov	r2, sl
 800abbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800abc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800abc4:	f7f5 faca 	bl	800015c <__adddf3>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	2000      	movs	r0, #0
 800abce:	49b9      	ldr	r1, [pc, #740]	; (800aeb4 <__ieee754_pow+0x73c>)
 800abd0:	f7f5 fda4 	bl	800071c <__aeabi_ddiv>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800abe0:	f7f5 fc72 	bl	80004c8 <__aeabi_dmul>
 800abe4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abe8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800abec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800abf0:	2300      	movs	r3, #0
 800abf2:	2200      	movs	r2, #0
 800abf4:	46ab      	mov	fp, r5
 800abf6:	106d      	asrs	r5, r5, #1
 800abf8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800abfc:	9304      	str	r3, [sp, #16]
 800abfe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ac02:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ac06:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ac0a:	4640      	mov	r0, r8
 800ac0c:	4649      	mov	r1, r9
 800ac0e:	4614      	mov	r4, r2
 800ac10:	461d      	mov	r5, r3
 800ac12:	f7f5 fc59 	bl	80004c8 <__aeabi_dmul>
 800ac16:	4602      	mov	r2, r0
 800ac18:	460b      	mov	r3, r1
 800ac1a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ac1e:	f7f5 fa9b 	bl	8000158 <__aeabi_dsub>
 800ac22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac26:	4606      	mov	r6, r0
 800ac28:	460f      	mov	r7, r1
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	f7f5 fa93 	bl	8000158 <__aeabi_dsub>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4650      	mov	r0, sl
 800ac38:	4659      	mov	r1, fp
 800ac3a:	f7f5 fa8d 	bl	8000158 <__aeabi_dsub>
 800ac3e:	4642      	mov	r2, r8
 800ac40:	464b      	mov	r3, r9
 800ac42:	f7f5 fc41 	bl	80004c8 <__aeabi_dmul>
 800ac46:	4602      	mov	r2, r0
 800ac48:	460b      	mov	r3, r1
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	4639      	mov	r1, r7
 800ac4e:	f7f5 fa83 	bl	8000158 <__aeabi_dsub>
 800ac52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac56:	f7f5 fc37 	bl	80004c8 <__aeabi_dmul>
 800ac5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac62:	4610      	mov	r0, r2
 800ac64:	4619      	mov	r1, r3
 800ac66:	f7f5 fc2f 	bl	80004c8 <__aeabi_dmul>
 800ac6a:	a37b      	add	r3, pc, #492	; (adr r3, 800ae58 <__ieee754_pow+0x6e0>)
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	4604      	mov	r4, r0
 800ac72:	460d      	mov	r5, r1
 800ac74:	f7f5 fc28 	bl	80004c8 <__aeabi_dmul>
 800ac78:	a379      	add	r3, pc, #484	; (adr r3, 800ae60 <__ieee754_pow+0x6e8>)
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	f7f5 fa6d 	bl	800015c <__adddf3>
 800ac82:	4622      	mov	r2, r4
 800ac84:	462b      	mov	r3, r5
 800ac86:	f7f5 fc1f 	bl	80004c8 <__aeabi_dmul>
 800ac8a:	a377      	add	r3, pc, #476	; (adr r3, 800ae68 <__ieee754_pow+0x6f0>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	f7f5 fa64 	bl	800015c <__adddf3>
 800ac94:	4622      	mov	r2, r4
 800ac96:	462b      	mov	r3, r5
 800ac98:	f7f5 fc16 	bl	80004c8 <__aeabi_dmul>
 800ac9c:	a374      	add	r3, pc, #464	; (adr r3, 800ae70 <__ieee754_pow+0x6f8>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 fa5b 	bl	800015c <__adddf3>
 800aca6:	4622      	mov	r2, r4
 800aca8:	462b      	mov	r3, r5
 800acaa:	f7f5 fc0d 	bl	80004c8 <__aeabi_dmul>
 800acae:	a372      	add	r3, pc, #456	; (adr r3, 800ae78 <__ieee754_pow+0x700>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f7f5 fa52 	bl	800015c <__adddf3>
 800acb8:	4622      	mov	r2, r4
 800acba:	462b      	mov	r3, r5
 800acbc:	f7f5 fc04 	bl	80004c8 <__aeabi_dmul>
 800acc0:	a36f      	add	r3, pc, #444	; (adr r3, 800ae80 <__ieee754_pow+0x708>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	f7f5 fa49 	bl	800015c <__adddf3>
 800acca:	4622      	mov	r2, r4
 800accc:	4606      	mov	r6, r0
 800acce:	460f      	mov	r7, r1
 800acd0:	462b      	mov	r3, r5
 800acd2:	4620      	mov	r0, r4
 800acd4:	4629      	mov	r1, r5
 800acd6:	f7f5 fbf7 	bl	80004c8 <__aeabi_dmul>
 800acda:	4602      	mov	r2, r0
 800acdc:	460b      	mov	r3, r1
 800acde:	4630      	mov	r0, r6
 800ace0:	4639      	mov	r1, r7
 800ace2:	f7f5 fbf1 	bl	80004c8 <__aeabi_dmul>
 800ace6:	4604      	mov	r4, r0
 800ace8:	460d      	mov	r5, r1
 800acea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acee:	4642      	mov	r2, r8
 800acf0:	464b      	mov	r3, r9
 800acf2:	f7f5 fa33 	bl	800015c <__adddf3>
 800acf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800acfa:	f7f5 fbe5 	bl	80004c8 <__aeabi_dmul>
 800acfe:	4622      	mov	r2, r4
 800ad00:	462b      	mov	r3, r5
 800ad02:	f7f5 fa2b 	bl	800015c <__adddf3>
 800ad06:	4642      	mov	r2, r8
 800ad08:	4606      	mov	r6, r0
 800ad0a:	460f      	mov	r7, r1
 800ad0c:	464b      	mov	r3, r9
 800ad0e:	4640      	mov	r0, r8
 800ad10:	4649      	mov	r1, r9
 800ad12:	f7f5 fbd9 	bl	80004c8 <__aeabi_dmul>
 800ad16:	2200      	movs	r2, #0
 800ad18:	4b67      	ldr	r3, [pc, #412]	; (800aeb8 <__ieee754_pow+0x740>)
 800ad1a:	4682      	mov	sl, r0
 800ad1c:	468b      	mov	fp, r1
 800ad1e:	f7f5 fa1d 	bl	800015c <__adddf3>
 800ad22:	4632      	mov	r2, r6
 800ad24:	463b      	mov	r3, r7
 800ad26:	f7f5 fa19 	bl	800015c <__adddf3>
 800ad2a:	9c04      	ldr	r4, [sp, #16]
 800ad2c:	460d      	mov	r5, r1
 800ad2e:	4622      	mov	r2, r4
 800ad30:	460b      	mov	r3, r1
 800ad32:	4640      	mov	r0, r8
 800ad34:	4649      	mov	r1, r9
 800ad36:	f7f5 fbc7 	bl	80004c8 <__aeabi_dmul>
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	4680      	mov	r8, r0
 800ad3e:	4689      	mov	r9, r1
 800ad40:	4620      	mov	r0, r4
 800ad42:	4629      	mov	r1, r5
 800ad44:	4b5c      	ldr	r3, [pc, #368]	; (800aeb8 <__ieee754_pow+0x740>)
 800ad46:	f7f5 fa07 	bl	8000158 <__aeabi_dsub>
 800ad4a:	4652      	mov	r2, sl
 800ad4c:	465b      	mov	r3, fp
 800ad4e:	f7f5 fa03 	bl	8000158 <__aeabi_dsub>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	4630      	mov	r0, r6
 800ad58:	4639      	mov	r1, r7
 800ad5a:	f7f5 f9fd 	bl	8000158 <__aeabi_dsub>
 800ad5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad62:	f7f5 fbb1 	bl	80004c8 <__aeabi_dmul>
 800ad66:	4622      	mov	r2, r4
 800ad68:	4606      	mov	r6, r0
 800ad6a:	460f      	mov	r7, r1
 800ad6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad70:	462b      	mov	r3, r5
 800ad72:	f7f5 fba9 	bl	80004c8 <__aeabi_dmul>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	4639      	mov	r1, r7
 800ad7e:	f7f5 f9ed 	bl	800015c <__adddf3>
 800ad82:	4606      	mov	r6, r0
 800ad84:	460f      	mov	r7, r1
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	4649      	mov	r1, r9
 800ad8e:	f7f5 f9e5 	bl	800015c <__adddf3>
 800ad92:	a33d      	add	r3, pc, #244	; (adr r3, 800ae88 <__ieee754_pow+0x710>)
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	9c04      	ldr	r4, [sp, #16]
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f7f5 fb93 	bl	80004c8 <__aeabi_dmul>
 800ada2:	4642      	mov	r2, r8
 800ada4:	464b      	mov	r3, r9
 800ada6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800adaa:	4620      	mov	r0, r4
 800adac:	4629      	mov	r1, r5
 800adae:	f7f5 f9d3 	bl	8000158 <__aeabi_dsub>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	4630      	mov	r0, r6
 800adb8:	4639      	mov	r1, r7
 800adba:	f7f5 f9cd 	bl	8000158 <__aeabi_dsub>
 800adbe:	a334      	add	r3, pc, #208	; (adr r3, 800ae90 <__ieee754_pow+0x718>)
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	f7f5 fb80 	bl	80004c8 <__aeabi_dmul>
 800adc8:	a333      	add	r3, pc, #204	; (adr r3, 800ae98 <__ieee754_pow+0x720>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	4606      	mov	r6, r0
 800add0:	460f      	mov	r7, r1
 800add2:	4620      	mov	r0, r4
 800add4:	4629      	mov	r1, r5
 800add6:	f7f5 fb77 	bl	80004c8 <__aeabi_dmul>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	4630      	mov	r0, r6
 800ade0:	4639      	mov	r1, r7
 800ade2:	f7f5 f9bb 	bl	800015c <__adddf3>
 800ade6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ade8:	4b34      	ldr	r3, [pc, #208]	; (800aebc <__ieee754_pow+0x744>)
 800adea:	4413      	add	r3, r2
 800adec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf0:	f7f5 f9b4 	bl	800015c <__adddf3>
 800adf4:	4680      	mov	r8, r0
 800adf6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800adf8:	4689      	mov	r9, r1
 800adfa:	f7f5 fafb 	bl	80003f4 <__aeabi_i2d>
 800adfe:	4604      	mov	r4, r0
 800ae00:	460d      	mov	r5, r1
 800ae02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae04:	4b2e      	ldr	r3, [pc, #184]	; (800aec0 <__ieee754_pow+0x748>)
 800ae06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ae10:	4642      	mov	r2, r8
 800ae12:	464b      	mov	r3, r9
 800ae14:	f7f5 f9a2 	bl	800015c <__adddf3>
 800ae18:	4632      	mov	r2, r6
 800ae1a:	463b      	mov	r3, r7
 800ae1c:	f7f5 f99e 	bl	800015c <__adddf3>
 800ae20:	4622      	mov	r2, r4
 800ae22:	462b      	mov	r3, r5
 800ae24:	f7f5 f99a 	bl	800015c <__adddf3>
 800ae28:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	462b      	mov	r3, r5
 800ae30:	4650      	mov	r0, sl
 800ae32:	468b      	mov	fp, r1
 800ae34:	f7f5 f990 	bl	8000158 <__aeabi_dsub>
 800ae38:	4632      	mov	r2, r6
 800ae3a:	463b      	mov	r3, r7
 800ae3c:	f7f5 f98c 	bl	8000158 <__aeabi_dsub>
 800ae40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae44:	f7f5 f988 	bl	8000158 <__aeabi_dsub>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4640      	mov	r0, r8
 800ae4e:	4649      	mov	r1, r9
 800ae50:	e608      	b.n	800aa64 <__ieee754_pow+0x2ec>
 800ae52:	bf00      	nop
 800ae54:	f3af 8000 	nop.w
 800ae58:	4a454eef 	.word	0x4a454eef
 800ae5c:	3fca7e28 	.word	0x3fca7e28
 800ae60:	93c9db65 	.word	0x93c9db65
 800ae64:	3fcd864a 	.word	0x3fcd864a
 800ae68:	a91d4101 	.word	0xa91d4101
 800ae6c:	3fd17460 	.word	0x3fd17460
 800ae70:	518f264d 	.word	0x518f264d
 800ae74:	3fd55555 	.word	0x3fd55555
 800ae78:	db6fabff 	.word	0xdb6fabff
 800ae7c:	3fdb6db6 	.word	0x3fdb6db6
 800ae80:	33333303 	.word	0x33333303
 800ae84:	3fe33333 	.word	0x3fe33333
 800ae88:	e0000000 	.word	0xe0000000
 800ae8c:	3feec709 	.word	0x3feec709
 800ae90:	dc3a03fd 	.word	0xdc3a03fd
 800ae94:	3feec709 	.word	0x3feec709
 800ae98:	145b01f5 	.word	0x145b01f5
 800ae9c:	be3e2fe0 	.word	0xbe3e2fe0
 800aea0:	7ff00000 	.word	0x7ff00000
 800aea4:	43400000 	.word	0x43400000
 800aea8:	0003988e 	.word	0x0003988e
 800aeac:	000bb679 	.word	0x000bb679
 800aeb0:	0800bc00 	.word	0x0800bc00
 800aeb4:	3ff00000 	.word	0x3ff00000
 800aeb8:	40080000 	.word	0x40080000
 800aebc:	0800bc20 	.word	0x0800bc20
 800aec0:	0800bc10 	.word	0x0800bc10
 800aec4:	2601      	movs	r6, #1
 800aec6:	e667      	b.n	800ab98 <__ieee754_pow+0x420>
 800aec8:	a39d      	add	r3, pc, #628	; (adr r3, 800b140 <__ieee754_pow+0x9c8>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	4640      	mov	r0, r8
 800aed0:	4649      	mov	r1, r9
 800aed2:	f7f5 f943 	bl	800015c <__adddf3>
 800aed6:	4622      	mov	r2, r4
 800aed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aedc:	462b      	mov	r3, r5
 800aede:	4650      	mov	r0, sl
 800aee0:	4639      	mov	r1, r7
 800aee2:	f7f5 f939 	bl	8000158 <__aeabi_dsub>
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aeee:	f7f5 fd7b 	bl	80009e8 <__aeabi_dcmpgt>
 800aef2:	2800      	cmp	r0, #0
 800aef4:	f47f ae01 	bne.w	800aafa <__ieee754_pow+0x382>
 800aef8:	4aa5      	ldr	r2, [pc, #660]	; (800b190 <__ieee754_pow+0xa18>)
 800aefa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800aefe:	4293      	cmp	r3, r2
 800af00:	f340 8103 	ble.w	800b10a <__ieee754_pow+0x992>
 800af04:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800af08:	2000      	movs	r0, #0
 800af0a:	151b      	asrs	r3, r3, #20
 800af0c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800af10:	fa4a f303 	asr.w	r3, sl, r3
 800af14:	4433      	add	r3, r6
 800af16:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800af1a:	4f9e      	ldr	r7, [pc, #632]	; (800b194 <__ieee754_pow+0xa1c>)
 800af1c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800af20:	4117      	asrs	r7, r2
 800af22:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800af26:	ea23 0107 	bic.w	r1, r3, r7
 800af2a:	f1c2 0214 	rsb	r2, r2, #20
 800af2e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800af32:	460b      	mov	r3, r1
 800af34:	fa4a fa02 	asr.w	sl, sl, r2
 800af38:	2e00      	cmp	r6, #0
 800af3a:	4602      	mov	r2, r0
 800af3c:	4629      	mov	r1, r5
 800af3e:	4620      	mov	r0, r4
 800af40:	bfb8      	it	lt
 800af42:	f1ca 0a00 	rsblt	sl, sl, #0
 800af46:	f7f5 f907 	bl	8000158 <__aeabi_dsub>
 800af4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af52:	2400      	movs	r4, #0
 800af54:	4642      	mov	r2, r8
 800af56:	464b      	mov	r3, r9
 800af58:	f7f5 f900 	bl	800015c <__adddf3>
 800af5c:	a37a      	add	r3, pc, #488	; (adr r3, 800b148 <__ieee754_pow+0x9d0>)
 800af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af62:	4620      	mov	r0, r4
 800af64:	460d      	mov	r5, r1
 800af66:	f7f5 faaf 	bl	80004c8 <__aeabi_dmul>
 800af6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af6e:	4606      	mov	r6, r0
 800af70:	460f      	mov	r7, r1
 800af72:	4620      	mov	r0, r4
 800af74:	4629      	mov	r1, r5
 800af76:	f7f5 f8ef 	bl	8000158 <__aeabi_dsub>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4640      	mov	r0, r8
 800af80:	4649      	mov	r1, r9
 800af82:	f7f5 f8e9 	bl	8000158 <__aeabi_dsub>
 800af86:	a372      	add	r3, pc, #456	; (adr r3, 800b150 <__ieee754_pow+0x9d8>)
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f7f5 fa9c 	bl	80004c8 <__aeabi_dmul>
 800af90:	a371      	add	r3, pc, #452	; (adr r3, 800b158 <__ieee754_pow+0x9e0>)
 800af92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af96:	4680      	mov	r8, r0
 800af98:	4689      	mov	r9, r1
 800af9a:	4620      	mov	r0, r4
 800af9c:	4629      	mov	r1, r5
 800af9e:	f7f5 fa93 	bl	80004c8 <__aeabi_dmul>
 800afa2:	4602      	mov	r2, r0
 800afa4:	460b      	mov	r3, r1
 800afa6:	4640      	mov	r0, r8
 800afa8:	4649      	mov	r1, r9
 800afaa:	f7f5 f8d7 	bl	800015c <__adddf3>
 800afae:	4604      	mov	r4, r0
 800afb0:	460d      	mov	r5, r1
 800afb2:	4602      	mov	r2, r0
 800afb4:	460b      	mov	r3, r1
 800afb6:	4630      	mov	r0, r6
 800afb8:	4639      	mov	r1, r7
 800afba:	f7f5 f8cf 	bl	800015c <__adddf3>
 800afbe:	4632      	mov	r2, r6
 800afc0:	463b      	mov	r3, r7
 800afc2:	4680      	mov	r8, r0
 800afc4:	4689      	mov	r9, r1
 800afc6:	f7f5 f8c7 	bl	8000158 <__aeabi_dsub>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	f7f5 f8c1 	bl	8000158 <__aeabi_dsub>
 800afd6:	4642      	mov	r2, r8
 800afd8:	4606      	mov	r6, r0
 800afda:	460f      	mov	r7, r1
 800afdc:	464b      	mov	r3, r9
 800afde:	4640      	mov	r0, r8
 800afe0:	4649      	mov	r1, r9
 800afe2:	f7f5 fa71 	bl	80004c8 <__aeabi_dmul>
 800afe6:	a35e      	add	r3, pc, #376	; (adr r3, 800b160 <__ieee754_pow+0x9e8>)
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	4604      	mov	r4, r0
 800afee:	460d      	mov	r5, r1
 800aff0:	f7f5 fa6a 	bl	80004c8 <__aeabi_dmul>
 800aff4:	a35c      	add	r3, pc, #368	; (adr r3, 800b168 <__ieee754_pow+0x9f0>)
 800aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affa:	f7f5 f8ad 	bl	8000158 <__aeabi_dsub>
 800affe:	4622      	mov	r2, r4
 800b000:	462b      	mov	r3, r5
 800b002:	f7f5 fa61 	bl	80004c8 <__aeabi_dmul>
 800b006:	a35a      	add	r3, pc, #360	; (adr r3, 800b170 <__ieee754_pow+0x9f8>)
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f7f5 f8a6 	bl	800015c <__adddf3>
 800b010:	4622      	mov	r2, r4
 800b012:	462b      	mov	r3, r5
 800b014:	f7f5 fa58 	bl	80004c8 <__aeabi_dmul>
 800b018:	a357      	add	r3, pc, #348	; (adr r3, 800b178 <__ieee754_pow+0xa00>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	f7f5 f89b 	bl	8000158 <__aeabi_dsub>
 800b022:	4622      	mov	r2, r4
 800b024:	462b      	mov	r3, r5
 800b026:	f7f5 fa4f 	bl	80004c8 <__aeabi_dmul>
 800b02a:	a355      	add	r3, pc, #340	; (adr r3, 800b180 <__ieee754_pow+0xa08>)
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	f7f5 f894 	bl	800015c <__adddf3>
 800b034:	4622      	mov	r2, r4
 800b036:	462b      	mov	r3, r5
 800b038:	f7f5 fa46 	bl	80004c8 <__aeabi_dmul>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	4640      	mov	r0, r8
 800b042:	4649      	mov	r1, r9
 800b044:	f7f5 f888 	bl	8000158 <__aeabi_dsub>
 800b048:	4604      	mov	r4, r0
 800b04a:	460d      	mov	r5, r1
 800b04c:	4602      	mov	r2, r0
 800b04e:	460b      	mov	r3, r1
 800b050:	4640      	mov	r0, r8
 800b052:	4649      	mov	r1, r9
 800b054:	f7f5 fa38 	bl	80004c8 <__aeabi_dmul>
 800b058:	2200      	movs	r2, #0
 800b05a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b05e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b062:	4620      	mov	r0, r4
 800b064:	4629      	mov	r1, r5
 800b066:	f7f5 f877 	bl	8000158 <__aeabi_dsub>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b072:	f7f5 fb53 	bl	800071c <__aeabi_ddiv>
 800b076:	4632      	mov	r2, r6
 800b078:	4604      	mov	r4, r0
 800b07a:	460d      	mov	r5, r1
 800b07c:	463b      	mov	r3, r7
 800b07e:	4640      	mov	r0, r8
 800b080:	4649      	mov	r1, r9
 800b082:	f7f5 fa21 	bl	80004c8 <__aeabi_dmul>
 800b086:	4632      	mov	r2, r6
 800b088:	463b      	mov	r3, r7
 800b08a:	f7f5 f867 	bl	800015c <__adddf3>
 800b08e:	4602      	mov	r2, r0
 800b090:	460b      	mov	r3, r1
 800b092:	4620      	mov	r0, r4
 800b094:	4629      	mov	r1, r5
 800b096:	f7f5 f85f 	bl	8000158 <__aeabi_dsub>
 800b09a:	4642      	mov	r2, r8
 800b09c:	464b      	mov	r3, r9
 800b09e:	f7f5 f85b 	bl	8000158 <__aeabi_dsub>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	493b      	ldr	r1, [pc, #236]	; (800b198 <__ieee754_pow+0xa20>)
 800b0aa:	f7f5 f855 	bl	8000158 <__aeabi_dsub>
 800b0ae:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b0b2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b0b6:	da2b      	bge.n	800b110 <__ieee754_pow+0x998>
 800b0b8:	4652      	mov	r2, sl
 800b0ba:	f000 f9b9 	bl	800b430 <scalbn>
 800b0be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0c2:	f7ff bbf2 	b.w	800a8aa <__ieee754_pow+0x132>
 800b0c6:	4b35      	ldr	r3, [pc, #212]	; (800b19c <__ieee754_pow+0xa24>)
 800b0c8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b0cc:	429f      	cmp	r7, r3
 800b0ce:	f77f af13 	ble.w	800aef8 <__ieee754_pow+0x780>
 800b0d2:	4b33      	ldr	r3, [pc, #204]	; (800b1a0 <__ieee754_pow+0xa28>)
 800b0d4:	440b      	add	r3, r1
 800b0d6:	4303      	orrs	r3, r0
 800b0d8:	d00b      	beq.n	800b0f2 <__ieee754_pow+0x97a>
 800b0da:	a32b      	add	r3, pc, #172	; (adr r3, 800b188 <__ieee754_pow+0xa10>)
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0e4:	f7f5 f9f0 	bl	80004c8 <__aeabi_dmul>
 800b0e8:	a327      	add	r3, pc, #156	; (adr r3, 800b188 <__ieee754_pow+0xa10>)
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	f7ff bbdc 	b.w	800a8aa <__ieee754_pow+0x132>
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	462b      	mov	r3, r5
 800b0f6:	f7f5 f82f 	bl	8000158 <__aeabi_dsub>
 800b0fa:	4642      	mov	r2, r8
 800b0fc:	464b      	mov	r3, r9
 800b0fe:	f7f5 fc69 	bl	80009d4 <__aeabi_dcmpge>
 800b102:	2800      	cmp	r0, #0
 800b104:	f43f aef8 	beq.w	800aef8 <__ieee754_pow+0x780>
 800b108:	e7e7      	b.n	800b0da <__ieee754_pow+0x962>
 800b10a:	f04f 0a00 	mov.w	sl, #0
 800b10e:	e71e      	b.n	800af4e <__ieee754_pow+0x7d6>
 800b110:	4621      	mov	r1, r4
 800b112:	e7d4      	b.n	800b0be <__ieee754_pow+0x946>
 800b114:	f04f 0b00 	mov.w	fp, #0
 800b118:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b198 <__ieee754_pow+0xa20>
 800b11c:	f7ff bbb0 	b.w	800a880 <__ieee754_pow+0x108>
 800b120:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b124:	f7ff bbac 	b.w	800a880 <__ieee754_pow+0x108>
 800b128:	4638      	mov	r0, r7
 800b12a:	4641      	mov	r1, r8
 800b12c:	f7ff bbbf 	b.w	800a8ae <__ieee754_pow+0x136>
 800b130:	9200      	str	r2, [sp, #0]
 800b132:	f7ff bb7f 	b.w	800a834 <__ieee754_pow+0xbc>
 800b136:	2300      	movs	r3, #0
 800b138:	f7ff bb69 	b.w	800a80e <__ieee754_pow+0x96>
 800b13c:	f3af 8000 	nop.w
 800b140:	652b82fe 	.word	0x652b82fe
 800b144:	3c971547 	.word	0x3c971547
 800b148:	00000000 	.word	0x00000000
 800b14c:	3fe62e43 	.word	0x3fe62e43
 800b150:	fefa39ef 	.word	0xfefa39ef
 800b154:	3fe62e42 	.word	0x3fe62e42
 800b158:	0ca86c39 	.word	0x0ca86c39
 800b15c:	be205c61 	.word	0xbe205c61
 800b160:	72bea4d0 	.word	0x72bea4d0
 800b164:	3e663769 	.word	0x3e663769
 800b168:	c5d26bf1 	.word	0xc5d26bf1
 800b16c:	3ebbbd41 	.word	0x3ebbbd41
 800b170:	af25de2c 	.word	0xaf25de2c
 800b174:	3f11566a 	.word	0x3f11566a
 800b178:	16bebd93 	.word	0x16bebd93
 800b17c:	3f66c16c 	.word	0x3f66c16c
 800b180:	5555553e 	.word	0x5555553e
 800b184:	3fc55555 	.word	0x3fc55555
 800b188:	c2f8f359 	.word	0xc2f8f359
 800b18c:	01a56e1f 	.word	0x01a56e1f
 800b190:	3fe00000 	.word	0x3fe00000
 800b194:	000fffff 	.word	0x000fffff
 800b198:	3ff00000 	.word	0x3ff00000
 800b19c:	4090cbff 	.word	0x4090cbff
 800b1a0:	3f6f3400 	.word	0x3f6f3400

0800b1a4 <__ieee754_sqrt>:
 800b1a4:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b2f8 <__ieee754_sqrt+0x154>
 800b1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ac:	ea3c 0c01 	bics.w	ip, ip, r1
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	460a      	mov	r2, r1
 800b1b8:	4607      	mov	r7, r0
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	d10e      	bne.n	800b1dc <__ieee754_sqrt+0x38>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	f7f5 f982 	bl	80004c8 <__aeabi_dmul>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	f7f4 ffc6 	bl	800015c <__adddf3>
 800b1d0:	4606      	mov	r6, r0
 800b1d2:	460d      	mov	r5, r1
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1dc:	2900      	cmp	r1, #0
 800b1de:	dc0d      	bgt.n	800b1fc <__ieee754_sqrt+0x58>
 800b1e0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b1e4:	ea5c 0707 	orrs.w	r7, ip, r7
 800b1e8:	d0f4      	beq.n	800b1d4 <__ieee754_sqrt+0x30>
 800b1ea:	b139      	cbz	r1, 800b1fc <__ieee754_sqrt+0x58>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	f7f4 ffb3 	bl	8000158 <__aeabi_dsub>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	f7f5 fa91 	bl	800071c <__aeabi_ddiv>
 800b1fa:	e7e9      	b.n	800b1d0 <__ieee754_sqrt+0x2c>
 800b1fc:	1512      	asrs	r2, r2, #20
 800b1fe:	d074      	beq.n	800b2ea <__ieee754_sqrt+0x146>
 800b200:	2000      	movs	r0, #0
 800b202:	07d5      	lsls	r5, r2, #31
 800b204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b208:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800b20c:	bf5e      	ittt	pl
 800b20e:	0fe3      	lsrpl	r3, r4, #31
 800b210:	0064      	lslpl	r4, r4, #1
 800b212:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800b216:	0fe3      	lsrs	r3, r4, #31
 800b218:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b21c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800b220:	2516      	movs	r5, #22
 800b222:	4601      	mov	r1, r0
 800b224:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b228:	1076      	asrs	r6, r6, #1
 800b22a:	0064      	lsls	r4, r4, #1
 800b22c:	188f      	adds	r7, r1, r2
 800b22e:	429f      	cmp	r7, r3
 800b230:	bfde      	ittt	le
 800b232:	1bdb      	suble	r3, r3, r7
 800b234:	18b9      	addle	r1, r7, r2
 800b236:	1880      	addle	r0, r0, r2
 800b238:	005b      	lsls	r3, r3, #1
 800b23a:	3d01      	subs	r5, #1
 800b23c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b240:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b244:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b248:	d1f0      	bne.n	800b22c <__ieee754_sqrt+0x88>
 800b24a:	462a      	mov	r2, r5
 800b24c:	f04f 0e20 	mov.w	lr, #32
 800b250:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b254:	428b      	cmp	r3, r1
 800b256:	eb07 0c05 	add.w	ip, r7, r5
 800b25a:	dc02      	bgt.n	800b262 <__ieee754_sqrt+0xbe>
 800b25c:	d113      	bne.n	800b286 <__ieee754_sqrt+0xe2>
 800b25e:	45a4      	cmp	ip, r4
 800b260:	d811      	bhi.n	800b286 <__ieee754_sqrt+0xe2>
 800b262:	f1bc 0f00 	cmp.w	ip, #0
 800b266:	eb0c 0507 	add.w	r5, ip, r7
 800b26a:	da43      	bge.n	800b2f4 <__ieee754_sqrt+0x150>
 800b26c:	2d00      	cmp	r5, #0
 800b26e:	db41      	blt.n	800b2f4 <__ieee754_sqrt+0x150>
 800b270:	f101 0801 	add.w	r8, r1, #1
 800b274:	1a5b      	subs	r3, r3, r1
 800b276:	4641      	mov	r1, r8
 800b278:	45a4      	cmp	ip, r4
 800b27a:	bf88      	it	hi
 800b27c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b280:	eba4 040c 	sub.w	r4, r4, ip
 800b284:	443a      	add	r2, r7
 800b286:	005b      	lsls	r3, r3, #1
 800b288:	f1be 0e01 	subs.w	lr, lr, #1
 800b28c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b290:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800b294:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b298:	d1dc      	bne.n	800b254 <__ieee754_sqrt+0xb0>
 800b29a:	4323      	orrs	r3, r4
 800b29c:	d006      	beq.n	800b2ac <__ieee754_sqrt+0x108>
 800b29e:	1c54      	adds	r4, r2, #1
 800b2a0:	bf0b      	itete	eq
 800b2a2:	4672      	moveq	r2, lr
 800b2a4:	3201      	addne	r2, #1
 800b2a6:	3001      	addeq	r0, #1
 800b2a8:	f022 0201 	bicne.w	r2, r2, #1
 800b2ac:	1043      	asrs	r3, r0, #1
 800b2ae:	07c1      	lsls	r1, r0, #31
 800b2b0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b2b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b2b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b2bc:	bf48      	it	mi
 800b2be:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800b2c8:	e782      	b.n	800b1d0 <__ieee754_sqrt+0x2c>
 800b2ca:	0ae3      	lsrs	r3, r4, #11
 800b2cc:	3915      	subs	r1, #21
 800b2ce:	0564      	lsls	r4, r4, #21
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0fa      	beq.n	800b2ca <__ieee754_sqrt+0x126>
 800b2d4:	02de      	lsls	r6, r3, #11
 800b2d6:	d50a      	bpl.n	800b2ee <__ieee754_sqrt+0x14a>
 800b2d8:	f1c2 0020 	rsb	r0, r2, #32
 800b2dc:	fa24 f000 	lsr.w	r0, r4, r0
 800b2e0:	1e55      	subs	r5, r2, #1
 800b2e2:	4094      	lsls	r4, r2
 800b2e4:	4303      	orrs	r3, r0
 800b2e6:	1b4a      	subs	r2, r1, r5
 800b2e8:	e78a      	b.n	800b200 <__ieee754_sqrt+0x5c>
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	e7f0      	b.n	800b2d0 <__ieee754_sqrt+0x12c>
 800b2ee:	005b      	lsls	r3, r3, #1
 800b2f0:	3201      	adds	r2, #1
 800b2f2:	e7ef      	b.n	800b2d4 <__ieee754_sqrt+0x130>
 800b2f4:	4688      	mov	r8, r1
 800b2f6:	e7bd      	b.n	800b274 <__ieee754_sqrt+0xd0>
 800b2f8:	7ff00000 	.word	0x7ff00000

0800b2fc <fabs>:
 800b2fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b300:	4770      	bx	lr

0800b302 <finite>:
 800b302:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b306:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b30a:	0fc0      	lsrs	r0, r0, #31
 800b30c:	4770      	bx	lr
	...

0800b310 <nan>:
 800b310:	2000      	movs	r0, #0
 800b312:	4901      	ldr	r1, [pc, #4]	; (800b318 <nan+0x8>)
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	7ff80000 	.word	0x7ff80000

0800b31c <rint>:
 800b31c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800b320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b322:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800b326:	2f13      	cmp	r7, #19
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	460c      	mov	r4, r1
 800b32e:	4605      	mov	r5, r0
 800b330:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800b334:	dc59      	bgt.n	800b3ea <rint+0xce>
 800b336:	2f00      	cmp	r7, #0
 800b338:	da2a      	bge.n	800b390 <rint+0x74>
 800b33a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b33e:	4301      	orrs	r1, r0
 800b340:	d022      	beq.n	800b388 <rint+0x6c>
 800b342:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800b346:	4301      	orrs	r1, r0
 800b348:	424d      	negs	r5, r1
 800b34a:	430d      	orrs	r5, r1
 800b34c:	4936      	ldr	r1, [pc, #216]	; (800b428 <rint+0x10c>)
 800b34e:	0c5c      	lsrs	r4, r3, #17
 800b350:	0b2d      	lsrs	r5, r5, #12
 800b352:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800b356:	0464      	lsls	r4, r4, #17
 800b358:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b35c:	ea45 0304 	orr.w	r3, r5, r4
 800b360:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b364:	4620      	mov	r0, r4
 800b366:	4629      	mov	r1, r5
 800b368:	f7f4 fef8 	bl	800015c <__adddf3>
 800b36c:	e9cd 0100 	strd	r0, r1, [sp]
 800b370:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b374:	462b      	mov	r3, r5
 800b376:	4622      	mov	r2, r4
 800b378:	f7f4 feee 	bl	8000158 <__aeabi_dsub>
 800b37c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b380:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4610      	mov	r0, r2
 800b38a:	4619      	mov	r1, r3
 800b38c:	b003      	add	sp, #12
 800b38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b390:	4926      	ldr	r1, [pc, #152]	; (800b42c <rint+0x110>)
 800b392:	4139      	asrs	r1, r7
 800b394:	ea03 0001 	and.w	r0, r3, r1
 800b398:	4310      	orrs	r0, r2
 800b39a:	d0f5      	beq.n	800b388 <rint+0x6c>
 800b39c:	084b      	lsrs	r3, r1, #1
 800b39e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800b3a2:	ea52 0501 	orrs.w	r5, r2, r1
 800b3a6:	d00c      	beq.n	800b3c2 <rint+0xa6>
 800b3a8:	ea24 0303 	bic.w	r3, r4, r3
 800b3ac:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800b3b0:	2f13      	cmp	r7, #19
 800b3b2:	bf0c      	ite	eq
 800b3b4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800b3b8:	2500      	movne	r5, #0
 800b3ba:	fa44 f707 	asr.w	r7, r4, r7
 800b3be:	ea43 0407 	orr.w	r4, r3, r7
 800b3c2:	4919      	ldr	r1, [pc, #100]	; (800b428 <rint+0x10c>)
 800b3c4:	4623      	mov	r3, r4
 800b3c6:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800b3ca:	462a      	mov	r2, r5
 800b3cc:	e9d6 4500 	ldrd	r4, r5, [r6]
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	f7f4 fec2 	bl	800015c <__adddf3>
 800b3d8:	e9cd 0100 	strd	r0, r1, [sp]
 800b3dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	f7f4 feb8 	bl	8000158 <__aeabi_dsub>
 800b3e8:	e7cc      	b.n	800b384 <rint+0x68>
 800b3ea:	2f33      	cmp	r7, #51	; 0x33
 800b3ec:	dd05      	ble.n	800b3fa <rint+0xde>
 800b3ee:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800b3f2:	d1c9      	bne.n	800b388 <rint+0x6c>
 800b3f4:	f7f4 feb2 	bl	800015c <__adddf3>
 800b3f8:	e7c4      	b.n	800b384 <rint+0x68>
 800b3fa:	f04f 31ff 	mov.w	r1, #4294967295
 800b3fe:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800b402:	fa21 f10c 	lsr.w	r1, r1, ip
 800b406:	4208      	tst	r0, r1
 800b408:	d0be      	beq.n	800b388 <rint+0x6c>
 800b40a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800b40e:	bf18      	it	ne
 800b410:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800b414:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800b418:	bf1e      	ittt	ne
 800b41a:	ea20 0303 	bicne.w	r3, r0, r3
 800b41e:	fa45 fc0c 	asrne.w	ip, r5, ip
 800b422:	ea43 050c 	orrne.w	r5, r3, ip
 800b426:	e7cc      	b.n	800b3c2 <rint+0xa6>
 800b428:	0800bc30 	.word	0x0800bc30
 800b42c:	000fffff 	.word	0x000fffff

0800b430 <scalbn>:
 800b430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b432:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b436:	4604      	mov	r4, r0
 800b438:	460d      	mov	r5, r1
 800b43a:	4617      	mov	r7, r2
 800b43c:	460b      	mov	r3, r1
 800b43e:	b996      	cbnz	r6, 800b466 <scalbn+0x36>
 800b440:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b444:	4303      	orrs	r3, r0
 800b446:	d039      	beq.n	800b4bc <scalbn+0x8c>
 800b448:	4b35      	ldr	r3, [pc, #212]	; (800b520 <scalbn+0xf0>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	f7f5 f83c 	bl	80004c8 <__aeabi_dmul>
 800b450:	4b34      	ldr	r3, [pc, #208]	; (800b524 <scalbn+0xf4>)
 800b452:	4604      	mov	r4, r0
 800b454:	429f      	cmp	r7, r3
 800b456:	460d      	mov	r5, r1
 800b458:	da0f      	bge.n	800b47a <scalbn+0x4a>
 800b45a:	a32d      	add	r3, pc, #180	; (adr r3, 800b510 <scalbn+0xe0>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	f7f5 f832 	bl	80004c8 <__aeabi_dmul>
 800b464:	e006      	b.n	800b474 <scalbn+0x44>
 800b466:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b46a:	4296      	cmp	r6, r2
 800b46c:	d10a      	bne.n	800b484 <scalbn+0x54>
 800b46e:	4602      	mov	r2, r0
 800b470:	f7f4 fe74 	bl	800015c <__adddf3>
 800b474:	4604      	mov	r4, r0
 800b476:	460d      	mov	r5, r1
 800b478:	e020      	b.n	800b4bc <scalbn+0x8c>
 800b47a:	460b      	mov	r3, r1
 800b47c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b480:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b484:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b488:	19b9      	adds	r1, r7, r6
 800b48a:	4291      	cmp	r1, r2
 800b48c:	dd0e      	ble.n	800b4ac <scalbn+0x7c>
 800b48e:	a322      	add	r3, pc, #136	; (adr r3, 800b518 <scalbn+0xe8>)
 800b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b494:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b498:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b49c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b4a0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b4a4:	4820      	ldr	r0, [pc, #128]	; (800b528 <scalbn+0xf8>)
 800b4a6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b4aa:	e7d9      	b.n	800b460 <scalbn+0x30>
 800b4ac:	2900      	cmp	r1, #0
 800b4ae:	dd08      	ble.n	800b4c2 <scalbn+0x92>
 800b4b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b4b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b4b8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b4bc:	4620      	mov	r0, r4
 800b4be:	4629      	mov	r1, r5
 800b4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4c2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b4c6:	da16      	bge.n	800b4f6 <scalbn+0xc6>
 800b4c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b4cc:	429f      	cmp	r7, r3
 800b4ce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b4d2:	dd08      	ble.n	800b4e6 <scalbn+0xb6>
 800b4d4:	4c15      	ldr	r4, [pc, #84]	; (800b52c <scalbn+0xfc>)
 800b4d6:	4814      	ldr	r0, [pc, #80]	; (800b528 <scalbn+0xf8>)
 800b4d8:	f363 74df 	bfi	r4, r3, #31, #1
 800b4dc:	a30e      	add	r3, pc, #56	; (adr r3, 800b518 <scalbn+0xe8>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	e7bc      	b.n	800b460 <scalbn+0x30>
 800b4e6:	4c12      	ldr	r4, [pc, #72]	; (800b530 <scalbn+0x100>)
 800b4e8:	4812      	ldr	r0, [pc, #72]	; (800b534 <scalbn+0x104>)
 800b4ea:	f363 74df 	bfi	r4, r3, #31, #1
 800b4ee:	a308      	add	r3, pc, #32	; (adr r3, 800b510 <scalbn+0xe0>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	e7f5      	b.n	800b4e2 <scalbn+0xb2>
 800b4f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b4fa:	3136      	adds	r1, #54	; 0x36
 800b4fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b500:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b504:	4620      	mov	r0, r4
 800b506:	4629      	mov	r1, r5
 800b508:	2200      	movs	r2, #0
 800b50a:	4b0b      	ldr	r3, [pc, #44]	; (800b538 <scalbn+0x108>)
 800b50c:	e7a8      	b.n	800b460 <scalbn+0x30>
 800b50e:	bf00      	nop
 800b510:	c2f8f359 	.word	0xc2f8f359
 800b514:	01a56e1f 	.word	0x01a56e1f
 800b518:	8800759c 	.word	0x8800759c
 800b51c:	7e37e43c 	.word	0x7e37e43c
 800b520:	43500000 	.word	0x43500000
 800b524:	ffff3cb0 	.word	0xffff3cb0
 800b528:	8800759c 	.word	0x8800759c
 800b52c:	7e37e43c 	.word	0x7e37e43c
 800b530:	01a56e1f 	.word	0x01a56e1f
 800b534:	c2f8f359 	.word	0xc2f8f359
 800b538:	3c900000 	.word	0x3c900000
 800b53c:	00000000 	.word	0x00000000

0800b540 <__ieee754_log>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	460d      	mov	r5, r1
 800b54e:	b087      	sub	sp, #28
 800b550:	da24      	bge.n	800b59c <__ieee754_log+0x5c>
 800b552:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b556:	4304      	orrs	r4, r0
 800b558:	d108      	bne.n	800b56c <__ieee754_log+0x2c>
 800b55a:	2200      	movs	r2, #0
 800b55c:	2300      	movs	r3, #0
 800b55e:	2000      	movs	r0, #0
 800b560:	49cb      	ldr	r1, [pc, #812]	; (800b890 <__ieee754_log+0x350>)
 800b562:	f7f5 f8db 	bl	800071c <__aeabi_ddiv>
 800b566:	b007      	add	sp, #28
 800b568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56c:	2900      	cmp	r1, #0
 800b56e:	da04      	bge.n	800b57a <__ieee754_log+0x3a>
 800b570:	f7f4 fdf2 	bl	8000158 <__aeabi_dsub>
 800b574:	2200      	movs	r2, #0
 800b576:	2300      	movs	r3, #0
 800b578:	e7f3      	b.n	800b562 <__ieee754_log+0x22>
 800b57a:	2200      	movs	r2, #0
 800b57c:	4bc5      	ldr	r3, [pc, #788]	; (800b894 <__ieee754_log+0x354>)
 800b57e:	f7f4 ffa3 	bl	80004c8 <__aeabi_dmul>
 800b582:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	460d      	mov	r5, r1
 800b58c:	49c2      	ldr	r1, [pc, #776]	; (800b898 <__ieee754_log+0x358>)
 800b58e:	428d      	cmp	r5, r1
 800b590:	dd06      	ble.n	800b5a0 <__ieee754_log+0x60>
 800b592:	4610      	mov	r0, r2
 800b594:	4619      	mov	r1, r3
 800b596:	f7f4 fde1 	bl	800015c <__adddf3>
 800b59a:	e7e4      	b.n	800b566 <__ieee754_log+0x26>
 800b59c:	2600      	movs	r6, #0
 800b59e:	e7f5      	b.n	800b58c <__ieee754_log+0x4c>
 800b5a0:	152c      	asrs	r4, r5, #20
 800b5a2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b5a6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800b5aa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b5ae:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800b5b2:	4426      	add	r6, r4
 800b5b4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800b5b8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800b5bc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800b5c0:	ea41 0305 	orr.w	r3, r1, r5
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	4bb4      	ldr	r3, [pc, #720]	; (800b89c <__ieee754_log+0x35c>)
 800b5cc:	f7f4 fdc4 	bl	8000158 <__aeabi_dsub>
 800b5d0:	1cab      	adds	r3, r5, #2
 800b5d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	4682      	mov	sl, r0
 800b5da:	468b      	mov	fp, r1
 800b5dc:	f04f 0200 	mov.w	r2, #0
 800b5e0:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800b5e4:	dc53      	bgt.n	800b68e <__ieee754_log+0x14e>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f7f5 f9d6 	bl	8000998 <__aeabi_dcmpeq>
 800b5ec:	b1d0      	cbz	r0, 800b624 <__ieee754_log+0xe4>
 800b5ee:	2c00      	cmp	r4, #0
 800b5f0:	f000 8122 	beq.w	800b838 <__ieee754_log+0x2f8>
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f7f4 fefd 	bl	80003f4 <__aeabi_i2d>
 800b5fa:	a391      	add	r3, pc, #580	; (adr r3, 800b840 <__ieee754_log+0x300>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	4606      	mov	r6, r0
 800b602:	460f      	mov	r7, r1
 800b604:	f7f4 ff60 	bl	80004c8 <__aeabi_dmul>
 800b608:	a38f      	add	r3, pc, #572	; (adr r3, 800b848 <__ieee754_log+0x308>)
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	4604      	mov	r4, r0
 800b610:	460d      	mov	r5, r1
 800b612:	4630      	mov	r0, r6
 800b614:	4639      	mov	r1, r7
 800b616:	f7f4 ff57 	bl	80004c8 <__aeabi_dmul>
 800b61a:	4602      	mov	r2, r0
 800b61c:	460b      	mov	r3, r1
 800b61e:	4620      	mov	r0, r4
 800b620:	4629      	mov	r1, r5
 800b622:	e7b8      	b.n	800b596 <__ieee754_log+0x56>
 800b624:	a38a      	add	r3, pc, #552	; (adr r3, 800b850 <__ieee754_log+0x310>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	4650      	mov	r0, sl
 800b62c:	4659      	mov	r1, fp
 800b62e:	f7f4 ff4b 	bl	80004c8 <__aeabi_dmul>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	2000      	movs	r0, #0
 800b638:	4999      	ldr	r1, [pc, #612]	; (800b8a0 <__ieee754_log+0x360>)
 800b63a:	f7f4 fd8d 	bl	8000158 <__aeabi_dsub>
 800b63e:	4652      	mov	r2, sl
 800b640:	4606      	mov	r6, r0
 800b642:	460f      	mov	r7, r1
 800b644:	465b      	mov	r3, fp
 800b646:	4650      	mov	r0, sl
 800b648:	4659      	mov	r1, fp
 800b64a:	f7f4 ff3d 	bl	80004c8 <__aeabi_dmul>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	4630      	mov	r0, r6
 800b654:	4639      	mov	r1, r7
 800b656:	f7f4 ff37 	bl	80004c8 <__aeabi_dmul>
 800b65a:	4606      	mov	r6, r0
 800b65c:	460f      	mov	r7, r1
 800b65e:	b914      	cbnz	r4, 800b666 <__ieee754_log+0x126>
 800b660:	4632      	mov	r2, r6
 800b662:	463b      	mov	r3, r7
 800b664:	e0a2      	b.n	800b7ac <__ieee754_log+0x26c>
 800b666:	4620      	mov	r0, r4
 800b668:	f7f4 fec4 	bl	80003f4 <__aeabi_i2d>
 800b66c:	a374      	add	r3, pc, #464	; (adr r3, 800b840 <__ieee754_log+0x300>)
 800b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b672:	4680      	mov	r8, r0
 800b674:	4689      	mov	r9, r1
 800b676:	f7f4 ff27 	bl	80004c8 <__aeabi_dmul>
 800b67a:	a373      	add	r3, pc, #460	; (adr r3, 800b848 <__ieee754_log+0x308>)
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	4604      	mov	r4, r0
 800b682:	460d      	mov	r5, r1
 800b684:	4640      	mov	r0, r8
 800b686:	4649      	mov	r1, r9
 800b688:	f7f4 ff1e 	bl	80004c8 <__aeabi_dmul>
 800b68c:	e0a7      	b.n	800b7de <__ieee754_log+0x29e>
 800b68e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b692:	f7f4 fd63 	bl	800015c <__adddf3>
 800b696:	4602      	mov	r2, r0
 800b698:	460b      	mov	r3, r1
 800b69a:	4650      	mov	r0, sl
 800b69c:	4659      	mov	r1, fp
 800b69e:	f7f5 f83d 	bl	800071c <__aeabi_ddiv>
 800b6a2:	e9cd 0100 	strd	r0, r1, [sp]
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f7f4 fea4 	bl	80003f4 <__aeabi_i2d>
 800b6ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	f7f4 ff06 	bl	80004c8 <__aeabi_dmul>
 800b6bc:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b6c0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	9305      	str	r3, [sp, #20]
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	460f      	mov	r7, r1
 800b6ce:	f7f4 fefb 	bl	80004c8 <__aeabi_dmul>
 800b6d2:	a361      	add	r3, pc, #388	; (adr r3, 800b858 <__ieee754_log+0x318>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	4680      	mov	r8, r0
 800b6da:	4689      	mov	r9, r1
 800b6dc:	f7f4 fef4 	bl	80004c8 <__aeabi_dmul>
 800b6e0:	a35f      	add	r3, pc, #380	; (adr r3, 800b860 <__ieee754_log+0x320>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 fd39 	bl	800015c <__adddf3>
 800b6ea:	4642      	mov	r2, r8
 800b6ec:	464b      	mov	r3, r9
 800b6ee:	f7f4 feeb 	bl	80004c8 <__aeabi_dmul>
 800b6f2:	a35d      	add	r3, pc, #372	; (adr r3, 800b868 <__ieee754_log+0x328>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f7f4 fd30 	bl	800015c <__adddf3>
 800b6fc:	4642      	mov	r2, r8
 800b6fe:	464b      	mov	r3, r9
 800b700:	f7f4 fee2 	bl	80004c8 <__aeabi_dmul>
 800b704:	a35a      	add	r3, pc, #360	; (adr r3, 800b870 <__ieee754_log+0x330>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	f7f4 fd27 	bl	800015c <__adddf3>
 800b70e:	4632      	mov	r2, r6
 800b710:	463b      	mov	r3, r7
 800b712:	f7f4 fed9 	bl	80004c8 <__aeabi_dmul>
 800b716:	a358      	add	r3, pc, #352	; (adr r3, 800b878 <__ieee754_log+0x338>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	4606      	mov	r6, r0
 800b71e:	460f      	mov	r7, r1
 800b720:	4640      	mov	r0, r8
 800b722:	4649      	mov	r1, r9
 800b724:	f7f4 fed0 	bl	80004c8 <__aeabi_dmul>
 800b728:	a355      	add	r3, pc, #340	; (adr r3, 800b880 <__ieee754_log+0x340>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f4 fd15 	bl	800015c <__adddf3>
 800b732:	4642      	mov	r2, r8
 800b734:	464b      	mov	r3, r9
 800b736:	f7f4 fec7 	bl	80004c8 <__aeabi_dmul>
 800b73a:	a353      	add	r3, pc, #332	; (adr r3, 800b888 <__ieee754_log+0x348>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	f7f4 fd0c 	bl	800015c <__adddf3>
 800b744:	4642      	mov	r2, r8
 800b746:	464b      	mov	r3, r9
 800b748:	f7f4 febe 	bl	80004c8 <__aeabi_dmul>
 800b74c:	460b      	mov	r3, r1
 800b74e:	4602      	mov	r2, r0
 800b750:	4639      	mov	r1, r7
 800b752:	4630      	mov	r0, r6
 800b754:	f7f4 fd02 	bl	800015c <__adddf3>
 800b758:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b75c:	9b05      	ldr	r3, [sp, #20]
 800b75e:	3551      	adds	r5, #81	; 0x51
 800b760:	431d      	orrs	r5, r3
 800b762:	2d00      	cmp	r5, #0
 800b764:	4680      	mov	r8, r0
 800b766:	4689      	mov	r9, r1
 800b768:	dd48      	ble.n	800b7fc <__ieee754_log+0x2bc>
 800b76a:	2200      	movs	r2, #0
 800b76c:	4b4c      	ldr	r3, [pc, #304]	; (800b8a0 <__ieee754_log+0x360>)
 800b76e:	4650      	mov	r0, sl
 800b770:	4659      	mov	r1, fp
 800b772:	f7f4 fea9 	bl	80004c8 <__aeabi_dmul>
 800b776:	4652      	mov	r2, sl
 800b778:	465b      	mov	r3, fp
 800b77a:	f7f4 fea5 	bl	80004c8 <__aeabi_dmul>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	4606      	mov	r6, r0
 800b784:	460f      	mov	r7, r1
 800b786:	4640      	mov	r0, r8
 800b788:	4649      	mov	r1, r9
 800b78a:	f7f4 fce7 	bl	800015c <__adddf3>
 800b78e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b792:	f7f4 fe99 	bl	80004c8 <__aeabi_dmul>
 800b796:	4680      	mov	r8, r0
 800b798:	4689      	mov	r9, r1
 800b79a:	b964      	cbnz	r4, 800b7b6 <__ieee754_log+0x276>
 800b79c:	4602      	mov	r2, r0
 800b79e:	460b      	mov	r3, r1
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	4639      	mov	r1, r7
 800b7a4:	f7f4 fcd8 	bl	8000158 <__aeabi_dsub>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	4650      	mov	r0, sl
 800b7ae:	4659      	mov	r1, fp
 800b7b0:	f7f4 fcd2 	bl	8000158 <__aeabi_dsub>
 800b7b4:	e6d7      	b.n	800b566 <__ieee754_log+0x26>
 800b7b6:	a322      	add	r3, pc, #136	; (adr r3, 800b840 <__ieee754_log+0x300>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7c0:	f7f4 fe82 	bl	80004c8 <__aeabi_dmul>
 800b7c4:	a320      	add	r3, pc, #128	; (adr r3, 800b848 <__ieee754_log+0x308>)
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	460d      	mov	r5, r1
 800b7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7d2:	f7f4 fe79 	bl	80004c8 <__aeabi_dmul>
 800b7d6:	4642      	mov	r2, r8
 800b7d8:	464b      	mov	r3, r9
 800b7da:	f7f4 fcbf 	bl	800015c <__adddf3>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f4 fcb7 	bl	8000158 <__aeabi_dsub>
 800b7ea:	4652      	mov	r2, sl
 800b7ec:	465b      	mov	r3, fp
 800b7ee:	f7f4 fcb3 	bl	8000158 <__aeabi_dsub>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	e7d9      	b.n	800b7b0 <__ieee754_log+0x270>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4650      	mov	r0, sl
 800b802:	4659      	mov	r1, fp
 800b804:	f7f4 fca8 	bl	8000158 <__aeabi_dsub>
 800b808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b80c:	f7f4 fe5c 	bl	80004c8 <__aeabi_dmul>
 800b810:	4606      	mov	r6, r0
 800b812:	460f      	mov	r7, r1
 800b814:	2c00      	cmp	r4, #0
 800b816:	f43f af23 	beq.w	800b660 <__ieee754_log+0x120>
 800b81a:	a309      	add	r3, pc, #36	; (adr r3, 800b840 <__ieee754_log+0x300>)
 800b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b824:	f7f4 fe50 	bl	80004c8 <__aeabi_dmul>
 800b828:	a307      	add	r3, pc, #28	; (adr r3, 800b848 <__ieee754_log+0x308>)
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	4604      	mov	r4, r0
 800b830:	460d      	mov	r5, r1
 800b832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b836:	e727      	b.n	800b688 <__ieee754_log+0x148>
 800b838:	2000      	movs	r0, #0
 800b83a:	2100      	movs	r1, #0
 800b83c:	e693      	b.n	800b566 <__ieee754_log+0x26>
 800b83e:	bf00      	nop
 800b840:	fee00000 	.word	0xfee00000
 800b844:	3fe62e42 	.word	0x3fe62e42
 800b848:	35793c76 	.word	0x35793c76
 800b84c:	3dea39ef 	.word	0x3dea39ef
 800b850:	55555555 	.word	0x55555555
 800b854:	3fd55555 	.word	0x3fd55555
 800b858:	df3e5244 	.word	0xdf3e5244
 800b85c:	3fc2f112 	.word	0x3fc2f112
 800b860:	96cb03de 	.word	0x96cb03de
 800b864:	3fc74664 	.word	0x3fc74664
 800b868:	94229359 	.word	0x94229359
 800b86c:	3fd24924 	.word	0x3fd24924
 800b870:	55555593 	.word	0x55555593
 800b874:	3fe55555 	.word	0x3fe55555
 800b878:	d078c69f 	.word	0xd078c69f
 800b87c:	3fc39a09 	.word	0x3fc39a09
 800b880:	1d8e78af 	.word	0x1d8e78af
 800b884:	3fcc71c5 	.word	0x3fcc71c5
 800b888:	9997fa04 	.word	0x9997fa04
 800b88c:	3fd99999 	.word	0x3fd99999
 800b890:	c3500000 	.word	0xc3500000
 800b894:	43500000 	.word	0x43500000
 800b898:	7fefffff 	.word	0x7fefffff
 800b89c:	3ff00000 	.word	0x3ff00000
 800b8a0:	3fe00000 	.word	0x3fe00000

0800b8a4 <_init>:
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	bf00      	nop
 800b8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8aa:	bc08      	pop	{r3}
 800b8ac:	469e      	mov	lr, r3
 800b8ae:	4770      	bx	lr

0800b8b0 <_fini>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	bf00      	nop
 800b8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b6:	bc08      	pop	{r3}
 800b8b8:	469e      	mov	lr, r3
 800b8ba:	4770      	bx	lr
