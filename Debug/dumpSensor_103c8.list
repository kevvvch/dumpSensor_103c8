
dumpSensor_103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f98  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  080090a8  080090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093c0  080093c0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080093c0  080093c0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093c0  080093c0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c0  080093c0  000193c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093c4  080093c4  000193c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080093c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  20000088  08009450  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  08009450  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015963  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003abb  00000000  00000000  00035a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  000394d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  0003aa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019309  00000000  00000000  0003be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c71  00000000  00000000  00055131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d73  00000000  00000000  0006bda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fcb15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005958  00000000  00000000  000fcb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08009090 	.word	0x08009090

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08009090 	.word	0x08009090

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <ch4Sensor_init>:




void ch4Sensor_init(ADC_HandleTypeDef *hadc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	//ADC
	ch4Hadc = hadc;
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <ch4Sensor_init+0x2c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&ch4Sensor_state, __ch4Sensor_idle);
 8000f82:	2100      	movs	r1, #0
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <ch4Sensor_init+0x30>)
 8000f86:	f000 fdeb 	bl	8001b60 <fsmManager_init>

	//Flags
	flags_ch4Sensor.dword = 0;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <ch4Sensor_init+0x34>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
	flags_ch4SensorError.dword = 0;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <ch4Sensor_init+0x38>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000a4 	.word	0x200000a4
 8000fa4:	200000ac 	.word	0x200000ac
 8000fa8:	200000b8 	.word	0x200000b8
 8000fac:	200000bc 	.word	0x200000bc

08000fb0 <ch4Sensor_handler>:

void ch4Sensor_handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&ch4Sensor_state)) {
 8000fb4:	4833      	ldr	r0, [pc, #204]	; (8001084 <ch4Sensor_handler+0xd4>)
 8000fb6:	f000 fe00 	bl	8001bba <fsmManager_getState>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <ch4Sensor_handler+0x16>
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d028      	beq.n	8001016 <ch4Sensor_handler+0x66>

				flags_ch4Sensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 8000fc4:	e05c      	b.n	8001080 <ch4Sensor_handler+0xd0>
			if(fsmManager_isStateIn(&ch4Sensor_state)) {
 8000fc6:	482f      	ldr	r0, [pc, #188]	; (8001084 <ch4Sensor_handler+0xd4>)
 8000fc8:	f000 fe02 	bl	8001bd0 <fsmManager_isStateIn>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d007      	beq.n	8000fe2 <ch4Sensor_handler+0x32>
				fsmManager_stateIn(&ch4Sensor_state);
 8000fd2:	482c      	ldr	r0, [pc, #176]	; (8001084 <ch4Sensor_handler+0xd4>)
 8000fd4:	f000 fe12 	bl	8001bfc <fsmManager_stateIn>
				flags_ch4Sensor.bits.isMeasuring = 0;
 8000fd8:	4a2b      	ldr	r2, [pc, #172]	; (8001088 <ch4Sensor_handler+0xd8>)
 8000fda:	7853      	ldrb	r3, [r2, #1]
 8000fdc:	f36f 03c3 	bfc	r3, #3, #1
 8000fe0:	7053      	strb	r3, [r2, #1]
			if(flags_ch4Sensor.bits.requestMeasure) {
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <ch4Sensor_handler+0xd8>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <ch4Sensor_handler+0x52>
				flags_ch4Sensor.bits.isMeasuring = 1;
 8000ff0:	4a25      	ldr	r2, [pc, #148]	; (8001088 <ch4Sensor_handler+0xd8>)
 8000ff2:	7853      	ldrb	r3, [r2, #1]
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&ch4Sensor_state,__ch4Sensor_getAmmoniac);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4821      	ldr	r0, [pc, #132]	; (8001084 <ch4Sensor_handler+0xd4>)
 8000ffe:	f000 fdc5 	bl	8001b8c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&ch4Sensor_state)) {
 8001002:	4820      	ldr	r0, [pc, #128]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001004:	f000 fdef 	bl	8001be6 <fsmManager_isStateOut>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d035      	beq.n	800107a <ch4Sensor_handler+0xca>
				fsmManager_stateOut(&ch4Sensor_state);
 800100e:	481d      	ldr	r0, [pc, #116]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001010:	f000 fe03 	bl	8001c1a <fsmManager_stateOut>
			break;
 8001014:	e031      	b.n	800107a <ch4Sensor_handler+0xca>
			if(fsmManager_isStateIn(&ch4Sensor_state)) {
 8001016:	481b      	ldr	r0, [pc, #108]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001018:	f000 fdda 	bl	8001bd0 <fsmManager_isStateIn>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d004      	beq.n	800102c <ch4Sensor_handler+0x7c>
				fsmManager_stateIn(&ch4Sensor_state);
 8001022:	4818      	ldr	r0, [pc, #96]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001024:	f000 fdea 	bl	8001bfc <fsmManager_stateIn>
				ch4_adcStart();
 8001028:	f000 f87e 	bl	8001128 <ch4_adcStart>
			ch4Ppm = (float)ch4_adcGetValue();
 800102c:	f000 f890 	bl	8001150 <ch4_adcGetValue>
 8001030:	4603      	mov	r3, r0
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fd60 	bl	8000af8 <__aeabi_ui2f>
 8001038:	4603      	mov	r3, r0
 800103a:	4a14      	ldr	r2, [pc, #80]	; (800108c <ch4Sensor_handler+0xdc>)
 800103c:	6013      	str	r3, [r2, #0]
			if(ch4SensorCallback != NULL) {
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <ch4Sensor_handler+0xe0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <ch4Sensor_handler+0xa0>
				ch4SensorCallback(__ch4SensorEvent_okMeasuring, (float *) &ch4Ppm);
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <ch4Sensor_handler+0xe0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4910      	ldr	r1, [pc, #64]	; (800108c <ch4Sensor_handler+0xdc>)
 800104c:	2000      	movs	r0, #0
 800104e:	4798      	blx	r3
			fsmManager_gotoState(&ch4Sensor_state,__ch4Sensor_idle);
 8001050:	2100      	movs	r1, #0
 8001052:	480c      	ldr	r0, [pc, #48]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001054:	f000 fd9a 	bl	8001b8c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&ch4Sensor_state)) {
 8001058:	480a      	ldr	r0, [pc, #40]	; (8001084 <ch4Sensor_handler+0xd4>)
 800105a:	f000 fdc4 	bl	8001be6 <fsmManager_isStateOut>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00c      	beq.n	800107e <ch4Sensor_handler+0xce>
				fsmManager_stateOut(&ch4Sensor_state);
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <ch4Sensor_handler+0xd4>)
 8001066:	f000 fdd8 	bl	8001c1a <fsmManager_stateOut>
				ch4_adcStop();
 800106a:	f000 f87d 	bl	8001168 <ch4_adcStop>
				flags_ch4Sensor.bits.requestMeasure = 0;
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <ch4Sensor_handler+0xd8>)
 8001070:	7813      	ldrb	r3, [r2, #0]
 8001072:	f36f 0300 	bfc	r3, #0, #1
 8001076:	7013      	strb	r3, [r2, #0]
			break;
 8001078:	e001      	b.n	800107e <ch4Sensor_handler+0xce>
			break;
 800107a:	bf00      	nop
 800107c:	e000      	b.n	8001080 <ch4Sensor_handler+0xd0>
			break;
 800107e:	bf00      	nop
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200000ac 	.word	0x200000ac
 8001088:	200000b8 	.word	0x200000b8
 800108c:	200000a8 	.word	0x200000a8
 8001090:	200000c0 	.word	0x200000c0

08001094 <ch4Sensor_measure>:

void ch4Sensor_measure(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	flags_ch4Sensor.bits.requestMeasure = 1;
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <ch4Sensor_measure+0x18>)
 800109a:	7813      	ldrb	r3, [r2, #0]
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	7013      	strb	r3, [r2, #0]
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200000b8 	.word	0x200000b8

080010b0 <ch4Sensor_setCallback>:
{
	return flags_ch4Sensor.bits.isMeasuring;
}

void ch4Sensor_setCallback(void (*cb)(_ch4Sensor_event, void*))
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	ch4SensorCallback = cb;
 80010b8:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <ch4Sensor_setCallback+0x18>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	200000c0 	.word	0x200000c0

080010cc <ch4Sensor_powerOn>:

void ch4Sensor_powerOn(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	pinCh4Vdd_write(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f000 f855 	bl	8001180 <pinCh4Vdd_write>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}

080010da <ch4Sensor_powerOff>:

void ch4Sensor_powerOff(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
	pinCh4Vdd_write(0);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f84e 	bl	8001180 <pinCh4Vdd_write>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <ADC_Select_CHCh4>:



static void ADC_Select_CHCh4(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001100:	2301      	movs	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(ch4Hadc, &sConfig) != HAL_OK) {
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <ADC_Select_CHCh4+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	1d3a      	adds	r2, r7, #4
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f004 ff1d 	bl	8005f4c <HAL_ADC_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <ADC_Select_CHCh4+0x34>
		Error_Handler();
 8001118:	f003 f9fc 	bl	8004514 <Error_Handler>
	}
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000a4 	.word	0x200000a4

08001128 <ch4_adcStart>:

static void ch4_adcStart(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	ADC_Select_CHCh4();
 800112c:	f7ff ffdc 	bl	80010e8 <ADC_Select_CHCh4>
	HAL_ADC_Start(ch4Hadc);
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <ch4_adcStart+0x24>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f004 fd1d 	bl	8005b74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ch4Hadc, 100);
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <ch4_adcStart+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2164      	movs	r1, #100	; 0x64
 8001140:	4618      	mov	r0, r3
 8001142:	f004 fdf1 	bl	8005d28 <HAL_ADC_PollForConversion>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000a4 	.word	0x200000a4

08001150 <ch4_adcGetValue>:

static uint32_t ch4_adcGetValue(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(ch4Hadc);
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <ch4_adcGetValue+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f004 feeb 	bl	8005f34 <HAL_ADC_GetValue>
 800115e:	4603      	mov	r3, r0
}
 8001160:	4618      	mov	r0, r3
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200000a4 	.word	0x200000a4

08001168 <ch4_adcStop>:

static void ch4_adcStop(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(ch4Hadc);
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <ch4_adcStop+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f004 fdad 	bl	8005cd0 <HAL_ADC_Stop>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000a4 	.word	0x200000a4

08001180 <pinCh4Vdd_write>:

static void pinCh4Vdd_write(uint8_t state)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(, , state);
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <usSensorCb>:
static float calculateDistancePercentage(float dist);



void usSensorCb(_usSensor_event evt, void* payload)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <usSensorCb+0x16>
 80011a6:	2b01      	cmp	r3, #1
			flags_dumpSensor.bits.usSensor_measureDone = 1;
			break;

		case __usSensorEvent_errorEcho:;

			break;
 80011a8:	e009      	b.n	80011be <usSensorCb+0x2a>
			distance = *(float*) payload;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <usSensorCb+0x34>)
 80011b0:	6013      	str	r3, [r2, #0]
			flags_dumpSensor.bits.usSensor_measureDone = 1;
 80011b2:	4a06      	ldr	r2, [pc, #24]	; (80011cc <usSensorCb+0x38>)
 80011b4:	7813      	ldrb	r3, [r2, #0]
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	7013      	strb	r3, [r2, #0]
			break;
 80011bc:	bf00      	nop
	}
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	200000c8 	.word	0x200000c8
 80011cc:	20000608 	.word	0x20000608

080011d0 <nh3SensorCb>:

void nh3SensorCb(_nh3Sensor_event evt, void* payload)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <nh3SensorCb+0x26>
	{
		case __nh3SensorEvent_okMeasuring:;
			nh3Concentration = *(float*) payload;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a06      	ldr	r2, [pc, #24]	; (8001200 <nh3SensorCb+0x30>)
 80011e8:	6013      	str	r3, [r2, #0]

			flags_dumpSensor.bits.nh3Sensor_measureDone = 1;
 80011ea:	4a06      	ldr	r2, [pc, #24]	; (8001204 <nh3SensorCb+0x34>)
 80011ec:	7813      	ldrb	r3, [r2, #0]
 80011ee:	f043 0308 	orr.w	r3, r3, #8
 80011f2:	7013      	strb	r3, [r2, #0]
			break;
 80011f4:	bf00      	nop
	}
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	200000cc 	.word	0x200000cc
 8001204:	20000608 	.word	0x20000608

08001208 <ch4SensorCb>:

void ch4SensorCb(_ch4Sensor_event evt, void* payload)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <ch4SensorCb+0x26>
	{
		case __ch4SensorEvent_okMeasuring:;
			ch4Concentration = *(float*) payload;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a06      	ldr	r2, [pc, #24]	; (8001238 <ch4SensorCb+0x30>)
 8001220:	6013      	str	r3, [r2, #0]

			flags_dumpSensor.bits.ch4Sensor_measureDone = 1;
 8001222:	4a06      	ldr	r2, [pc, #24]	; (800123c <ch4SensorCb+0x34>)
 8001224:	7813      	ldrb	r3, [r2, #0]
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	7013      	strb	r3, [r2, #0]
			break;
 800122c:	bf00      	nop
	}
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	200000d0 	.word	0x200000d0
 800123c:	20000608 	.word	0x20000608

08001240 <tempSensorCb>:

void tempSensorCb(_tempSensor_event evt, void* payload)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
	switch(evt)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d113      	bne.n	800127a <tempSensorCb+0x3a>
	{
		case __tempSensorEvent_okMeasuring:;
			temperature = *(float*) payload;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <tempSensorCb+0x44>)
 8001258:	6013      	str	r3, [r2, #0]
			temperature -= 10;	//Subtract addicional temperature of the capsule
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <tempSensorCb+0x44>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	490a      	ldr	r1, [pc, #40]	; (8001288 <tempSensorCb+0x48>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fb97 	bl	8000994 <__aeabi_fsub>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <tempSensorCb+0x44>)
 800126c:	601a      	str	r2, [r3, #0]

			flags_dumpSensor.bits.tempSensor_measureDone = 1;
 800126e:	4a07      	ldr	r2, [pc, #28]	; (800128c <tempSensorCb+0x4c>)
 8001270:	7813      	ldrb	r3, [r2, #0]
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	7013      	strb	r3, [r2, #0]
			break;
 8001278:	bf00      	nop
	}
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000d4 	.word	0x200000d4
 8001288:	41200000 	.word	0x41200000
 800128c:	20000608 	.word	0x20000608

08001290 <dumpSensorManager_init>:


void dumpSensorManager_init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	//Wakes up from sleep
	//powerMode_init(&hrtc);

	//Initializes softTimer
	softTimer_init(&htim4);
 8001294:	4814      	ldr	r0, [pc, #80]	; (80012e8 <dumpSensorManager_init+0x58>)
 8001296:	f003 faa5 	bl	80047e4 <softTimer_init>

	//Initializes ultrasonic Sensor
	usSensor_init(&htim3);
 800129a:	4814      	ldr	r0, [pc, #80]	; (80012ec <dumpSensorManager_init+0x5c>)
 800129c:	f003 fe12 	bl	8004ec4 <usSensor_init>
	usSensor_setCallback(usSensorCb);
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <dumpSensorManager_init+0x60>)
 80012a2:	f004 f841 	bl	8005328 <usSensor_setCallback>

	//Initializes temperature Sensor
	tempSensor_init(&hadc1);
 80012a6:	4813      	ldr	r0, [pc, #76]	; (80012f4 <dumpSensorManager_init+0x64>)
 80012a8:	f003 fcca 	bl	8004c40 <tempSensor_init>
	tempSensor_setCallback(tempSensorCb);
 80012ac:	4812      	ldr	r0, [pc, #72]	; (80012f8 <dumpSensorManager_init+0x68>)
 80012ae:	f003 fdaf 	bl	8004e10 <tempSensor_setCallback>

	//Initializes NH3 Sensor
	nh3Sensor_init(&hadc1);
 80012b2:	4810      	ldr	r0, [pc, #64]	; (80012f4 <dumpSensorManager_init+0x64>)
 80012b4:	f003 f934 	bl	8004520 <nh3Sensor_init>
	nh3Sensor_setCallback(nh3SensorCb);
 80012b8:	4810      	ldr	r0, [pc, #64]	; (80012fc <dumpSensorManager_init+0x6c>)
 80012ba:	f003 f9cf 	bl	800465c <nh3Sensor_setCallback>

	//Initializes CH4 Sensor
	ch4Sensor_init(&hadc1);
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <dumpSensorManager_init+0x64>)
 80012c0:	f7ff fe58 	bl	8000f74 <ch4Sensor_init>
	ch4Sensor_setCallback(ch4SensorCb);
 80012c4:	480e      	ldr	r0, [pc, #56]	; (8001300 <dumpSensorManager_init+0x70>)
 80012c6:	f7ff fef3 	bl	80010b0 <ch4Sensor_setCallback>

	//Initializes GSM Module
	gsmModule_init(&huart1);
 80012ca:	480e      	ldr	r0, [pc, #56]	; (8001304 <dumpSensorManager_init+0x74>)
 80012cc:	f000 fcb4 	bl	8001c38 <gsmModule_init>

	//Initializes NVM managment Module
	nvm_init(&hrtc);
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <dumpSensorManager_init+0x78>)
 80012d2:	f003 fa35 	bl	8004740 <nvm_init>

	//FSM
	fsmManager_init(&dumpSensorFsmState, __dumpSensor_idle);
 80012d6:	2100      	movs	r1, #0
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <dumpSensorManager_init+0x7c>)
 80012da:	f000 fc41 	bl	8001b60 <fsmManager_init>

	//Flags
	flags_dumpSensor.dword = 0;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <dumpSensorManager_init+0x80>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000610 	.word	0x20000610
 80012ec:	20000658 	.word	0x20000658
 80012f0:	08001195 	.word	0x08001195
 80012f4:	200006a0 	.word	0x200006a0
 80012f8:	08001241 	.word	0x08001241
 80012fc:	080011d1 	.word	0x080011d1
 8001300:	08001209 	.word	0x08001209
 8001304:	200006d0 	.word	0x200006d0
 8001308:	20000714 	.word	0x20000714
 800130c:	200005fc 	.word	0x200005fc
 8001310:	20000608 	.word	0x20000608

08001314 <dumpSensorManager_handler>:

void dumpSensorManager_handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	usSensor_handler();
 8001318:	f003 fe2e 	bl	8004f78 <usSensor_handler>
	tempSensor_handler();
 800131c:	f003 fcb0 	bl	8004c80 <tempSensor_handler>
	nh3Sensor_handler();
 8001320:	f003 f91c 	bl	800455c <nh3Sensor_handler>
	ch4Sensor_handler();
 8001324:	f7ff fe44 	bl	8000fb0 <ch4Sensor_handler>
	gsmModule_handler();
 8001328:	f000 fde6 	bl	8001ef8 <gsmModule_handler>



	if(flags_dumpSensor.bits.gsmModule_turnOn == 1) {
 800132c:	4bbb      	ldr	r3, [pc, #748]	; (800161c <dumpSensorManager_handler+0x308>)
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d106      	bne.n	8001342 <dumpSensorManager_handler+0x2e>
		flags_dumpSensor.bits.gsmModule_turnOn = 0;
 8001334:	4bb9      	ldr	r3, [pc, #740]	; (800161c <dumpSensorManager_handler+0x308>)
 8001336:	2200      	movs	r2, #0
 8001338:	705a      	strb	r2, [r3, #1]

		gsmModule_powerOn();
 800133a:	f000 fcdb 	bl	8001cf4 <gsmModule_powerOn>
		gsmModule_pwrkeyOn();
 800133e:	f000 fce7 	bl	8001d10 <gsmModule_pwrkeyOn>
	}

	switch(fsmManager_getState(&dumpSensorFsmState))
 8001342:	48b7      	ldr	r0, [pc, #732]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001344:	f000 fc39 	bl	8001bba <fsmManager_getState>
 8001348:	4603      	mov	r3, r0
 800134a:	2b0d      	cmp	r3, #13
 800134c:	f200 833a 	bhi.w	80019c4 <dumpSensorManager_handler+0x6b0>
 8001350:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <dumpSensorManager_handler+0x44>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	08001391 	.word	0x08001391
 800135c:	080013c1 	.word	0x080013c1
 8001360:	08001409 	.word	0x08001409
 8001364:	08001455 	.word	0x08001455
 8001368:	08001497 	.word	0x08001497
 800136c:	080014fd 	.word	0x080014fd
 8001370:	0800154f 	.word	0x0800154f
 8001374:	080015b5 	.word	0x080015b5
 8001378:	08001649 	.word	0x08001649
 800137c:	080016db 	.word	0x080016db
 8001380:	08001865 	.word	0x08001865
 8001384:	080018c3 	.word	0x080018c3
 8001388:	08001969 	.word	0x08001969
 800138c:	08001997 	.word	0x08001997
	{
		case __dumpSensor_idle:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001390:	48a3      	ldr	r0, [pc, #652]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001392:	f000 fc1d 	bl	8001bd0 <fsmManager_isStateIn>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <dumpSensorManager_handler+0x8e>
				fsmManager_stateIn(&dumpSensorFsmState);
 800139c:	48a0      	ldr	r0, [pc, #640]	; (8001620 <dumpSensorManager_handler+0x30c>)
 800139e:	f000 fc2d 	bl	8001bfc <fsmManager_stateIn>
#if defined(STATUS_LED)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
#endif
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_readNvm);
 80013a2:	2101      	movs	r1, #1
 80013a4:	489e      	ldr	r0, [pc, #632]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80013a6:	f000 fbf1 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80013aa:	489d      	ldr	r0, [pc, #628]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80013ac:	f000 fc1b 	bl	8001be6 <fsmManager_isStateOut>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 831d 	beq.w	80019f2 <dumpSensorManager_handler+0x6de>
				fsmManager_stateOut(&dumpSensorFsmState);
 80013b8:	4899      	ldr	r0, [pc, #612]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80013ba:	f000 fc2e 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80013be:	e318      	b.n	80019f2 <dumpSensorManager_handler+0x6de>



		case __dumpSensor_readNvm:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80013c0:	4897      	ldr	r0, [pc, #604]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80013c2:	f000 fc05 	bl	8001bd0 <fsmManager_isStateIn>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <dumpSensorManager_handler+0xbe>
				fsmManager_stateIn(&dumpSensorFsmState);
 80013cc:	4894      	ldr	r0, [pc, #592]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80013ce:	f000 fc15 	bl	8001bfc <fsmManager_stateIn>
			}

			readNvm();
 80013d2:	f000 fb69 	bl	8001aa8 <readNvm>
			writeNvm();
 80013d6:	f000 fb85 	bl	8001ae4 <writeNvm>

			//Gets product ID
			productId = (((uint32_t) reg[NVM_ID_HIGH].word) << 16) | reg[NVM_ID_LOW].word;
 80013da:	4b92      	ldr	r3, [pc, #584]	; (8001624 <dumpSensorManager_handler+0x310>)
 80013dc:	889b      	ldrh	r3, [r3, #4]
 80013de:	041b      	lsls	r3, r3, #16
 80013e0:	4a90      	ldr	r2, [pc, #576]	; (8001624 <dumpSensorManager_handler+0x310>)
 80013e2:	8852      	ldrh	r2, [r2, #2]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	4a90      	ldr	r2, [pc, #576]	; (8001628 <dumpSensorManager_handler+0x314>)
 80013e8:	6013      	str	r3, [r2, #0]

			//Gets flags


			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureBattery);
 80013ea:	2102      	movs	r1, #2
 80013ec:	488c      	ldr	r0, [pc, #560]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80013ee:	f000 fbcd 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80013f2:	488b      	ldr	r0, [pc, #556]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80013f4:	f000 fbf7 	bl	8001be6 <fsmManager_isStateOut>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 82fb 	beq.w	80019f6 <dumpSensorManager_handler+0x6e2>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001400:	4887      	ldr	r0, [pc, #540]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001402:	f000 fc0a 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8001406:	e2f6      	b.n	80019f6 <dumpSensorManager_handler+0x6e2>



		case __dumpSensor_measureBattery:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001408:	4885      	ldr	r0, [pc, #532]	; (8001620 <dumpSensorManager_handler+0x30c>)
 800140a:	f000 fbe1 	bl	8001bd0 <fsmManager_isStateIn>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <dumpSensorManager_handler+0x106>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001414:	4882      	ldr	r0, [pc, #520]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001416:	f000 fbf1 	bl	8001bfc <fsmManager_stateIn>
			}

			//Gets battery level percetange
			battery = 0.50;
 800141a:	4b84      	ldr	r3, [pc, #528]	; (800162c <dumpSensorManager_handler+0x318>)
 800141c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001420:	601a      	str	r2, [r3, #0]
			batteryPercent = battery*100;
 8001422:	4b82      	ldr	r3, [pc, #520]	; (800162c <dumpSensorManager_handler+0x318>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4982      	ldr	r1, [pc, #520]	; (8001630 <dumpSensorManager_handler+0x31c>)
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fbbd 	bl	8000ba8 <__aeabi_fmul>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b80      	ldr	r3, [pc, #512]	; (8001634 <dumpSensorManager_handler+0x320>)
 8001434:	601a      	str	r2, [r3, #0]
			if(batteryPercent < DUMPSTER_BATTERY_PERC_TRIG_NEG || ) {
				flags_dumpSensor.bits.gsmModule_turnOn = 1;
			}
			*/

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureTemperature);
 8001436:	2103      	movs	r1, #3
 8001438:	4879      	ldr	r0, [pc, #484]	; (8001620 <dumpSensorManager_handler+0x30c>)
 800143a:	f000 fba7 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 800143e:	4878      	ldr	r0, [pc, #480]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001440:	f000 fbd1 	bl	8001be6 <fsmManager_isStateOut>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 82d7 	beq.w	80019fa <dumpSensorManager_handler+0x6e6>
				fsmManager_stateOut(&dumpSensorFsmState);
 800144c:	4874      	ldr	r0, [pc, #464]	; (8001620 <dumpSensorManager_handler+0x30c>)
 800144e:	f000 fbe4 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8001452:	e2d2      	b.n	80019fa <dumpSensorManager_handler+0x6e6>



		case __dumpSensor_measureTemperature:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001454:	4872      	ldr	r0, [pc, #456]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001456:	f000 fbbb 	bl	8001bd0 <fsmManager_isStateIn>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <dumpSensorManager_handler+0x156>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001460:	486f      	ldr	r0, [pc, #444]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001462:	f000 fbcb 	bl	8001bfc <fsmManager_stateIn>

				tempSensor_measure();
 8001466:	f003 fcc5 	bl	8004df4 <tempSensor_measure>
			}

			if(flags_dumpSensor.bits.tempSensor_measureDone == 1) {
 800146a:	4b6c      	ldr	r3, [pc, #432]	; (800161c <dumpSensorManager_handler+0x308>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <dumpSensorManager_handler+0x16c>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureLevel);
 8001478:	2104      	movs	r1, #4
 800147a:	4869      	ldr	r0, [pc, #420]	; (8001620 <dumpSensorManager_handler+0x30c>)
 800147c:	f000 fb86 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001480:	4867      	ldr	r0, [pc, #412]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001482:	f000 fbb0 	bl	8001be6 <fsmManager_isStateOut>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 82b8 	beq.w	80019fe <dumpSensorManager_handler+0x6ea>
				fsmManager_stateOut(&dumpSensorFsmState);
 800148e:	4864      	ldr	r0, [pc, #400]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001490:	f000 fbc3 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8001494:	e2b3      	b.n	80019fe <dumpSensorManager_handler+0x6ea>



		case __dumpSensor_measureLevel:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001496:	4862      	ldr	r0, [pc, #392]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001498:	f000 fb9a 	bl	8001bd0 <fsmManager_isStateIn>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <dumpSensorManager_handler+0x1a2>
				fsmManager_stateIn(&dumpSensorFsmState);
 80014a2:	485f      	ldr	r0, [pc, #380]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80014a4:	f000 fbaa 	bl	8001bfc <fsmManager_stateIn>

				usSensor_powerOn();
 80014a8:	f003 ff02 	bl	80052b0 <usSensor_powerOn>
				usSensor_measure(temperature);
 80014ac:	4b62      	ldr	r3, [pc, #392]	; (8001638 <dumpSensorManager_handler+0x324>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 ff0b 	bl	80052cc <usSensor_measure>
			}

			if(flags_dumpSensor.bits.usSensor_measureDone == 1) {
 80014b6:	4b59      	ldr	r3, [pc, #356]	; (800161c <dumpSensorManager_handler+0x308>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00e      	beq.n	80014e2 <dumpSensorManager_handler+0x1ce>
				//Calculates the percentage of the level of the dumpster
				distancePercent = calculateDistancePercentage(distance);
 80014c4:	4b5d      	ldr	r3, [pc, #372]	; (800163c <dumpSensorManager_handler+0x328>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fab3 	bl	8001a34 <calculateDistancePercentage>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a5b      	ldr	r2, [pc, #364]	; (8001640 <dumpSensorManager_handler+0x32c>)
 80014d2:	6013      	str	r3, [r2, #0]
#if defined PROJECT_NOLOGIC
				flags_dumpSensor.bits.gsmModule_turnOn = 1;
 80014d4:	4b51      	ldr	r3, [pc, #324]	; (800161c <dumpSensorManager_handler+0x308>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	705a      	strb	r2, [r3, #1]
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_heatGasSensor);
 80014da:	2105      	movs	r1, #5
 80014dc:	4850      	ldr	r0, [pc, #320]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80014de:	f000 fb55 	bl	8001b8c <fsmManager_gotoState>
				else {
					fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
				}
#endif
			}
			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80014e2:	484f      	ldr	r0, [pc, #316]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80014e4:	f000 fb7f 	bl	8001be6 <fsmManager_isStateOut>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8289 	beq.w	8001a02 <dumpSensorManager_handler+0x6ee>
				fsmManager_stateOut(&dumpSensorFsmState);
 80014f0:	484b      	ldr	r0, [pc, #300]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80014f2:	f000 fb92 	bl	8001c1a <fsmManager_stateOut>

				usSensor_powerOff();
 80014f6:	f003 fee2 	bl	80052be <usSensor_powerOff>
			}
			break;
 80014fa:	e282      	b.n	8001a02 <dumpSensorManager_handler+0x6ee>

		case __dumpSensor_heatGasSensor:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80014fc:	4848      	ldr	r0, [pc, #288]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80014fe:	f000 fb67 	bl	8001bd0 <fsmManager_isStateIn>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <dumpSensorManager_handler+0x20c>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001508:	4845      	ldr	r0, [pc, #276]	; (8001620 <dumpSensorManager_handler+0x30c>)
 800150a:	f000 fb77 	bl	8001bfc <fsmManager_stateIn>

				nh3Sensor_powerOn();
 800150e:	f003 f8b3 	bl	8004678 <nh3Sensor_powerOn>
				ch4Sensor_powerOn();
 8001512:	f7ff fddb 	bl	80010cc <ch4Sensor_powerOn>

				softTimer_start(&timer, 6*1000);
 8001516:	f241 7170 	movw	r1, #6000	; 0x1770
 800151a:	484a      	ldr	r0, [pc, #296]	; (8001644 <dumpSensorManager_handler+0x330>)
 800151c:	f003 f972 	bl	8004804 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 8001520:	4848      	ldr	r0, [pc, #288]	; (8001644 <dumpSensorManager_handler+0x330>)
 8001522:	f003 f983 	bl	800482c <softTimer_expired>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <dumpSensorManager_handler+0x220>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureNh3);
 800152c:	2106      	movs	r1, #6
 800152e:	483c      	ldr	r0, [pc, #240]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001530:	f000 fb2c 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001534:	483a      	ldr	r0, [pc, #232]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001536:	f000 fb56 	bl	8001be6 <fsmManager_isStateOut>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 8262 	beq.w	8001a06 <dumpSensorManager_handler+0x6f2>
				fsmManager_stateOut(&dumpSensorFsmState);
 8001542:	4837      	ldr	r0, [pc, #220]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001544:	f000 fb69 	bl	8001c1a <fsmManager_stateOut>

				usSensor_powerOff();
 8001548:	f003 feb9 	bl	80052be <usSensor_powerOff>
			}
			break;
 800154c:	e25b      	b.n	8001a06 <dumpSensorManager_handler+0x6f2>

		case __dumpSensor_measureNh3:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 800154e:	4834      	ldr	r0, [pc, #208]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001550:	f000 fb3e 	bl	8001bd0 <fsmManager_isStateIn>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <dumpSensorManager_handler+0x25a>
				fsmManager_stateIn(&dumpSensorFsmState);
 800155a:	4831      	ldr	r0, [pc, #196]	; (8001620 <dumpSensorManager_handler+0x30c>)
 800155c:	f000 fb4e 	bl	8001bfc <fsmManager_stateIn>

				nh3Sensor_measure();
 8001560:	f003 f86e 	bl	8004640 <nh3Sensor_measure>

				softTimer_start(&timer, 500);
 8001564:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001568:	4836      	ldr	r0, [pc, #216]	; (8001644 <dumpSensorManager_handler+0x330>)
 800156a:	f003 f94b 	bl	8004804 <softTimer_start>
			}

			if(flags_dumpSensor.bits.nh3Sensor_measureDone == 1) {
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <dumpSensorManager_handler+0x308>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <dumpSensorManager_handler+0x272>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureCh4);
 800157c:	2107      	movs	r1, #7
 800157e:	4828      	ldr	r0, [pc, #160]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001580:	f000 fb04 	bl	8001b8c <fsmManager_gotoState>
 8001584:	e009      	b.n	800159a <dumpSensorManager_handler+0x286>
			}
			else if(softTimer_expired(&timer)) {
 8001586:	482f      	ldr	r0, [pc, #188]	; (8001644 <dumpSensorManager_handler+0x330>)
 8001588:	f003 f950 	bl	800482c <softTimer_expired>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <dumpSensorManager_handler+0x286>
				//If there is not a measurement within 500 mseg, stop trying to measure
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_measureCh4);
 8001592:	2107      	movs	r1, #7
 8001594:	4822      	ldr	r0, [pc, #136]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001596:	f000 faf9 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 800159a:	4821      	ldr	r0, [pc, #132]	; (8001620 <dumpSensorManager_handler+0x30c>)
 800159c:	f000 fb23 	bl	8001be6 <fsmManager_isStateOut>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8231 	beq.w	8001a0a <dumpSensorManager_handler+0x6f6>
				fsmManager_stateOut(&dumpSensorFsmState);
 80015a8:	481d      	ldr	r0, [pc, #116]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80015aa:	f000 fb36 	bl	8001c1a <fsmManager_stateOut>

				nh3Sensor_powerOff();
 80015ae:	f003 f86a 	bl	8004686 <nh3Sensor_powerOff>
			}
			break;
 80015b2:	e22a      	b.n	8001a0a <dumpSensorManager_handler+0x6f6>



		case __dumpSensor_measureCh4:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80015b4:	481a      	ldr	r0, [pc, #104]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80015b6:	f000 fb0b 	bl	8001bd0 <fsmManager_isStateIn>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <dumpSensorManager_handler+0x2c0>
				fsmManager_stateIn(&dumpSensorFsmState);
 80015c0:	4817      	ldr	r0, [pc, #92]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80015c2:	f000 fb1b 	bl	8001bfc <fsmManager_stateIn>

				ch4Sensor_measure();
 80015c6:	f7ff fd65 	bl	8001094 <ch4Sensor_measure>

				softTimer_start(&timer, 500);
 80015ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015ce:	481d      	ldr	r0, [pc, #116]	; (8001644 <dumpSensorManager_handler+0x330>)
 80015d0:	f003 f918 	bl	8004804 <softTimer_start>
			}

			if(flags_dumpSensor.bits.ch4Sensor_measureDone == 1) {
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <dumpSensorManager_handler+0x308>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <dumpSensorManager_handler+0x2d8>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_getGps);
 80015e2:	2108      	movs	r1, #8
 80015e4:	480e      	ldr	r0, [pc, #56]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80015e6:	f000 fad1 	bl	8001b8c <fsmManager_gotoState>
 80015ea:	e009      	b.n	8001600 <dumpSensorManager_handler+0x2ec>
			}
			else if(softTimer_expired(&timer)) {
 80015ec:	4815      	ldr	r0, [pc, #84]	; (8001644 <dumpSensorManager_handler+0x330>)
 80015ee:	f003 f91d 	bl	800482c <softTimer_expired>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <dumpSensorManager_handler+0x2ec>
				//If there is not a measurement within 500 mseg, stop trying to measure
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_getGps);
 80015f8:	2108      	movs	r1, #8
 80015fa:	4809      	ldr	r0, [pc, #36]	; (8001620 <dumpSensorManager_handler+0x30c>)
 80015fc:	f000 fac6 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001600:	4807      	ldr	r0, [pc, #28]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001602:	f000 faf0 	bl	8001be6 <fsmManager_isStateOut>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 8200 	beq.w	8001a0e <dumpSensorManager_handler+0x6fa>
				fsmManager_stateOut(&dumpSensorFsmState);
 800160e:	4804      	ldr	r0, [pc, #16]	; (8001620 <dumpSensorManager_handler+0x30c>)
 8001610:	f000 fb03 	bl	8001c1a <fsmManager_stateOut>

				ch4Sensor_powerOff();
 8001614:	f7ff fd61 	bl	80010da <ch4Sensor_powerOff>
			}
			break;
 8001618:	e1f9      	b.n	8001a0e <dumpSensorManager_handler+0x6fa>
 800161a:	bf00      	nop
 800161c:	20000608 	.word	0x20000608
 8001620:	200005fc 	.word	0x200005fc
 8001624:	200005e8 	.word	0x200005e8
 8001628:	200000c4 	.word	0x200000c4
 800162c:	200000d8 	.word	0x200000d8
 8001630:	42c80000 	.word	0x42c80000
 8001634:	200000e0 	.word	0x200000e0
 8001638:	200000d4 	.word	0x200000d4
 800163c:	200000c8 	.word	0x200000c8
 8001640:	200000dc 	.word	0x200000dc
 8001644:	2000017c 	.word	0x2000017c



		case __dumpSensor_getGps:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001648:	48b6      	ldr	r0, [pc, #728]	; (8001924 <dumpSensorManager_handler+0x610>)
 800164a:	f000 fac1 	bl	8001bd0 <fsmManager_isStateIn>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <dumpSensorManager_handler+0x352>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001654:	48b3      	ldr	r0, [pc, #716]	; (8001924 <dumpSensorManager_handler+0x610>)
 8001656:	f000 fad1 	bl	8001bfc <fsmManager_stateIn>

				gsmModule_gpsOn();
 800165a:	f000 fb75 	bl	8001d48 <gsmModule_gpsOn>
				softTimer_start(&timer, 20*60*1000);
 800165e:	49b2      	ldr	r1, [pc, #712]	; (8001928 <dumpSensorManager_handler+0x614>)
 8001660:	48b2      	ldr	r0, [pc, #712]	; (800192c <dumpSensorManager_handler+0x618>)
 8001662:	f003 f8cf 	bl	8004804 <softTimer_start>
			}

			if(gsmModule_isGpsFixed()) {
 8001666:	f000 fbf3 	bl	8001e50 <gsmModule_isGpsFixed>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <dumpSensorManager_handler+0x366>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sendPackage);
 8001670:	2109      	movs	r1, #9
 8001672:	48ac      	ldr	r0, [pc, #688]	; (8001924 <dumpSensorManager_handler+0x610>)
 8001674:	f000 fa8a 	bl	8001b8c <fsmManager_gotoState>
 8001678:	e020      	b.n	80016bc <dumpSensorManager_handler+0x3a8>
			}
			else if(softTimer_expired(&timer)) {
 800167a:	48ac      	ldr	r0, [pc, #688]	; (800192c <dumpSensorManager_handler+0x618>)
 800167c:	f003 f8d6 	bl	800482c <softTimer_expired>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d004      	beq.n	8001690 <dumpSensorManager_handler+0x37c>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sendPackage);
 8001686:	2109      	movs	r1, #9
 8001688:	48a6      	ldr	r0, [pc, #664]	; (8001924 <dumpSensorManager_handler+0x610>)
 800168a:	f000 fa7f 	bl	8001b8c <fsmManager_gotoState>
 800168e:	e015      	b.n	80016bc <dumpSensorManager_handler+0x3a8>
			}
			else if(gsmModule_isPowered() && gsmModule_isGpsOn() && !gsmModule_isGpsFixed() && !gsmModule_requestedGpsInfo()) {
 8001690:	f000 fbc2 	bl	8001e18 <gsmModule_isPowered>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d010      	beq.n	80016bc <dumpSensorManager_handler+0x3a8>
 800169a:	f000 fbcb 	bl	8001e34 <gsmModule_isGpsOn>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00b      	beq.n	80016bc <dumpSensorManager_handler+0x3a8>
 80016a4:	f000 fbd4 	bl	8001e50 <gsmModule_isGpsFixed>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <dumpSensorManager_handler+0x3a8>
 80016ae:	f000 fbf9 	bl	8001ea4 <gsmModule_requestedGpsInfo>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <dumpSensorManager_handler+0x3a8>
				gsmModule_gpsInfo();
 80016b8:	f000 fb54 	bl	8001d64 <gsmModule_gpsInfo>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80016bc:	4899      	ldr	r0, [pc, #612]	; (8001924 <dumpSensorManager_handler+0x610>)
 80016be:	f000 fa92 	bl	8001be6 <fsmManager_isStateOut>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 81a4 	beq.w	8001a12 <dumpSensorManager_handler+0x6fe>
				fsmManager_stateOut(&dumpSensorFsmState);
 80016ca:	4896      	ldr	r0, [pc, #600]	; (8001924 <dumpSensorManager_handler+0x610>)
 80016cc:	f000 faa5 	bl	8001c1a <fsmManager_stateOut>

				gsmModule_gpsOff();
 80016d0:	f000 fb56 	bl	8001d80 <gsmModule_gpsOff>
				gsmModule_serverConnect();
 80016d4:	f000 fb62 	bl	8001d9c <gsmModule_serverConnect>
			}
			break;
 80016d8:	e19b      	b.n	8001a12 <dumpSensorManager_handler+0x6fe>



		case __dumpSensor_sendPackage:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80016da:	4892      	ldr	r0, [pc, #584]	; (8001924 <dumpSensorManager_handler+0x610>)
 80016dc:	f000 fa78 	bl	8001bd0 <fsmManager_isStateIn>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8082 	beq.w	80017ec <dumpSensorManager_handler+0x4d8>
				fsmManager_stateIn(&dumpSensorFsmState);
 80016e8:	488e      	ldr	r0, [pc, #568]	; (8001924 <dumpSensorManager_handler+0x610>)
 80016ea:	f000 fa87 	bl	8001bfc <fsmManager_stateIn>

				payloadDataToSend[0] = '\0';
 80016ee:	4b90      	ldr	r3, [pc, #576]	; (8001930 <dumpSensorManager_handler+0x61c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
				string_appendString(payloadDataToSend, (uint8_t *) "id=");
 80016f4:	498f      	ldr	r1, [pc, #572]	; (8001934 <dumpSensorManager_handler+0x620>)
 80016f6:	488e      	ldr	r0, [pc, #568]	; (8001930 <dumpSensorManager_handler+0x61c>)
 80016f8:	f003 ff5f 	bl	80055ba <string_appendString>
				ascii_convertNum(auxToSend, productId);
 80016fc:	4b8e      	ldr	r3, [pc, #568]	; (8001938 <dumpSensorManager_handler+0x624>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	488e      	ldr	r0, [pc, #568]	; (800193c <dumpSensorManager_handler+0x628>)
 8001704:	f003 ff86 	bl	8005614 <ascii_convertNum>
				string_appendString(payloadDataToSend, auxToSend);
 8001708:	498c      	ldr	r1, [pc, #560]	; (800193c <dumpSensorManager_handler+0x628>)
 800170a:	4889      	ldr	r0, [pc, #548]	; (8001930 <dumpSensorManager_handler+0x61c>)
 800170c:	f003 ff55 	bl	80055ba <string_appendString>
				string_appendChar(payloadDataToSend, '&');
 8001710:	2126      	movs	r1, #38	; 0x26
 8001712:	4887      	ldr	r0, [pc, #540]	; (8001930 <dumpSensorManager_handler+0x61c>)
 8001714:	f003 ff2e 	bl	8005574 <string_appendChar>

				string_appendString(payloadDataToSend, (uint8_t *) "bat=");
 8001718:	4989      	ldr	r1, [pc, #548]	; (8001940 <dumpSensorManager_handler+0x62c>)
 800171a:	4885      	ldr	r0, [pc, #532]	; (8001930 <dumpSensorManager_handler+0x61c>)
 800171c:	f003 ff4d 	bl	80055ba <string_appendString>
				ascii_convertNum(auxToSend, (uint32_t) batteryPercent);
 8001720:	4b88      	ldr	r3, [pc, #544]	; (8001944 <dumpSensorManager_handler+0x630>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fc05 	bl	8000f34 <__aeabi_f2uiz>
 800172a:	4603      	mov	r3, r0
 800172c:	4619      	mov	r1, r3
 800172e:	4883      	ldr	r0, [pc, #524]	; (800193c <dumpSensorManager_handler+0x628>)
 8001730:	f003 ff70 	bl	8005614 <ascii_convertNum>
				string_appendString(payloadDataToSend, auxToSend);
 8001734:	4981      	ldr	r1, [pc, #516]	; (800193c <dumpSensorManager_handler+0x628>)
 8001736:	487e      	ldr	r0, [pc, #504]	; (8001930 <dumpSensorManager_handler+0x61c>)
 8001738:	f003 ff3f 	bl	80055ba <string_appendString>
				string_appendChar(payloadDataToSend, '&');
 800173c:	2126      	movs	r1, #38	; 0x26
 800173e:	487c      	ldr	r0, [pc, #496]	; (8001930 <dumpSensorManager_handler+0x61c>)
 8001740:	f003 ff18 	bl	8005574 <string_appendChar>

				string_appendString(payloadDataToSend, (uint8_t *) "level=");
 8001744:	4980      	ldr	r1, [pc, #512]	; (8001948 <dumpSensorManager_handler+0x634>)
 8001746:	487a      	ldr	r0, [pc, #488]	; (8001930 <dumpSensorManager_handler+0x61c>)
 8001748:	f003 ff37 	bl	80055ba <string_appendString>
				ascii_convertNum(auxToSend, (uint32_t) distancePercent);
 800174c:	4b7f      	ldr	r3, [pc, #508]	; (800194c <dumpSensorManager_handler+0x638>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fbef 	bl	8000f34 <__aeabi_f2uiz>
 8001756:	4603      	mov	r3, r0
 8001758:	4619      	mov	r1, r3
 800175a:	4878      	ldr	r0, [pc, #480]	; (800193c <dumpSensorManager_handler+0x628>)
 800175c:	f003 ff5a 	bl	8005614 <ascii_convertNum>
				string_appendString(payloadDataToSend, auxToSend);
 8001760:	4976      	ldr	r1, [pc, #472]	; (800193c <dumpSensorManager_handler+0x628>)
 8001762:	4873      	ldr	r0, [pc, #460]	; (8001930 <dumpSensorManager_handler+0x61c>)
 8001764:	f003 ff29 	bl	80055ba <string_appendString>
				string_appendChar(payloadDataToSend, '&');
 8001768:	2126      	movs	r1, #38	; 0x26
 800176a:	4871      	ldr	r0, [pc, #452]	; (8001930 <dumpSensorManager_handler+0x61c>)
 800176c:	f003 ff02 	bl	8005574 <string_appendChar>

				if(flags_dumpSensor.bits.nh3Sensor_measureDone) {
 8001770:	4b77      	ldr	r3, [pc, #476]	; (8001950 <dumpSensorManager_handler+0x63c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d015      	beq.n	80017aa <dumpSensorManager_handler+0x496>
					string_appendString(payloadDataToSend, (uint8_t *) "nh3=");
 800177e:	4975      	ldr	r1, [pc, #468]	; (8001954 <dumpSensorManager_handler+0x640>)
 8001780:	486b      	ldr	r0, [pc, #428]	; (8001930 <dumpSensorManager_handler+0x61c>)
 8001782:	f003 ff1a 	bl	80055ba <string_appendString>
					ascii_convertNum(auxToSend, (uint32_t) nh3Concentration);
 8001786:	4b74      	ldr	r3, [pc, #464]	; (8001958 <dumpSensorManager_handler+0x644>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fbd2 	bl	8000f34 <__aeabi_f2uiz>
 8001790:	4603      	mov	r3, r0
 8001792:	4619      	mov	r1, r3
 8001794:	4869      	ldr	r0, [pc, #420]	; (800193c <dumpSensorManager_handler+0x628>)
 8001796:	f003 ff3d 	bl	8005614 <ascii_convertNum>
					string_appendString(payloadDataToSend, auxToSend);
 800179a:	4968      	ldr	r1, [pc, #416]	; (800193c <dumpSensorManager_handler+0x628>)
 800179c:	4864      	ldr	r0, [pc, #400]	; (8001930 <dumpSensorManager_handler+0x61c>)
 800179e:	f003 ff0c 	bl	80055ba <string_appendString>
					string_appendChar(payloadDataToSend, '&');
 80017a2:	2126      	movs	r1, #38	; 0x26
 80017a4:	4862      	ldr	r0, [pc, #392]	; (8001930 <dumpSensorManager_handler+0x61c>)
 80017a6:	f003 fee5 	bl	8005574 <string_appendChar>
				}

				if(flags_dumpSensor.bits.ch4Sensor_measureDone) {
 80017aa:	4b69      	ldr	r3, [pc, #420]	; (8001950 <dumpSensorManager_handler+0x63c>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d015      	beq.n	80017e4 <dumpSensorManager_handler+0x4d0>
					string_appendString(payloadDataToSend, (uint8_t *) "ch4=");
 80017b8:	4968      	ldr	r1, [pc, #416]	; (800195c <dumpSensorManager_handler+0x648>)
 80017ba:	485d      	ldr	r0, [pc, #372]	; (8001930 <dumpSensorManager_handler+0x61c>)
 80017bc:	f003 fefd 	bl	80055ba <string_appendString>
					ascii_convertNum(auxToSend, (uint32_t) ch4Concentration);
 80017c0:	4b67      	ldr	r3, [pc, #412]	; (8001960 <dumpSensorManager_handler+0x64c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fbb5 	bl	8000f34 <__aeabi_f2uiz>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4619      	mov	r1, r3
 80017ce:	485b      	ldr	r0, [pc, #364]	; (800193c <dumpSensorManager_handler+0x628>)
 80017d0:	f003 ff20 	bl	8005614 <ascii_convertNum>
					string_appendString(payloadDataToSend, auxToSend);
 80017d4:	4959      	ldr	r1, [pc, #356]	; (800193c <dumpSensorManager_handler+0x628>)
 80017d6:	4856      	ldr	r0, [pc, #344]	; (8001930 <dumpSensorManager_handler+0x61c>)
 80017d8:	f003 feef 	bl	80055ba <string_appendString>
					string_appendChar(payloadDataToSend, '"');
 80017dc:	2122      	movs	r1, #34	; 0x22
 80017de:	4854      	ldr	r0, [pc, #336]	; (8001930 <dumpSensorManager_handler+0x61c>)
 80017e0:	f003 fec8 	bl	8005574 <string_appendChar>
				}

				softTimer_start(&timer, 2*60*1000);
 80017e4:	495f      	ldr	r1, [pc, #380]	; (8001964 <dumpSensorManager_handler+0x650>)
 80017e6:	4851      	ldr	r0, [pc, #324]	; (800192c <dumpSensorManager_handler+0x618>)
 80017e8:	f003 f80c 	bl	8004804 <softTimer_start>
			}


			if(gsmModule_isServerDataSent()) {
 80017ec:	f000 fb4c 	bl	8001e88 <gsmModule_isServerDataSent>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <dumpSensorManager_handler+0x4ec>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_disconnectServer);
 80017f6:	210a      	movs	r1, #10
 80017f8:	484a      	ldr	r0, [pc, #296]	; (8001924 <dumpSensorManager_handler+0x610>)
 80017fa:	f000 f9c7 	bl	8001b8c <fsmManager_gotoState>
 80017fe:	e026      	b.n	800184e <dumpSensorManager_handler+0x53a>
			}
			else if(softTimer_expired(&timer) || gsmModule_errorServerSendData()) {
 8001800:	484a      	ldr	r0, [pc, #296]	; (800192c <dumpSensorManager_handler+0x618>)
 8001802:	f003 f813 	bl	800482c <softTimer_expired>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d104      	bne.n	8001816 <dumpSensorManager_handler+0x502>
 800180c:	f000 fb66 	bl	8001edc <gsmModule_errorServerSendData>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d004      	beq.n	8001820 <dumpSensorManager_handler+0x50c>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_disconnectServer);
 8001816:	210a      	movs	r1, #10
 8001818:	4842      	ldr	r0, [pc, #264]	; (8001924 <dumpSensorManager_handler+0x610>)
 800181a:	f000 f9b7 	bl	8001b8c <fsmManager_gotoState>
 800181e:	e016      	b.n	800184e <dumpSensorManager_handler+0x53a>
			}
			else if(gsmModule_isPowered() && gsmModule_isServerConnected() && !gsmModule_isServerDataSent() && !gsmModule_requestedServerDataSend()) {
 8001820:	f000 fafa 	bl	8001e18 <gsmModule_isPowered>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d011      	beq.n	800184e <dumpSensorManager_handler+0x53a>
 800182a:	f000 fb1f 	bl	8001e6c <gsmModule_isServerConnected>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00c      	beq.n	800184e <dumpSensorManager_handler+0x53a>
 8001834:	f000 fb28 	bl	8001e88 <gsmModule_isServerDataSent>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d107      	bne.n	800184e <dumpSensorManager_handler+0x53a>
 800183e:	f000 fb3f 	bl	8001ec0 <gsmModule_requestedServerDataSend>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <dumpSensorManager_handler+0x53a>
				gsmModule_serverDataSend(payloadDataToSend);
 8001848:	4839      	ldr	r0, [pc, #228]	; (8001930 <dumpSensorManager_handler+0x61c>)
 800184a:	f000 fab5 	bl	8001db8 <gsmModule_serverDataSend>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 800184e:	4835      	ldr	r0, [pc, #212]	; (8001924 <dumpSensorManager_handler+0x610>)
 8001850:	f000 f9c9 	bl	8001be6 <fsmManager_isStateOut>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80dd 	beq.w	8001a16 <dumpSensorManager_handler+0x702>
				fsmManager_stateOut(&dumpSensorFsmState);
 800185c:	4831      	ldr	r0, [pc, #196]	; (8001924 <dumpSensorManager_handler+0x610>)
 800185e:	f000 f9dc 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8001862:	e0d8      	b.n	8001a16 <dumpSensorManager_handler+0x702>



		case __dumpSensor_disconnectServer:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001864:	482f      	ldr	r0, [pc, #188]	; (8001924 <dumpSensorManager_handler+0x610>)
 8001866:	f000 f9b3 	bl	8001bd0 <fsmManager_isStateIn>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <dumpSensorManager_handler+0x570>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001870:	482c      	ldr	r0, [pc, #176]	; (8001924 <dumpSensorManager_handler+0x610>)
 8001872:	f000 f9c3 	bl	8001bfc <fsmManager_stateIn>

				gsmModule_serverDisconnect();
 8001876:	f000 fac1 	bl	8001dfc <gsmModule_serverDisconnect>

				softTimer_start(&timer, 5*1000);
 800187a:	f241 3188 	movw	r1, #5000	; 0x1388
 800187e:	482b      	ldr	r0, [pc, #172]	; (800192c <dumpSensorManager_handler+0x618>)
 8001880:	f002 ffc0 	bl	8004804 <softTimer_start>
			}

			if(gsmModule_isServerConnected() == 0) {
 8001884:	f000 faf2 	bl	8001e6c <gsmModule_isServerConnected>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d104      	bne.n	8001898 <dumpSensorManager_handler+0x584>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGsmModule);
 800188e:	210b      	movs	r1, #11
 8001890:	4824      	ldr	r0, [pc, #144]	; (8001924 <dumpSensorManager_handler+0x610>)
 8001892:	f000 f97b 	bl	8001b8c <fsmManager_gotoState>
 8001896:	e009      	b.n	80018ac <dumpSensorManager_handler+0x598>
			}
			else if(softTimer_expired(&timer)) {
 8001898:	4824      	ldr	r0, [pc, #144]	; (800192c <dumpSensorManager_handler+0x618>)
 800189a:	f002 ffc7 	bl	800482c <softTimer_expired>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <dumpSensorManager_handler+0x598>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_turnOffGsmModule);
 80018a4:	210b      	movs	r1, #11
 80018a6:	481f      	ldr	r0, [pc, #124]	; (8001924 <dumpSensorManager_handler+0x610>)
 80018a8:	f000 f970 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80018ac:	481d      	ldr	r0, [pc, #116]	; (8001924 <dumpSensorManager_handler+0x610>)
 80018ae:	f000 f99a 	bl	8001be6 <fsmManager_isStateOut>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80b0 	beq.w	8001a1a <dumpSensorManager_handler+0x706>
				fsmManager_stateOut(&dumpSensorFsmState);
 80018ba:	481a      	ldr	r0, [pc, #104]	; (8001924 <dumpSensorManager_handler+0x610>)
 80018bc:	f000 f9ad 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80018c0:	e0ab      	b.n	8001a1a <dumpSensorManager_handler+0x706>



		case __dumpSensor_turnOffGsmModule:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80018c2:	4818      	ldr	r0, [pc, #96]	; (8001924 <dumpSensorManager_handler+0x610>)
 80018c4:	f000 f984 	bl	8001bd0 <fsmManager_isStateIn>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <dumpSensorManager_handler+0x5d2>
				fsmManager_stateIn(&dumpSensorFsmState);
 80018ce:	4815      	ldr	r0, [pc, #84]	; (8001924 <dumpSensorManager_handler+0x610>)
 80018d0:	f000 f994 	bl	8001bfc <fsmManager_stateIn>

				gsmModule_powerOff();
 80018d4:	f000 fa15 	bl	8001d02 <gsmModule_powerOff>
				gsmModule_pwrkeyOff();
 80018d8:	f000 fa28 	bl	8001d2c <gsmModule_pwrkeyOff>

				softTimer_start(&timer, 10*1000);
 80018dc:	f242 7110 	movw	r1, #10000	; 0x2710
 80018e0:	4812      	ldr	r0, [pc, #72]	; (800192c <dumpSensorManager_handler+0x618>)
 80018e2:	f002 ff8f 	bl	8004804 <softTimer_start>
			}

			if(gsmModule_isPowered() == 0) {
 80018e6:	f000 fa97 	bl	8001e18 <gsmModule_isPowered>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d104      	bne.n	80018fa <dumpSensorManager_handler+0x5e6>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
 80018f0:	210c      	movs	r1, #12
 80018f2:	480c      	ldr	r0, [pc, #48]	; (8001924 <dumpSensorManager_handler+0x610>)
 80018f4:	f000 f94a 	bl	8001b8c <fsmManager_gotoState>
 80018f8:	e009      	b.n	800190e <dumpSensorManager_handler+0x5fa>
			}
			else if(softTimer_expired(&timer)) {
 80018fa:	480c      	ldr	r0, [pc, #48]	; (800192c <dumpSensorManager_handler+0x618>)
 80018fc:	f002 ff96 	bl	800482c <softTimer_expired>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <dumpSensorManager_handler+0x5fa>
				fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_sleep);
 8001906:	210c      	movs	r1, #12
 8001908:	4806      	ldr	r0, [pc, #24]	; (8001924 <dumpSensorManager_handler+0x610>)
 800190a:	f000 f93f 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <dumpSensorManager_handler+0x610>)
 8001910:	f000 f969 	bl	8001be6 <fsmManager_isStateOut>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 8081 	beq.w	8001a1e <dumpSensorManager_handler+0x70a>
				fsmManager_stateOut(&dumpSensorFsmState);
 800191c:	4801      	ldr	r0, [pc, #4]	; (8001924 <dumpSensorManager_handler+0x610>)
 800191e:	f000 f97c 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8001922:	e07c      	b.n	8001a1e <dumpSensorManager_handler+0x70a>
 8001924:	200005fc 	.word	0x200005fc
 8001928:	00124f80 	.word	0x00124f80
 800192c:	2000017c 	.word	0x2000017c
 8001930:	200000e4 	.word	0x200000e4
 8001934:	080090a8 	.word	0x080090a8
 8001938:	200000c4 	.word	0x200000c4
 800193c:	20000148 	.word	0x20000148
 8001940:	080090ac 	.word	0x080090ac
 8001944:	200000e0 	.word	0x200000e0
 8001948:	080090b4 	.word	0x080090b4
 800194c:	200000dc 	.word	0x200000dc
 8001950:	20000608 	.word	0x20000608
 8001954:	080090bc 	.word	0x080090bc
 8001958:	200000cc 	.word	0x200000cc
 800195c:	080090c4 	.word	0x080090c4
 8001960:	200000d0 	.word	0x200000d0
 8001964:	0001d4c0 	.word	0x0001d4c0



		case __dumpSensor_sleep:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001968:	4831      	ldr	r0, [pc, #196]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 800196a:	f000 f931 	bl	8001bd0 <fsmManager_isStateIn>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <dumpSensorManager_handler+0x666>
				fsmManager_stateIn(&dumpSensorFsmState);
 8001974:	482e      	ldr	r0, [pc, #184]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 8001976:	f000 f941 	bl	8001bfc <fsmManager_stateIn>
			}

			//Enters standby mode
			//powerMode_enterStandbyMode(1*3);

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 800197a:	2100      	movs	r1, #0
 800197c:	482c      	ldr	r0, [pc, #176]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 800197e:	f000 f905 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 8001982:	482b      	ldr	r0, [pc, #172]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 8001984:	f000 f92f 	bl	8001be6 <fsmManager_isStateOut>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d049      	beq.n	8001a22 <dumpSensorManager_handler+0x70e>
				fsmManager_stateOut(&dumpSensorFsmState);
 800198e:	4828      	ldr	r0, [pc, #160]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 8001990:	f000 f943 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8001994:	e045      	b.n	8001a22 <dumpSensorManager_handler+0x70e>



		case __dumpSensor_error:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 8001996:	4826      	ldr	r0, [pc, #152]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 8001998:	f000 f91a 	bl	8001bd0 <fsmManager_isStateIn>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <dumpSensorManager_handler+0x694>
				fsmManager_stateIn(&dumpSensorFsmState);
 80019a2:	4823      	ldr	r0, [pc, #140]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 80019a4:	f000 f92a 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 80019a8:	2100      	movs	r1, #0
 80019aa:	4821      	ldr	r0, [pc, #132]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 80019ac:	f000 f8ee 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80019b0:	481f      	ldr	r0, [pc, #124]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 80019b2:	f000 f918 	bl	8001be6 <fsmManager_isStateOut>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d034      	beq.n	8001a26 <dumpSensorManager_handler+0x712>
				fsmManager_stateOut(&dumpSensorFsmState);
 80019bc:	481c      	ldr	r0, [pc, #112]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 80019be:	f000 f92c 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80019c2:	e030      	b.n	8001a26 <dumpSensorManager_handler+0x712>



		default:
			if(fsmManager_isStateIn(&dumpSensorFsmState)) {
 80019c4:	481a      	ldr	r0, [pc, #104]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 80019c6:	f000 f903 	bl	8001bd0 <fsmManager_isStateIn>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <dumpSensorManager_handler+0x6c2>
				fsmManager_stateIn(&dumpSensorFsmState);
 80019d0:	4817      	ldr	r0, [pc, #92]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 80019d2:	f000 f913 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&dumpSensorFsmState, __dumpSensor_idle);
 80019d6:	2100      	movs	r1, #0
 80019d8:	4815      	ldr	r0, [pc, #84]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 80019da:	f000 f8d7 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&dumpSensorFsmState)) {
 80019de:	4814      	ldr	r0, [pc, #80]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 80019e0:	f000 f901 	bl	8001be6 <fsmManager_isStateOut>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d01f      	beq.n	8001a2a <dumpSensorManager_handler+0x716>
				fsmManager_stateOut(&dumpSensorFsmState);
 80019ea:	4811      	ldr	r0, [pc, #68]	; (8001a30 <dumpSensorManager_handler+0x71c>)
 80019ec:	f000 f915 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80019f0:	e01b      	b.n	8001a2a <dumpSensorManager_handler+0x716>
			break;
 80019f2:	bf00      	nop
 80019f4:	e01a      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 80019f6:	bf00      	nop
 80019f8:	e018      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 80019fa:	bf00      	nop
 80019fc:	e016      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 80019fe:	bf00      	nop
 8001a00:	e014      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 8001a02:	bf00      	nop
 8001a04:	e012      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 8001a06:	bf00      	nop
 8001a08:	e010      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 8001a0a:	bf00      	nop
 8001a0c:	e00e      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 8001a0e:	bf00      	nop
 8001a10:	e00c      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 8001a12:	bf00      	nop
 8001a14:	e00a      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 8001a16:	bf00      	nop
 8001a18:	e008      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 8001a1a:	bf00      	nop
 8001a1c:	e006      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 8001a1e:	bf00      	nop
 8001a20:	e004      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 8001a22:	bf00      	nop
 8001a24:	e002      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 8001a26:	bf00      	nop
 8001a28:	e000      	b.n	8001a2c <dumpSensorManager_handler+0x718>
			break;
 8001a2a:	bf00      	nop
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200005fc 	.word	0x200005fc

08001a34 <calculateDistancePercentage>:

static float calculateDistancePercentage(float dist)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	float distPerc = 0;
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]

	distPerc = (DUMPSTER_DISTANCE_MAX-distance)*100/DUMPSTER_DISTANCE_MAX;
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <calculateDistancePercentage+0x68>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4815      	ldr	r0, [pc, #84]	; (8001aa0 <calculateDistancePercentage+0x6c>)
 8001a4a:	f7fe ffa3 	bl	8000994 <__aeabi_fsub>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4914      	ldr	r1, [pc, #80]	; (8001aa4 <calculateDistancePercentage+0x70>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f8a8 	bl	8000ba8 <__aeabi_fmul>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4911      	ldr	r1, [pc, #68]	; (8001aa0 <calculateDistancePercentage+0x6c>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f957 	bl	8000d10 <__aeabi_fdiv>
 8001a62:	4603      	mov	r3, r0
 8001a64:	60fb      	str	r3, [r7, #12]
	if(distPerc > 100) {
 8001a66:	490f      	ldr	r1, [pc, #60]	; (8001aa4 <calculateDistancePercentage+0x70>)
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff fa59 	bl	8000f20 <__aeabi_fcmpgt>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <calculateDistancePercentage+0x46>
		distPerc = 100;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <calculateDistancePercentage+0x70>)
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e00a      	b.n	8001a90 <calculateDistancePercentage+0x5c>
	}
	else if(distPerc < 0) {
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f7ff fa30 	bl	8000ee4 <__aeabi_fcmplt>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <calculateDistancePercentage+0x5c>
		distPerc = 0;
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
	}

	return distPerc;
 8001a90:	68fb      	ldr	r3, [r7, #12]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200000c8 	.word	0x200000c8
 8001aa0:	44e10000 	.word	0x44e10000
 8001aa4:	42c80000 	.word	0x42c80000

08001aa8 <readNvm>:

static void readNvm(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	e00d      	b.n	8001ad0 <readNvm+0x28>
		reg[i].word = nvm_readWord(NVM_REGISTER1+i);
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fe4f 	bl	800475c <nvm_readWord>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	b291      	uxth	r1, r2
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <readNvm+0x38>)
 8001ac6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	3301      	adds	r3, #1
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b09      	cmp	r3, #9
 8001ad4:	d9ee      	bls.n	8001ab4 <readNvm+0xc>
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200005e8 	.word	0x200005e8

08001ae4 <writeNvm>:

//https://docs.google.com/spreadsheets/d/1n-ANLwi3L4sAhEEs7HliKyX1nLDQ-HLQLX-bY1MBAcw/edit#gid=0
static void writeNvm(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
	//If it is needed to write to nvm, toggle the value of reg[NVM_FLAGS0].bits.bit0
	if(reg[NVM_FLAGS0].bits.bit0 != 1) {
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <writeNvm+0x78>)
 8001aec:	7a1b      	ldrb	r3, [r3, #8]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d12c      	bne.n	8001b52 <writeNvm+0x6e>
		reg[NVM_FLAGS0].bits.bit0 = 1;
 8001af8:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <writeNvm+0x78>)
 8001afa:	7a13      	ldrb	r3, [r2, #8]
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	7213      	strb	r3, [r2, #8]

		reg[NVM_ID_HIGH].word = 0x4095;
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <writeNvm+0x78>)
 8001b04:	f244 0295 	movw	r2, #16533	; 0x4095
 8001b08:	809a      	strh	r2, [r3, #4]
		reg[NVM_ID_LOW].word = 0x5621;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <writeNvm+0x78>)
 8001b0c:	f245 6221 	movw	r2, #22049	; 0x5621
 8001b10:	805a      	strh	r2, [r3, #2]

		reg[NVM_COUNTER_DAY].word = 0;
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <writeNvm+0x78>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	80da      	strh	r2, [r3, #6]

		reg[NVM_FLAGS0].bits.bit1 = 0;
 8001b18:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <writeNvm+0x78>)
 8001b1a:	7a13      	ldrb	r3, [r2, #8]
 8001b1c:	f36f 0341 	bfc	r3, #1, #1
 8001b20:	7213      	strb	r3, [r2, #8]
		reg[NVM_FLAGS0].bits.bit2 = 0;
 8001b22:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <writeNvm+0x78>)
 8001b24:	7a13      	ldrb	r3, [r2, #8]
 8001b26:	f36f 0382 	bfc	r3, #2, #1
 8001b2a:	7213      	strb	r3, [r2, #8]

		for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	e00c      	b.n	8001b4c <writeNvm+0x68>
			nvm_writeWord(NVM_REGISTER1+i, reg[i].word);
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4908      	ldr	r1, [pc, #32]	; (8001b5c <writeNvm+0x78>)
 8001b3a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4610      	mov	r0, r2
 8001b42:	f002 fe17 	bl	8004774 <nvm_writeWord>
		for(uint8_t i = 0; i < NVM_BACKUPREGISTERS_NUMBER; i++) {
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	d9ef      	bls.n	8001b32 <writeNvm+0x4e>
		}
	}
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200005e8 	.word	0x200005e8

08001b60 <fsmManager_init>:
#include "fsmManager.h"

void fsmManager_init(fsm_t *fsm, uint32_t fsmStateInit)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
    fsm->fsmStatePrev = fsmStateInit;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
	fsm->fsmState = fsmStateInit;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	601a      	str	r2, [r3, #0]
	
	fsm->stateIn = 1;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	721a      	strb	r2, [r3, #8]
	fsm->stateOut = 0;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	725a      	strb	r2, [r3, #9]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <fsmManager_gotoState>:

void fsmManager_gotoState(fsm_t *fsm, uint32_t fsmStateNext)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
    fsm->fsmStatePrev = fsm->fsmState;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	605a      	str	r2, [r3, #4]
	fsm->fsmState = fsmStateNext;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	601a      	str	r2, [r3, #0]
	
	fsm->stateIn = 0;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	721a      	strb	r2, [r3, #8]
	fsm->stateOut = 1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	725a      	strb	r2, [r3, #9]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <fsmManager_getState>:
	fsm->stateIn = 0;
	fsm->stateOut = 1;
}

uint32_t fsmManager_getState(fsm_t *fsm)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
    return fsm->fsmState;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <fsmManager_isStateIn>:
{
    return fsm->fsmState == fsmState;
}

uint8_t fsmManager_isStateIn(fsm_t *fsm)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    return fsm->stateIn;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7a1b      	ldrb	r3, [r3, #8]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <fsmManager_isStateOut>:

uint8_t fsmManager_isStateOut(fsm_t *fsm)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
    return fsm->stateOut;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7a5b      	ldrb	r3, [r3, #9]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <fsmManager_stateIn>:

void fsmManager_stateIn(fsm_t *fsm)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    fsm->stateIn = 0;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	721a      	strb	r2, [r3, #8]
    fsm->stateOut = 0;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	725a      	strb	r2, [r3, #9]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <fsmManager_stateOut>:

void fsmManager_stateOut(fsm_t *fsm)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
    fsm->stateIn = 1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	721a      	strb	r2, [r3, #8]
    fsm->stateOut = 0;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	725a      	strb	r2, [r3, #9]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <gsmModule_init>:




void gsmModule_init(UART_HandleTypeDef *huart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	//FSM
	fsmManager_init(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8001c40:	2100      	movs	r1, #0
 8001c42:	481e      	ldr	r0, [pc, #120]	; (8001cbc <gsmModule_init+0x84>)
 8001c44:	f7ff ff8c 	bl	8001b60 <fsmManager_init>
	fsmManager_init(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	481d      	ldr	r0, [pc, #116]	; (8001cc0 <gsmModule_init+0x88>)
 8001c4c:	f7ff ff88 	bl	8001b60 <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8001c50:	2100      	movs	r1, #0
 8001c52:	481c      	ldr	r0, [pc, #112]	; (8001cc4 <gsmModule_init+0x8c>)
 8001c54:	f7ff ff84 	bl	8001b60 <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	481b      	ldr	r0, [pc, #108]	; (8001cc8 <gsmModule_init+0x90>)
 8001c5c:	f7ff ff80 	bl	8001b60 <fsmManager_init>
	fsmManager_init(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_idle);
 8001c60:	2100      	movs	r1, #0
 8001c62:	481a      	ldr	r0, [pc, #104]	; (8001ccc <gsmModule_init+0x94>)
 8001c64:	f7ff ff7c 	bl	8001b60 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4819      	ldr	r0, [pc, #100]	; (8001cd0 <gsmModule_init+0x98>)
 8001c6c:	f7ff ff78 	bl	8001b60 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 8001c70:	2100      	movs	r1, #0
 8001c72:	4818      	ldr	r0, [pc, #96]	; (8001cd4 <gsmModule_init+0x9c>)
 8001c74:	f7ff ff74 	bl	8001b60 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDataReceive_state, __gsmModule_requestServerDataReceive_idle);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4817      	ldr	r0, [pc, #92]	; (8001cd8 <gsmModule_init+0xa0>)
 8001c7c:	f7ff ff70 	bl	8001b60 <fsmManager_init>
	fsmManager_init(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 8001c80:	2100      	movs	r1, #0
 8001c82:	4816      	ldr	r0, [pc, #88]	; (8001cdc <gsmModule_init+0xa4>)
 8001c84:	f7ff ff6c 	bl	8001b60 <fsmManager_init>

	//UART
	gsmHuart = huart;
 8001c88:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <gsmModule_init+0xa8>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
	//pinGsmUartRx_receive();

	//Flags
	flags_gsmModule.dword = 0;
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <gsmModule_init+0xac>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
	flags_gsmModuleError.dword = 0;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <gsmModule_init+0xb0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
	flags_gsmModuleUnsolicited.dword = 0;
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <gsmModule_init+0xb4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

	//Pin
	pinGsmVdd_write(0);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f002 f987 	bl	8003fb4 <pinGsmVdd_write>
	pinGsmPwrkey_write(0);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f002 f98e 	bl	8003fc8 <pinGsmPwrkey_write>

	//Variables
	gsmModule_operator = __gsmModule_operator_unknown;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <gsmModule_init+0xb8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200004dc 	.word	0x200004dc
 8001cc0:	200004e8 	.word	0x200004e8
 8001cc4:	200004f4 	.word	0x200004f4
 8001cc8:	20000500 	.word	0x20000500
 8001ccc:	2000050c 	.word	0x2000050c
 8001cd0:	20000518 	.word	0x20000518
 8001cd4:	20000524 	.word	0x20000524
 8001cd8:	20000530 	.word	0x20000530
 8001cdc:	2000053c 	.word	0x2000053c
 8001ce0:	20000188 	.word	0x20000188
 8001ce4:	200004b8 	.word	0x200004b8
 8001ce8:	200004bc 	.word	0x200004bc
 8001cec:	200004c0 	.word	0x200004c0
 8001cf0:	2000060c 	.word	0x2000060c

08001cf4 <gsmModule_powerOn>:

void gsmModule_powerOn(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	pinGsmVdd_write(1);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f002 f95b 	bl	8003fb4 <pinGsmVdd_write>
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <gsmModule_powerOff>:


void gsmModule_powerOff(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
	pinGsmVdd_write(0);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f002 f954 	bl	8003fb4 <pinGsmVdd_write>
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <gsmModule_pwrkeyOn>:

void gsmModule_pwrkeyOn(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestPowerOn = 1;
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <gsmModule_pwrkeyOn+0x18>)
 8001d16:	7813      	ldrb	r3, [r2, #0]
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	7013      	strb	r3, [r2, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	200004b8 	.word	0x200004b8

08001d2c <gsmModule_pwrkeyOff>:

void gsmModule_pwrkeyOff(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestPowerOff = 1;
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <gsmModule_pwrkeyOff+0x18>)
 8001d32:	7813      	ldrb	r3, [r2, #0]
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	7013      	strb	r3, [r2, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	200004b8 	.word	0x200004b8

08001d48 <gsmModule_gpsOn>:

void gsmModule_gpsOn(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestGpsOn = 1;
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <gsmModule_gpsOn+0x18>)
 8001d4e:	7813      	ldrb	r3, [r2, #0]
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	7013      	strb	r3, [r2, #0]
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	200004b8 	.word	0x200004b8

08001d64 <gsmModule_gpsInfo>:

void gsmModule_gpsInfo(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestGpsInfo = 1;
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <gsmModule_gpsInfo+0x18>)
 8001d6a:	7813      	ldrb	r3, [r2, #0]
 8001d6c:	f043 0308 	orr.w	r3, r3, #8
 8001d70:	7013      	strb	r3, [r2, #0]
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	200004b8 	.word	0x200004b8

08001d80 <gsmModule_gpsOff>:

void gsmModule_gpsOff(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestGpsOff = 1;
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <gsmModule_gpsOff+0x18>)
 8001d86:	7813      	ldrb	r3, [r2, #0]
 8001d88:	f043 0310 	orr.w	r3, r3, #16
 8001d8c:	7013      	strb	r3, [r2, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200004b8 	.word	0x200004b8

08001d9c <gsmModule_serverConnect>:

void gsmModule_serverConnect(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestServerConnection = 1;
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <gsmModule_serverConnect+0x18>)
 8001da2:	7813      	ldrb	r3, [r2, #0]
 8001da4:	f043 0320 	orr.w	r3, r3, #32
 8001da8:	7013      	strb	r3, [r2, #0]
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	200004b8 	.word	0x200004b8

08001db8 <gsmModule_serverDataSend>:

void gsmModule_serverDataSend(uint8_t *data)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	string_appendString(dataToSend, (uint8_t *) gsmModule_command_httppara_url);
 8001dc0:	490a      	ldr	r1, [pc, #40]	; (8001dec <gsmModule_serverDataSend+0x34>)
 8001dc2:	480b      	ldr	r0, [pc, #44]	; (8001df0 <gsmModule_serverDataSend+0x38>)
 8001dc4:	f003 fbf9 	bl	80055ba <string_appendString>
	string_appendString(dataToSend, data);
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4809      	ldr	r0, [pc, #36]	; (8001df0 <gsmModule_serverDataSend+0x38>)
 8001dcc:	f003 fbf5 	bl	80055ba <string_appendString>
	string_appendString(dataToSend, (uint8_t *) "\r\n");
 8001dd0:	4908      	ldr	r1, [pc, #32]	; (8001df4 <gsmModule_serverDataSend+0x3c>)
 8001dd2:	4807      	ldr	r0, [pc, #28]	; (8001df0 <gsmModule_serverDataSend+0x38>)
 8001dd4:	f003 fbf1 	bl	80055ba <string_appendString>

	flags_gsmModule.bits.requestServerDataSend = 1;
 8001dd8:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <gsmModule_serverDataSend+0x40>)
 8001dda:	7813      	ldrb	r3, [r2, #0]
 8001ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de0:	7013      	strb	r3, [r2, #0]
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	080092b4 	.word	0x080092b4
 8001df0:	200003f0 	.word	0x200003f0
 8001df4:	080090cc 	.word	0x080090cc
 8001df8:	200004b8 	.word	0x200004b8

08001dfc <gsmModule_serverDisconnect>:
{
	flags_gsmModule.bits.requestServerDataReceive = 1;
}

void gsmModule_serverDisconnect(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
	flags_gsmModule.bits.requestServerDisconnection = 1;
 8001e00:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <gsmModule_serverDisconnect+0x18>)
 8001e02:	7853      	ldrb	r3, [r2, #1]
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	7053      	strb	r3, [r2, #1]
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	200004b8 	.word	0x200004b8

08001e18 <gsmModule_isPowered>:

uint8_t gsmModule_isPowered(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isPowered;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <gsmModule_isPowered+0x18>)
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e24:	b2db      	uxtb	r3, r3
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	200004b8 	.word	0x200004b8

08001e34 <gsmModule_isGpsOn>:

uint8_t gsmModule_isGpsOn(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isGpsOn;
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <gsmModule_isGpsOn+0x18>)
 8001e3a:	785b      	ldrb	r3, [r3, #1]
 8001e3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e40:	b2db      	uxtb	r3, r3
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200004b8 	.word	0x200004b8

08001e50 <gsmModule_isGpsFixed>:

uint8_t gsmModule_isGpsFixed(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isGpsFixed;
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <gsmModule_isGpsFixed+0x18>)
 8001e56:	785b      	ldrb	r3, [r3, #1]
 8001e58:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e5c:	b2db      	uxtb	r3, r3
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200004b8 	.word	0x200004b8

08001e6c <gsmModule_isServerConnected>:

uint8_t gsmModule_isServerConnected(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isServerConnected;
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <gsmModule_isServerConnected+0x18>)
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e78:	b2db      	uxtb	r3, r3
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	200004b8 	.word	0x200004b8

08001e88 <gsmModule_isServerDataSent>:

uint8_t gsmModule_isServerDataSent(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.isServerDataSent;
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <gsmModule_isServerDataSent+0x18>)
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001e94:	b2db      	uxtb	r3, r3
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	200004b8 	.word	0x200004b8

08001ea4 <gsmModule_requestedGpsInfo>:
{
	return flags_gsmModule.bits.requestGpsOn;
}

uint8_t gsmModule_requestedGpsInfo(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.requestGpsInfo;
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <gsmModule_requestedGpsInfo+0x18>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001eb0:	b2db      	uxtb	r3, r3
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	200004b8 	.word	0x200004b8

08001ec0 <gsmModule_requestedServerDataSend>:
{
	return flags_gsmModule.bits.requestServerConnection;
}

uint8_t gsmModule_requestedServerDataSend(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
	return flags_gsmModule.bits.requestServerDataSend;
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <gsmModule_requestedServerDataSend+0x18>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ecc:	b2db      	uxtb	r3, r3
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	200004b8 	.word	0x200004b8

08001edc <gsmModule_errorServerSendData>:
}



uint8_t gsmModule_errorServerSendData(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
	return flags_gsmModuleError.bits.serverSendData;
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <gsmModule_errorServerSendData+0x18>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ee8:	b2db      	uxtb	r3, r3
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	200004bc 	.word	0x200004bc

08001ef8 <gsmModule_handler>:



void gsmModule_handler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af02      	add	r7, sp, #8
	if(gsmRxPtrInPrev != gsmRxPtrIn) {
 8001efe:	4b45      	ldr	r3, [pc, #276]	; (8002014 <gsmModule_handler+0x11c>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b45      	ldr	r3, [pc, #276]	; (8002018 <gsmModule_handler+0x120>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d027      	beq.n	8001f5a <gsmModule_handler+0x62>
		gsmRxPtrInPrev = gsmRxPtrIn;
 8001f0a:	4b43      	ldr	r3, [pc, #268]	; (8002018 <gsmModule_handler+0x120>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a41      	ldr	r2, [pc, #260]	; (8002014 <gsmModule_handler+0x11c>)
 8001f10:	6013      	str	r3, [r2, #0]
		gsmRxDataChunkLen = ringBufferOfUint8_popChunk(gsmRxData, gsmRxPtrOut, gsmRxPtrIn, '\n', GSMRXDATA_LENGTH, gsmRxDataChunk);
 8001f12:	4b42      	ldr	r3, [pc, #264]	; (800201c <gsmModule_handler+0x124>)
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	4b40      	ldr	r3, [pc, #256]	; (8002018 <gsmModule_handler+0x120>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <gsmModule_handler+0x128>)
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	230a      	movs	r3, #10
 8001f26:	483f      	ldr	r0, [pc, #252]	; (8002024 <gsmModule_handler+0x12c>)
 8001f28:	f003 fc7f 	bl	800582a <ringBufferOfUint8_popChunk>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a3e      	ldr	r2, [pc, #248]	; (8002028 <gsmModule_handler+0x130>)
 8001f30:	6013      	str	r3, [r2, #0]
		gsmRxPtrOut+=gsmRxDataChunkLen;
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <gsmModule_handler+0x124>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <gsmModule_handler+0x130>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a37      	ldr	r2, [pc, #220]	; (800201c <gsmModule_handler+0x124>)
 8001f3e:	6013      	str	r3, [r2, #0]
		gsmRxPtrOut%=GSMRXDATA_LENGTH;
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <gsmModule_handler+0x124>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b39      	ldr	r3, [pc, #228]	; (800202c <gsmModule_handler+0x134>)
 8001f46:	fba3 1302 	umull	r1, r3, r3, r2
 8001f4a:	09db      	lsrs	r3, r3, #7
 8001f4c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	4a31      	ldr	r2, [pc, #196]	; (800201c <gsmModule_handler+0x124>)
 8001f58:	6013      	str	r3, [r2, #0]
	}

	if(flags_gsmModule.bits.requestPowerOn) {
 8001f5a:	4b35      	ldr	r3, [pc, #212]	; (8002030 <gsmModule_handler+0x138>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <gsmModule_handler+0x76>
		handle_requestPowerOn();
 8001f68:	f000 f8a4 	bl	80020b4 <handle_requestPowerOn>
 8001f6c:	e04a      	b.n	8002004 <gsmModule_handler+0x10c>
	}
	else if(flags_gsmModule.bits.requestPowerOff) {
 8001f6e:	4b30      	ldr	r3, [pc, #192]	; (8002030 <gsmModule_handler+0x138>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <gsmModule_handler+0x8a>
		handle_requestPowerOff();
 8001f7c:	f000 f9e8 	bl	8002350 <handle_requestPowerOff>
 8001f80:	e040      	b.n	8002004 <gsmModule_handler+0x10c>
	}
	else {
		if(flags_gsmModule.bits.requestGpsOn) {
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <gsmModule_handler+0x138>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <gsmModule_handler+0x9e>
			handle_requestGpsOn();
 8001f90:	f000 fafe 	bl	8002590 <handle_requestGpsOn>
 8001f94:	e012      	b.n	8001fbc <gsmModule_handler+0xc4>
		}
		else if(flags_gsmModule.bits.requestGpsInfo) {
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <gsmModule_handler+0x138>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <gsmModule_handler+0xb2>
			handle_requestGpsInfo();
 8001fa4:	f000 fc24 	bl	80027f0 <handle_requestGpsInfo>
 8001fa8:	e008      	b.n	8001fbc <gsmModule_handler+0xc4>
		}
		else if(flags_gsmModule.bits.requestGpsOff) {
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <gsmModule_handler+0x138>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <gsmModule_handler+0xc4>
			handle_requestGpsOff();
 8001fb8:	f000 fd5e 	bl	8002a78 <handle_requestGpsOff>
		}

		if(flags_gsmModule.bits.requestServerConnection) {
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <gsmModule_handler+0x138>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <gsmModule_handler+0xd8>
			handle_requestServerConnection();
 8001fca:	f000 fecf 	bl	8002d6c <handle_requestServerConnection>
 8001fce:	e019      	b.n	8002004 <gsmModule_handler+0x10c>
		}
		else if(flags_gsmModule.bits.requestServerDataSend) {
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <gsmModule_handler+0x138>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <gsmModule_handler+0xec>
			handle_requestServerDataSend();
 8001fde:	f001 fd1f 	bl	8003a20 <handle_requestServerDataSend>
 8001fe2:	e00f      	b.n	8002004 <gsmModule_handler+0x10c>
		}
		else if(flags_gsmModule.bits.requestServerDataReceive) {
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <gsmModule_handler+0x138>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d108      	bne.n	8002004 <gsmModule_handler+0x10c>
			//handle_requestServerDataReceive();
		}
		else if(flags_gsmModule.bits.requestServerDisconnection) {
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <gsmModule_handler+0x138>)
 8001ff4:	785b      	ldrb	r3, [r3, #1]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <gsmModule_handler+0x10c>
			handle_requestServerDisconnection();
 8002000:	f001 fe4e 	bl	8003ca0 <handle_requestServerDisconnection>
		}
	}

	handle_unsolicitedMessages();
 8002004:	f000 f816 	bl	8002034 <handle_unsolicitedMessages>
	gsmRxDataChunkLen = 0;
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <gsmModule_handler+0x130>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200003e4 	.word	0x200003e4
 8002018:	20000000 	.word	0x20000000
 800201c:	200003e8 	.word	0x200003e8
 8002020:	2000031c 	.word	0x2000031c
 8002024:	2000018c 	.word	0x2000018c
 8002028:	200003ec 	.word	0x200003ec
 800202c:	51eb851f 	.word	0x51eb851f
 8002030:	200004b8 	.word	0x200004b8

08002034 <handle_unsolicitedMessages>:

static void handle_unsolicitedMessages(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg0, gsmRxDataChunkLen)) {
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <handle_unsolicitedMessages+0x68>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4918      	ldr	r1, [pc, #96]	; (80020a0 <handle_unsolicitedMessages+0x6c>)
 8002040:	4818      	ldr	r0, [pc, #96]	; (80020a4 <handle_unsolicitedMessages+0x70>)
 8002042:	f003 fa4a 	bl	80054da <string_containsWithinLength>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <handle_unsolicitedMessages+0x24>
		flags_gsmModuleUnsolicited.bits.creg0 = 1;
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <handle_unsolicitedMessages+0x74>)
 800204e:	7813      	ldrb	r3, [r2, #0]
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	7013      	strb	r3, [r2, #0]
		flags_gsmModuleUnsolicited.bits.creg1 = 1;
	}
	else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg2, gsmRxDataChunkLen)) {
		flags_gsmModuleUnsolicited.bits.creg2 = 1;
	}
}
 8002056:	e01e      	b.n	8002096 <handle_unsolicitedMessages+0x62>
	else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg1, gsmRxDataChunkLen)) {
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <handle_unsolicitedMessages+0x68>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	4913      	ldr	r1, [pc, #76]	; (80020ac <handle_unsolicitedMessages+0x78>)
 8002060:	4810      	ldr	r0, [pc, #64]	; (80020a4 <handle_unsolicitedMessages+0x70>)
 8002062:	f003 fa3a 	bl	80054da <string_containsWithinLength>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <handle_unsolicitedMessages+0x44>
		flags_gsmModuleUnsolicited.bits.creg1 = 1;
 800206c:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <handle_unsolicitedMessages+0x74>)
 800206e:	7813      	ldrb	r3, [r2, #0]
 8002070:	f043 0310 	orr.w	r3, r3, #16
 8002074:	7013      	strb	r3, [r2, #0]
}
 8002076:	e00e      	b.n	8002096 <handle_unsolicitedMessages+0x62>
	else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_unsolicited_creg2, gsmRxDataChunkLen)) {
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <handle_unsolicitedMessages+0x68>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	490c      	ldr	r1, [pc, #48]	; (80020b0 <handle_unsolicitedMessages+0x7c>)
 8002080:	4808      	ldr	r0, [pc, #32]	; (80020a4 <handle_unsolicitedMessages+0x70>)
 8002082:	f003 fa2a 	bl	80054da <string_containsWithinLength>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <handle_unsolicitedMessages+0x62>
		flags_gsmModuleUnsolicited.bits.creg2 = 1;
 800208c:	4a06      	ldr	r2, [pc, #24]	; (80020a8 <handle_unsolicitedMessages+0x74>)
 800208e:	7813      	ldrb	r3, [r2, #0]
 8002090:	f043 0320 	orr.w	r3, r3, #32
 8002094:	7013      	strb	r3, [r2, #0]
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200003ec 	.word	0x200003ec
 80020a0:	08009384 	.word	0x08009384
 80020a4:	2000031c 	.word	0x2000031c
 80020a8:	200004c0 	.word	0x200004c0
 80020ac:	08009390 	.word	0x08009390
 80020b0:	0800939c 	.word	0x0800939c

080020b4 <handle_requestPowerOn>:

static void handle_requestPowerOn(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestPowerOn_state)) {
 80020b8:	489c      	ldr	r0, [pc, #624]	; (800232c <handle_requestPowerOn+0x278>)
 80020ba:	f7ff fd7e 	bl	8001bba <fsmManager_getState>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b06      	cmp	r3, #6
 80020c2:	f200 8105 	bhi.w	80022d0 <handle_requestPowerOn+0x21c>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <handle_requestPowerOn+0x18>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	080020e9 	.word	0x080020e9
 80020d0:	08002119 	.word	0x08002119
 80020d4:	0800214f 	.word	0x0800214f
 80020d8:	08002195 	.word	0x08002195
 80020dc:	080021cb 	.word	0x080021cb
 80020e0:	08002217 	.word	0x08002217
 80020e4:	0800228f 	.word	0x0800228f
		case __gsmModule_requestPowerOn_idle:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80020e8:	4890      	ldr	r0, [pc, #576]	; (800232c <handle_requestPowerOn+0x278>)
 80020ea:	f7ff fd71 	bl	8001bd0 <fsmManager_isStateIn>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <handle_requestPowerOn+0x46>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80020f4:	488d      	ldr	r0, [pc, #564]	; (800232c <handle_requestPowerOn+0x278>)
 80020f6:	f7ff fd81 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOn);
 80020fa:	2101      	movs	r1, #1
 80020fc:	488b      	ldr	r0, [pc, #556]	; (800232c <handle_requestPowerOn+0x278>)
 80020fe:	f7ff fd45 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002102:	488a      	ldr	r0, [pc, #552]	; (800232c <handle_requestPowerOn+0x278>)
 8002104:	f7ff fd6f 	bl	8001be6 <fsmManager_isStateOut>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80fc 	beq.w	8002308 <handle_requestPowerOn+0x254>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 8002110:	4886      	ldr	r0, [pc, #536]	; (800232c <handle_requestPowerOn+0x278>)
 8002112:	f7ff fd82 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002116:	e0f7      	b.n	8002308 <handle_requestPowerOn+0x254>



		case __gsmModule_requestPowerOn_pwrKeyOn:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002118:	4884      	ldr	r0, [pc, #528]	; (800232c <handle_requestPowerOn+0x278>)
 800211a:	f7ff fd59 	bl	8001bd0 <fsmManager_isStateIn>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <handle_requestPowerOn+0x76>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 8002124:	4881      	ldr	r0, [pc, #516]	; (800232c <handle_requestPowerOn+0x278>)
 8002126:	f7ff fd69 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmPwrkey_write(1);
 800212a:	2001      	movs	r0, #1
 800212c:	f001 ff4c 	bl	8003fc8 <pinGsmPwrkey_write>
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOnWait);
 8002130:	2102      	movs	r1, #2
 8002132:	487e      	ldr	r0, [pc, #504]	; (800232c <handle_requestPowerOn+0x278>)
 8002134:	f7ff fd2a 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002138:	487c      	ldr	r0, [pc, #496]	; (800232c <handle_requestPowerOn+0x278>)
 800213a:	f7ff fd54 	bl	8001be6 <fsmManager_isStateOut>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80e3 	beq.w	800230c <handle_requestPowerOn+0x258>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 8002146:	4879      	ldr	r0, [pc, #484]	; (800232c <handle_requestPowerOn+0x278>)
 8002148:	f7ff fd67 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800214c:	e0de      	b.n	800230c <handle_requestPowerOn+0x258>



		case __gsmModule_requestPowerOn_pwrKeyOnWait:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 800214e:	4877      	ldr	r0, [pc, #476]	; (800232c <handle_requestPowerOn+0x278>)
 8002150:	f7ff fd3e 	bl	8001bd0 <fsmManager_isStateIn>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <handle_requestPowerOn+0xb6>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 800215a:	4874      	ldr	r0, [pc, #464]	; (800232c <handle_requestPowerOn+0x278>)
 800215c:	f7ff fd4e 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timer, 1500);
 8002160:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002164:	4872      	ldr	r0, [pc, #456]	; (8002330 <handle_requestPowerOn+0x27c>)
 8002166:	f002 fb4d 	bl	8004804 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 800216a:	4871      	ldr	r0, [pc, #452]	; (8002330 <handle_requestPowerOn+0x27c>)
 800216c:	f002 fb5e 	bl	800482c <softTimer_expired>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <handle_requestPowerOn+0xca>
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_pwrKeyOff);
 8002176:	2103      	movs	r1, #3
 8002178:	486c      	ldr	r0, [pc, #432]	; (800232c <handle_requestPowerOn+0x278>)
 800217a:	f7ff fd07 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 800217e:	486b      	ldr	r0, [pc, #428]	; (800232c <handle_requestPowerOn+0x278>)
 8002180:	f7ff fd31 	bl	8001be6 <fsmManager_isStateOut>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80c2 	beq.w	8002310 <handle_requestPowerOn+0x25c>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 800218c:	4867      	ldr	r0, [pc, #412]	; (800232c <handle_requestPowerOn+0x278>)
 800218e:	f7ff fd44 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002192:	e0bd      	b.n	8002310 <handle_requestPowerOn+0x25c>



		case __gsmModule_requestPowerOn_pwrKeyOff:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002194:	4865      	ldr	r0, [pc, #404]	; (800232c <handle_requestPowerOn+0x278>)
 8002196:	f7ff fd1b 	bl	8001bd0 <fsmManager_isStateIn>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <handle_requestPowerOn+0xf2>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80021a0:	4862      	ldr	r0, [pc, #392]	; (800232c <handle_requestPowerOn+0x278>)
 80021a2:	f7ff fd2b 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmPwrkey_write(0);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f001 ff0e 	bl	8003fc8 <pinGsmPwrkey_write>
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_send_at);
 80021ac:	2104      	movs	r1, #4
 80021ae:	485f      	ldr	r0, [pc, #380]	; (800232c <handle_requestPowerOn+0x278>)
 80021b0:	f7ff fcec 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 80021b4:	485d      	ldr	r0, [pc, #372]	; (800232c <handle_requestPowerOn+0x278>)
 80021b6:	f7ff fd16 	bl	8001be6 <fsmManager_isStateOut>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a9 	beq.w	8002314 <handle_requestPowerOn+0x260>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80021c2:	485a      	ldr	r0, [pc, #360]	; (800232c <handle_requestPowerOn+0x278>)
 80021c4:	f7ff fd29 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80021c8:	e0a4      	b.n	8002314 <handle_requestPowerOn+0x260>



		case __gsmModule_requestPowerOn_send_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80021ca:	4858      	ldr	r0, [pc, #352]	; (800232c <handle_requestPowerOn+0x278>)
 80021cc:	f7ff fd00 	bl	8001bd0 <fsmManager_isStateIn>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <handle_requestPowerOn+0x132>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80021d6:	4855      	ldr	r0, [pc, #340]	; (800232c <handle_requestPowerOn+0x278>)
 80021d8:	f7ff fd10 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 4000);
 80021dc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80021e0:	4854      	ldr	r0, [pc, #336]	; (8002334 <handle_requestPowerOn+0x280>)
 80021e2:	f002 fb0f 	bl	8004804 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80021e6:	4853      	ldr	r0, [pc, #332]	; (8002334 <handle_requestPowerOn+0x280>)
 80021e8:	f002 fb20 	bl	800482c <softTimer_expired>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <handle_requestPowerOn+0x14c>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_at);
 80021f2:	4851      	ldr	r0, [pc, #324]	; (8002338 <handle_requestPowerOn+0x284>)
 80021f4:	f001 fefa 	bl	8003fec <pinGsmUartTx_transmit>

				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_check_at);
 80021f8:	2105      	movs	r1, #5
 80021fa:	484c      	ldr	r0, [pc, #304]	; (800232c <handle_requestPowerOn+0x278>)
 80021fc:	f7ff fcc6 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 8002200:	484a      	ldr	r0, [pc, #296]	; (800232c <handle_requestPowerOn+0x278>)
 8002202:	f7ff fcf0 	bl	8001be6 <fsmManager_isStateOut>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8085 	beq.w	8002318 <handle_requestPowerOn+0x264>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 800220e:	4847      	ldr	r0, [pc, #284]	; (800232c <handle_requestPowerOn+0x278>)
 8002210:	f7ff fd03 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002214:	e080      	b.n	8002318 <handle_requestPowerOn+0x264>



		case __gsmModule_requestPowerOn_check_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 8002216:	4845      	ldr	r0, [pc, #276]	; (800232c <handle_requestPowerOn+0x278>)
 8002218:	f7ff fcda 	bl	8001bd0 <fsmManager_isStateIn>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <handle_requestPowerOn+0x180>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 8002222:	4842      	ldr	r0, [pc, #264]	; (800232c <handle_requestPowerOn+0x278>)
 8002224:	f7ff fcea 	bl	8001bfc <fsmManager_stateIn>

				pinGsmUartRx_receive();
 8002228:	f001 ff1e 	bl	8004068 <pinGsmUartRx_receive>
				softTimer_start(&timeout, 100);
 800222c:	2164      	movs	r1, #100	; 0x64
 800222e:	4841      	ldr	r0, [pc, #260]	; (8002334 <handle_requestPowerOn+0x280>)
 8002230:	f002 fae8 	bl	8004804 <softTimer_start>
			}


			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002234:	4b41      	ldr	r3, [pc, #260]	; (800233c <handle_requestPowerOn+0x288>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4941      	ldr	r1, [pc, #260]	; (8002340 <handle_requestPowerOn+0x28c>)
 800223c:	4841      	ldr	r0, [pc, #260]	; (8002344 <handle_requestPowerOn+0x290>)
 800223e:	f003 f94c 	bl	80054da <string_containsWithinLength>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00e      	beq.n	8002266 <handle_requestPowerOn+0x1b2>
				flags_gsmModule.bits.isPowered = 1;
 8002248:	4a3f      	ldr	r2, [pc, #252]	; (8002348 <handle_requestPowerOn+0x294>)
 800224a:	7853      	ldrb	r3, [r2, #1]
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestPowerOn = 0;
 8002252:	4a3d      	ldr	r2, [pc, #244]	; (8002348 <handle_requestPowerOn+0x294>)
 8002254:	7813      	ldrb	r3, [r2, #0]
 8002256:	f36f 0300 	bfc	r3, #0, #1
 800225a:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 800225c:	2100      	movs	r1, #0
 800225e:	4833      	ldr	r0, [pc, #204]	; (800232c <handle_requestPowerOn+0x278>)
 8002260:	f7ff fc94 	bl	8001b8c <fsmManager_gotoState>
 8002264:	e009      	b.n	800227a <handle_requestPowerOn+0x1c6>
			}
			else if(softTimer_expired(&timeout)) {
 8002266:	4833      	ldr	r0, [pc, #204]	; (8002334 <handle_requestPowerOn+0x280>)
 8002268:	f002 fae0 	bl	800482c <softTimer_expired>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <handle_requestPowerOn+0x1c6>
				//The module is powered off
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 8002272:	2100      	movs	r1, #0
 8002274:	482d      	ldr	r0, [pc, #180]	; (800232c <handle_requestPowerOn+0x278>)
 8002276:	f7ff fc89 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 800227a:	482c      	ldr	r0, [pc, #176]	; (800232c <handle_requestPowerOn+0x278>)
 800227c:	f7ff fcb3 	bl	8001be6 <fsmManager_isStateOut>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d04a      	beq.n	800231c <handle_requestPowerOn+0x268>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 8002286:	4829      	ldr	r0, [pc, #164]	; (800232c <handle_requestPowerOn+0x278>)
 8002288:	f7ff fcc7 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800228c:	e046      	b.n	800231c <handle_requestPowerOn+0x268>



		case __gsmModule_requestPowerOn_error:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 800228e:	4827      	ldr	r0, [pc, #156]	; (800232c <handle_requestPowerOn+0x278>)
 8002290:	f7ff fc9e 	bl	8001bd0 <fsmManager_isStateIn>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <handle_requestPowerOn+0x1ec>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 800229a:	4824      	ldr	r0, [pc, #144]	; (800232c <handle_requestPowerOn+0x278>)
 800229c:	f7ff fcae 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestPowerOn = 0;
 80022a0:	4a29      	ldr	r2, [pc, #164]	; (8002348 <handle_requestPowerOn+0x294>)
 80022a2:	7813      	ldrb	r3, [r2, #0]
 80022a4:	f36f 0300 	bfc	r3, #0, #1
 80022a8:	7013      	strb	r3, [r2, #0]
			flags_gsmModuleError.bits.powerOn = 1;
 80022aa:	4a28      	ldr	r2, [pc, #160]	; (800234c <handle_requestPowerOn+0x298>)
 80022ac:	7813      	ldrb	r3, [r2, #0]
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 80022b4:	2100      	movs	r1, #0
 80022b6:	481d      	ldr	r0, [pc, #116]	; (800232c <handle_requestPowerOn+0x278>)
 80022b8:	f7ff fc68 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 80022bc:	481b      	ldr	r0, [pc, #108]	; (800232c <handle_requestPowerOn+0x278>)
 80022be:	f7ff fc92 	bl	8001be6 <fsmManager_isStateOut>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02b      	beq.n	8002320 <handle_requestPowerOn+0x26c>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 80022c8:	4818      	ldr	r0, [pc, #96]	; (800232c <handle_requestPowerOn+0x278>)
 80022ca:	f7ff fca6 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80022ce:	e027      	b.n	8002320 <handle_requestPowerOn+0x26c>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOn_state)) {
 80022d0:	4816      	ldr	r0, [pc, #88]	; (800232c <handle_requestPowerOn+0x278>)
 80022d2:	f7ff fc7d 	bl	8001bd0 <fsmManager_isStateIn>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <handle_requestPowerOn+0x22e>
				fsmManager_stateIn(&gsmModule_requestPowerOn_state);
 80022dc:	4813      	ldr	r0, [pc, #76]	; (800232c <handle_requestPowerOn+0x278>)
 80022de:	f7ff fc8d 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestPowerOn = 0;
 80022e2:	4a19      	ldr	r2, [pc, #100]	; (8002348 <handle_requestPowerOn+0x294>)
 80022e4:	7813      	ldrb	r3, [r2, #0]
 80022e6:	f36f 0300 	bfc	r3, #0, #1
 80022ea:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOn_idle);
 80022ec:	2100      	movs	r1, #0
 80022ee:	480f      	ldr	r0, [pc, #60]	; (800232c <handle_requestPowerOn+0x278>)
 80022f0:	f7ff fc4c 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOn_state)) {
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <handle_requestPowerOn+0x278>)
 80022f6:	f7ff fc76 	bl	8001be6 <fsmManager_isStateOut>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d011      	beq.n	8002324 <handle_requestPowerOn+0x270>
				fsmManager_stateOut(&gsmModule_requestPowerOn_state);
 8002300:	480a      	ldr	r0, [pc, #40]	; (800232c <handle_requestPowerOn+0x278>)
 8002302:	f7ff fc8a 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002306:	e00d      	b.n	8002324 <handle_requestPowerOn+0x270>
			break;
 8002308:	bf00      	nop
 800230a:	e00c      	b.n	8002326 <handle_requestPowerOn+0x272>
			break;
 800230c:	bf00      	nop
 800230e:	e00a      	b.n	8002326 <handle_requestPowerOn+0x272>
			break;
 8002310:	bf00      	nop
 8002312:	e008      	b.n	8002326 <handle_requestPowerOn+0x272>
			break;
 8002314:	bf00      	nop
 8002316:	e006      	b.n	8002326 <handle_requestPowerOn+0x272>
			break;
 8002318:	bf00      	nop
 800231a:	e004      	b.n	8002326 <handle_requestPowerOn+0x272>
			break;
 800231c:	bf00      	nop
 800231e:	e002      	b.n	8002326 <handle_requestPowerOn+0x272>
			break;
 8002320:	bf00      	nop
 8002322:	e000      	b.n	8002326 <handle_requestPowerOn+0x272>
			break;
 8002324:	bf00      	nop
	}
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200004dc 	.word	0x200004dc
 8002330:	200004c4 	.word	0x200004c4
 8002334:	200004d0 	.word	0x200004d0
 8002338:	08009118 	.word	0x08009118
 800233c:	200003ec 	.word	0x200003ec
 8002340:	08009318 	.word	0x08009318
 8002344:	2000031c 	.word	0x2000031c
 8002348:	200004b8 	.word	0x200004b8
 800234c:	200004bc 	.word	0x200004bc

08002350 <handle_requestPowerOff>:

static void handle_requestPowerOff(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestPowerOff_state)) {
 8002354:	4883      	ldr	r0, [pc, #524]	; (8002564 <handle_requestPowerOff+0x214>)
 8002356:	f7ff fc30 	bl	8001bba <fsmManager_getState>
 800235a:	4603      	mov	r3, r0
 800235c:	2b05      	cmp	r3, #5
 800235e:	f200 80ff 	bhi.w	8002560 <handle_requestPowerOff+0x210>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <handle_requestPowerOff+0x18>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	08002381 	.word	0x08002381
 800236c:	080023b1 	.word	0x080023b1
 8002370:	080023e7 	.word	0x080023e7
 8002374:	0800244d 	.word	0x0800244d
 8002378:	08002495 	.word	0x08002495
 800237c:	08002509 	.word	0x08002509
		case __gsmModule_requestPowerOff_idle:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002380:	4878      	ldr	r0, [pc, #480]	; (8002564 <handle_requestPowerOff+0x214>)
 8002382:	f7ff fc25 	bl	8001bd0 <fsmManager_isStateIn>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <handle_requestPowerOff+0x42>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 800238c:	4875      	ldr	r0, [pc, #468]	; (8002564 <handle_requestPowerOff+0x214>)
 800238e:	f7ff fc35 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_send_atCpowd1);
 8002392:	2101      	movs	r1, #1
 8002394:	4873      	ldr	r0, [pc, #460]	; (8002564 <handle_requestPowerOff+0x214>)
 8002396:	f7ff fbf9 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 800239a:	4872      	ldr	r0, [pc, #456]	; (8002564 <handle_requestPowerOff+0x214>)
 800239c:	f7ff fc23 	bl	8001be6 <fsmManager_isStateOut>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80d1 	beq.w	800254a <handle_requestPowerOff+0x1fa>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 80023a8:	486e      	ldr	r0, [pc, #440]	; (8002564 <handle_requestPowerOff+0x214>)
 80023aa:	f7ff fc36 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80023ae:	e0cc      	b.n	800254a <handle_requestPowerOff+0x1fa>



		case __gsmModule_requestPowerOff_send_atCpowd1:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 80023b0:	486c      	ldr	r0, [pc, #432]	; (8002564 <handle_requestPowerOff+0x214>)
 80023b2:	f7ff fc0d 	bl	8001bd0 <fsmManager_isStateIn>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <handle_requestPowerOff+0x72>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 80023bc:	4869      	ldr	r0, [pc, #420]	; (8002564 <handle_requestPowerOff+0x214>)
 80023be:	f7ff fc1d 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cpowd1);
 80023c2:	4869      	ldr	r0, [pc, #420]	; (8002568 <handle_requestPowerOff+0x218>)
 80023c4:	f001 fe12 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_check_atCpowd1);
 80023c8:	2102      	movs	r1, #2
 80023ca:	4866      	ldr	r0, [pc, #408]	; (8002564 <handle_requestPowerOff+0x214>)
 80023cc:	f7ff fbde 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 80023d0:	4864      	ldr	r0, [pc, #400]	; (8002564 <handle_requestPowerOff+0x214>)
 80023d2:	f7ff fc08 	bl	8001be6 <fsmManager_isStateOut>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80b8 	beq.w	800254e <handle_requestPowerOff+0x1fe>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 80023de:	4861      	ldr	r0, [pc, #388]	; (8002564 <handle_requestPowerOff+0x214>)
 80023e0:	f7ff fc1b 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80023e4:	e0b3      	b.n	800254e <handle_requestPowerOff+0x1fe>



		case __gsmModule_requestPowerOff_check_atCpowd1:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 80023e6:	485f      	ldr	r0, [pc, #380]	; (8002564 <handle_requestPowerOff+0x214>)
 80023e8:	f7ff fbf2 	bl	8001bd0 <fsmManager_isStateIn>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <handle_requestPowerOff+0xb4>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 80023f2:	485c      	ldr	r0, [pc, #368]	; (8002564 <handle_requestPowerOff+0x214>)
 80023f4:	f7ff fc02 	bl	8001bfc <fsmManager_stateIn>

				pinGsmUartRx_receive();
 80023f8:	f001 fe36 	bl	8004068 <pinGsmUartRx_receive>
				softTimer_start(&timeout, 100);
 80023fc:	2164      	movs	r1, #100	; 0x64
 80023fe:	485b      	ldr	r0, [pc, #364]	; (800256c <handle_requestPowerOff+0x21c>)
 8002400:	f002 fa00 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_normal_powerdown, gsmRxDataChunkLen)) {
 8002404:	4b5a      	ldr	r3, [pc, #360]	; (8002570 <handle_requestPowerOff+0x220>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	495a      	ldr	r1, [pc, #360]	; (8002574 <handle_requestPowerOff+0x224>)
 800240c:	485a      	ldr	r0, [pc, #360]	; (8002578 <handle_requestPowerOff+0x228>)
 800240e:	f003 f864 	bl	80054da <string_containsWithinLength>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <handle_requestPowerOff+0xd2>
				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_send_at);
 8002418:	2103      	movs	r1, #3
 800241a:	4852      	ldr	r0, [pc, #328]	; (8002564 <handle_requestPowerOff+0x214>)
 800241c:	f7ff fbb6 	bl	8001b8c <fsmManager_gotoState>
 8002420:	e009      	b.n	8002436 <handle_requestPowerOff+0xe6>
			}
			else if(softTimer_expired(&timeout)) {
 8002422:	4852      	ldr	r0, [pc, #328]	; (800256c <handle_requestPowerOff+0x21c>)
 8002424:	f002 fa02 	bl	800482c <softTimer_expired>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <handle_requestPowerOff+0xe6>
				//The module is powered off
				fsmManager_gotoState(&gsmModule_requestPowerOn_state, __gsmModule_requestPowerOff_idle);
 800242e:	2100      	movs	r1, #0
 8002430:	4852      	ldr	r0, [pc, #328]	; (800257c <handle_requestPowerOff+0x22c>)
 8002432:	f7ff fbab 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 8002436:	484b      	ldr	r0, [pc, #300]	; (8002564 <handle_requestPowerOff+0x214>)
 8002438:	f7ff fbd5 	bl	8001be6 <fsmManager_isStateOut>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8087 	beq.w	8002552 <handle_requestPowerOff+0x202>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 8002444:	4847      	ldr	r0, [pc, #284]	; (8002564 <handle_requestPowerOff+0x214>)
 8002446:	f7ff fbe8 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800244a:	e082      	b.n	8002552 <handle_requestPowerOff+0x202>



		case __gsmModule_requestPowerOff_send_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 800244c:	4845      	ldr	r0, [pc, #276]	; (8002564 <handle_requestPowerOff+0x214>)
 800244e:	f7ff fbbf 	bl	8001bd0 <fsmManager_isStateIn>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <handle_requestPowerOff+0x116>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 8002458:	4842      	ldr	r0, [pc, #264]	; (8002564 <handle_requestPowerOff+0x214>)
 800245a:	f7ff fbcf 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 800245e:	2164      	movs	r1, #100	; 0x64
 8002460:	4842      	ldr	r0, [pc, #264]	; (800256c <handle_requestPowerOff+0x21c>)
 8002462:	f002 f9cf 	bl	8004804 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 8002466:	4841      	ldr	r0, [pc, #260]	; (800256c <handle_requestPowerOff+0x21c>)
 8002468:	f002 f9e0 	bl	800482c <softTimer_expired>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <handle_requestPowerOff+0x130>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_at);
 8002472:	4843      	ldr	r0, [pc, #268]	; (8002580 <handle_requestPowerOff+0x230>)
 8002474:	f001 fdba 	bl	8003fec <pinGsmUartTx_transmit>

				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_check_at);
 8002478:	2104      	movs	r1, #4
 800247a:	483a      	ldr	r0, [pc, #232]	; (8002564 <handle_requestPowerOff+0x214>)
 800247c:	f7ff fb86 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 8002480:	4838      	ldr	r0, [pc, #224]	; (8002564 <handle_requestPowerOff+0x214>)
 8002482:	f7ff fbb0 	bl	8001be6 <fsmManager_isStateOut>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d064      	beq.n	8002556 <handle_requestPowerOff+0x206>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 800248c:	4835      	ldr	r0, [pc, #212]	; (8002564 <handle_requestPowerOff+0x214>)
 800248e:	f7ff fbc4 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002492:	e060      	b.n	8002556 <handle_requestPowerOff+0x206>



		case __gsmModule_requestPowerOff_check_at:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002494:	4833      	ldr	r0, [pc, #204]	; (8002564 <handle_requestPowerOff+0x214>)
 8002496:	f7ff fb9b 	bl	8001bd0 <fsmManager_isStateIn>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <handle_requestPowerOff+0x15e>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 80024a0:	4830      	ldr	r0, [pc, #192]	; (8002564 <handle_requestPowerOff+0x214>)
 80024a2:	f7ff fbab 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80024a6:	2164      	movs	r1, #100	; 0x64
 80024a8:	4830      	ldr	r0, [pc, #192]	; (800256c <handle_requestPowerOff+0x21c>)
 80024aa:	f002 f9ab 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80024ae:	4b30      	ldr	r3, [pc, #192]	; (8002570 <handle_requestPowerOff+0x220>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	4933      	ldr	r1, [pc, #204]	; (8002584 <handle_requestPowerOff+0x234>)
 80024b6:	4830      	ldr	r0, [pc, #192]	; (8002578 <handle_requestPowerOff+0x228>)
 80024b8:	f003 f80f 	bl	80054da <string_containsWithinLength>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <handle_requestPowerOff+0x17c>
				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_error);
 80024c2:	2105      	movs	r1, #5
 80024c4:	4827      	ldr	r0, [pc, #156]	; (8002564 <handle_requestPowerOff+0x214>)
 80024c6:	f7ff fb61 	bl	8001b8c <fsmManager_gotoState>
 80024ca:	e013      	b.n	80024f4 <handle_requestPowerOff+0x1a4>
			}
			else if(softTimer_expired(&timeout)) {
 80024cc:	4827      	ldr	r0, [pc, #156]	; (800256c <handle_requestPowerOff+0x21c>)
 80024ce:	f002 f9ad 	bl	800482c <softTimer_expired>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00d      	beq.n	80024f4 <handle_requestPowerOff+0x1a4>
				flags_gsmModule.bits.requestPowerOff = 0;
 80024d8:	4a2b      	ldr	r2, [pc, #172]	; (8002588 <handle_requestPowerOff+0x238>)
 80024da:	7813      	ldrb	r3, [r2, #0]
 80024dc:	f36f 0341 	bfc	r3, #1, #1
 80024e0:	7013      	strb	r3, [r2, #0]
				flags_gsmModule.bits.isPowered = 0;
 80024e2:	4a29      	ldr	r2, [pc, #164]	; (8002588 <handle_requestPowerOff+0x238>)
 80024e4:	7853      	ldrb	r3, [r2, #1]
 80024e6:	f36f 0382 	bfc	r3, #2, #1
 80024ea:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 80024ec:	2100      	movs	r1, #0
 80024ee:	481d      	ldr	r0, [pc, #116]	; (8002564 <handle_requestPowerOff+0x214>)
 80024f0:	f7ff fb4c 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 80024f4:	481b      	ldr	r0, [pc, #108]	; (8002564 <handle_requestPowerOff+0x214>)
 80024f6:	f7ff fb76 	bl	8001be6 <fsmManager_isStateOut>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d02c      	beq.n	800255a <handle_requestPowerOff+0x20a>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 8002500:	4818      	ldr	r0, [pc, #96]	; (8002564 <handle_requestPowerOff+0x214>)
 8002502:	f7ff fb8a 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002506:	e028      	b.n	800255a <handle_requestPowerOff+0x20a>



		case __gsmModule_requestPowerOff_error:
			if(fsmManager_isStateIn(&gsmModule_requestPowerOff_state)) {
 8002508:	4816      	ldr	r0, [pc, #88]	; (8002564 <handle_requestPowerOff+0x214>)
 800250a:	f7ff fb61 	bl	8001bd0 <fsmManager_isStateIn>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <handle_requestPowerOff+0x1ca>
				fsmManager_stateIn(&gsmModule_requestPowerOff_state);
 8002514:	4813      	ldr	r0, [pc, #76]	; (8002564 <handle_requestPowerOff+0x214>)
 8002516:	f7ff fb71 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.powerOff = 1;
 800251a:	4a1c      	ldr	r2, [pc, #112]	; (800258c <handle_requestPowerOff+0x23c>)
 800251c:	7813      	ldrb	r3, [r2, #0]
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestPowerOff = 0;
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <handle_requestPowerOff+0x238>)
 8002526:	7813      	ldrb	r3, [r2, #0]
 8002528:	f36f 0341 	bfc	r3, #1, #1
 800252c:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestPowerOff_state, __gsmModule_requestPowerOff_idle);
 800252e:	2100      	movs	r1, #0
 8002530:	480c      	ldr	r0, [pc, #48]	; (8002564 <handle_requestPowerOff+0x214>)
 8002532:	f7ff fb2b 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestPowerOff_state)) {
 8002536:	480b      	ldr	r0, [pc, #44]	; (8002564 <handle_requestPowerOff+0x214>)
 8002538:	f7ff fb55 	bl	8001be6 <fsmManager_isStateOut>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00d      	beq.n	800255e <handle_requestPowerOff+0x20e>
				fsmManager_stateOut(&gsmModule_requestPowerOff_state);
 8002542:	4808      	ldr	r0, [pc, #32]	; (8002564 <handle_requestPowerOff+0x214>)
 8002544:	f7ff fb69 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002548:	e009      	b.n	800255e <handle_requestPowerOff+0x20e>
			break;
 800254a:	bf00      	nop
 800254c:	e008      	b.n	8002560 <handle_requestPowerOff+0x210>
			break;
 800254e:	bf00      	nop
 8002550:	e006      	b.n	8002560 <handle_requestPowerOff+0x210>
			break;
 8002552:	bf00      	nop
 8002554:	e004      	b.n	8002560 <handle_requestPowerOff+0x210>
			break;
 8002556:	bf00      	nop
 8002558:	e002      	b.n	8002560 <handle_requestPowerOff+0x210>
			break;
 800255a:	bf00      	nop
 800255c:	e000      	b.n	8002560 <handle_requestPowerOff+0x210>
			break;
 800255e:	bf00      	nop
	}


}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200004e8 	.word	0x200004e8
 8002568:	08009120 	.word	0x08009120
 800256c:	200004d0 	.word	0x200004d0
 8002570:	200003ec 	.word	0x200003ec
 8002574:	0800931c 	.word	0x0800931c
 8002578:	2000031c 	.word	0x2000031c
 800257c:	200004dc 	.word	0x200004dc
 8002580:	08009118 	.word	0x08009118
 8002584:	08009318 	.word	0x08009318
 8002588:	200004b8 	.word	0x200004b8
 800258c:	200004bc 	.word	0x200004bc

08002590 <handle_requestGpsOn>:

static void handle_requestGpsOn(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsOn_state)) {
 8002594:	488d      	ldr	r0, [pc, #564]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002596:	f7ff fb10 	bl	8001bba <fsmManager_getState>
 800259a:	4603      	mov	r3, r0
 800259c:	2b05      	cmp	r3, #5
 800259e:	f200 80e9 	bhi.w	8002774 <handle_requestGpsOn+0x1e4>
 80025a2:	a201      	add	r2, pc, #4	; (adr r2, 80025a8 <handle_requestGpsOn+0x18>)
 80025a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a8:	080025c1 	.word	0x080025c1
 80025ac:	080025f1 	.word	0x080025f1
 80025b0:	08002627 	.word	0x08002627
 80025b4:	08002689 	.word	0x08002689
 80025b8:	080026bf 	.word	0x080026bf
 80025bc:	08002733 	.word	0x08002733
		case __gsmModule_requestGpsOn_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 80025c0:	4882      	ldr	r0, [pc, #520]	; (80027cc <handle_requestGpsOn+0x23c>)
 80025c2:	f7ff fb05 	bl	8001bd0 <fsmManager_isStateIn>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <handle_requestGpsOn+0x42>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 80025cc:	487f      	ldr	r0, [pc, #508]	; (80027cc <handle_requestGpsOn+0x23c>)
 80025ce:	f7ff fb15 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpspwr1);
 80025d2:	2101      	movs	r1, #1
 80025d4:	487d      	ldr	r0, [pc, #500]	; (80027cc <handle_requestGpsOn+0x23c>)
 80025d6:	f7ff fad9 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 80025da:	487c      	ldr	r0, [pc, #496]	; (80027cc <handle_requestGpsOn+0x23c>)
 80025dc:	f7ff fb03 	bl	8001be6 <fsmManager_isStateOut>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80e2 	beq.w	80027ac <handle_requestGpsOn+0x21c>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 80025e8:	4878      	ldr	r0, [pc, #480]	; (80027cc <handle_requestGpsOn+0x23c>)
 80025ea:	f7ff fb16 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80025ee:	e0dd      	b.n	80027ac <handle_requestGpsOn+0x21c>



		case __gsmModule_requestGpsOn_send_atCgpspwr1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 80025f0:	4876      	ldr	r0, [pc, #472]	; (80027cc <handle_requestGpsOn+0x23c>)
 80025f2:	f7ff faed 	bl	8001bd0 <fsmManager_isStateIn>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <handle_requestGpsOn+0x72>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 80025fc:	4873      	ldr	r0, [pc, #460]	; (80027cc <handle_requestGpsOn+0x23c>)
 80025fe:	f7ff fafd 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpspwr1);
 8002602:	4873      	ldr	r0, [pc, #460]	; (80027d0 <handle_requestGpsOn+0x240>)
 8002604:	f001 fcf2 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_waitOk_atCgpspwr1);
 8002608:	2102      	movs	r1, #2
 800260a:	4870      	ldr	r0, [pc, #448]	; (80027cc <handle_requestGpsOn+0x23c>)
 800260c:	f7ff fabe 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002610:	486e      	ldr	r0, [pc, #440]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002612:	f7ff fae8 	bl	8001be6 <fsmManager_isStateOut>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80c9 	beq.w	80027b0 <handle_requestGpsOn+0x220>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 800261e:	486b      	ldr	r0, [pc, #428]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002620:	f7ff fafb 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002624:	e0c4      	b.n	80027b0 <handle_requestGpsOn+0x220>



		case __gsmModule_requestGpsOn_waitOk_atCgpspwr1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002626:	4869      	ldr	r0, [pc, #420]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002628:	f7ff fad2 	bl	8001bd0 <fsmManager_isStateIn>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <handle_requestGpsOn+0xb0>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002632:	4866      	ldr	r0, [pc, #408]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002634:	f7ff fae2 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002638:	2164      	movs	r1, #100	; 0x64
 800263a:	4866      	ldr	r0, [pc, #408]	; (80027d4 <handle_requestGpsOn+0x244>)
 800263c:	f002 f8e2 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002640:	4b65      	ldr	r3, [pc, #404]	; (80027d8 <handle_requestGpsOn+0x248>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4965      	ldr	r1, [pc, #404]	; (80027dc <handle_requestGpsOn+0x24c>)
 8002648:	4865      	ldr	r0, [pc, #404]	; (80027e0 <handle_requestGpsOn+0x250>)
 800264a:	f002 ff46 	bl	80054da <string_containsWithinLength>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d004      	beq.n	800265e <handle_requestGpsOn+0xce>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_send_atCgpsrst0);
 8002654:	2103      	movs	r1, #3
 8002656:	485d      	ldr	r0, [pc, #372]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002658:	f7ff fa98 	bl	8001b8c <fsmManager_gotoState>
 800265c:	e009      	b.n	8002672 <handle_requestGpsOn+0xe2>
			}
			else if(softTimer_expired(&timeout)) {
 800265e:	485d      	ldr	r0, [pc, #372]	; (80027d4 <handle_requestGpsOn+0x244>)
 8002660:	f002 f8e4 	bl	800482c <softTimer_expired>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <handle_requestGpsOn+0xe2>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_error);
 800266a:	2105      	movs	r1, #5
 800266c:	4857      	ldr	r0, [pc, #348]	; (80027cc <handle_requestGpsOn+0x23c>)
 800266e:	f7ff fa8d 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002672:	4856      	ldr	r0, [pc, #344]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002674:	f7ff fab7 	bl	8001be6 <fsmManager_isStateOut>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 809a 	beq.w	80027b4 <handle_requestGpsOn+0x224>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 8002680:	4852      	ldr	r0, [pc, #328]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002682:	f7ff faca 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002686:	e095      	b.n	80027b4 <handle_requestGpsOn+0x224>



		case __gsmModule_requestGpsOn_send_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002688:	4850      	ldr	r0, [pc, #320]	; (80027cc <handle_requestGpsOn+0x23c>)
 800268a:	f7ff faa1 	bl	8001bd0 <fsmManager_isStateIn>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <handle_requestGpsOn+0x10a>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002694:	484d      	ldr	r0, [pc, #308]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002696:	f7ff fab1 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst0);
 800269a:	4852      	ldr	r0, [pc, #328]	; (80027e4 <handle_requestGpsOn+0x254>)
 800269c:	f001 fca6 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_waitOk_atCgpsrst0);
 80026a0:	2104      	movs	r1, #4
 80026a2:	484a      	ldr	r0, [pc, #296]	; (80027cc <handle_requestGpsOn+0x23c>)
 80026a4:	f7ff fa72 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 80026a8:	4848      	ldr	r0, [pc, #288]	; (80027cc <handle_requestGpsOn+0x23c>)
 80026aa:	f7ff fa9c 	bl	8001be6 <fsmManager_isStateOut>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8081 	beq.w	80027b8 <handle_requestGpsOn+0x228>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 80026b6:	4845      	ldr	r0, [pc, #276]	; (80027cc <handle_requestGpsOn+0x23c>)
 80026b8:	f7ff faaf 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80026bc:	e07c      	b.n	80027b8 <handle_requestGpsOn+0x228>



		case __gsmModule_requestGpsOn_waitOk_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 80026be:	4843      	ldr	r0, [pc, #268]	; (80027cc <handle_requestGpsOn+0x23c>)
 80026c0:	f7ff fa86 	bl	8001bd0 <fsmManager_isStateIn>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d006      	beq.n	80026d8 <handle_requestGpsOn+0x148>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 80026ca:	4840      	ldr	r0, [pc, #256]	; (80027cc <handle_requestGpsOn+0x23c>)
 80026cc:	f7ff fa96 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80026d0:	2164      	movs	r1, #100	; 0x64
 80026d2:	4840      	ldr	r0, [pc, #256]	; (80027d4 <handle_requestGpsOn+0x244>)
 80026d4:	f002 f896 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80026d8:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <handle_requestGpsOn+0x248>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	493f      	ldr	r1, [pc, #252]	; (80027dc <handle_requestGpsOn+0x24c>)
 80026e0:	483f      	ldr	r0, [pc, #252]	; (80027e0 <handle_requestGpsOn+0x250>)
 80026e2:	f002 fefa 	bl	80054da <string_containsWithinLength>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00e      	beq.n	800270a <handle_requestGpsOn+0x17a>
				flags_gsmModule.bits.isGpsOn = 1;
 80026ec:	4a3e      	ldr	r2, [pc, #248]	; (80027e8 <handle_requestGpsOn+0x258>)
 80026ee:	7853      	ldrb	r3, [r2, #1]
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestGpsOn = 0;
 80026f6:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <handle_requestGpsOn+0x258>)
 80026f8:	7813      	ldrb	r3, [r2, #0]
 80026fa:	f36f 0382 	bfc	r3, #2, #1
 80026fe:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8002700:	2100      	movs	r1, #0
 8002702:	4832      	ldr	r0, [pc, #200]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002704:	f7ff fa42 	bl	8001b8c <fsmManager_gotoState>
 8002708:	e009      	b.n	800271e <handle_requestGpsOn+0x18e>
			}
			else if(softTimer_expired(&timeout)) {
 800270a:	4832      	ldr	r0, [pc, #200]	; (80027d4 <handle_requestGpsOn+0x244>)
 800270c:	f002 f88e 	bl	800482c <softTimer_expired>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <handle_requestGpsOn+0x18e>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_error);
 8002716:	2105      	movs	r1, #5
 8002718:	482c      	ldr	r0, [pc, #176]	; (80027cc <handle_requestGpsOn+0x23c>)
 800271a:	f7ff fa37 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 800271e:	482b      	ldr	r0, [pc, #172]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002720:	f7ff fa61 	bl	8001be6 <fsmManager_isStateOut>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d048      	beq.n	80027bc <handle_requestGpsOn+0x22c>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 800272a:	4828      	ldr	r0, [pc, #160]	; (80027cc <handle_requestGpsOn+0x23c>)
 800272c:	f7ff fa75 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002730:	e044      	b.n	80027bc <handle_requestGpsOn+0x22c>

		case __gsmModule_requestGpsOn_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002732:	4826      	ldr	r0, [pc, #152]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002734:	f7ff fa4c 	bl	8001bd0 <fsmManager_isStateIn>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <handle_requestGpsOn+0x1b4>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 800273e:	4823      	ldr	r0, [pc, #140]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002740:	f7ff fa5c 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.gpsOn = 1;
 8002744:	4a29      	ldr	r2, [pc, #164]	; (80027ec <handle_requestGpsOn+0x25c>)
 8002746:	7813      	ldrb	r3, [r2, #0]
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestGpsOn = 0;
 800274e:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <handle_requestGpsOn+0x258>)
 8002750:	7813      	ldrb	r3, [r2, #0]
 8002752:	f36f 0382 	bfc	r3, #2, #1
 8002756:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8002758:	2100      	movs	r1, #0
 800275a:	481c      	ldr	r0, [pc, #112]	; (80027cc <handle_requestGpsOn+0x23c>)
 800275c:	f7ff fa16 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002760:	481a      	ldr	r0, [pc, #104]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002762:	f7ff fa40 	bl	8001be6 <fsmManager_isStateOut>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d029      	beq.n	80027c0 <handle_requestGpsOn+0x230>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 800276c:	4817      	ldr	r0, [pc, #92]	; (80027cc <handle_requestGpsOn+0x23c>)
 800276e:	f7ff fa54 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002772:	e025      	b.n	80027c0 <handle_requestGpsOn+0x230>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOn_state)) {
 8002774:	4815      	ldr	r0, [pc, #84]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002776:	f7ff fa2b 	bl	8001bd0 <fsmManager_isStateIn>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <handle_requestGpsOn+0x1f6>
				fsmManager_stateIn(&gsmModule_requestGpsOn_state);
 8002780:	4812      	ldr	r0, [pc, #72]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002782:	f7ff fa3b 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestGpsOn = 0;
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <handle_requestGpsOn+0x258>)
 8002788:	7813      	ldrb	r3, [r2, #0]
 800278a:	f36f 0382 	bfc	r3, #2, #1
 800278e:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestGpsOn_idle);
 8002790:	2100      	movs	r1, #0
 8002792:	480e      	ldr	r0, [pc, #56]	; (80027cc <handle_requestGpsOn+0x23c>)
 8002794:	f7ff f9fa 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOn_state)) {
 8002798:	480c      	ldr	r0, [pc, #48]	; (80027cc <handle_requestGpsOn+0x23c>)
 800279a:	f7ff fa24 	bl	8001be6 <fsmManager_isStateOut>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00f      	beq.n	80027c4 <handle_requestGpsOn+0x234>
				fsmManager_stateOut(&gsmModule_requestGpsOn_state);
 80027a4:	4809      	ldr	r0, [pc, #36]	; (80027cc <handle_requestGpsOn+0x23c>)
 80027a6:	f7ff fa38 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80027aa:	e00b      	b.n	80027c4 <handle_requestGpsOn+0x234>
			break;
 80027ac:	bf00      	nop
 80027ae:	e00a      	b.n	80027c6 <handle_requestGpsOn+0x236>
			break;
 80027b0:	bf00      	nop
 80027b2:	e008      	b.n	80027c6 <handle_requestGpsOn+0x236>
			break;
 80027b4:	bf00      	nop
 80027b6:	e006      	b.n	80027c6 <handle_requestGpsOn+0x236>
			break;
 80027b8:	bf00      	nop
 80027ba:	e004      	b.n	80027c6 <handle_requestGpsOn+0x236>
			break;
 80027bc:	bf00      	nop
 80027be:	e002      	b.n	80027c6 <handle_requestGpsOn+0x236>
			break;
 80027c0:	bf00      	nop
 80027c2:	e000      	b.n	80027c6 <handle_requestGpsOn+0x236>
			break;
 80027c4:	bf00      	nop
	}
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200004f4 	.word	0x200004f4
 80027d0:	08009130 	.word	0x08009130
 80027d4:	200004d0 	.word	0x200004d0
 80027d8:	200003ec 	.word	0x200003ec
 80027dc:	08009318 	.word	0x08009318
 80027e0:	2000031c 	.word	0x2000031c
 80027e4:	08009140 	.word	0x08009140
 80027e8:	200004b8 	.word	0x200004b8
 80027ec:	200004bc 	.word	0x200004bc

080027f0 <handle_requestGpsInfo>:

static void handle_requestGpsInfo(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsInfo_state)) {
 80027f4:	4895      	ldr	r0, [pc, #596]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 80027f6:	f7ff f9e0 	bl	8001bba <fsmManager_getState>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	f200 80ff 	bhi.w	8002a00 <handle_requestGpsInfo+0x210>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <handle_requestGpsInfo+0x18>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	08002821 	.word	0x08002821
 800280c:	08002851 	.word	0x08002851
 8002810:	0800289d 	.word	0x0800289d
 8002814:	0800291f 	.word	0x0800291f
 8002818:	08002953 	.word	0x08002953
 800281c:	080029bf 	.word	0x080029bf
		case __gsmModule_requestGpsInfo_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002820:	488a      	ldr	r0, [pc, #552]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002822:	f7ff f9d5 	bl	8001bd0 <fsmManager_isStateIn>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <handle_requestGpsInfo+0x42>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 800282c:	4887      	ldr	r0, [pc, #540]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 800282e:	f7ff f9e5 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsstatus);
 8002832:	2101      	movs	r1, #1
 8002834:	4885      	ldr	r0, [pc, #532]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002836:	f7ff f9a9 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 800283a:	4884      	ldr	r0, [pc, #528]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 800283c:	f7ff f9d3 	bl	8001be6 <fsmManager_isStateOut>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80f3 	beq.w	8002a2e <handle_requestGpsInfo+0x23e>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002848:	4880      	ldr	r0, [pc, #512]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 800284a:	f7ff f9e6 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800284e:	e0ee      	b.n	8002a2e <handle_requestGpsInfo+0x23e>



		case __gsmModule_requestGpsInfo_send_atCgpsstatus:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002850:	487e      	ldr	r0, [pc, #504]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002852:	f7ff f9bd 	bl	8001bd0 <fsmManager_isStateIn>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <handle_requestGpsInfo+0x7c>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 800285c:	487b      	ldr	r0, [pc, #492]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 800285e:	f7ff f9cd 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 10000);
 8002862:	f242 7110 	movw	r1, #10000	; 0x2710
 8002866:	487a      	ldr	r0, [pc, #488]	; (8002a50 <handle_requestGpsInfo+0x260>)
 8002868:	f001 ffcc 	bl	8004804 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 800286c:	4878      	ldr	r0, [pc, #480]	; (8002a50 <handle_requestGpsInfo+0x260>)
 800286e:	f001 ffdd 	bl	800482c <softTimer_expired>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <handle_requestGpsInfo+0x96>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsstatus);
 8002878:	4876      	ldr	r0, [pc, #472]	; (8002a54 <handle_requestGpsInfo+0x264>)
 800287a:	f001 fbb7 	bl	8003fec <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_check_atCgpsstatus);
 800287e:	2102      	movs	r1, #2
 8002880:	4872      	ldr	r0, [pc, #456]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002882:	f7ff f983 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002886:	4871      	ldr	r0, [pc, #452]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002888:	f7ff f9ad 	bl	8001be6 <fsmManager_isStateOut>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80cf 	beq.w	8002a32 <handle_requestGpsInfo+0x242>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002894:	486d      	ldr	r0, [pc, #436]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002896:	f7ff f9c0 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800289a:	e0ca      	b.n	8002a32 <handle_requestGpsInfo+0x242>



		case __gsmModule_requestGpsInfo_check_atCgpsstatus:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 800289c:	486b      	ldr	r0, [pc, #428]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 800289e:	f7ff f997 	bl	8001bd0 <fsmManager_isStateIn>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <handle_requestGpsInfo+0xc8>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 80028a8:	4868      	ldr	r0, [pc, #416]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 80028aa:	f7ff f9a7 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 80028ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028b2:	4867      	ldr	r0, [pc, #412]	; (8002a50 <handle_requestGpsInfo+0x260>)
 80028b4:	f001 ffa6 	bl	8004804 <softTimer_start>
			}


			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps2dFix, gsmRxDataChunkLen) ||
 80028b8:	4b67      	ldr	r3, [pc, #412]	; (8002a58 <handle_requestGpsInfo+0x268>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4967      	ldr	r1, [pc, #412]	; (8002a5c <handle_requestGpsInfo+0x26c>)
 80028c0:	4867      	ldr	r0, [pc, #412]	; (8002a60 <handle_requestGpsInfo+0x270>)
 80028c2:	f002 fe0a 	bl	80054da <string_containsWithinLength>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d109      	bne.n	80028e0 <handle_requestGpsInfo+0xf0>
			   string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps3dFix, gsmRxDataChunkLen)) {
 80028cc:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <handle_requestGpsInfo+0x268>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4964      	ldr	r1, [pc, #400]	; (8002a64 <handle_requestGpsInfo+0x274>)
 80028d4:	4862      	ldr	r0, [pc, #392]	; (8002a60 <handle_requestGpsInfo+0x270>)
 80028d6:	f002 fe00 	bl	80054da <string_containsWithinLength>
 80028da:	4603      	mov	r3, r0
			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gps2dFix, gsmRxDataChunkLen) ||
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d009      	beq.n	80028f4 <handle_requestGpsInfo+0x104>
				flags_gsmModule.bits.isGpsFixed = 1;
 80028e0:	4a61      	ldr	r2, [pc, #388]	; (8002a68 <handle_requestGpsInfo+0x278>)
 80028e2:	7853      	ldrb	r3, [r2, #1]
 80028e4:	f043 0310 	orr.w	r3, r3, #16
 80028e8:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsinf2);
 80028ea:	2103      	movs	r1, #3
 80028ec:	4857      	ldr	r0, [pc, #348]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 80028ee:	f7ff f94d 	bl	8001b8c <fsmManager_gotoState>
 80028f2:	e009      	b.n	8002908 <handle_requestGpsInfo+0x118>
			}
			else if(softTimer_expired(&timeout)) {
 80028f4:	4856      	ldr	r0, [pc, #344]	; (8002a50 <handle_requestGpsInfo+0x260>)
 80028f6:	f001 ff99 	bl	800482c <softTimer_expired>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <handle_requestGpsInfo+0x118>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsstatus);
 8002900:	2101      	movs	r1, #1
 8002902:	4852      	ldr	r0, [pc, #328]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002904:	f7ff f942 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002908:	4850      	ldr	r0, [pc, #320]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 800290a:	f7ff f96c 	bl	8001be6 <fsmManager_isStateOut>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8090 	beq.w	8002a36 <handle_requestGpsInfo+0x246>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002916:	484d      	ldr	r0, [pc, #308]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002918:	f7ff f97f 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800291c:	e08b      	b.n	8002a36 <handle_requestGpsInfo+0x246>



		case __gsmModule_requestGpsInfo_send_atCgpsinf2:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 800291e:	484b      	ldr	r0, [pc, #300]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002920:	f7ff f956 	bl	8001bd0 <fsmManager_isStateIn>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <handle_requestGpsInfo+0x140>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 800292a:	4848      	ldr	r0, [pc, #288]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 800292c:	f7ff f966 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsinf2);
 8002930:	484e      	ldr	r0, [pc, #312]	; (8002a6c <handle_requestGpsInfo+0x27c>)
 8002932:	f001 fb5b 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_get_atCgpsinf2);
 8002936:	2104      	movs	r1, #4
 8002938:	4844      	ldr	r0, [pc, #272]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 800293a:	f7ff f927 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 800293e:	4843      	ldr	r0, [pc, #268]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002940:	f7ff f951 	bl	8001be6 <fsmManager_isStateOut>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d077      	beq.n	8002a3a <handle_requestGpsInfo+0x24a>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 800294a:	4840      	ldr	r0, [pc, #256]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 800294c:	f7ff f965 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002950:	e073      	b.n	8002a3a <handle_requestGpsInfo+0x24a>



		case __gsmModule_requestGpsInfo_get_atCgpsinf2:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002952:	483e      	ldr	r0, [pc, #248]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002954:	f7ff f93c 	bl	8001bd0 <fsmManager_isStateIn>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <handle_requestGpsInfo+0x17e>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 800295e:	483b      	ldr	r0, [pc, #236]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002960:	f7ff f94c 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8002964:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002968:	4839      	ldr	r0, [pc, #228]	; (8002a50 <handle_requestGpsInfo+0x260>)
 800296a:	f001 ff4b 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_gpsInf2, gsmRxDataChunkLen)) {
 800296e:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <handle_requestGpsInfo+0x268>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	493e      	ldr	r1, [pc, #248]	; (8002a70 <handle_requestGpsInfo+0x280>)
 8002976:	483a      	ldr	r0, [pc, #232]	; (8002a60 <handle_requestGpsInfo+0x270>)
 8002978:	f002 fdaf 	bl	80054da <string_containsWithinLength>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <handle_requestGpsInfo+0x1a6>
				flags_gsmModule.bits.requestGpsInfo = 0;
 8002982:	4a39      	ldr	r2, [pc, #228]	; (8002a68 <handle_requestGpsInfo+0x278>)
 8002984:	7813      	ldrb	r3, [r2, #0]
 8002986:	f36f 03c3 	bfc	r3, #3, #1
 800298a:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 800298c:	2100      	movs	r1, #0
 800298e:	482f      	ldr	r0, [pc, #188]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002990:	f7ff f8fc 	bl	8001b8c <fsmManager_gotoState>
 8002994:	e009      	b.n	80029aa <handle_requestGpsInfo+0x1ba>
			}
			else if(softTimer_expired(&timeout)) {
 8002996:	482e      	ldr	r0, [pc, #184]	; (8002a50 <handle_requestGpsInfo+0x260>)
 8002998:	f001 ff48 	bl	800482c <softTimer_expired>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <handle_requestGpsInfo+0x1ba>
				fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_send_atCgpsinf2);
 80029a2:	2103      	movs	r1, #3
 80029a4:	4829      	ldr	r0, [pc, #164]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 80029a6:	f7ff f8f1 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 80029aa:	4828      	ldr	r0, [pc, #160]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 80029ac:	f7ff f91b 	bl	8001be6 <fsmManager_isStateOut>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d043      	beq.n	8002a3e <handle_requestGpsInfo+0x24e>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 80029b6:	4825      	ldr	r0, [pc, #148]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 80029b8:	f7ff f92f 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80029bc:	e03f      	b.n	8002a3e <handle_requestGpsInfo+0x24e>



		case __gsmModule_requestGpsInfo_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 80029be:	4823      	ldr	r0, [pc, #140]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 80029c0:	f7ff f906 	bl	8001bd0 <fsmManager_isStateIn>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <handle_requestGpsInfo+0x1e0>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 80029ca:	4820      	ldr	r0, [pc, #128]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 80029cc:	f7ff f916 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestGpsInfo = 0;
 80029d0:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <handle_requestGpsInfo+0x278>)
 80029d2:	7813      	ldrb	r3, [r2, #0]
 80029d4:	f36f 03c3 	bfc	r3, #3, #1
 80029d8:	7013      	strb	r3, [r2, #0]
			flags_gsmModuleError.bits.gpsInfo = 1;
 80029da:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <handle_requestGpsInfo+0x284>)
 80029dc:	7813      	ldrb	r3, [r2, #0]
 80029de:	f043 0308 	orr.w	r3, r3, #8
 80029e2:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 80029e4:	2100      	movs	r1, #0
 80029e6:	4819      	ldr	r0, [pc, #100]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 80029e8:	f7ff f8d0 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 80029ec:	4817      	ldr	r0, [pc, #92]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 80029ee:	f7ff f8fa 	bl	8001be6 <fsmManager_isStateOut>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d024      	beq.n	8002a42 <handle_requestGpsInfo+0x252>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 80029f8:	4814      	ldr	r0, [pc, #80]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 80029fa:	f7ff f90e 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80029fe:	e020      	b.n	8002a42 <handle_requestGpsInfo+0x252>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsInfo_state)) {
 8002a00:	4812      	ldr	r0, [pc, #72]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002a02:	f7ff f8e5 	bl	8001bd0 <fsmManager_isStateIn>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <handle_requestGpsInfo+0x222>
				fsmManager_stateIn(&gsmModule_requestGpsInfo_state);
 8002a0c:	480f      	ldr	r0, [pc, #60]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002a0e:	f7ff f8f5 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsInfo_state, __gsmModule_requestGpsInfo_idle);
 8002a12:	2100      	movs	r1, #0
 8002a14:	480d      	ldr	r0, [pc, #52]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002a16:	f7ff f8b9 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsInfo_state)) {
 8002a1a:	480c      	ldr	r0, [pc, #48]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002a1c:	f7ff f8e3 	bl	8001be6 <fsmManager_isStateOut>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00f      	beq.n	8002a46 <handle_requestGpsInfo+0x256>
				fsmManager_stateOut(&gsmModule_requestGpsInfo_state);
 8002a26:	4809      	ldr	r0, [pc, #36]	; (8002a4c <handle_requestGpsInfo+0x25c>)
 8002a28:	f7ff f8f7 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002a2c:	e00b      	b.n	8002a46 <handle_requestGpsInfo+0x256>
			break;
 8002a2e:	bf00      	nop
 8002a30:	e00a      	b.n	8002a48 <handle_requestGpsInfo+0x258>
			break;
 8002a32:	bf00      	nop
 8002a34:	e008      	b.n	8002a48 <handle_requestGpsInfo+0x258>
			break;
 8002a36:	bf00      	nop
 8002a38:	e006      	b.n	8002a48 <handle_requestGpsInfo+0x258>
			break;
 8002a3a:	bf00      	nop
 8002a3c:	e004      	b.n	8002a48 <handle_requestGpsInfo+0x258>
			break;
 8002a3e:	bf00      	nop
 8002a40:	e002      	b.n	8002a48 <handle_requestGpsInfo+0x258>
			break;
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <handle_requestGpsInfo+0x258>
			break;
 8002a46:	bf00      	nop
	}
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000500 	.word	0x20000500
 8002a50:	200004d0 	.word	0x200004d0
 8002a54:	08009160 	.word	0x08009160
 8002a58:	200003ec 	.word	0x200003ec
 8002a5c:	08009364 	.word	0x08009364
 8002a60:	2000031c 	.word	0x2000031c
 8002a64:	0800936c 	.word	0x0800936c
 8002a68:	200004b8 	.word	0x200004b8
 8002a6c:	08009174 	.word	0x08009174
 8002a70:	08009374 	.word	0x08009374
 8002a74:	200004bc 	.word	0x200004bc

08002a78 <handle_requestGpsOff>:

static void handle_requestGpsOff(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestGpsOff_state)) {
 8002a7c:	48b1      	ldr	r0, [pc, #708]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002a7e:	f7ff f89c 	bl	8001bba <fsmManager_getState>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b07      	cmp	r3, #7
 8002a86:	f200 8133 	bhi.w	8002cf0 <handle_requestGpsOff+0x278>
 8002a8a:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <handle_requestGpsOff+0x18>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002ab1 	.word	0x08002ab1
 8002a94:	08002ae1 	.word	0x08002ae1
 8002a98:	08002b17 	.word	0x08002b17
 8002a9c:	08002b79 	.word	0x08002b79
 8002aa0:	08002baf 	.word	0x08002baf
 8002aa4:	08002c11 	.word	0x08002c11
 8002aa8:	08002c45 	.word	0x08002c45
 8002aac:	08002caf 	.word	0x08002caf
		case __gsmModule_requestGpsOff_idle:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002ab0:	48a4      	ldr	r0, [pc, #656]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002ab2:	f7ff f88d 	bl	8001bd0 <fsmManager_isStateIn>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <handle_requestGpsOff+0x4a>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002abc:	48a1      	ldr	r0, [pc, #644]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002abe:	f7ff f89d 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst0);
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	489f      	ldr	r0, [pc, #636]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002ac6:	f7ff f861 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002aca:	489e      	ldr	r0, [pc, #632]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002acc:	f7ff f88b 	bl	8001be6 <fsmManager_isStateOut>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8123 	beq.w	8002d1e <handle_requestGpsOff+0x2a6>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002ad8:	489a      	ldr	r0, [pc, #616]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002ada:	f7ff f89e 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002ade:	e11e      	b.n	8002d1e <handle_requestGpsOff+0x2a6>



		case __gsmModule_requestGpsOff_send_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002ae0:	4898      	ldr	r0, [pc, #608]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002ae2:	f7ff f875 	bl	8001bd0 <fsmManager_isStateIn>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <handle_requestGpsOff+0x7a>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002aec:	4895      	ldr	r0, [pc, #596]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002aee:	f7ff f885 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst0);
 8002af2:	4895      	ldr	r0, [pc, #596]	; (8002d48 <handle_requestGpsOff+0x2d0>)
 8002af4:	f001 fa7a 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpsrst0);
 8002af8:	2102      	movs	r1, #2
 8002afa:	4892      	ldr	r0, [pc, #584]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002afc:	f7ff f846 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002b00:	4890      	ldr	r0, [pc, #576]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b02:	f7ff f870 	bl	8001be6 <fsmManager_isStateOut>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 810a 	beq.w	8002d22 <handle_requestGpsOff+0x2aa>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002b0e:	488d      	ldr	r0, [pc, #564]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b10:	f7ff f883 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002b14:	e105      	b.n	8002d22 <handle_requestGpsOff+0x2aa>



		case __gsmModule_requestGpsOff_waitOk_atCgpsrst0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002b16:	488b      	ldr	r0, [pc, #556]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b18:	f7ff f85a 	bl	8001bd0 <fsmManager_isStateIn>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <handle_requestGpsOff+0xb8>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002b22:	4888      	ldr	r0, [pc, #544]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b24:	f7ff f86a 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002b28:	2164      	movs	r1, #100	; 0x64
 8002b2a:	4888      	ldr	r0, [pc, #544]	; (8002d4c <handle_requestGpsOff+0x2d4>)
 8002b2c:	f001 fe6a 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002b30:	4b87      	ldr	r3, [pc, #540]	; (8002d50 <handle_requestGpsOff+0x2d8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4987      	ldr	r1, [pc, #540]	; (8002d54 <handle_requestGpsOff+0x2dc>)
 8002b38:	4887      	ldr	r0, [pc, #540]	; (8002d58 <handle_requestGpsOff+0x2e0>)
 8002b3a:	f002 fcce 	bl	80054da <string_containsWithinLength>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <handle_requestGpsOff+0xd6>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpsrst1);
 8002b44:	2103      	movs	r1, #3
 8002b46:	487f      	ldr	r0, [pc, #508]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b48:	f7ff f820 	bl	8001b8c <fsmManager_gotoState>
 8002b4c:	e009      	b.n	8002b62 <handle_requestGpsOff+0xea>
			}
			else if(softTimer_expired(&timeout)) {
 8002b4e:	487f      	ldr	r0, [pc, #508]	; (8002d4c <handle_requestGpsOff+0x2d4>)
 8002b50:	f001 fe6c 	bl	800482c <softTimer_expired>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <handle_requestGpsOff+0xea>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_error);
 8002b5a:	2107      	movs	r1, #7
 8002b5c:	4879      	ldr	r0, [pc, #484]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b5e:	f7ff f815 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002b62:	4878      	ldr	r0, [pc, #480]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b64:	f7ff f83f 	bl	8001be6 <fsmManager_isStateOut>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80db 	beq.w	8002d26 <handle_requestGpsOff+0x2ae>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002b70:	4874      	ldr	r0, [pc, #464]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b72:	f7ff f852 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002b76:	e0d6      	b.n	8002d26 <handle_requestGpsOff+0x2ae>



		case __gsmModule_requestGpsOff_send_atCgpsrst1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002b78:	4872      	ldr	r0, [pc, #456]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b7a:	f7ff f829 	bl	8001bd0 <fsmManager_isStateIn>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <handle_requestGpsOff+0x112>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002b84:	486f      	ldr	r0, [pc, #444]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b86:	f7ff f839 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpsrst1);
 8002b8a:	4874      	ldr	r0, [pc, #464]	; (8002d5c <handle_requestGpsOff+0x2e4>)
 8002b8c:	f001 fa2e 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpsrst1);
 8002b90:	2104      	movs	r1, #4
 8002b92:	486c      	ldr	r0, [pc, #432]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b94:	f7fe fffa 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002b98:	486a      	ldr	r0, [pc, #424]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002b9a:	f7ff f824 	bl	8001be6 <fsmManager_isStateOut>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80c2 	beq.w	8002d2a <handle_requestGpsOff+0x2b2>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002ba6:	4867      	ldr	r0, [pc, #412]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002ba8:	f7ff f837 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002bac:	e0bd      	b.n	8002d2a <handle_requestGpsOff+0x2b2>



		case __gsmModule_requestGpsOff_waitOk_atCgpsrst1:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002bae:	4865      	ldr	r0, [pc, #404]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002bb0:	f7ff f80e 	bl	8001bd0 <fsmManager_isStateIn>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d006      	beq.n	8002bc8 <handle_requestGpsOff+0x150>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002bba:	4862      	ldr	r0, [pc, #392]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002bbc:	f7ff f81e 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002bc0:	2164      	movs	r1, #100	; 0x64
 8002bc2:	4862      	ldr	r0, [pc, #392]	; (8002d4c <handle_requestGpsOff+0x2d4>)
 8002bc4:	f001 fe1e 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002bc8:	4b61      	ldr	r3, [pc, #388]	; (8002d50 <handle_requestGpsOff+0x2d8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4961      	ldr	r1, [pc, #388]	; (8002d54 <handle_requestGpsOff+0x2dc>)
 8002bd0:	4861      	ldr	r0, [pc, #388]	; (8002d58 <handle_requestGpsOff+0x2e0>)
 8002bd2:	f002 fc82 	bl	80054da <string_containsWithinLength>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d004      	beq.n	8002be6 <handle_requestGpsOff+0x16e>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_send_atCgpspwr0);
 8002bdc:	2105      	movs	r1, #5
 8002bde:	4859      	ldr	r0, [pc, #356]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002be0:	f7fe ffd4 	bl	8001b8c <fsmManager_gotoState>
 8002be4:	e009      	b.n	8002bfa <handle_requestGpsOff+0x182>
			}
			else if(softTimer_expired(&timeout)) {
 8002be6:	4859      	ldr	r0, [pc, #356]	; (8002d4c <handle_requestGpsOff+0x2d4>)
 8002be8:	f001 fe20 	bl	800482c <softTimer_expired>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <handle_requestGpsOff+0x182>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_error);
 8002bf2:	2107      	movs	r1, #7
 8002bf4:	4853      	ldr	r0, [pc, #332]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002bf6:	f7fe ffc9 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002bfa:	4852      	ldr	r0, [pc, #328]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002bfc:	f7fe fff3 	bl	8001be6 <fsmManager_isStateOut>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8093 	beq.w	8002d2e <handle_requestGpsOff+0x2b6>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002c08:	484e      	ldr	r0, [pc, #312]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002c0a:	f7ff f806 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002c0e:	e08e      	b.n	8002d2e <handle_requestGpsOff+0x2b6>



		case __gsmModule_requestGpsOff_send_atCgpspwr0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002c10:	484c      	ldr	r0, [pc, #304]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002c12:	f7fe ffdd 	bl	8001bd0 <fsmManager_isStateIn>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <handle_requestGpsOff+0x1aa>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002c1c:	4849      	ldr	r0, [pc, #292]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002c1e:	f7fe ffed 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cgpspwr1);
 8002c22:	484f      	ldr	r0, [pc, #316]	; (8002d60 <handle_requestGpsOff+0x2e8>)
 8002c24:	f001 f9e2 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_waitOk_atCgpspwr0);
 8002c28:	2106      	movs	r1, #6
 8002c2a:	4846      	ldr	r0, [pc, #280]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002c2c:	f7fe ffae 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002c30:	4844      	ldr	r0, [pc, #272]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002c32:	f7fe ffd8 	bl	8001be6 <fsmManager_isStateOut>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d07a      	beq.n	8002d32 <handle_requestGpsOff+0x2ba>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002c3c:	4841      	ldr	r0, [pc, #260]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002c3e:	f7fe ffec 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002c42:	e076      	b.n	8002d32 <handle_requestGpsOff+0x2ba>



		case __gsmModule_requestGpsOff_waitOk_atCgpspwr0:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002c44:	483f      	ldr	r0, [pc, #252]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002c46:	f7fe ffc3 	bl	8001bd0 <fsmManager_isStateIn>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <handle_requestGpsOff+0x1e6>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002c50:	483c      	ldr	r0, [pc, #240]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002c52:	f7fe ffd3 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002c56:	2164      	movs	r1, #100	; 0x64
 8002c58:	483c      	ldr	r0, [pc, #240]	; (8002d4c <handle_requestGpsOff+0x2d4>)
 8002c5a:	f001 fdd3 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	; (8002d50 <handle_requestGpsOff+0x2d8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	493b      	ldr	r1, [pc, #236]	; (8002d54 <handle_requestGpsOff+0x2dc>)
 8002c66:	483c      	ldr	r0, [pc, #240]	; (8002d58 <handle_requestGpsOff+0x2e0>)
 8002c68:	f002 fc37 	bl	80054da <string_containsWithinLength>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <handle_requestGpsOff+0x20e>
				flags_gsmModule.bits.requestGpsOff = 0;
 8002c72:	4a3c      	ldr	r2, [pc, #240]	; (8002d64 <handle_requestGpsOff+0x2ec>)
 8002c74:	7813      	ldrb	r3, [r2, #0]
 8002c76:	f36f 1304 	bfc	r3, #4, #1
 8002c7a:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_idle);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4831      	ldr	r0, [pc, #196]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002c80:	f7fe ff84 	bl	8001b8c <fsmManager_gotoState>
 8002c84:	e009      	b.n	8002c9a <handle_requestGpsOff+0x222>
			}
			else if(softTimer_expired(&timeout)) {
 8002c86:	4831      	ldr	r0, [pc, #196]	; (8002d4c <handle_requestGpsOff+0x2d4>)
 8002c88:	f001 fdd0 	bl	800482c <softTimer_expired>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <handle_requestGpsOff+0x222>
				fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOff_error);
 8002c92:	2107      	movs	r1, #7
 8002c94:	482b      	ldr	r0, [pc, #172]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002c96:	f7fe ff79 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002c9a:	482a      	ldr	r0, [pc, #168]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002c9c:	f7fe ffa3 	bl	8001be6 <fsmManager_isStateOut>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d047      	beq.n	8002d36 <handle_requestGpsOff+0x2be>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002ca6:	4827      	ldr	r0, [pc, #156]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002ca8:	f7fe ffb7 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002cac:	e043      	b.n	8002d36 <handle_requestGpsOff+0x2be>



		case __gsmModule_requestGpsOff_error:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002cae:	4825      	ldr	r0, [pc, #148]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002cb0:	f7fe ff8e 	bl	8001bd0 <fsmManager_isStateIn>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <handle_requestGpsOff+0x248>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002cba:	4822      	ldr	r0, [pc, #136]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002cbc:	f7fe ff9e 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.gpsOff = 1;
 8002cc0:	4a29      	ldr	r2, [pc, #164]	; (8002d68 <handle_requestGpsOff+0x2f0>)
 8002cc2:	7813      	ldrb	r3, [r2, #0]
 8002cc4:	f043 0310 	orr.w	r3, r3, #16
 8002cc8:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestGpsOff = 0;
 8002cca:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <handle_requestGpsOff+0x2ec>)
 8002ccc:	7813      	ldrb	r3, [r2, #0]
 8002cce:	f36f 1304 	bfc	r3, #4, #1
 8002cd2:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOn_idle);
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	481b      	ldr	r0, [pc, #108]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002cd8:	f7fe ff58 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002cdc:	4819      	ldr	r0, [pc, #100]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002cde:	f7fe ff82 	bl	8001be6 <fsmManager_isStateOut>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d028      	beq.n	8002d3a <handle_requestGpsOff+0x2c2>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002ce8:	4816      	ldr	r0, [pc, #88]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002cea:	f7fe ff96 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002cee:	e024      	b.n	8002d3a <handle_requestGpsOff+0x2c2>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8002cf0:	4814      	ldr	r0, [pc, #80]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002cf2:	f7fe ff6d 	bl	8001bd0 <fsmManager_isStateIn>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <handle_requestGpsOff+0x28a>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8002cfc:	4811      	ldr	r0, [pc, #68]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002cfe:	f7fe ff7d 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOn_idle);
 8002d02:	2100      	movs	r1, #0
 8002d04:	480f      	ldr	r0, [pc, #60]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002d06:	f7fe ff41 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8002d0a:	480e      	ldr	r0, [pc, #56]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002d0c:	f7fe ff6b 	bl	8001be6 <fsmManager_isStateOut>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d013      	beq.n	8002d3e <handle_requestGpsOff+0x2c6>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8002d16:	480b      	ldr	r0, [pc, #44]	; (8002d44 <handle_requestGpsOff+0x2cc>)
 8002d18:	f7fe ff7f 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002d1c:	e00f      	b.n	8002d3e <handle_requestGpsOff+0x2c6>
			break;
 8002d1e:	bf00      	nop
 8002d20:	e00e      	b.n	8002d40 <handle_requestGpsOff+0x2c8>
			break;
 8002d22:	bf00      	nop
 8002d24:	e00c      	b.n	8002d40 <handle_requestGpsOff+0x2c8>
			break;
 8002d26:	bf00      	nop
 8002d28:	e00a      	b.n	8002d40 <handle_requestGpsOff+0x2c8>
			break;
 8002d2a:	bf00      	nop
 8002d2c:	e008      	b.n	8002d40 <handle_requestGpsOff+0x2c8>
			break;
 8002d2e:	bf00      	nop
 8002d30:	e006      	b.n	8002d40 <handle_requestGpsOff+0x2c8>
			break;
 8002d32:	bf00      	nop
 8002d34:	e004      	b.n	8002d40 <handle_requestGpsOff+0x2c8>
			break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <handle_requestGpsOff+0x2c8>
			break;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <handle_requestGpsOff+0x2c8>
			break;
 8002d3e:	bf00      	nop
	}
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	2000050c 	.word	0x2000050c
 8002d48:	08009140 	.word	0x08009140
 8002d4c:	200004d0 	.word	0x200004d0
 8002d50:	200003ec 	.word	0x200003ec
 8002d54:	08009318 	.word	0x08009318
 8002d58:	2000031c 	.word	0x2000031c
 8002d5c:	08009150 	.word	0x08009150
 8002d60:	08009130 	.word	0x08009130
 8002d64:	200004b8 	.word	0x200004b8
 8002d68:	200004bc 	.word	0x200004bc

08002d6c <handle_requestServerConnection>:

static void handle_requestServerConnection(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerConnection_state)) {
 8002d70:	48c3      	ldr	r0, [pc, #780]	; (8003080 <handle_requestServerConnection+0x314>)
 8002d72:	f7fe ff22 	bl	8001bba <fsmManager_getState>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b1f      	cmp	r3, #31
 8002d7a:	f200 85da 	bhi.w	8003932 <handle_requestServerConnection+0xbc6>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <handle_requestServerConnection+0x18>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002e05 	.word	0x08002e05
 8002d88:	08002e37 	.word	0x08002e37
 8002d8c:	08002e6f 	.word	0x08002e6f
 8002d90:	08002ed3 	.word	0x08002ed3
 8002d94:	08002f0b 	.word	0x08002f0b
 8002d98:	08002f71 	.word	0x08002f71
 8002d9c:	08002fa9 	.word	0x08002fa9
 8002da0:	0800300f 	.word	0x0800300f
 8002da4:	08003047 	.word	0x08003047
 8002da8:	080030d9 	.word	0x080030d9
 8002dac:	08003127 	.word	0x08003127
 8002db0:	0800318b 	.word	0x0800318b
 8002db4:	080031c1 	.word	0x080031c1
 8002db8:	08003261 	.word	0x08003261
 8002dbc:	08003297 	.word	0x08003297
 8002dc0:	0800334f 	.word	0x0800334f
 8002dc4:	080033dd 	.word	0x080033dd
 8002dc8:	08003441 	.word	0x08003441
 8002dcc:	0800347f 	.word	0x0800347f
 8002dd0:	080034e1 	.word	0x080034e1
 8002dd4:	0800351f 	.word	0x0800351f
 8002dd8:	08003581 	.word	0x08003581
 8002ddc:	080035bf 	.word	0x080035bf
 8002de0:	08003621 	.word	0x08003621
 8002de4:	0800366d 	.word	0x0800366d
 8002de8:	08003701 	.word	0x08003701
 8002dec:	08003737 	.word	0x08003737
 8002df0:	08003799 	.word	0x08003799
 8002df4:	080037e5 	.word	0x080037e5
 8002df8:	08003847 	.word	0x08003847
 8002dfc:	0800387d 	.word	0x0800387d
 8002e00:	080038f1 	.word	0x080038f1
		case __gsmModule_requestServerConnection_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002e04:	489e      	ldr	r0, [pc, #632]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e06:	f7fe fee3 	bl	8001bd0 <fsmManager_isStateIn>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <handle_requestServerConnection+0xaa>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002e10:	489b      	ldr	r0, [pc, #620]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e12:	f7fe fef3 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCmee1);
 8002e16:	2101      	movs	r1, #1
 8002e18:	4899      	ldr	r0, [pc, #612]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e1a:	f7fe feb7 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8002e1e:	4898      	ldr	r0, [pc, #608]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e20:	f7fe fee1 	bl	8001be6 <fsmManager_isStateOut>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 859f 	beq.w	800396a <handle_requestServerConnection+0xbfe>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8002e2c:	4894      	ldr	r0, [pc, #592]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e2e:	f7fe fef4 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002e32:	f000 bd9a 	b.w	800396a <handle_requestServerConnection+0xbfe>



		case __gsmModule_requestServerConnection_send_atCmee1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002e36:	4892      	ldr	r0, [pc, #584]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e38:	f7fe feca 	bl	8001bd0 <fsmManager_isStateIn>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <handle_requestServerConnection+0xdc>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002e42:	488f      	ldr	r0, [pc, #572]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e44:	f7fe feda 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_atcmee1);
 8002e48:	488e      	ldr	r0, [pc, #568]	; (8003084 <handle_requestServerConnection+0x318>)
 8002e4a:	f001 f8cf 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCmee1);
 8002e4e:	2102      	movs	r1, #2
 8002e50:	488b      	ldr	r0, [pc, #556]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e52:	f7fe fe9b 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8002e56:	488a      	ldr	r0, [pc, #552]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e58:	f7fe fec5 	bl	8001be6 <fsmManager_isStateOut>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8585 	beq.w	800396e <handle_requestServerConnection+0xc02>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8002e64:	4886      	ldr	r0, [pc, #536]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e66:	f7fe fed8 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002e6a:	f000 bd80 	b.w	800396e <handle_requestServerConnection+0xc02>



		case __gsmModule_requestServerConnection_waitOk_atCmee1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002e6e:	4884      	ldr	r0, [pc, #528]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e70:	f7fe feae 	bl	8001bd0 <fsmManager_isStateIn>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <handle_requestServerConnection+0x11c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002e7a:	4881      	ldr	r0, [pc, #516]	; (8003080 <handle_requestServerConnection+0x314>)
 8002e7c:	f7fe febe 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8002e80:	2164      	movs	r1, #100	; 0x64
 8002e82:	4881      	ldr	r0, [pc, #516]	; (8003088 <handle_requestServerConnection+0x31c>)
 8002e84:	f001 fcbe 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002e88:	4b80      	ldr	r3, [pc, #512]	; (800308c <handle_requestServerConnection+0x320>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4980      	ldr	r1, [pc, #512]	; (8003090 <handle_requestServerConnection+0x324>)
 8002e90:	4880      	ldr	r0, [pc, #512]	; (8003094 <handle_requestServerConnection+0x328>)
 8002e92:	f002 fb22 	bl	80054da <string_containsWithinLength>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <handle_requestServerConnection+0x13a>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun0);
 8002e9c:	2103      	movs	r1, #3
 8002e9e:	4878      	ldr	r0, [pc, #480]	; (8003080 <handle_requestServerConnection+0x314>)
 8002ea0:	f7fe fe74 	bl	8001b8c <fsmManager_gotoState>
 8002ea4:	e009      	b.n	8002eba <handle_requestServerConnection+0x14e>
			}
			else if(softTimer_expired(&timeout)) {
 8002ea6:	4878      	ldr	r0, [pc, #480]	; (8003088 <handle_requestServerConnection+0x31c>)
 8002ea8:	f001 fcc0 	bl	800482c <softTimer_expired>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <handle_requestServerConnection+0x14e>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun0);
 8002eb2:	2103      	movs	r1, #3
 8002eb4:	4872      	ldr	r0, [pc, #456]	; (8003080 <handle_requestServerConnection+0x314>)
 8002eb6:	f7fe fe69 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8002eba:	4871      	ldr	r0, [pc, #452]	; (8003080 <handle_requestServerConnection+0x314>)
 8002ebc:	f7fe fe93 	bl	8001be6 <fsmManager_isStateOut>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8555 	beq.w	8003972 <handle_requestServerConnection+0xc06>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8002ec8:	486d      	ldr	r0, [pc, #436]	; (8003080 <handle_requestServerConnection+0x314>)
 8002eca:	f7fe fea6 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002ece:	f000 bd50 	b.w	8003972 <handle_requestServerConnection+0xc06>



		case __gsmModule_requestServerConnection_send_atCfun0:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002ed2:	486b      	ldr	r0, [pc, #428]	; (8003080 <handle_requestServerConnection+0x314>)
 8002ed4:	f7fe fe7c 	bl	8001bd0 <fsmManager_isStateIn>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <handle_requestServerConnection+0x178>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002ede:	4868      	ldr	r0, [pc, #416]	; (8003080 <handle_requestServerConnection+0x314>)
 8002ee0:	f7fe fe8c 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cfun0);
 8002ee4:	486c      	ldr	r0, [pc, #432]	; (8003098 <handle_requestServerConnection+0x32c>)
 8002ee6:	f001 f881 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCfun0);
 8002eea:	2104      	movs	r1, #4
 8002eec:	4864      	ldr	r0, [pc, #400]	; (8003080 <handle_requestServerConnection+0x314>)
 8002eee:	f7fe fe4d 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8002ef2:	4863      	ldr	r0, [pc, #396]	; (8003080 <handle_requestServerConnection+0x314>)
 8002ef4:	f7fe fe77 	bl	8001be6 <fsmManager_isStateOut>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 853b 	beq.w	8003976 <handle_requestServerConnection+0xc0a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8002f00:	485f      	ldr	r0, [pc, #380]	; (8003080 <handle_requestServerConnection+0x314>)
 8002f02:	f7fe fe8a 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002f06:	f000 bd36 	b.w	8003976 <handle_requestServerConnection+0xc0a>



		case __gsmModule_requestServerConnection_waitOk_atCfun0:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002f0a:	485d      	ldr	r0, [pc, #372]	; (8003080 <handle_requestServerConnection+0x314>)
 8002f0c:	f7fe fe60 	bl	8001bd0 <fsmManager_isStateIn>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <handle_requestServerConnection+0x1ba>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002f16:	485a      	ldr	r0, [pc, #360]	; (8003080 <handle_requestServerConnection+0x314>)
 8002f18:	f7fe fe70 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 10*1000);
 8002f1c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f20:	4859      	ldr	r0, [pc, #356]	; (8003088 <handle_requestServerConnection+0x31c>)
 8002f22:	f001 fc6f 	bl	8004804 <softTimer_start>
			}


			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002f26:	4b59      	ldr	r3, [pc, #356]	; (800308c <handle_requestServerConnection+0x320>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4958      	ldr	r1, [pc, #352]	; (8003090 <handle_requestServerConnection+0x324>)
 8002f2e:	4859      	ldr	r0, [pc, #356]	; (8003094 <handle_requestServerConnection+0x328>)
 8002f30:	f002 fad3 	bl	80054da <string_containsWithinLength>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <handle_requestServerConnection+0x1d8>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCfun1);
 8002f3a:	2105      	movs	r1, #5
 8002f3c:	4850      	ldr	r0, [pc, #320]	; (8003080 <handle_requestServerConnection+0x314>)
 8002f3e:	f7fe fe25 	bl	8001b8c <fsmManager_gotoState>
 8002f42:	e009      	b.n	8002f58 <handle_requestServerConnection+0x1ec>
			}
			else if(softTimer_expired(&timeout)) {
 8002f44:	4850      	ldr	r0, [pc, #320]	; (8003088 <handle_requestServerConnection+0x31c>)
 8002f46:	f001 fc71 	bl	800482c <softTimer_expired>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <handle_requestServerConnection+0x1ec>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 8002f50:	211f      	movs	r1, #31
 8002f52:	4852      	ldr	r0, [pc, #328]	; (800309c <handle_requestServerConnection+0x330>)
 8002f54:	f7fe fe1a 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8002f58:	4849      	ldr	r0, [pc, #292]	; (8003080 <handle_requestServerConnection+0x314>)
 8002f5a:	f7fe fe44 	bl	8001be6 <fsmManager_isStateOut>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 850a 	beq.w	800397a <handle_requestServerConnection+0xc0e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8002f66:	4846      	ldr	r0, [pc, #280]	; (8003080 <handle_requestServerConnection+0x314>)
 8002f68:	f7fe fe57 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002f6c:	f000 bd05 	b.w	800397a <handle_requestServerConnection+0xc0e>



		case __gsmModule_requestServerConnection_send_atCfun1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002f70:	4843      	ldr	r0, [pc, #268]	; (8003080 <handle_requestServerConnection+0x314>)
 8002f72:	f7fe fe2d 	bl	8001bd0 <fsmManager_isStateIn>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <handle_requestServerConnection+0x216>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002f7c:	4840      	ldr	r0, [pc, #256]	; (8003080 <handle_requestServerConnection+0x314>)
 8002f7e:	f7fe fe3d 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cfun1);
 8002f82:	4847      	ldr	r0, [pc, #284]	; (80030a0 <handle_requestServerConnection+0x334>)
 8002f84:	f001 f832 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCfun1);
 8002f88:	2106      	movs	r1, #6
 8002f8a:	483d      	ldr	r0, [pc, #244]	; (8003080 <handle_requestServerConnection+0x314>)
 8002f8c:	f7fe fdfe 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8002f90:	483b      	ldr	r0, [pc, #236]	; (8003080 <handle_requestServerConnection+0x314>)
 8002f92:	f7fe fe28 	bl	8001be6 <fsmManager_isStateOut>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 84f0 	beq.w	800397e <handle_requestServerConnection+0xc12>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8002f9e:	4838      	ldr	r0, [pc, #224]	; (8003080 <handle_requestServerConnection+0x314>)
 8002fa0:	f7fe fe3b 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8002fa4:	f000 bceb 	b.w	800397e <handle_requestServerConnection+0xc12>



		case __gsmModule_requestServerConnection_waitOk_atCfun1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8002fa8:	4835      	ldr	r0, [pc, #212]	; (8003080 <handle_requestServerConnection+0x314>)
 8002faa:	f7fe fe11 	bl	8001bd0 <fsmManager_isStateIn>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <handle_requestServerConnection+0x258>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8002fb4:	4832      	ldr	r0, [pc, #200]	; (8003080 <handle_requestServerConnection+0x314>)
 8002fb6:	f7fe fe21 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 10*1000);
 8002fba:	f242 7110 	movw	r1, #10000	; 0x2710
 8002fbe:	4832      	ldr	r0, [pc, #200]	; (8003088 <handle_requestServerConnection+0x31c>)
 8002fc0:	f001 fc20 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8002fc4:	4b31      	ldr	r3, [pc, #196]	; (800308c <handle_requestServerConnection+0x320>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4931      	ldr	r1, [pc, #196]	; (8003090 <handle_requestServerConnection+0x324>)
 8002fcc:	4831      	ldr	r0, [pc, #196]	; (8003094 <handle_requestServerConnection+0x328>)
 8002fce:	f002 fa84 	bl	80054da <string_containsWithinLength>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <handle_requestServerConnection+0x276>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCpin);
 8002fd8:	2107      	movs	r1, #7
 8002fda:	4829      	ldr	r0, [pc, #164]	; (8003080 <handle_requestServerConnection+0x314>)
 8002fdc:	f7fe fdd6 	bl	8001b8c <fsmManager_gotoState>
 8002fe0:	e009      	b.n	8002ff6 <handle_requestServerConnection+0x28a>
			}
			else if(softTimer_expired(&timeout)) {
 8002fe2:	4829      	ldr	r0, [pc, #164]	; (8003088 <handle_requestServerConnection+0x31c>)
 8002fe4:	f001 fc22 	bl	800482c <softTimer_expired>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <handle_requestServerConnection+0x28a>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 8002fee:	211f      	movs	r1, #31
 8002ff0:	482a      	ldr	r0, [pc, #168]	; (800309c <handle_requestServerConnection+0x330>)
 8002ff2:	f7fe fdcb 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8002ff6:	4822      	ldr	r0, [pc, #136]	; (8003080 <handle_requestServerConnection+0x314>)
 8002ff8:	f7fe fdf5 	bl	8001be6 <fsmManager_isStateOut>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 84bf 	beq.w	8003982 <handle_requestServerConnection+0xc16>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003004:	481e      	ldr	r0, [pc, #120]	; (8003080 <handle_requestServerConnection+0x314>)
 8003006:	f7fe fe08 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800300a:	f000 bcba 	b.w	8003982 <handle_requestServerConnection+0xc16>



		case __gsmModule_requestServerConnection_send_atCpin:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800300e:	481c      	ldr	r0, [pc, #112]	; (8003080 <handle_requestServerConnection+0x314>)
 8003010:	f7fe fdde 	bl	8001bd0 <fsmManager_isStateIn>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <handle_requestServerConnection+0x2b4>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800301a:	4819      	ldr	r0, [pc, #100]	; (8003080 <handle_requestServerConnection+0x314>)
 800301c:	f7fe fdee 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cpin);
 8003020:	4820      	ldr	r0, [pc, #128]	; (80030a4 <handle_requestServerConnection+0x338>)
 8003022:	f000 ffe3 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atCpin);
 8003026:	2108      	movs	r1, #8
 8003028:	4815      	ldr	r0, [pc, #84]	; (8003080 <handle_requestServerConnection+0x314>)
 800302a:	f7fe fdaf 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800302e:	4814      	ldr	r0, [pc, #80]	; (8003080 <handle_requestServerConnection+0x314>)
 8003030:	f7fe fdd9 	bl	8001be6 <fsmManager_isStateOut>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 84a5 	beq.w	8003986 <handle_requestServerConnection+0xc1a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800303c:	4810      	ldr	r0, [pc, #64]	; (8003080 <handle_requestServerConnection+0x314>)
 800303e:	f7fe fdec 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003042:	f000 bca0 	b.w	8003986 <handle_requestServerConnection+0xc1a>



		case __gsmModule_requestServerConnection_check_atCpin:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003046:	480e      	ldr	r0, [pc, #56]	; (8003080 <handle_requestServerConnection+0x314>)
 8003048:	f7fe fdc2 	bl	8001bd0 <fsmManager_isStateIn>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <handle_requestServerConnection+0x2f6>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003052:	480b      	ldr	r0, [pc, #44]	; (8003080 <handle_requestServerConnection+0x314>)
 8003054:	f7fe fdd2 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 5*1000);
 8003058:	f241 3188 	movw	r1, #5000	; 0x1388
 800305c:	480a      	ldr	r0, [pc, #40]	; (8003088 <handle_requestServerConnection+0x31c>)
 800305e:	f001 fbd1 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_cpinReady, gsmRxDataChunkLen)) {
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <handle_requestServerConnection+0x320>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	490f      	ldr	r1, [pc, #60]	; (80030a8 <handle_requestServerConnection+0x33c>)
 800306a:	480a      	ldr	r0, [pc, #40]	; (8003094 <handle_requestServerConnection+0x328>)
 800306c:	f002 fa35 	bl	80054da <string_containsWithinLength>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01a      	beq.n	80030ac <handle_requestServerConnection+0x340>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCband);
 8003076:	2109      	movs	r1, #9
 8003078:	4801      	ldr	r0, [pc, #4]	; (8003080 <handle_requestServerConnection+0x314>)
 800307a:	f7fe fd87 	bl	8001b8c <fsmManager_gotoState>
 800307e:	e01f      	b.n	80030c0 <handle_requestServerConnection+0x354>
 8003080:	20000518 	.word	0x20000518
 8003084:	08009184 	.word	0x08009184
 8003088:	200004d0 	.word	0x200004d0
 800308c:	200003ec 	.word	0x200003ec
 8003090:	08009318 	.word	0x08009318
 8003094:	2000031c 	.word	0x2000031c
 8003098:	08009190 	.word	0x08009190
 800309c:	200004f4 	.word	0x200004f4
 80030a0:	0800919c 	.word	0x0800919c
 80030a4:	080091a8 	.word	0x080091a8
 80030a8:	08009330 	.word	0x08009330
			}
			else if(softTimer_expired(&timeout)) {
 80030ac:	48bb      	ldr	r0, [pc, #748]	; (800339c <handle_requestServerConnection+0x630>)
 80030ae:	f001 fbbd 	bl	800482c <softTimer_expired>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <handle_requestServerConnection+0x354>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 80030b8:	211f      	movs	r1, #31
 80030ba:	48b9      	ldr	r0, [pc, #740]	; (80033a0 <handle_requestServerConnection+0x634>)
 80030bc:	f7fe fd66 	bl	8001b8c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80030c0:	48b8      	ldr	r0, [pc, #736]	; (80033a4 <handle_requestServerConnection+0x638>)
 80030c2:	f7fe fd90 	bl	8001be6 <fsmManager_isStateOut>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 845e 	beq.w	800398a <handle_requestServerConnection+0xc1e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80030ce:	48b5      	ldr	r0, [pc, #724]	; (80033a4 <handle_requestServerConnection+0x638>)
 80030d0:	f7fe fda3 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80030d4:	f000 bc59 	b.w	800398a <handle_requestServerConnection+0xc1e>



		case __gsmModule_requestServerConnection_send_atCband:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80030d8:	48b2      	ldr	r0, [pc, #712]	; (80033a4 <handle_requestServerConnection+0x638>)
 80030da:	f7fe fd79 	bl	8001bd0 <fsmManager_isStateIn>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <handle_requestServerConnection+0x388>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80030e4:	48af      	ldr	r0, [pc, #700]	; (80033a4 <handle_requestServerConnection+0x638>)
 80030e6:	f7fe fd89 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 80030ea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80030ee:	48ab      	ldr	r0, [pc, #684]	; (800339c <handle_requestServerConnection+0x630>)
 80030f0:	f001 fb88 	bl	8004804 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80030f4:	48a9      	ldr	r0, [pc, #676]	; (800339c <handle_requestServerConnection+0x630>)
 80030f6:	f001 fb99 	bl	800482c <softTimer_expired>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <handle_requestServerConnection+0x3a2>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cband_allBand);
 8003100:	48a9      	ldr	r0, [pc, #676]	; (80033a8 <handle_requestServerConnection+0x63c>)
 8003102:	f000 ff73 	bl	8003fec <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atCband);
 8003106:	210a      	movs	r1, #10
 8003108:	48a6      	ldr	r0, [pc, #664]	; (80033a4 <handle_requestServerConnection+0x638>)
 800310a:	f7fe fd3f 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800310e:	48a5      	ldr	r0, [pc, #660]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003110:	f7fe fd69 	bl	8001be6 <fsmManager_isStateOut>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8439 	beq.w	800398e <handle_requestServerConnection+0xc22>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800311c:	48a1      	ldr	r0, [pc, #644]	; (80033a4 <handle_requestServerConnection+0x638>)
 800311e:	f7fe fd7c 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003122:	f000 bc34 	b.w	800398e <handle_requestServerConnection+0xc22>



		case __gsmModule_requestServerConnection_waitOk_atCband:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003126:	489f      	ldr	r0, [pc, #636]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003128:	f7fe fd52 	bl	8001bd0 <fsmManager_isStateIn>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <handle_requestServerConnection+0x3d4>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003132:	489c      	ldr	r0, [pc, #624]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003134:	f7fe fd62 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003138:	2164      	movs	r1, #100	; 0x64
 800313a:	4898      	ldr	r0, [pc, #608]	; (800339c <handle_requestServerConnection+0x630>)
 800313c:	f001 fb62 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003140:	4b9a      	ldr	r3, [pc, #616]	; (80033ac <handle_requestServerConnection+0x640>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	499a      	ldr	r1, [pc, #616]	; (80033b0 <handle_requestServerConnection+0x644>)
 8003148:	489a      	ldr	r0, [pc, #616]	; (80033b4 <handle_requestServerConnection+0x648>)
 800314a:	f002 f9c6 	bl	80054da <string_containsWithinLength>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d004      	beq.n	800315e <handle_requestServerConnection+0x3f2>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 8003154:	210b      	movs	r1, #11
 8003156:	4893      	ldr	r0, [pc, #588]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003158:	f7fe fd18 	bl	8001b8c <fsmManager_gotoState>
 800315c:	e009      	b.n	8003172 <handle_requestServerConnection+0x406>
			}
			else if(softTimer_expired(&timeout)) {
 800315e:	488f      	ldr	r0, [pc, #572]	; (800339c <handle_requestServerConnection+0x630>)
 8003160:	f001 fb64 	bl	800482c <softTimer_expired>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <handle_requestServerConnection+0x406>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 800316a:	211f      	movs	r1, #31
 800316c:	488c      	ldr	r0, [pc, #560]	; (80033a0 <handle_requestServerConnection+0x634>)
 800316e:	f7fe fd0d 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003172:	488c      	ldr	r0, [pc, #560]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003174:	f7fe fd37 	bl	8001be6 <fsmManager_isStateOut>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8409 	beq.w	8003992 <handle_requestServerConnection+0xc26>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003180:	4888      	ldr	r0, [pc, #544]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003182:	f7fe fd4a 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003186:	f000 bc04 	b.w	8003992 <handle_requestServerConnection+0xc26>



		case __gsmModule_requestServerConnection_send_atCreg1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800318a:	4886      	ldr	r0, [pc, #536]	; (80033a4 <handle_requestServerConnection+0x638>)
 800318c:	f7fe fd20 	bl	8001bd0 <fsmManager_isStateIn>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <handle_requestServerConnection+0x430>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003196:	4883      	ldr	r0, [pc, #524]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003198:	f7fe fd30 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_creg1);
 800319c:	4886      	ldr	r0, [pc, #536]	; (80033b8 <handle_requestServerConnection+0x64c>)
 800319e:	f000 ff25 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atCreg1);
 80031a2:	210c      	movs	r1, #12
 80031a4:	487f      	ldr	r0, [pc, #508]	; (80033a4 <handle_requestServerConnection+0x638>)
 80031a6:	f7fe fcf1 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80031aa:	487e      	ldr	r0, [pc, #504]	; (80033a4 <handle_requestServerConnection+0x638>)
 80031ac:	f7fe fd1b 	bl	8001be6 <fsmManager_isStateOut>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 83ef 	beq.w	8003996 <handle_requestServerConnection+0xc2a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80031b8:	487a      	ldr	r0, [pc, #488]	; (80033a4 <handle_requestServerConnection+0x638>)
 80031ba:	f7fe fd2e 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80031be:	e3ea      	b.n	8003996 <handle_requestServerConnection+0xc2a>



		case __gsmModule_requestServerConnection_check_atCreg1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80031c0:	4878      	ldr	r0, [pc, #480]	; (80033a4 <handle_requestServerConnection+0x638>)
 80031c2:	f7fe fd05 	bl	8001bd0 <fsmManager_isStateIn>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d006      	beq.n	80031da <handle_requestServerConnection+0x46e>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80031cc:	4875      	ldr	r0, [pc, #468]	; (80033a4 <handle_requestServerConnection+0x638>)
 80031ce:	f7fe fd15 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100*1000);
 80031d2:	497a      	ldr	r1, [pc, #488]	; (80033bc <handle_requestServerConnection+0x650>)
 80031d4:	4871      	ldr	r0, [pc, #452]	; (800339c <handle_requestServerConnection+0x630>)
 80031d6:	f001 fb15 	bl	8004804 <softTimer_start>
			}

			if(flags_gsmModuleUnsolicited.bits.creg1) {
 80031da:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <handle_requestServerConnection+0x654>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <handle_requestServerConnection+0x490>
				flags_gsmModuleUnsolicited.bits.creg1 = 0;
 80031e8:	4a75      	ldr	r2, [pc, #468]	; (80033c0 <handle_requestServerConnection+0x654>)
 80031ea:	7813      	ldrb	r3, [r2, #0]
 80031ec:	f36f 1304 	bfc	r3, #4, #1
 80031f0:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCops);
 80031f2:	210d      	movs	r1, #13
 80031f4:	486b      	ldr	r0, [pc, #428]	; (80033a4 <handle_requestServerConnection+0x638>)
 80031f6:	f7fe fcc9 	bl	8001b8c <fsmManager_gotoState>
 80031fa:	e026      	b.n	800324a <handle_requestServerConnection+0x4de>
			}
			else if(flags_gsmModuleUnsolicited.bits.creg2) {
 80031fc:	4b70      	ldr	r3, [pc, #448]	; (80033c0 <handle_requestServerConnection+0x654>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <handle_requestServerConnection+0x4b2>
				flags_gsmModuleUnsolicited.bits.creg2 = 0;
 800320a:	4a6d      	ldr	r2, [pc, #436]	; (80033c0 <handle_requestServerConnection+0x654>)
 800320c:	7813      	ldrb	r3, [r2, #0]
 800320e:	f36f 1345 	bfc	r3, #5, #1
 8003212:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atCreg1);
 8003214:	210b      	movs	r1, #11
 8003216:	4863      	ldr	r0, [pc, #396]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003218:	f7fe fcb8 	bl	8001b8c <fsmManager_gotoState>
 800321c:	e015      	b.n	800324a <handle_requestServerConnection+0x4de>
			}
			else if(softTimer_expired(&timeout) || flags_gsmModuleUnsolicited.bits.creg0) {
 800321e:	485f      	ldr	r0, [pc, #380]	; (800339c <handle_requestServerConnection+0x630>)
 8003220:	f001 fb04 	bl	800482c <softTimer_expired>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <handle_requestServerConnection+0x4cc>
 800322a:	4b65      	ldr	r3, [pc, #404]	; (80033c0 <handle_requestServerConnection+0x654>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <handle_requestServerConnection+0x4de>
				flags_gsmModuleUnsolicited.bits.creg0 = 1;
 8003238:	4a61      	ldr	r2, [pc, #388]	; (80033c0 <handle_requestServerConnection+0x654>)
 800323a:	7813      	ldrb	r3, [r2, #0]
 800323c:	f043 0308 	orr.w	r3, r3, #8
 8003240:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 8003242:	211f      	movs	r1, #31
 8003244:	4856      	ldr	r0, [pc, #344]	; (80033a0 <handle_requestServerConnection+0x634>)
 8003246:	f7fe fca1 	bl	8001b8c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800324a:	4856      	ldr	r0, [pc, #344]	; (80033a4 <handle_requestServerConnection+0x638>)
 800324c:	f7fe fccb 	bl	8001be6 <fsmManager_isStateOut>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 83a1 	beq.w	800399a <handle_requestServerConnection+0xc2e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003258:	4852      	ldr	r0, [pc, #328]	; (80033a4 <handle_requestServerConnection+0x638>)
 800325a:	f7fe fcde 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800325e:	e39c      	b.n	800399a <handle_requestServerConnection+0xc2e>




		case __gsmModule_requestServerConnection_send_atCops:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003260:	4850      	ldr	r0, [pc, #320]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003262:	f7fe fcb5 	bl	8001bd0 <fsmManager_isStateIn>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <handle_requestServerConnection+0x506>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800326c:	484d      	ldr	r0, [pc, #308]	; (80033a4 <handle_requestServerConnection+0x638>)
 800326e:	f7fe fcc5 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_cops);
 8003272:	4854      	ldr	r0, [pc, #336]	; (80033c4 <handle_requestServerConnection+0x658>)
 8003274:	f000 feba 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_get_atCops);
 8003278:	210e      	movs	r1, #14
 800327a:	484a      	ldr	r0, [pc, #296]	; (80033a4 <handle_requestServerConnection+0x638>)
 800327c:	f7fe fc86 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003280:	4848      	ldr	r0, [pc, #288]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003282:	f7fe fcb0 	bl	8001be6 <fsmManager_isStateOut>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8388 	beq.w	800399e <handle_requestServerConnection+0xc32>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800328e:	4845      	ldr	r0, [pc, #276]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003290:	f7fe fcc3 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003294:	e383      	b.n	800399e <handle_requestServerConnection+0xc32>



		case __gsmModule_requestServerConnection_get_atCops:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003296:	4843      	ldr	r0, [pc, #268]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003298:	f7fe fc9a 	bl	8001bd0 <fsmManager_isStateIn>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <handle_requestServerConnection+0x546>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80032a2:	4840      	ldr	r0, [pc, #256]	; (80033a4 <handle_requestServerConnection+0x638>)
 80032a4:	f7fe fcaa 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 45*1000);
 80032a8:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 80032ac:	483b      	ldr	r0, [pc, #236]	; (800339c <handle_requestServerConnection+0x630>)
 80032ae:	f001 faa9 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "PERSONAL", gsmRxDataChunkLen)) {
 80032b2:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <handle_requestServerConnection+0x640>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	4943      	ldr	r1, [pc, #268]	; (80033c8 <handle_requestServerConnection+0x65c>)
 80032ba:	483e      	ldr	r0, [pc, #248]	; (80033b4 <handle_requestServerConnection+0x648>)
 80032bc:	f002 f90d 	bl	80054da <string_containsWithinLength>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <handle_requestServerConnection+0x56a>
				gsmModule_operator = __gsmModule_operator_personal;
 80032c6:	4b41      	ldr	r3, [pc, #260]	; (80033cc <handle_requestServerConnection+0x660>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 80032cc:	210f      	movs	r1, #15
 80032ce:	4835      	ldr	r0, [pc, #212]	; (80033a4 <handle_requestServerConnection+0x638>)
 80032d0:	f7fe fc5c 	bl	8001b8c <fsmManager_gotoState>
 80032d4:	e030      	b.n	8003338 <handle_requestServerConnection+0x5cc>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "CLARO", gsmRxDataChunkLen)) {
 80032d6:	4b35      	ldr	r3, [pc, #212]	; (80033ac <handle_requestServerConnection+0x640>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	493c      	ldr	r1, [pc, #240]	; (80033d0 <handle_requestServerConnection+0x664>)
 80032de:	4835      	ldr	r0, [pc, #212]	; (80033b4 <handle_requestServerConnection+0x648>)
 80032e0:	f002 f8fb 	bl	80054da <string_containsWithinLength>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <handle_requestServerConnection+0x58e>
				gsmModule_operator = __gsmModule_operator_claro;
 80032ea:	4b38      	ldr	r3, [pc, #224]	; (80033cc <handle_requestServerConnection+0x660>)
 80032ec:	2202      	movs	r2, #2
 80032ee:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 80032f0:	210f      	movs	r1, #15
 80032f2:	482c      	ldr	r0, [pc, #176]	; (80033a4 <handle_requestServerConnection+0x638>)
 80032f4:	f7fe fc4a 	bl	8001b8c <fsmManager_gotoState>
 80032f8:	e01e      	b.n	8003338 <handle_requestServerConnection+0x5cc>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "MOVISTAR", gsmRxDataChunkLen)) {
 80032fa:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <handle_requestServerConnection+0x640>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	4934      	ldr	r1, [pc, #208]	; (80033d4 <handle_requestServerConnection+0x668>)
 8003302:	482c      	ldr	r0, [pc, #176]	; (80033b4 <handle_requestServerConnection+0x648>)
 8003304:	f002 f8e9 	bl	80054da <string_containsWithinLength>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <handle_requestServerConnection+0x5b2>
				gsmModule_operator = __gsmModule_operator_movistar;
 800330e:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <handle_requestServerConnection+0x660>)
 8003310:	2203      	movs	r2, #3
 8003312:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_contype);
 8003314:	210f      	movs	r1, #15
 8003316:	4823      	ldr	r0, [pc, #140]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003318:	f7fe fc38 	bl	8001b8c <fsmManager_gotoState>
 800331c:	e00c      	b.n	8003338 <handle_requestServerConnection+0x5cc>
			}
			else if(softTimer_expired(&timeout)) {
 800331e:	481f      	ldr	r0, [pc, #124]	; (800339c <handle_requestServerConnection+0x630>)
 8003320:	f001 fa84 	bl	800482c <softTimer_expired>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <handle_requestServerConnection+0x5cc>
				gsmModule_operator = __gsmModule_operator_unknown;
 800332a:	4b28      	ldr	r3, [pc, #160]	; (80033cc <handle_requestServerConnection+0x660>)
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]

				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 8003330:	211f      	movs	r1, #31
 8003332:	481b      	ldr	r0, [pc, #108]	; (80033a0 <handle_requestServerConnection+0x634>)
 8003334:	f7fe fc2a 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003338:	481a      	ldr	r0, [pc, #104]	; (80033a4 <handle_requestServerConnection+0x638>)
 800333a:	f7fe fc54 	bl	8001be6 <fsmManager_isStateOut>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 832e 	beq.w	80039a2 <handle_requestServerConnection+0xc36>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003346:	4817      	ldr	r0, [pc, #92]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003348:	f7fe fc67 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800334c:	e329      	b.n	80039a2 <handle_requestServerConnection+0xc36>



		case __gsmModule_requestServerConnection_send_atSapbr3_contype:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800334e:	4815      	ldr	r0, [pc, #84]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003350:	f7fe fc3e 	bl	8001bd0 <fsmManager_isStateIn>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <handle_requestServerConnection+0x5fe>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800335a:	4812      	ldr	r0, [pc, #72]	; (80033a4 <handle_requestServerConnection+0x638>)
 800335c:	f7fe fc4e 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 1*1000);
 8003360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003364:	480d      	ldr	r0, [pc, #52]	; (800339c <handle_requestServerConnection+0x630>)
 8003366:	f001 fa4d 	bl	8004804 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 800336a:	480c      	ldr	r0, [pc, #48]	; (800339c <handle_requestServerConnection+0x630>)
 800336c:	f001 fa5e 	bl	800482c <softTimer_expired>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d006      	beq.n	8003384 <handle_requestServerConnection+0x618>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3contype);
 8003376:	4818      	ldr	r0, [pc, #96]	; (80033d8 <handle_requestServerConnection+0x66c>)
 8003378:	f000 fe38 	bl	8003fec <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_contype);
 800337c:	2110      	movs	r1, #16
 800337e:	4809      	ldr	r0, [pc, #36]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003380:	f7fe fc04 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003384:	4807      	ldr	r0, [pc, #28]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003386:	f7fe fc2e 	bl	8001be6 <fsmManager_isStateOut>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 830a 	beq.w	80039a6 <handle_requestServerConnection+0xc3a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003392:	4804      	ldr	r0, [pc, #16]	; (80033a4 <handle_requestServerConnection+0x638>)
 8003394:	f7fe fc41 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003398:	e305      	b.n	80039a6 <handle_requestServerConnection+0xc3a>
 800339a:	bf00      	nop
 800339c:	200004d0 	.word	0x200004d0
 80033a0:	200004f4 	.word	0x200004f4
 80033a4:	20000518 	.word	0x20000518
 80033a8:	080091b4 	.word	0x080091b4
 80033ac:	200003ec 	.word	0x200003ec
 80033b0:	08009318 	.word	0x08009318
 80033b4:	2000031c 	.word	0x2000031c
 80033b8:	080091cc 	.word	0x080091cc
 80033bc:	000186a0 	.word	0x000186a0
 80033c0:	200004c0 	.word	0x200004c0
 80033c4:	08009280 	.word	0x08009280
 80033c8:	080090d0 	.word	0x080090d0
 80033cc:	2000060c 	.word	0x2000060c
 80033d0:	080090dc 	.word	0x080090dc
 80033d4:	080090e4 	.word	0x080090e4
 80033d8:	080091d8 	.word	0x080091d8



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_contype:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80033dc:	48bc      	ldr	r0, [pc, #752]	; (80036d0 <handle_requestServerConnection+0x964>)
 80033de:	f7fe fbf7 	bl	8001bd0 <fsmManager_isStateIn>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <handle_requestServerConnection+0x68c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80033e8:	48b9      	ldr	r0, [pc, #740]	; (80036d0 <handle_requestServerConnection+0x964>)
 80033ea:	f7fe fc07 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 80033ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033f2:	48b8      	ldr	r0, [pc, #736]	; (80036d4 <handle_requestServerConnection+0x968>)
 80033f4:	f001 fa06 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80033f8:	4bb7      	ldr	r3, [pc, #732]	; (80036d8 <handle_requestServerConnection+0x96c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	49b7      	ldr	r1, [pc, #732]	; (80036dc <handle_requestServerConnection+0x970>)
 8003400:	48b7      	ldr	r0, [pc, #732]	; (80036e0 <handle_requestServerConnection+0x974>)
 8003402:	f002 f86a 	bl	80054da <string_containsWithinLength>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <handle_requestServerConnection+0x6aa>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_apn);
 800340c:	2111      	movs	r1, #17
 800340e:	48b0      	ldr	r0, [pc, #704]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003410:	f7fe fbbc 	bl	8001b8c <fsmManager_gotoState>
 8003414:	e009      	b.n	800342a <handle_requestServerConnection+0x6be>
			}
			else if(softTimer_expired(&timeout)) {
 8003416:	48af      	ldr	r0, [pc, #700]	; (80036d4 <handle_requestServerConnection+0x968>)
 8003418:	f001 fa08 	bl	800482c <softTimer_expired>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <handle_requestServerConnection+0x6be>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 8003422:	211f      	movs	r1, #31
 8003424:	48af      	ldr	r0, [pc, #700]	; (80036e4 <handle_requestServerConnection+0x978>)
 8003426:	f7fe fbb1 	bl	8001b8c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800342a:	48a9      	ldr	r0, [pc, #676]	; (80036d0 <handle_requestServerConnection+0x964>)
 800342c:	f7fe fbdb 	bl	8001be6 <fsmManager_isStateOut>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 82b9 	beq.w	80039aa <handle_requestServerConnection+0xc3e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003438:	48a5      	ldr	r0, [pc, #660]	; (80036d0 <handle_requestServerConnection+0x964>)
 800343a:	f7fe fbee 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800343e:	e2b4      	b.n	80039aa <handle_requestServerConnection+0xc3e>



		case __gsmModule_requestServerConnection_send_atSapbr3_apn:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003440:	48a3      	ldr	r0, [pc, #652]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003442:	f7fe fbc5 	bl	8001bd0 <fsmManager_isStateIn>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <handle_requestServerConnection+0x6e6>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800344c:	48a0      	ldr	r0, [pc, #640]	; (80036d0 <handle_requestServerConnection+0x964>)
 800344e:	f7fe fbd5 	bl	8001bfc <fsmManager_stateIn>
			}

			if(gsmModule_operator == __gsmModule_operator_personal) {
 8003452:	4ba5      	ldr	r3, [pc, #660]	; (80036e8 <handle_requestServerConnection+0x97c>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <handle_requestServerConnection+0x6f4>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3apnPersonal);
 800345a:	48a4      	ldr	r0, [pc, #656]	; (80036ec <handle_requestServerConnection+0x980>)
 800345c:	f000 fdc6 	bl	8003fec <pinGsmUartTx_transmit>
			}

			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_apn);
 8003460:	2112      	movs	r1, #18
 8003462:	489b      	ldr	r0, [pc, #620]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003464:	f7fe fb92 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003468:	4899      	ldr	r0, [pc, #612]	; (80036d0 <handle_requestServerConnection+0x964>)
 800346a:	f7fe fbbc 	bl	8001be6 <fsmManager_isStateOut>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 829c 	beq.w	80039ae <handle_requestServerConnection+0xc42>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003476:	4896      	ldr	r0, [pc, #600]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003478:	f7fe fbcf 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800347c:	e297      	b.n	80039ae <handle_requestServerConnection+0xc42>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_apn:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800347e:	4894      	ldr	r0, [pc, #592]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003480:	f7fe fba6 	bl	8001bd0 <fsmManager_isStateIn>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <handle_requestServerConnection+0x72c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800348a:	4891      	ldr	r0, [pc, #580]	; (80036d0 <handle_requestServerConnection+0x964>)
 800348c:	f7fe fbb6 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003490:	2164      	movs	r1, #100	; 0x64
 8003492:	4890      	ldr	r0, [pc, #576]	; (80036d4 <handle_requestServerConnection+0x968>)
 8003494:	f001 f9b6 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003498:	4b8f      	ldr	r3, [pc, #572]	; (80036d8 <handle_requestServerConnection+0x96c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	498f      	ldr	r1, [pc, #572]	; (80036dc <handle_requestServerConnection+0x970>)
 80034a0:	488f      	ldr	r0, [pc, #572]	; (80036e0 <handle_requestServerConnection+0x974>)
 80034a2:	f002 f81a 	bl	80054da <string_containsWithinLength>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d004      	beq.n	80034b6 <handle_requestServerConnection+0x74a>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_user);
 80034ac:	2113      	movs	r1, #19
 80034ae:	4888      	ldr	r0, [pc, #544]	; (80036d0 <handle_requestServerConnection+0x964>)
 80034b0:	f7fe fb6c 	bl	8001b8c <fsmManager_gotoState>
 80034b4:	e009      	b.n	80034ca <handle_requestServerConnection+0x75e>
			}
			else if(softTimer_expired(&timeout)) {
 80034b6:	4887      	ldr	r0, [pc, #540]	; (80036d4 <handle_requestServerConnection+0x968>)
 80034b8:	f001 f9b8 	bl	800482c <softTimer_expired>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <handle_requestServerConnection+0x75e>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 80034c2:	211f      	movs	r1, #31
 80034c4:	4887      	ldr	r0, [pc, #540]	; (80036e4 <handle_requestServerConnection+0x978>)
 80034c6:	f7fe fb61 	bl	8001b8c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80034ca:	4881      	ldr	r0, [pc, #516]	; (80036d0 <handle_requestServerConnection+0x964>)
 80034cc:	f7fe fb8b 	bl	8001be6 <fsmManager_isStateOut>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 826d 	beq.w	80039b2 <handle_requestServerConnection+0xc46>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80034d8:	487d      	ldr	r0, [pc, #500]	; (80036d0 <handle_requestServerConnection+0x964>)
 80034da:	f7fe fb9e 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80034de:	e268      	b.n	80039b2 <handle_requestServerConnection+0xc46>



		case __gsmModule_requestServerConnection_send_atSapbr3_user:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80034e0:	487b      	ldr	r0, [pc, #492]	; (80036d0 <handle_requestServerConnection+0x964>)
 80034e2:	f7fe fb75 	bl	8001bd0 <fsmManager_isStateIn>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <handle_requestServerConnection+0x786>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80034ec:	4878      	ldr	r0, [pc, #480]	; (80036d0 <handle_requestServerConnection+0x964>)
 80034ee:	f7fe fb85 	bl	8001bfc <fsmManager_stateIn>
			}

			if(gsmModule_operator == __gsmModule_operator_personal) {
 80034f2:	4b7d      	ldr	r3, [pc, #500]	; (80036e8 <handle_requestServerConnection+0x97c>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d102      	bne.n	8003500 <handle_requestServerConnection+0x794>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3userPersonal);
 80034fa:	487d      	ldr	r0, [pc, #500]	; (80036f0 <handle_requestServerConnection+0x984>)
 80034fc:	f000 fd76 	bl	8003fec <pinGsmUartTx_transmit>
			}

			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_user);
 8003500:	2114      	movs	r1, #20
 8003502:	4873      	ldr	r0, [pc, #460]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003504:	f7fe fb42 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003508:	4871      	ldr	r0, [pc, #452]	; (80036d0 <handle_requestServerConnection+0x964>)
 800350a:	f7fe fb6c 	bl	8001be6 <fsmManager_isStateOut>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8250 	beq.w	80039b6 <handle_requestServerConnection+0xc4a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003516:	486e      	ldr	r0, [pc, #440]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003518:	f7fe fb7f 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800351c:	e24b      	b.n	80039b6 <handle_requestServerConnection+0xc4a>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_user:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800351e:	486c      	ldr	r0, [pc, #432]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003520:	f7fe fb56 	bl	8001bd0 <fsmManager_isStateIn>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <handle_requestServerConnection+0x7cc>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800352a:	4869      	ldr	r0, [pc, #420]	; (80036d0 <handle_requestServerConnection+0x964>)
 800352c:	f7fe fb66 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003530:	2164      	movs	r1, #100	; 0x64
 8003532:	4868      	ldr	r0, [pc, #416]	; (80036d4 <handle_requestServerConnection+0x968>)
 8003534:	f001 f966 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003538:	4b67      	ldr	r3, [pc, #412]	; (80036d8 <handle_requestServerConnection+0x96c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	4967      	ldr	r1, [pc, #412]	; (80036dc <handle_requestServerConnection+0x970>)
 8003540:	4867      	ldr	r0, [pc, #412]	; (80036e0 <handle_requestServerConnection+0x974>)
 8003542:	f001 ffca 	bl	80054da <string_containsWithinLength>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d004      	beq.n	8003556 <handle_requestServerConnection+0x7ea>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr3_pwd);
 800354c:	2115      	movs	r1, #21
 800354e:	4860      	ldr	r0, [pc, #384]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003550:	f7fe fb1c 	bl	8001b8c <fsmManager_gotoState>
 8003554:	e009      	b.n	800356a <handle_requestServerConnection+0x7fe>
			}
			else if(softTimer_expired(&timeout)) {
 8003556:	485f      	ldr	r0, [pc, #380]	; (80036d4 <handle_requestServerConnection+0x968>)
 8003558:	f001 f968 	bl	800482c <softTimer_expired>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <handle_requestServerConnection+0x7fe>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 8003562:	211f      	movs	r1, #31
 8003564:	485f      	ldr	r0, [pc, #380]	; (80036e4 <handle_requestServerConnection+0x978>)
 8003566:	f7fe fb11 	bl	8001b8c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800356a:	4859      	ldr	r0, [pc, #356]	; (80036d0 <handle_requestServerConnection+0x964>)
 800356c:	f7fe fb3b 	bl	8001be6 <fsmManager_isStateOut>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8221 	beq.w	80039ba <handle_requestServerConnection+0xc4e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003578:	4855      	ldr	r0, [pc, #340]	; (80036d0 <handle_requestServerConnection+0x964>)
 800357a:	f7fe fb4e 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800357e:	e21c      	b.n	80039ba <handle_requestServerConnection+0xc4e>



		case __gsmModule_requestServerConnection_send_atSapbr3_pwd:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003580:	4853      	ldr	r0, [pc, #332]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003582:	f7fe fb25 	bl	8001bd0 <fsmManager_isStateIn>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <handle_requestServerConnection+0x826>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800358c:	4850      	ldr	r0, [pc, #320]	; (80036d0 <handle_requestServerConnection+0x964>)
 800358e:	f7fe fb35 	bl	8001bfc <fsmManager_stateIn>
			}

			if(gsmModule_operator == __gsmModule_operator_personal) {
 8003592:	4b55      	ldr	r3, [pc, #340]	; (80036e8 <handle_requestServerConnection+0x97c>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d102      	bne.n	80035a0 <handle_requestServerConnection+0x834>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr3pwdPersonal);
 800359a:	4856      	ldr	r0, [pc, #344]	; (80036f4 <handle_requestServerConnection+0x988>)
 800359c:	f000 fd26 	bl	8003fec <pinGsmUartTx_transmit>
			}

			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr3_pwd);
 80035a0:	2116      	movs	r1, #22
 80035a2:	484b      	ldr	r0, [pc, #300]	; (80036d0 <handle_requestServerConnection+0x964>)
 80035a4:	f7fe faf2 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80035a8:	4849      	ldr	r0, [pc, #292]	; (80036d0 <handle_requestServerConnection+0x964>)
 80035aa:	f7fe fb1c 	bl	8001be6 <fsmManager_isStateOut>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8204 	beq.w	80039be <handle_requestServerConnection+0xc52>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80035b6:	4846      	ldr	r0, [pc, #280]	; (80036d0 <handle_requestServerConnection+0x964>)
 80035b8:	f7fe fb2f 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80035bc:	e1ff      	b.n	80039be <handle_requestServerConnection+0xc52>



		case __gsmModule_requestServerConnection_waitOk_atSapbr3_pwd:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80035be:	4844      	ldr	r0, [pc, #272]	; (80036d0 <handle_requestServerConnection+0x964>)
 80035c0:	f7fe fb06 	bl	8001bd0 <fsmManager_isStateIn>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d006      	beq.n	80035d8 <handle_requestServerConnection+0x86c>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80035ca:	4841      	ldr	r0, [pc, #260]	; (80036d0 <handle_requestServerConnection+0x964>)
 80035cc:	f7fe fb16 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80035d0:	2164      	movs	r1, #100	; 0x64
 80035d2:	4840      	ldr	r0, [pc, #256]	; (80036d4 <handle_requestServerConnection+0x968>)
 80035d4:	f001 f916 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80035d8:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <handle_requestServerConnection+0x96c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	493f      	ldr	r1, [pc, #252]	; (80036dc <handle_requestServerConnection+0x970>)
 80035e0:	483f      	ldr	r0, [pc, #252]	; (80036e0 <handle_requestServerConnection+0x974>)
 80035e2:	f001 ff7a 	bl	80054da <string_containsWithinLength>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <handle_requestServerConnection+0x88a>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr1);
 80035ec:	2117      	movs	r1, #23
 80035ee:	4838      	ldr	r0, [pc, #224]	; (80036d0 <handle_requestServerConnection+0x964>)
 80035f0:	f7fe facc 	bl	8001b8c <fsmManager_gotoState>
 80035f4:	e009      	b.n	800360a <handle_requestServerConnection+0x89e>
			}
			else if(softTimer_expired(&timeout)) {
 80035f6:	4837      	ldr	r0, [pc, #220]	; (80036d4 <handle_requestServerConnection+0x968>)
 80035f8:	f001 f918 	bl	800482c <softTimer_expired>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <handle_requestServerConnection+0x89e>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 8003602:	211f      	movs	r1, #31
 8003604:	4837      	ldr	r0, [pc, #220]	; (80036e4 <handle_requestServerConnection+0x978>)
 8003606:	f7fe fac1 	bl	8001b8c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800360a:	4831      	ldr	r0, [pc, #196]	; (80036d0 <handle_requestServerConnection+0x964>)
 800360c:	f7fe faeb 	bl	8001be6 <fsmManager_isStateOut>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 81d5 	beq.w	80039c2 <handle_requestServerConnection+0xc56>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003618:	482d      	ldr	r0, [pc, #180]	; (80036d0 <handle_requestServerConnection+0x964>)
 800361a:	f7fe fafe 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800361e:	e1d0      	b.n	80039c2 <handle_requestServerConnection+0xc56>



		case __gsmModule_requestServerConnection_send_atSapbr1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003620:	482b      	ldr	r0, [pc, #172]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003622:	f7fe fad5 	bl	8001bd0 <fsmManager_isStateIn>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <handle_requestServerConnection+0x8d0>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800362c:	4828      	ldr	r0, [pc, #160]	; (80036d0 <handle_requestServerConnection+0x964>)
 800362e:	f7fe fae5 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 8003632:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003636:	4827      	ldr	r0, [pc, #156]	; (80036d4 <handle_requestServerConnection+0x968>)
 8003638:	f001 f8e4 	bl	8004804 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 800363c:	4825      	ldr	r0, [pc, #148]	; (80036d4 <handle_requestServerConnection+0x968>)
 800363e:	f001 f8f5 	bl	800482c <softTimer_expired>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d006      	beq.n	8003656 <handle_requestServerConnection+0x8ea>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr1);
 8003648:	482b      	ldr	r0, [pc, #172]	; (80036f8 <handle_requestServerConnection+0x98c>)
 800364a:	f000 fccf 	bl	8003fec <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atSapbr1);
 800364e:	2118      	movs	r1, #24
 8003650:	481f      	ldr	r0, [pc, #124]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003652:	f7fe fa9b 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003656:	481e      	ldr	r0, [pc, #120]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003658:	f7fe fac5 	bl	8001be6 <fsmManager_isStateOut>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 81b1 	beq.w	80039c6 <handle_requestServerConnection+0xc5a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003664:	481a      	ldr	r0, [pc, #104]	; (80036d0 <handle_requestServerConnection+0x964>)
 8003666:	f7fe fad8 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800366a:	e1ac      	b.n	80039c6 <handle_requestServerConnection+0xc5a>



		case __gsmModule_requestServerConnection_waitOk_atSapbr1:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800366c:	4818      	ldr	r0, [pc, #96]	; (80036d0 <handle_requestServerConnection+0x964>)
 800366e:	f7fe faaf 	bl	8001bd0 <fsmManager_isStateIn>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <handle_requestServerConnection+0x91a>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003678:	4815      	ldr	r0, [pc, #84]	; (80036d0 <handle_requestServerConnection+0x964>)
 800367a:	f7fe fabf 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 85*1000);
 800367e:	491f      	ldr	r1, [pc, #124]	; (80036fc <handle_requestServerConnection+0x990>)
 8003680:	4814      	ldr	r0, [pc, #80]	; (80036d4 <handle_requestServerConnection+0x968>)
 8003682:	f001 f8bf 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <handle_requestServerConnection+0x96c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	4913      	ldr	r1, [pc, #76]	; (80036dc <handle_requestServerConnection+0x970>)
 800368e:	4814      	ldr	r0, [pc, #80]	; (80036e0 <handle_requestServerConnection+0x974>)
 8003690:	f001 ff23 	bl	80054da <string_containsWithinLength>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <handle_requestServerConnection+0x938>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atSapbr2);
 800369a:	2119      	movs	r1, #25
 800369c:	480c      	ldr	r0, [pc, #48]	; (80036d0 <handle_requestServerConnection+0x964>)
 800369e:	f7fe fa75 	bl	8001b8c <fsmManager_gotoState>
 80036a2:	e009      	b.n	80036b8 <handle_requestServerConnection+0x94c>
			}
			else if(softTimer_expired(&timeout)) {
 80036a4:	480b      	ldr	r0, [pc, #44]	; (80036d4 <handle_requestServerConnection+0x968>)
 80036a6:	f001 f8c1 	bl	800482c <softTimer_expired>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <handle_requestServerConnection+0x94c>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 80036b0:	211f      	movs	r1, #31
 80036b2:	480c      	ldr	r0, [pc, #48]	; (80036e4 <handle_requestServerConnection+0x978>)
 80036b4:	f7fe fa6a 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80036b8:	4805      	ldr	r0, [pc, #20]	; (80036d0 <handle_requestServerConnection+0x964>)
 80036ba:	f7fe fa94 	bl	8001be6 <fsmManager_isStateOut>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8182 	beq.w	80039ca <handle_requestServerConnection+0xc5e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80036c6:	4802      	ldr	r0, [pc, #8]	; (80036d0 <handle_requestServerConnection+0x964>)
 80036c8:	f7fe faa7 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80036cc:	e17d      	b.n	80039ca <handle_requestServerConnection+0xc5e>
 80036ce:	bf00      	nop
 80036d0:	20000518 	.word	0x20000518
 80036d4:	200004d0 	.word	0x200004d0
 80036d8:	200003ec 	.word	0x200003ec
 80036dc:	08009318 	.word	0x08009318
 80036e0:	2000031c 	.word	0x2000031c
 80036e4:	200004f4 	.word	0x200004f4
 80036e8:	2000060c 	.word	0x2000060c
 80036ec:	080091f8 	.word	0x080091f8
 80036f0:	08009224 	.word	0x08009224
 80036f4:	08009244 	.word	0x08009244
 80036f8:	08009260 	.word	0x08009260
 80036fc:	00014c08 	.word	0x00014c08



		case __gsmModule_requestServerConnection_send_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003700:	48bb      	ldr	r0, [pc, #748]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003702:	f7fe fa65 	bl	8001bd0 <fsmManager_isStateIn>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <handle_requestServerConnection+0x9a6>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800370c:	48b8      	ldr	r0, [pc, #736]	; (80039f0 <handle_requestServerConnection+0xc84>)
 800370e:	f7fe fa75 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr2);
 8003712:	48b8      	ldr	r0, [pc, #736]	; (80039f4 <handle_requestServerConnection+0xc88>)
 8003714:	f000 fc6a 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_check_atSapbr2);
 8003718:	211a      	movs	r1, #26
 800371a:	48b5      	ldr	r0, [pc, #724]	; (80039f0 <handle_requestServerConnection+0xc84>)
 800371c:	f7fe fa36 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003720:	48b3      	ldr	r0, [pc, #716]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003722:	f7fe fa60 	bl	8001be6 <fsmManager_isStateOut>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8150 	beq.w	80039ce <handle_requestServerConnection+0xc62>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800372e:	48b0      	ldr	r0, [pc, #704]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003730:	f7fe fa73 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003734:	e14b      	b.n	80039ce <handle_requestServerConnection+0xc62>



		case __gsmModule_requestServerConnection_check_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003736:	48ae      	ldr	r0, [pc, #696]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003738:	f7fe fa4a 	bl	8001bd0 <fsmManager_isStateIn>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d006      	beq.n	8003750 <handle_requestServerConnection+0x9e4>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003742:	48ab      	ldr	r0, [pc, #684]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003744:	f7fe fa5a 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003748:	2164      	movs	r1, #100	; 0x64
 800374a:	48ab      	ldr	r0, [pc, #684]	; (80039f8 <handle_requestServerConnection+0xc8c>)
 800374c:	f001 f85a 	bl	8004804 <softTimer_start>
			}

			if(!string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "0.0.0.0", gsmRxDataChunkLen)) {
 8003750:	4baa      	ldr	r3, [pc, #680]	; (80039fc <handle_requestServerConnection+0xc90>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	49aa      	ldr	r1, [pc, #680]	; (8003a00 <handle_requestServerConnection+0xc94>)
 8003758:	48aa      	ldr	r0, [pc, #680]	; (8003a04 <handle_requestServerConnection+0xc98>)
 800375a:	f001 febe 	bl	80054da <string_containsWithinLength>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <handle_requestServerConnection+0xa02>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttpinit);
 8003764:	211b      	movs	r1, #27
 8003766:	48a2      	ldr	r0, [pc, #648]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003768:	f7fe fa10 	bl	8001b8c <fsmManager_gotoState>
 800376c:	e009      	b.n	8003782 <handle_requestServerConnection+0xa16>
			}
			else if(softTimer_expired(&timeout)) {
 800376e:	48a2      	ldr	r0, [pc, #648]	; (80039f8 <handle_requestServerConnection+0xc8c>)
 8003770:	f001 f85c 	bl	800482c <softTimer_expired>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <handle_requestServerConnection+0xa16>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 800377a:	211f      	movs	r1, #31
 800377c:	48a2      	ldr	r0, [pc, #648]	; (8003a08 <handle_requestServerConnection+0xc9c>)
 800377e:	f7fe fa05 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003782:	489b      	ldr	r0, [pc, #620]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003784:	f7fe fa2f 	bl	8001be6 <fsmManager_isStateOut>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8121 	beq.w	80039d2 <handle_requestServerConnection+0xc66>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003790:	4897      	ldr	r0, [pc, #604]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003792:	f7fe fa42 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003796:	e11c      	b.n	80039d2 <handle_requestServerConnection+0xc66>



		case __gsmModule_requestServerConnection_send_atHttpinit:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003798:	4895      	ldr	r0, [pc, #596]	; (80039f0 <handle_requestServerConnection+0xc84>)
 800379a:	f7fe fa19 	bl	8001bd0 <fsmManager_isStateIn>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <handle_requestServerConnection+0xa48>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80037a4:	4892      	ldr	r0, [pc, #584]	; (80039f0 <handle_requestServerConnection+0xc84>)
 80037a6:	f7fe fa29 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 2*1000);
 80037aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80037ae:	4892      	ldr	r0, [pc, #584]	; (80039f8 <handle_requestServerConnection+0xc8c>)
 80037b0:	f001 f828 	bl	8004804 <softTimer_start>
			}

			if(softTimer_expired(&timeout)) {
 80037b4:	4890      	ldr	r0, [pc, #576]	; (80039f8 <handle_requestServerConnection+0xc8c>)
 80037b6:	f001 f839 	bl	800482c <softTimer_expired>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <handle_requestServerConnection+0xa62>
				pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpinit);
 80037c0:	4892      	ldr	r0, [pc, #584]	; (8003a0c <handle_requestServerConnection+0xca0>)
 80037c2:	f000 fc13 	bl	8003fec <pinGsmUartTx_transmit>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atHttpinit);
 80037c6:	211c      	movs	r1, #28
 80037c8:	4889      	ldr	r0, [pc, #548]	; (80039f0 <handle_requestServerConnection+0xc84>)
 80037ca:	f7fe f9df 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80037ce:	4888      	ldr	r0, [pc, #544]	; (80039f0 <handle_requestServerConnection+0xc84>)
 80037d0:	f7fe fa09 	bl	8001be6 <fsmManager_isStateOut>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80fd 	beq.w	80039d6 <handle_requestServerConnection+0xc6a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80037dc:	4884      	ldr	r0, [pc, #528]	; (80039f0 <handle_requestServerConnection+0xc84>)
 80037de:	f7fe fa1c 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80037e2:	e0f8      	b.n	80039d6 <handle_requestServerConnection+0xc6a>



		case __gsmModule_requestServerConnection_waitOk_atHttpinit:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80037e4:	4882      	ldr	r0, [pc, #520]	; (80039f0 <handle_requestServerConnection+0xc84>)
 80037e6:	f7fe f9f3 	bl	8001bd0 <fsmManager_isStateIn>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <handle_requestServerConnection+0xa92>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80037f0:	487f      	ldr	r0, [pc, #508]	; (80039f0 <handle_requestServerConnection+0xc84>)
 80037f2:	f7fe fa03 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 80037f6:	2164      	movs	r1, #100	; 0x64
 80037f8:	487f      	ldr	r0, [pc, #508]	; (80039f8 <handle_requestServerConnection+0xc8c>)
 80037fa:	f001 f803 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 80037fe:	4b7f      	ldr	r3, [pc, #508]	; (80039fc <handle_requestServerConnection+0xc90>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	4982      	ldr	r1, [pc, #520]	; (8003a10 <handle_requestServerConnection+0xca4>)
 8003806:	487f      	ldr	r0, [pc, #508]	; (8003a04 <handle_requestServerConnection+0xc98>)
 8003808:	f001 fe67 	bl	80054da <string_containsWithinLength>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d004      	beq.n	800381c <handle_requestServerConnection+0xab0>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_send_atHttppara_cid);
 8003812:	211d      	movs	r1, #29
 8003814:	4876      	ldr	r0, [pc, #472]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003816:	f7fe f9b9 	bl	8001b8c <fsmManager_gotoState>
 800381a:	e009      	b.n	8003830 <handle_requestServerConnection+0xac4>
			}
			else if(softTimer_expired(&timeout)) {
 800381c:	4876      	ldr	r0, [pc, #472]	; (80039f8 <handle_requestServerConnection+0xc8c>)
 800381e:	f001 f805 	bl	800482c <softTimer_expired>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <handle_requestServerConnection+0xac4>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 8003828:	211f      	movs	r1, #31
 800382a:	4877      	ldr	r0, [pc, #476]	; (8003a08 <handle_requestServerConnection+0xc9c>)
 800382c:	f7fe f9ae 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003830:	486f      	ldr	r0, [pc, #444]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003832:	f7fe f9d8 	bl	8001be6 <fsmManager_isStateOut>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80ce 	beq.w	80039da <handle_requestServerConnection+0xc6e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800383e:	486c      	ldr	r0, [pc, #432]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003840:	f7fe f9eb 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003844:	e0c9      	b.n	80039da <handle_requestServerConnection+0xc6e>



		case __gsmModule_requestServerConnection_send_atHttppara_cid:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003846:	486a      	ldr	r0, [pc, #424]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003848:	f7fe f9c2 	bl	8001bd0 <fsmManager_isStateIn>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <handle_requestServerConnection+0xaec>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003852:	4867      	ldr	r0, [pc, #412]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003854:	f7fe f9d2 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httppara_cid);
 8003858:	486e      	ldr	r0, [pc, #440]	; (8003a14 <handle_requestServerConnection+0xca8>)
 800385a:	f000 fbc7 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_waitOk_atHttppara_cid);
 800385e:	211e      	movs	r1, #30
 8003860:	4863      	ldr	r0, [pc, #396]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003862:	f7fe f993 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003866:	4862      	ldr	r0, [pc, #392]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003868:	f7fe f9bd 	bl	8001be6 <fsmManager_isStateOut>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80b5 	beq.w	80039de <handle_requestServerConnection+0xc72>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003874:	485e      	ldr	r0, [pc, #376]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003876:	f7fe f9d0 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800387a:	e0b0      	b.n	80039de <handle_requestServerConnection+0xc72>



		case __gsmModule_requestServerConnection_waitOk_atHttppara_cid:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 800387c:	485c      	ldr	r0, [pc, #368]	; (80039f0 <handle_requestServerConnection+0xc84>)
 800387e:	f7fe f9a7 	bl	8001bd0 <fsmManager_isStateIn>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d006      	beq.n	8003896 <handle_requestServerConnection+0xb2a>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 8003888:	4859      	ldr	r0, [pc, #356]	; (80039f0 <handle_requestServerConnection+0xc84>)
 800388a:	f7fe f9b7 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 800388e:	2164      	movs	r1, #100	; 0x64
 8003890:	4859      	ldr	r0, [pc, #356]	; (80039f8 <handle_requestServerConnection+0xc8c>)
 8003892:	f000 ffb7 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003896:	4b59      	ldr	r3, [pc, #356]	; (80039fc <handle_requestServerConnection+0xc90>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	495c      	ldr	r1, [pc, #368]	; (8003a10 <handle_requestServerConnection+0xca4>)
 800389e:	4859      	ldr	r0, [pc, #356]	; (8003a04 <handle_requestServerConnection+0xc98>)
 80038a0:	f001 fe1b 	bl	80054da <string_containsWithinLength>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00e      	beq.n	80038c8 <handle_requestServerConnection+0xb5c>
				fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 80038aa:	2100      	movs	r1, #0
 80038ac:	4850      	ldr	r0, [pc, #320]	; (80039f0 <handle_requestServerConnection+0xc84>)
 80038ae:	f7fe f96d 	bl	8001b8c <fsmManager_gotoState>

				flags_gsmModule.bits.isServerConnected = 1;
 80038b2:	4a59      	ldr	r2, [pc, #356]	; (8003a18 <handle_requestServerConnection+0xcac>)
 80038b4:	7853      	ldrb	r3, [r2, #1]
 80038b6:	f043 0320 	orr.w	r3, r3, #32
 80038ba:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerConnection = 0;
 80038bc:	4a56      	ldr	r2, [pc, #344]	; (8003a18 <handle_requestServerConnection+0xcac>)
 80038be:	7813      	ldrb	r3, [r2, #0]
 80038c0:	f36f 1345 	bfc	r3, #5, #1
 80038c4:	7013      	strb	r3, [r2, #0]
 80038c6:	e009      	b.n	80038dc <handle_requestServerConnection+0xb70>
			}
			else if(softTimer_expired(&timeout)) {
 80038c8:	484b      	ldr	r0, [pc, #300]	; (80039f8 <handle_requestServerConnection+0xc8c>)
 80038ca:	f000 ffaf 	bl	800482c <softTimer_expired>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <handle_requestServerConnection+0xb70>
				fsmManager_gotoState(&gsmModule_requestGpsOn_state, __gsmModule_requestServerConnection_error);
 80038d4:	211f      	movs	r1, #31
 80038d6:	484c      	ldr	r0, [pc, #304]	; (8003a08 <handle_requestServerConnection+0xc9c>)
 80038d8:	f7fe f958 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 80038dc:	4844      	ldr	r0, [pc, #272]	; (80039f0 <handle_requestServerConnection+0xc84>)
 80038de:	f7fe f982 	bl	8001be6 <fsmManager_isStateOut>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d07c      	beq.n	80039e2 <handle_requestServerConnection+0xc76>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 80038e8:	4841      	ldr	r0, [pc, #260]	; (80039f0 <handle_requestServerConnection+0xc84>)
 80038ea:	f7fe f996 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80038ee:	e078      	b.n	80039e2 <handle_requestServerConnection+0xc76>



		case __gsmModule_requestServerConnection_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 80038f0:	483f      	ldr	r0, [pc, #252]	; (80039f0 <handle_requestServerConnection+0xc84>)
 80038f2:	f7fe f96d 	bl	8001bd0 <fsmManager_isStateIn>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <handle_requestServerConnection+0xb96>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 80038fc:	483c      	ldr	r0, [pc, #240]	; (80039f0 <handle_requestServerConnection+0xc84>)
 80038fe:	f7fe f97d 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverConnection = 1;
 8003902:	4a46      	ldr	r2, [pc, #280]	; (8003a1c <handle_requestServerConnection+0xcb0>)
 8003904:	7813      	ldrb	r3, [r2, #0]
 8003906:	f043 0320 	orr.w	r3, r3, #32
 800390a:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerConnection = 0;
 800390c:	4a42      	ldr	r2, [pc, #264]	; (8003a18 <handle_requestServerConnection+0xcac>)
 800390e:	7813      	ldrb	r3, [r2, #0]
 8003910:	f36f 1345 	bfc	r3, #5, #1
 8003914:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 8003916:	2100      	movs	r1, #0
 8003918:	4835      	ldr	r0, [pc, #212]	; (80039f0 <handle_requestServerConnection+0xc84>)
 800391a:	f7fe f937 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 800391e:	4834      	ldr	r0, [pc, #208]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003920:	f7fe f961 	bl	8001be6 <fsmManager_isStateOut>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d05d      	beq.n	80039e6 <handle_requestServerConnection+0xc7a>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 800392a:	4831      	ldr	r0, [pc, #196]	; (80039f0 <handle_requestServerConnection+0xc84>)
 800392c:	f7fe f975 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003930:	e059      	b.n	80039e6 <handle_requestServerConnection+0xc7a>



		default:
			if(fsmManager_isStateIn(&gsmModule_requestServerConnection_state)) {
 8003932:	482f      	ldr	r0, [pc, #188]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003934:	f7fe f94c 	bl	8001bd0 <fsmManager_isStateIn>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <handle_requestServerConnection+0xbd8>
				fsmManager_stateIn(&gsmModule_requestServerConnection_state);
 800393e:	482c      	ldr	r0, [pc, #176]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003940:	f7fe f95c 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestServerConnection = 0;
 8003944:	4a34      	ldr	r2, [pc, #208]	; (8003a18 <handle_requestServerConnection+0xcac>)
 8003946:	7813      	ldrb	r3, [r2, #0]
 8003948:	f36f 1345 	bfc	r3, #5, #1
 800394c:	7013      	strb	r3, [r2, #0]
			fsmManager_gotoState(&gsmModule_requestServerConnection_state, __gsmModule_requestServerConnection_idle);
 800394e:	2100      	movs	r1, #0
 8003950:	4827      	ldr	r0, [pc, #156]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003952:	f7fe f91b 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerConnection_state)) {
 8003956:	4826      	ldr	r0, [pc, #152]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003958:	f7fe f945 	bl	8001be6 <fsmManager_isStateOut>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d043      	beq.n	80039ea <handle_requestServerConnection+0xc7e>
				fsmManager_stateOut(&gsmModule_requestServerConnection_state);
 8003962:	4823      	ldr	r0, [pc, #140]	; (80039f0 <handle_requestServerConnection+0xc84>)
 8003964:	f7fe f959 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003968:	e03f      	b.n	80039ea <handle_requestServerConnection+0xc7e>
			break;
 800396a:	bf00      	nop
 800396c:	e03e      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 800396e:	bf00      	nop
 8003970:	e03c      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 8003972:	bf00      	nop
 8003974:	e03a      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 8003976:	bf00      	nop
 8003978:	e038      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 800397a:	bf00      	nop
 800397c:	e036      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 800397e:	bf00      	nop
 8003980:	e034      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 8003982:	bf00      	nop
 8003984:	e032      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 8003986:	bf00      	nop
 8003988:	e030      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 800398a:	bf00      	nop
 800398c:	e02e      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 800398e:	bf00      	nop
 8003990:	e02c      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 8003992:	bf00      	nop
 8003994:	e02a      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 8003996:	bf00      	nop
 8003998:	e028      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 800399a:	bf00      	nop
 800399c:	e026      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 800399e:	bf00      	nop
 80039a0:	e024      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039a2:	bf00      	nop
 80039a4:	e022      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039a6:	bf00      	nop
 80039a8:	e020      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039aa:	bf00      	nop
 80039ac:	e01e      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039ae:	bf00      	nop
 80039b0:	e01c      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039b2:	bf00      	nop
 80039b4:	e01a      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039b6:	bf00      	nop
 80039b8:	e018      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039ba:	bf00      	nop
 80039bc:	e016      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039be:	bf00      	nop
 80039c0:	e014      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039c2:	bf00      	nop
 80039c4:	e012      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039c6:	bf00      	nop
 80039c8:	e010      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039ca:	bf00      	nop
 80039cc:	e00e      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039ce:	bf00      	nop
 80039d0:	e00c      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039d2:	bf00      	nop
 80039d4:	e00a      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039d6:	bf00      	nop
 80039d8:	e008      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039da:	bf00      	nop
 80039dc:	e006      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039de:	bf00      	nop
 80039e0:	e004      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039e2:	bf00      	nop
 80039e4:	e002      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <handle_requestServerConnection+0xc80>
			break;
 80039ea:	bf00      	nop
	}
}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000518 	.word	0x20000518
 80039f4:	08009270 	.word	0x08009270
 80039f8:	200004d0 	.word	0x200004d0
 80039fc:	200003ec 	.word	0x200003ec
 8003a00:	080090f0 	.word	0x080090f0
 8003a04:	2000031c 	.word	0x2000031c
 8003a08:	200004f4 	.word	0x200004f4
 8003a0c:	0800928c 	.word	0x0800928c
 8003a10:	08009318 	.word	0x08009318
 8003a14:	0800929c 	.word	0x0800929c
 8003a18:	200004b8 	.word	0x200004b8
 8003a1c:	200004bc 	.word	0x200004bc

08003a20 <handle_requestServerDataSend>:

static void handle_requestServerDataSend(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerDataSend_state)) {
 8003a24:	4892      	ldr	r0, [pc, #584]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003a26:	f7fe f8c8 	bl	8001bba <fsmManager_getState>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	f200 80f9 	bhi.w	8003c24 <handle_requestServerDataSend+0x204>
 8003a32:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <handle_requestServerDataSend+0x18>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a51 	.word	0x08003a51
 8003a3c:	08003a81 	.word	0x08003a81
 8003a40:	08003ab7 	.word	0x08003ab7
 8003a44:	08003b1b 	.word	0x08003b1b
 8003a48:	08003b51 	.word	0x08003b51
 8003a4c:	08003be3 	.word	0x08003be3
		case __gsmModule_requestServerDataSend_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003a50:	4887      	ldr	r0, [pc, #540]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003a52:	f7fe f8bd 	bl	8001bd0 <fsmManager_isStateIn>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <handle_requestServerDataSend+0x42>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003a5c:	4884      	ldr	r0, [pc, #528]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003a5e:	f7fe f8cd 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_send_atHttppara_url);
 8003a62:	2101      	movs	r1, #1
 8003a64:	4882      	ldr	r0, [pc, #520]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003a66:	f7fe f891 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003a6a:	4881      	ldr	r0, [pc, #516]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003a6c:	f7fe f8bb 	bl	8001be6 <fsmManager_isStateOut>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80ed 	beq.w	8003c52 <handle_requestServerDataSend+0x232>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003a78:	487d      	ldr	r0, [pc, #500]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003a7a:	f7fe f8ce 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003a7e:	e0e8      	b.n	8003c52 <handle_requestServerDataSend+0x232>

		case __gsmModule_requestServerDataSend_send_atHttppara_url:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003a80:	487b      	ldr	r0, [pc, #492]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003a82:	f7fe f8a5 	bl	8001bd0 <fsmManager_isStateIn>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <handle_requestServerDataSend+0x72>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003a8c:	4878      	ldr	r0, [pc, #480]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003a8e:	f7fe f8b5 	bl	8001bfc <fsmManager_stateIn>
			}



			pinGsmUartTx_transmit((uint8_t *) dataToSend);
 8003a92:	4878      	ldr	r0, [pc, #480]	; (8003c74 <handle_requestServerDataSend+0x254>)
 8003a94:	f000 faaa 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_waitOk_atHttppara_url);
 8003a98:	2102      	movs	r1, #2
 8003a9a:	4875      	ldr	r0, [pc, #468]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003a9c:	f7fe f876 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003aa0:	4873      	ldr	r0, [pc, #460]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003aa2:	f7fe f8a0 	bl	8001be6 <fsmManager_isStateOut>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80d4 	beq.w	8003c56 <handle_requestServerDataSend+0x236>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003aae:	4870      	ldr	r0, [pc, #448]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003ab0:	f7fe f8b3 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003ab4:	e0cf      	b.n	8003c56 <handle_requestServerDataSend+0x236>

		case __gsmModule_requestServerDataSend_waitOk_atHttppara_url:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003ab6:	486e      	ldr	r0, [pc, #440]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003ab8:	f7fe f88a 	bl	8001bd0 <fsmManager_isStateIn>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <handle_requestServerDataSend+0xb2>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003ac2:	486b      	ldr	r0, [pc, #428]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003ac4:	f7fe f89a 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 1000);
 8003ac8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003acc:	486a      	ldr	r0, [pc, #424]	; (8003c78 <handle_requestServerDataSend+0x258>)
 8003ace:	f000 fe99 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003ad2:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <handle_requestServerDataSend+0x25c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4969      	ldr	r1, [pc, #420]	; (8003c80 <handle_requestServerDataSend+0x260>)
 8003ada:	486a      	ldr	r0, [pc, #424]	; (8003c84 <handle_requestServerDataSend+0x264>)
 8003adc:	f001 fcfd 	bl	80054da <string_containsWithinLength>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <handle_requestServerDataSend+0xd0>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_send_atHttpaction1);
 8003ae6:	2103      	movs	r1, #3
 8003ae8:	4861      	ldr	r0, [pc, #388]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003aea:	f7fe f84f 	bl	8001b8c <fsmManager_gotoState>
 8003aee:	e009      	b.n	8003b04 <handle_requestServerDataSend+0xe4>
			}
			else if(softTimer_expired(&timeout)) {
 8003af0:	4861      	ldr	r0, [pc, #388]	; (8003c78 <handle_requestServerDataSend+0x258>)
 8003af2:	f000 fe9b 	bl	800482c <softTimer_expired>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <handle_requestServerDataSend+0xe4>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_error);
 8003afc:	2105      	movs	r1, #5
 8003afe:	485c      	ldr	r0, [pc, #368]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003b00:	f7fe f844 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003b04:	485a      	ldr	r0, [pc, #360]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003b06:	f7fe f86e 	bl	8001be6 <fsmManager_isStateOut>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80a4 	beq.w	8003c5a <handle_requestServerDataSend+0x23a>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003b12:	4857      	ldr	r0, [pc, #348]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003b14:	f7fe f881 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003b18:	e09f      	b.n	8003c5a <handle_requestServerDataSend+0x23a>

		case __gsmModule_requestServerDataSend_send_atHttpaction1:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003b1a:	4855      	ldr	r0, [pc, #340]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003b1c:	f7fe f858 	bl	8001bd0 <fsmManager_isStateIn>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <handle_requestServerDataSend+0x10c>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003b26:	4852      	ldr	r0, [pc, #328]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003b28:	f7fe f868 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpaction1);
 8003b2c:	4856      	ldr	r0, [pc, #344]	; (8003c88 <handle_requestServerDataSend+0x268>)
 8003b2e:	f000 fa5d 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_waitOk_atHttpaction1);
 8003b32:	2104      	movs	r1, #4
 8003b34:	484e      	ldr	r0, [pc, #312]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003b36:	f7fe f829 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003b3a:	484d      	ldr	r0, [pc, #308]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003b3c:	f7fe f853 	bl	8001be6 <fsmManager_isStateOut>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 808b 	beq.w	8003c5e <handle_requestServerDataSend+0x23e>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003b48:	4849      	ldr	r0, [pc, #292]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003b4a:	f7fe f866 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003b4e:	e086      	b.n	8003c5e <handle_requestServerDataSend+0x23e>

		case __gsmModule_requestServerDataSend_waitOk_atHttpaction1:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003b50:	4847      	ldr	r0, [pc, #284]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003b52:	f7fe f83d 	bl	8001bd0 <fsmManager_isStateIn>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d006      	beq.n	8003b6a <handle_requestServerDataSend+0x14a>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003b5c:	4844      	ldr	r0, [pc, #272]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003b5e:	f7fe f84d 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 120*1000);
 8003b62:	494a      	ldr	r1, [pc, #296]	; (8003c8c <handle_requestServerDataSend+0x26c>)
 8003b64:	4844      	ldr	r0, [pc, #272]	; (8003c78 <handle_requestServerDataSend+0x258>)
 8003b66:	f000 fe4d 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_httpaction1_200, gsmRxDataChunkLen)) {
 8003b6a:	4b44      	ldr	r3, [pc, #272]	; (8003c7c <handle_requestServerDataSend+0x25c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4947      	ldr	r1, [pc, #284]	; (8003c90 <handle_requestServerDataSend+0x270>)
 8003b72:	4844      	ldr	r0, [pc, #272]	; (8003c84 <handle_requestServerDataSend+0x264>)
 8003b74:	f001 fcb1 	bl	80054da <string_containsWithinLength>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00e      	beq.n	8003b9c <handle_requestServerDataSend+0x17c>
				flags_gsmModule.bits.isServerDataSent = 1;
 8003b7e:	4a45      	ldr	r2, [pc, #276]	; (8003c94 <handle_requestServerDataSend+0x274>)
 8003b80:	7853      	ldrb	r3, [r2, #1]
 8003b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b86:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerDataSend = 0;
 8003b88:	4a42      	ldr	r2, [pc, #264]	; (8003c94 <handle_requestServerDataSend+0x274>)
 8003b8a:	7813      	ldrb	r3, [r2, #0]
 8003b8c:	f36f 1386 	bfc	r3, #6, #1
 8003b90:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 8003b92:	2100      	movs	r1, #0
 8003b94:	4836      	ldr	r0, [pc, #216]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003b96:	f7fd fff9 	bl	8001b8c <fsmManager_gotoState>
 8003b9a:	e018      	b.n	8003bce <handle_requestServerDataSend+0x1ae>
			}
			else if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_httpaction1_err, gsmRxDataChunkLen)) {
 8003b9c:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <handle_requestServerDataSend+0x25c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	493d      	ldr	r1, [pc, #244]	; (8003c98 <handle_requestServerDataSend+0x278>)
 8003ba4:	4837      	ldr	r0, [pc, #220]	; (8003c84 <handle_requestServerDataSend+0x264>)
 8003ba6:	f001 fc98 	bl	80054da <string_containsWithinLength>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d004      	beq.n	8003bba <handle_requestServerDataSend+0x19a>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_error);
 8003bb0:	2105      	movs	r1, #5
 8003bb2:	482f      	ldr	r0, [pc, #188]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003bb4:	f7fd ffea 	bl	8001b8c <fsmManager_gotoState>
 8003bb8:	e009      	b.n	8003bce <handle_requestServerDataSend+0x1ae>
			}
			else if(softTimer_expired(&timeout)) {
 8003bba:	482f      	ldr	r0, [pc, #188]	; (8003c78 <handle_requestServerDataSend+0x258>)
 8003bbc:	f000 fe36 	bl	800482c <softTimer_expired>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <handle_requestServerDataSend+0x1ae>
				fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_error);
 8003bc6:	2105      	movs	r1, #5
 8003bc8:	4829      	ldr	r0, [pc, #164]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003bca:	f7fd ffdf 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003bce:	4828      	ldr	r0, [pc, #160]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003bd0:	f7fe f809 	bl	8001be6 <fsmManager_isStateOut>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d043      	beq.n	8003c62 <handle_requestServerDataSend+0x242>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003bda:	4825      	ldr	r0, [pc, #148]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003bdc:	f7fe f81d 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003be0:	e03f      	b.n	8003c62 <handle_requestServerDataSend+0x242>

		case __gsmModule_requestServerDataSend_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003be2:	4823      	ldr	r0, [pc, #140]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003be4:	f7fd fff4 	bl	8001bd0 <fsmManager_isStateIn>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <handle_requestServerDataSend+0x1d4>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003bee:	4820      	ldr	r0, [pc, #128]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003bf0:	f7fe f804 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverSendData = 1;
 8003bf4:	4a29      	ldr	r2, [pc, #164]	; (8003c9c <handle_requestServerDataSend+0x27c>)
 8003bf6:	7813      	ldrb	r3, [r2, #0]
 8003bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bfc:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerDataSend = 0;
 8003bfe:	4a25      	ldr	r2, [pc, #148]	; (8003c94 <handle_requestServerDataSend+0x274>)
 8003c00:	7813      	ldrb	r3, [r2, #0]
 8003c02:	f36f 1386 	bfc	r3, #6, #1
 8003c06:	7013      	strb	r3, [r2, #0]

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4819      	ldr	r0, [pc, #100]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003c0c:	f7fd ffbe 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003c10:	4817      	ldr	r0, [pc, #92]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003c12:	f7fd ffe8 	bl	8001be6 <fsmManager_isStateOut>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d024      	beq.n	8003c66 <handle_requestServerDataSend+0x246>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003c1c:	4814      	ldr	r0, [pc, #80]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003c1e:	f7fd fffc 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003c22:	e020      	b.n	8003c66 <handle_requestServerDataSend+0x246>

		default:
			if(fsmManager_isStateIn(&gsmModule_requestServerDataSend_state)) {
 8003c24:	4812      	ldr	r0, [pc, #72]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003c26:	f7fd ffd3 	bl	8001bd0 <fsmManager_isStateIn>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <handle_requestServerDataSend+0x216>
				fsmManager_stateIn(&gsmModule_requestServerDataSend_state);
 8003c30:	480f      	ldr	r0, [pc, #60]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003c32:	f7fd ffe3 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDataSend_state, __gsmModule_requestServerDataSend_idle);
 8003c36:	2100      	movs	r1, #0
 8003c38:	480d      	ldr	r0, [pc, #52]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003c3a:	f7fd ffa7 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDataSend_state)) {
 8003c3e:	480c      	ldr	r0, [pc, #48]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003c40:	f7fd ffd1 	bl	8001be6 <fsmManager_isStateOut>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00f      	beq.n	8003c6a <handle_requestServerDataSend+0x24a>
				fsmManager_stateOut(&gsmModule_requestServerDataSend_state);
 8003c4a:	4809      	ldr	r0, [pc, #36]	; (8003c70 <handle_requestServerDataSend+0x250>)
 8003c4c:	f7fd ffe5 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003c50:	e00b      	b.n	8003c6a <handle_requestServerDataSend+0x24a>
			break;
 8003c52:	bf00      	nop
 8003c54:	e00a      	b.n	8003c6c <handle_requestServerDataSend+0x24c>
			break;
 8003c56:	bf00      	nop
 8003c58:	e008      	b.n	8003c6c <handle_requestServerDataSend+0x24c>
			break;
 8003c5a:	bf00      	nop
 8003c5c:	e006      	b.n	8003c6c <handle_requestServerDataSend+0x24c>
			break;
 8003c5e:	bf00      	nop
 8003c60:	e004      	b.n	8003c6c <handle_requestServerDataSend+0x24c>
			break;
 8003c62:	bf00      	nop
 8003c64:	e002      	b.n	8003c6c <handle_requestServerDataSend+0x24c>
			break;
 8003c66:	bf00      	nop
 8003c68:	e000      	b.n	8003c6c <handle_requestServerDataSend+0x24c>
			break;
 8003c6a:	bf00      	nop
	}
}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000524 	.word	0x20000524
 8003c74:	200003f0 	.word	0x200003f0
 8003c78:	200004d0 	.word	0x200004d0
 8003c7c:	200003ec 	.word	0x200003ec
 8003c80:	08009318 	.word	0x08009318
 8003c84:	2000031c 	.word	0x2000031c
 8003c88:	080092e4 	.word	0x080092e4
 8003c8c:	0001d4c0 	.word	0x0001d4c0
 8003c90:	08009340 	.word	0x08009340
 8003c94:	200004b8 	.word	0x200004b8
 8003c98:	08009354 	.word	0x08009354
 8003c9c:	200004bc 	.word	0x200004bc

08003ca0 <handle_requestServerDisconnection>:

static void handle_requestServerDisconnection(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&gsmModule_requestServerDisconnection_state)) {
 8003ca4:	48b7      	ldr	r0, [pc, #732]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003ca6:	f7fd ff88 	bl	8001bba <fsmManager_getState>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b07      	cmp	r3, #7
 8003cae:	f200 813a 	bhi.w	8003f26 <handle_requestServerDisconnection+0x286>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <handle_requestServerDisconnection+0x18>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cd9 	.word	0x08003cd9
 8003cbc:	08003d09 	.word	0x08003d09
 8003cc0:	08003d3f 	.word	0x08003d3f
 8003cc4:	08003da1 	.word	0x08003da1
 8003cc8:	08003dd7 	.word	0x08003dd7
 8003ccc:	08003e3b 	.word	0x08003e3b
 8003cd0:	08003e71 	.word	0x08003e71
 8003cd4:	08003ee5 	.word	0x08003ee5
		case __gsmModule_requestServerDisconnection_idle:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8003cd8:	48aa      	ldr	r0, [pc, #680]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003cda:	f7fd ff79 	bl	8001bd0 <fsmManager_isStateIn>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <handle_requestServerDisconnection+0x4a>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8003ce4:	48a7      	ldr	r0, [pc, #668]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003ce6:	f7fd ff89 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atHttpterm);
 8003cea:	2101      	movs	r1, #1
 8003cec:	48a5      	ldr	r0, [pc, #660]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003cee:	f7fd ff4d 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8003cf2:	48a4      	ldr	r0, [pc, #656]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003cf4:	f7fd ff77 	bl	8001be6 <fsmManager_isStateOut>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 812f 	beq.w	8003f5e <handle_requestServerDisconnection+0x2be>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8003d00:	48a0      	ldr	r0, [pc, #640]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d02:	f7fd ff8a 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003d06:	e12a      	b.n	8003f5e <handle_requestServerDisconnection+0x2be>



		case __gsmModule_requestServerDisconnection_send_atHttpterm:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8003d08:	489e      	ldr	r0, [pc, #632]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d0a:	f7fd ff61 	bl	8001bd0 <fsmManager_isStateIn>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <handle_requestServerDisconnection+0x7a>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8003d14:	489b      	ldr	r0, [pc, #620]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d16:	f7fd ff71 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_httpterm);
 8003d1a:	489b      	ldr	r0, [pc, #620]	; (8003f88 <handle_requestServerDisconnection+0x2e8>)
 8003d1c:	f000 f966 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_waitOk_atHttpterm);
 8003d20:	2102      	movs	r1, #2
 8003d22:	4898      	ldr	r0, [pc, #608]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d24:	f7fd ff32 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8003d28:	4896      	ldr	r0, [pc, #600]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d2a:	f7fd ff5c 	bl	8001be6 <fsmManager_isStateOut>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8116 	beq.w	8003f62 <handle_requestServerDisconnection+0x2c2>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8003d36:	4893      	ldr	r0, [pc, #588]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d38:	f7fd ff6f 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003d3c:	e111      	b.n	8003f62 <handle_requestServerDisconnection+0x2c2>



		case __gsmModule_requestServerDisconnection_waitOk_atHttpterm:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8003d3e:	4891      	ldr	r0, [pc, #580]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d40:	f7fd ff46 	bl	8001bd0 <fsmManager_isStateIn>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d006      	beq.n	8003d58 <handle_requestServerDisconnection+0xb8>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8003d4a:	488e      	ldr	r0, [pc, #568]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d4c:	f7fd ff56 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003d50:	2164      	movs	r1, #100	; 0x64
 8003d52:	488e      	ldr	r0, [pc, #568]	; (8003f8c <handle_requestServerDisconnection+0x2ec>)
 8003d54:	f000 fd56 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003d58:	4b8d      	ldr	r3, [pc, #564]	; (8003f90 <handle_requestServerDisconnection+0x2f0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	498d      	ldr	r1, [pc, #564]	; (8003f94 <handle_requestServerDisconnection+0x2f4>)
 8003d60:	488d      	ldr	r0, [pc, #564]	; (8003f98 <handle_requestServerDisconnection+0x2f8>)
 8003d62:	f001 fbba 	bl	80054da <string_containsWithinLength>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d004      	beq.n	8003d76 <handle_requestServerDisconnection+0xd6>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr0);
 8003d6c:	2103      	movs	r1, #3
 8003d6e:	4885      	ldr	r0, [pc, #532]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d70:	f7fd ff0c 	bl	8001b8c <fsmManager_gotoState>
 8003d74:	e009      	b.n	8003d8a <handle_requestServerDisconnection+0xea>
			}
			else if(softTimer_expired(&timeout)) {
 8003d76:	4885      	ldr	r0, [pc, #532]	; (8003f8c <handle_requestServerDisconnection+0x2ec>)
 8003d78:	f000 fd58 	bl	800482c <softTimer_expired>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <handle_requestServerDisconnection+0xea>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_error);
 8003d82:	2107      	movs	r1, #7
 8003d84:	487f      	ldr	r0, [pc, #508]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d86:	f7fd ff01 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8003d8a:	487e      	ldr	r0, [pc, #504]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d8c:	f7fd ff2b 	bl	8001be6 <fsmManager_isStateOut>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80e7 	beq.w	8003f66 <handle_requestServerDisconnection+0x2c6>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8003d98:	487a      	ldr	r0, [pc, #488]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003d9a:	f7fd ff3e 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003d9e:	e0e2      	b.n	8003f66 <handle_requestServerDisconnection+0x2c6>



		case __gsmModule_requestServerDisconnection_send_atSapbr0:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8003da0:	4878      	ldr	r0, [pc, #480]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003da2:	f7fd ff15 	bl	8001bd0 <fsmManager_isStateIn>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <handle_requestServerDisconnection+0x112>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8003dac:	4875      	ldr	r0, [pc, #468]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003dae:	f7fd ff25 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr0);
 8003db2:	487a      	ldr	r0, [pc, #488]	; (8003f9c <handle_requestServerDisconnection+0x2fc>)
 8003db4:	f000 f91a 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_waitOk_atSapbr0);
 8003db8:	2104      	movs	r1, #4
 8003dba:	4872      	ldr	r0, [pc, #456]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003dbc:	f7fd fee6 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8003dc0:	4870      	ldr	r0, [pc, #448]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003dc2:	f7fd ff10 	bl	8001be6 <fsmManager_isStateOut>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80ce 	beq.w	8003f6a <handle_requestServerDisconnection+0x2ca>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8003dce:	486d      	ldr	r0, [pc, #436]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003dd0:	f7fd ff23 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003dd4:	e0c9      	b.n	8003f6a <handle_requestServerDisconnection+0x2ca>



		case __gsmModule_requestServerDisconnection_waitOk_atSapbr0:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8003dd6:	486b      	ldr	r0, [pc, #428]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003dd8:	f7fd fefa 	bl	8001bd0 <fsmManager_isStateIn>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d007      	beq.n	8003df2 <handle_requestServerDisconnection+0x152>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8003de2:	4868      	ldr	r0, [pc, #416]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003de4:	f7fd ff0a 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 65*1000);
 8003de8:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8003dec:	4867      	ldr	r0, [pc, #412]	; (8003f8c <handle_requestServerDisconnection+0x2ec>)
 8003dee:	f000 fd09 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) gsmModule_response_ok, gsmRxDataChunkLen)) {
 8003df2:	4b67      	ldr	r3, [pc, #412]	; (8003f90 <handle_requestServerDisconnection+0x2f0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	4966      	ldr	r1, [pc, #408]	; (8003f94 <handle_requestServerDisconnection+0x2f4>)
 8003dfa:	4867      	ldr	r0, [pc, #412]	; (8003f98 <handle_requestServerDisconnection+0x2f8>)
 8003dfc:	f001 fb6d 	bl	80054da <string_containsWithinLength>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <handle_requestServerDisconnection+0x170>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_send_atSapbr2);
 8003e06:	2105      	movs	r1, #5
 8003e08:	485e      	ldr	r0, [pc, #376]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003e0a:	f7fd febf 	bl	8001b8c <fsmManager_gotoState>
 8003e0e:	e009      	b.n	8003e24 <handle_requestServerDisconnection+0x184>
			}
			else if(softTimer_expired(&timeout)) {
 8003e10:	485e      	ldr	r0, [pc, #376]	; (8003f8c <handle_requestServerDisconnection+0x2ec>)
 8003e12:	f000 fd0b 	bl	800482c <softTimer_expired>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <handle_requestServerDisconnection+0x184>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_error);
 8003e1c:	2107      	movs	r1, #7
 8003e1e:	4859      	ldr	r0, [pc, #356]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003e20:	f7fd feb4 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8003e24:	4857      	ldr	r0, [pc, #348]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003e26:	f7fd fede 	bl	8001be6 <fsmManager_isStateOut>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 809e 	beq.w	8003f6e <handle_requestServerDisconnection+0x2ce>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8003e32:	4854      	ldr	r0, [pc, #336]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003e34:	f7fd fef1 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003e38:	e099      	b.n	8003f6e <handle_requestServerDisconnection+0x2ce>



		case __gsmModule_requestServerDisconnection_send_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8003e3a:	4852      	ldr	r0, [pc, #328]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003e3c:	f7fd fec8 	bl	8001bd0 <fsmManager_isStateIn>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <handle_requestServerDisconnection+0x1ac>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8003e46:	484f      	ldr	r0, [pc, #316]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003e48:	f7fd fed8 	bl	8001bfc <fsmManager_stateIn>
			}

			pinGsmUartTx_transmit((uint8_t *) gsmModule_command_sapbr2);
 8003e4c:	4854      	ldr	r0, [pc, #336]	; (8003fa0 <handle_requestServerDisconnection+0x300>)
 8003e4e:	f000 f8cd 	bl	8003fec <pinGsmUartTx_transmit>
			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_check_atSapbr2);
 8003e52:	2106      	movs	r1, #6
 8003e54:	484b      	ldr	r0, [pc, #300]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003e56:	f7fd fe99 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8003e5a:	484a      	ldr	r0, [pc, #296]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003e5c:	f7fd fec3 	bl	8001be6 <fsmManager_isStateOut>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8085 	beq.w	8003f72 <handle_requestServerDisconnection+0x2d2>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8003e68:	4846      	ldr	r0, [pc, #280]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003e6a:	f7fd fed6 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003e6e:	e080      	b.n	8003f72 <handle_requestServerDisconnection+0x2d2>



		case __gsmModule_requestServerDisconnection_check_atSapbr2:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8003e70:	4844      	ldr	r0, [pc, #272]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003e72:	f7fd fead 	bl	8001bd0 <fsmManager_isStateIn>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <handle_requestServerDisconnection+0x1ea>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8003e7c:	4841      	ldr	r0, [pc, #260]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003e7e:	f7fd febd 	bl	8001bfc <fsmManager_stateIn>

				softTimer_start(&timeout, 100);
 8003e82:	2164      	movs	r1, #100	; 0x64
 8003e84:	4841      	ldr	r0, [pc, #260]	; (8003f8c <handle_requestServerDisconnection+0x2ec>)
 8003e86:	f000 fcbd 	bl	8004804 <softTimer_start>
			}

			if(string_containsWithinLength(gsmRxDataChunk, (uint8_t *) "0.0.0.0", gsmRxDataChunkLen)) {
 8003e8a:	4b41      	ldr	r3, [pc, #260]	; (8003f90 <handle_requestServerDisconnection+0x2f0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4944      	ldr	r1, [pc, #272]	; (8003fa4 <handle_requestServerDisconnection+0x304>)
 8003e92:	4841      	ldr	r0, [pc, #260]	; (8003f98 <handle_requestServerDisconnection+0x2f8>)
 8003e94:	f001 fb21 	bl	80054da <string_containsWithinLength>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00e      	beq.n	8003ebc <handle_requestServerDisconnection+0x21c>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4838      	ldr	r0, [pc, #224]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003ea2:	f7fd fe73 	bl	8001b8c <fsmManager_gotoState>

				flags_gsmModule.bits.isServerConnected = 0;
 8003ea6:	4a40      	ldr	r2, [pc, #256]	; (8003fa8 <handle_requestServerDisconnection+0x308>)
 8003ea8:	7853      	ldrb	r3, [r2, #1]
 8003eaa:	f36f 1345 	bfc	r3, #5, #1
 8003eae:	7053      	strb	r3, [r2, #1]
				flags_gsmModule.bits.requestServerDisconnection = 0;
 8003eb0:	4a3d      	ldr	r2, [pc, #244]	; (8003fa8 <handle_requestServerDisconnection+0x308>)
 8003eb2:	7853      	ldrb	r3, [r2, #1]
 8003eb4:	f36f 0300 	bfc	r3, #0, #1
 8003eb8:	7053      	strb	r3, [r2, #1]
 8003eba:	e009      	b.n	8003ed0 <handle_requestServerDisconnection+0x230>
			}
			else if(softTimer_expired(&timeout)) {
 8003ebc:	4833      	ldr	r0, [pc, #204]	; (8003f8c <handle_requestServerDisconnection+0x2ec>)
 8003ebe:	f000 fcb5 	bl	800482c <softTimer_expired>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <handle_requestServerDisconnection+0x230>
				fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_error);
 8003ec8:	2107      	movs	r1, #7
 8003eca:	482e      	ldr	r0, [pc, #184]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003ecc:	f7fd fe5e 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8003ed0:	482c      	ldr	r0, [pc, #176]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003ed2:	f7fd fe88 	bl	8001be6 <fsmManager_isStateOut>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d04c      	beq.n	8003f76 <handle_requestServerDisconnection+0x2d6>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8003edc:	4829      	ldr	r0, [pc, #164]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003ede:	f7fd fe9c 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003ee2:	e048      	b.n	8003f76 <handle_requestServerDisconnection+0x2d6>



		case __gsmModule_requestServerDisconnection_error:
			if(fsmManager_isStateIn(&gsmModule_requestServerDisconnection_state)) {
 8003ee4:	4827      	ldr	r0, [pc, #156]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003ee6:	f7fd fe73 	bl	8001bd0 <fsmManager_isStateIn>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <handle_requestServerDisconnection+0x256>
				fsmManager_stateIn(&gsmModule_requestServerDisconnection_state);
 8003ef0:	4824      	ldr	r0, [pc, #144]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003ef2:	f7fd fe83 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModuleError.bits.serverDisconnection = 1;
 8003ef6:	4a2d      	ldr	r2, [pc, #180]	; (8003fac <handle_requestServerDisconnection+0x30c>)
 8003ef8:	7813      	ldrb	r3, [r2, #0]
 8003efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efe:	7013      	strb	r3, [r2, #0]
			flags_gsmModule.bits.requestServerDisconnection = 0;
 8003f00:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <handle_requestServerDisconnection+0x308>)
 8003f02:	7853      	ldrb	r3, [r2, #1]
 8003f04:	f36f 0300 	bfc	r3, #0, #1
 8003f08:	7053      	strb	r3, [r2, #1]
			fsmManager_gotoState(&gsmModule_requestServerDisconnection_state, __gsmModule_requestServerDisconnection_idle);
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	481d      	ldr	r0, [pc, #116]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003f0e:	f7fd fe3d 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestServerDisconnection_state)) {
 8003f12:	481c      	ldr	r0, [pc, #112]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003f14:	f7fd fe67 	bl	8001be6 <fsmManager_isStateOut>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d02d      	beq.n	8003f7a <handle_requestServerDisconnection+0x2da>
				fsmManager_stateOut(&gsmModule_requestServerDisconnection_state);
 8003f1e:	4819      	ldr	r0, [pc, #100]	; (8003f84 <handle_requestServerDisconnection+0x2e4>)
 8003f20:	f7fd fe7b 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003f24:	e029      	b.n	8003f7a <handle_requestServerDisconnection+0x2da>




		default:
			if(fsmManager_isStateIn(&gsmModule_requestGpsOff_state)) {
 8003f26:	4822      	ldr	r0, [pc, #136]	; (8003fb0 <handle_requestServerDisconnection+0x310>)
 8003f28:	f7fd fe52 	bl	8001bd0 <fsmManager_isStateIn>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <handle_requestServerDisconnection+0x298>
				fsmManager_stateIn(&gsmModule_requestGpsOff_state);
 8003f32:	481f      	ldr	r0, [pc, #124]	; (8003fb0 <handle_requestServerDisconnection+0x310>)
 8003f34:	f7fd fe62 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_gsmModule.bits.requestServerDisconnection = 0;
 8003f38:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <handle_requestServerDisconnection+0x308>)
 8003f3a:	7853      	ldrb	r3, [r2, #1]
 8003f3c:	f36f 0300 	bfc	r3, #0, #1
 8003f40:	7053      	strb	r3, [r2, #1]
			fsmManager_gotoState(&gsmModule_requestGpsOff_state, __gsmModule_requestGpsOn_idle);
 8003f42:	2100      	movs	r1, #0
 8003f44:	481a      	ldr	r0, [pc, #104]	; (8003fb0 <handle_requestServerDisconnection+0x310>)
 8003f46:	f7fd fe21 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&gsmModule_requestGpsOff_state)) {
 8003f4a:	4819      	ldr	r0, [pc, #100]	; (8003fb0 <handle_requestServerDisconnection+0x310>)
 8003f4c:	f7fd fe4b 	bl	8001be6 <fsmManager_isStateOut>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d013      	beq.n	8003f7e <handle_requestServerDisconnection+0x2de>
				fsmManager_stateOut(&gsmModule_requestGpsOff_state);
 8003f56:	4816      	ldr	r0, [pc, #88]	; (8003fb0 <handle_requestServerDisconnection+0x310>)
 8003f58:	f7fd fe5f 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8003f5c:	e00f      	b.n	8003f7e <handle_requestServerDisconnection+0x2de>
			break;
 8003f5e:	bf00      	nop
 8003f60:	e00e      	b.n	8003f80 <handle_requestServerDisconnection+0x2e0>
			break;
 8003f62:	bf00      	nop
 8003f64:	e00c      	b.n	8003f80 <handle_requestServerDisconnection+0x2e0>
			break;
 8003f66:	bf00      	nop
 8003f68:	e00a      	b.n	8003f80 <handle_requestServerDisconnection+0x2e0>
			break;
 8003f6a:	bf00      	nop
 8003f6c:	e008      	b.n	8003f80 <handle_requestServerDisconnection+0x2e0>
			break;
 8003f6e:	bf00      	nop
 8003f70:	e006      	b.n	8003f80 <handle_requestServerDisconnection+0x2e0>
			break;
 8003f72:	bf00      	nop
 8003f74:	e004      	b.n	8003f80 <handle_requestServerDisconnection+0x2e0>
			break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <handle_requestServerDisconnection+0x2e0>
			break;
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <handle_requestServerDisconnection+0x2e0>
			break;
 8003f7e:	bf00      	nop
	}
}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	2000053c 	.word	0x2000053c
 8003f88:	08009308 	.word	0x08009308
 8003f8c:	200004d0 	.word	0x200004d0
 8003f90:	200003ec 	.word	0x200003ec
 8003f94:	08009318 	.word	0x08009318
 8003f98:	2000031c 	.word	0x2000031c
 8003f9c:	080092f8 	.word	0x080092f8
 8003fa0:	08009270 	.word	0x08009270
 8003fa4:	080090f0 	.word	0x080090f0
 8003fa8:	200004b8 	.word	0x200004b8
 8003fac:	200004bc 	.word	0x200004bc
 8003fb0:	2000050c 	.word	0x2000050c

08003fb4 <pinGsmVdd_write>:
	GSM_UART_TX		output			uart
	GSM_UART_RX		input			uart
*/

static void pinGsmVdd_write(uint8_t value)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(GSM_VDD_GPIO_Port, GSM_VDD_Pin, value);
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <pinGsmPwrkey_write>:

static void pinGsmPwrkey_write(uint8_t value)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GSM_PWRKEY_GPIO_Port, GSM_PWRKEY_Pin, value);
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2108      	movs	r1, #8
 8003fd8:	4803      	ldr	r0, [pc, #12]	; (8003fe8 <pinGsmPwrkey_write+0x20>)
 8003fda:	f002 fc8d 	bl	80068f8 <HAL_GPIO_WritePin>
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40010c00 	.word	0x40010c00

08003fec <pinGsmUartTx_transmit>:

static void pinGsmUartTx_transmit(uint8_t *gsmModule_command)
{
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(gsmHuart, UART_IT_RXNE);
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <pinGsmUartTx_transmit+0x78>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <pinGsmUartTx_transmit+0x78>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0220 	bic.w	r2, r2, #32
 8004006:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(gsmHuart, UART_IT_TC);
 8004008:	4b16      	ldr	r3, [pc, #88]	; (8004064 <pinGsmUartTx_transmit+0x78>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	4b14      	ldr	r3, [pc, #80]	; (8004064 <pinGsmUartTx_transmit+0x78>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401a:	60da      	str	r2, [r3, #12]
	HAL_UART_Transmit_IT(gsmHuart, gsmModule_command, string_length(gsmModule_command));
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <pinGsmUartTx_transmit+0x78>)
 800401e:	681c      	ldr	r4, [r3, #0]
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f001 fa41 	bl	80054a8 <string_length>
 8004026:	4603      	mov	r3, r0
 8004028:	b29b      	uxth	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4620      	mov	r0, r4
 8004030:	f004 fbb7 	bl	80087a2 <HAL_UART_Transmit_IT>
	__HAL_UART_DISABLE_IT(gsmHuart, UART_IT_TC);
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <pinGsmUartTx_transmit+0x78>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <pinGsmUartTx_transmit+0x78>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004046:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(gsmHuart, UART_IT_RXNE);
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <pinGsmUartTx_transmit+0x78>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <pinGsmUartTx_transmit+0x78>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0220 	orr.w	r2, r2, #32
 800405a:	60da      	str	r2, [r3, #12]
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bd90      	pop	{r4, r7, pc}
 8004064:	20000188 	.word	0x20000188

08004068 <pinGsmUartRx_receive>:

static void pinGsmUartRx_receive(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
	gsmRxPtrIn++;
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <pinGsmUartRx_receive+0x40>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3301      	adds	r3, #1
 8004072:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <pinGsmUartRx_receive+0x40>)
 8004074:	6013      	str	r3, [r2, #0]
	gsmRxPtrIn%=GSMRXDATA_LENGTH;
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <pinGsmUartRx_receive+0x40>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <pinGsmUartRx_receive+0x44>)
 800407c:	fba3 1302 	umull	r1, r3, r3, r2
 8004080:	09db      	lsrs	r3, r3, #7
 8004082:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004086:	fb01 f303 	mul.w	r3, r1, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	4a06      	ldr	r2, [pc, #24]	; (80040a8 <pinGsmUartRx_receive+0x40>)
 800408e:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(gsmHuart, &gsmRxData[gsmRxPtrIn], 1);
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <pinGsmUartRx_receive+0x48>)
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <pinGsmUartRx_receive+0x40>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a06      	ldr	r2, [pc, #24]	; (80040b4 <pinGsmUartRx_receive+0x4c>)
 800409a:	4413      	add	r3, r2
 800409c:	2201      	movs	r2, #1
 800409e:	4619      	mov	r1, r3
 80040a0:	f004 fbc3 	bl	800882a <HAL_UART_Receive_IT>
}
 80040a4:	bf00      	nop
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000000 	.word	0x20000000
 80040ac:	51eb851f 	.word	0x51eb851f
 80040b0:	20000188 	.word	0x20000188
 80040b4:	2000018c 	.word	0x2000018c

080040b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	if(huart->Instance == gsmHuart->Instance) {
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_UART_RxCpltCallback+0x24>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_RxCpltCallback+0x1a>
		pinGsmUartRx_receive();
 80040ce:	f7ff ffcb 	bl	8004068 <pinGsmUartRx_receive>
	}
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000188 	.word	0x20000188

080040e0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
	softTimer_periodElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fbee 	bl	80048dc <softTimer_periodElapsedCallback>
}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800410c:	f001 fbf8 	bl	8005900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004110:	f000 f811 	bl	8004136 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004114:	f000 f9aa 	bl	800446c <MX_GPIO_Init>
  MX_ADC1_Init();
 8004118:	f000 f862 	bl	80041e0 <MX_ADC1_Init>
  MX_RTC_Init();
 800411c:	f000 f8be 	bl	800429c <MX_RTC_Init>
  MX_TIM3_Init();
 8004120:	f000 f8d8 	bl	80042d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004124:	f000 f92a 	bl	800437c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004128:	f000 f976 	bl	8004418 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dumpSensorManager_init();
 800412c:	f7fd f8b0 	bl	8001290 <dumpSensorManager_init>

  while (1)
  {
	  dumpSensorManager_handler();
 8004130:	f7fd f8f0 	bl	8001314 <dumpSensorManager_handler>
 8004134:	e7fc      	b.n	8004130 <main+0x28>

08004136 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b094      	sub	sp, #80	; 0x50
 800413a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800413c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004140:	2228      	movs	r2, #40	; 0x28
 8004142:	2100      	movs	r1, #0
 8004144:	4618      	mov	r0, r3
 8004146:	f004 ff9b 	bl	8009080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800414a:	f107 0314 	add.w	r3, r7, #20
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	605a      	str	r2, [r3, #4]
 8004154:	609a      	str	r2, [r3, #8]
 8004156:	60da      	str	r2, [r3, #12]
 8004158:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004166:	230a      	movs	r3, #10
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800416a:	2301      	movs	r3, #1
 800416c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800416e:	2310      	movs	r3, #16
 8004170:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004172:	2301      	movs	r3, #1
 8004174:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004176:	2300      	movs	r3, #0
 8004178:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800417a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800417e:	4618      	mov	r0, r3
 8004180:	f002 fbea 	bl	8006958 <HAL_RCC_OscConfig>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800418a:	f000 f9c3 	bl	8004514 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800418e:	230f      	movs	r3, #15
 8004190:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800419a:	2300      	movs	r3, #0
 800419c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800419e:	2300      	movs	r3, #0
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80041a2:	f107 0314 	add.w	r3, r7, #20
 80041a6:	2100      	movs	r1, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f002 fe55 	bl	8006e58 <HAL_RCC_ClockConfig>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80041b4:	f000 f9ae 	bl	8004514 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80041b8:	2303      	movs	r3, #3
 80041ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80041bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041c6:	1d3b      	adds	r3, r7, #4
 80041c8:	4618      	mov	r0, r3
 80041ca:	f002 ffdf 	bl	800718c <HAL_RCCEx_PeriphCLKConfig>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80041d4:	f000 f99e 	bl	8004514 <Error_Handler>
  }
}
 80041d8:	bf00      	nop
 80041da:	3750      	adds	r7, #80	; 0x50
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80041f0:	4b28      	ldr	r3, [pc, #160]	; (8004294 <MX_ADC1_Init+0xb4>)
 80041f2:	4a29      	ldr	r2, [pc, #164]	; (8004298 <MX_ADC1_Init+0xb8>)
 80041f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <MX_ADC1_Init+0xb4>)
 80041f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80041fe:	4b25      	ldr	r3, [pc, #148]	; (8004294 <MX_ADC1_Init+0xb4>)
 8004200:	2201      	movs	r2, #1
 8004202:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004204:	4b23      	ldr	r3, [pc, #140]	; (8004294 <MX_ADC1_Init+0xb4>)
 8004206:	2200      	movs	r2, #0
 8004208:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800420a:	4b22      	ldr	r3, [pc, #136]	; (8004294 <MX_ADC1_Init+0xb4>)
 800420c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004210:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <MX_ADC1_Init+0xb4>)
 8004214:	2200      	movs	r2, #0
 8004216:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8004218:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <MX_ADC1_Init+0xb4>)
 800421a:	2203      	movs	r2, #3
 800421c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800421e:	481d      	ldr	r0, [pc, #116]	; (8004294 <MX_ADC1_Init+0xb4>)
 8004220:	f001 fbd0 	bl	80059c4 <HAL_ADC_Init>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800422a:	f000 f973 	bl	8004514 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800422e:	2306      	movs	r3, #6
 8004230:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004232:	2301      	movs	r3, #1
 8004234:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8004236:	2301      	movs	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800423a:	1d3b      	adds	r3, r7, #4
 800423c:	4619      	mov	r1, r3
 800423e:	4815      	ldr	r0, [pc, #84]	; (8004294 <MX_ADC1_Init+0xb4>)
 8004240:	f001 fe84 	bl	8005f4c <HAL_ADC_ConfigChannel>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800424a:	f000 f963 	bl	8004514 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800424e:	2304      	movs	r3, #4
 8004250:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004252:	2302      	movs	r3, #2
 8004254:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004256:	1d3b      	adds	r3, r7, #4
 8004258:	4619      	mov	r1, r3
 800425a:	480e      	ldr	r0, [pc, #56]	; (8004294 <MX_ADC1_Init+0xb4>)
 800425c:	f001 fe76 	bl	8005f4c <HAL_ADC_ConfigChannel>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8004266:	f000 f955 	bl	8004514 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800426a:	2310      	movs	r3, #16
 800426c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800426e:	2303      	movs	r3, #3
 8004270:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8004272:	2304      	movs	r3, #4
 8004274:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004276:	1d3b      	adds	r3, r7, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4806      	ldr	r0, [pc, #24]	; (8004294 <MX_ADC1_Init+0xb4>)
 800427c:	f001 fe66 	bl	8005f4c <HAL_ADC_ConfigChannel>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8004286:	f000 f945 	bl	8004514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	200006a0 	.word	0x200006a0
 8004298:	40012400 	.word	0x40012400

0800429c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <MX_RTC_Init+0x30>)
 80042a2:	4a0b      	ldr	r2, [pc, #44]	; (80042d0 <MX_RTC_Init+0x34>)
 80042a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <MX_RTC_Init+0x30>)
 80042a8:	f04f 32ff 	mov.w	r2, #4294967295
 80042ac:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80042ae:	4b07      	ldr	r3, [pc, #28]	; (80042cc <MX_RTC_Init+0x30>)
 80042b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042b4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80042b6:	4805      	ldr	r0, [pc, #20]	; (80042cc <MX_RTC_Init+0x30>)
 80042b8:	f003 f8e2 	bl	8007480 <HAL_RTC_Init>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80042c2:	f000 f927 	bl	8004514 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000714 	.word	0x20000714
 80042d0:	40002800 	.word	0x40002800

080042d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042da:	f107 0310 	add.w	r3, r7, #16
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80042e4:	463b      	mov	r3, r7
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	605a      	str	r2, [r3, #4]
 80042ec:	609a      	str	r2, [r3, #8]
 80042ee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042f0:	4b20      	ldr	r3, [pc, #128]	; (8004374 <MX_TIM3_Init+0xa0>)
 80042f2:	4a21      	ldr	r2, [pc, #132]	; (8004378 <MX_TIM3_Init+0xa4>)
 80042f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80042f6:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <MX_TIM3_Init+0xa0>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <MX_TIM3_Init+0xa0>)
 80042fe:	2200      	movs	r2, #0
 8004300:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004302:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <MX_TIM3_Init+0xa0>)
 8004304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004308:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800430a:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <MX_TIM3_Init+0xa0>)
 800430c:	2200      	movs	r2, #0
 800430e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004310:	4b18      	ldr	r3, [pc, #96]	; (8004374 <MX_TIM3_Init+0xa0>)
 8004312:	2200      	movs	r2, #0
 8004314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004316:	4817      	ldr	r0, [pc, #92]	; (8004374 <MX_TIM3_Init+0xa0>)
 8004318:	f003 fa9e 	bl	8007858 <HAL_TIM_IC_Init>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004322:	f000 f8f7 	bl	8004514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800432e:	f107 0310 	add.w	r3, r7, #16
 8004332:	4619      	mov	r1, r3
 8004334:	480f      	ldr	r0, [pc, #60]	; (8004374 <MX_TIM3_Init+0xa0>)
 8004336:	f004 f977 	bl	8008628 <HAL_TIMEx_MasterConfigSynchronization>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004340:	f000 f8e8 	bl	8004514 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004344:	2300      	movs	r3, #0
 8004346:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004348:	2301      	movs	r3, #1
 800434a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800434c:	2300      	movs	r3, #0
 800434e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004354:	463b      	mov	r3, r7
 8004356:	2208      	movs	r2, #8
 8004358:	4619      	mov	r1, r3
 800435a:	4806      	ldr	r0, [pc, #24]	; (8004374 <MX_TIM3_Init+0xa0>)
 800435c:	f003 fd82 	bl	8007e64 <HAL_TIM_IC_ConfigChannel>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004366:	f000 f8d5 	bl	8004514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800436a:	bf00      	nop
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000658 	.word	0x20000658
 8004378:	40000400 	.word	0x40000400

0800437c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004382:	f107 0308 	add.w	r3, r7, #8
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	605a      	str	r2, [r3, #4]
 800438c:	609a      	str	r2, [r3, #8]
 800438e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004390:	463b      	mov	r3, r7
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004398:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <MX_TIM4_Init+0x94>)
 800439a:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <MX_TIM4_Init+0x98>)
 800439c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 800439e:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <MX_TIM4_Init+0x94>)
 80043a0:	2207      	movs	r2, #7
 80043a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043a4:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <MX_TIM4_Init+0x94>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80043aa:	4b19      	ldr	r3, [pc, #100]	; (8004410 <MX_TIM4_Init+0x94>)
 80043ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043b2:	4b17      	ldr	r3, [pc, #92]	; (8004410 <MX_TIM4_Init+0x94>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043b8:	4b15      	ldr	r3, [pc, #84]	; (8004410 <MX_TIM4_Init+0x94>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80043be:	4814      	ldr	r0, [pc, #80]	; (8004410 <MX_TIM4_Init+0x94>)
 80043c0:	f003 f9a8 	bl	8007714 <HAL_TIM_Base_Init>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80043ca:	f000 f8a3 	bl	8004514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80043d4:	f107 0308 	add.w	r3, r7, #8
 80043d8:	4619      	mov	r1, r3
 80043da:	480d      	ldr	r0, [pc, #52]	; (8004410 <MX_TIM4_Init+0x94>)
 80043dc:	f003 fdd6 	bl	8007f8c <HAL_TIM_ConfigClockSource>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80043e6:	f000 f895 	bl	8004514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ee:	2300      	movs	r3, #0
 80043f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80043f2:	463b      	mov	r3, r7
 80043f4:	4619      	mov	r1, r3
 80043f6:	4806      	ldr	r0, [pc, #24]	; (8004410 <MX_TIM4_Init+0x94>)
 80043f8:	f004 f916 	bl	8008628 <HAL_TIMEx_MasterConfigSynchronization>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004402:	f000 f887 	bl	8004514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004406:	bf00      	nop
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000610 	.word	0x20000610
 8004414:	40000800 	.word	0x40000800

08004418 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800441c:	4b11      	ldr	r3, [pc, #68]	; (8004464 <MX_USART1_UART_Init+0x4c>)
 800441e:	4a12      	ldr	r2, [pc, #72]	; (8004468 <MX_USART1_UART_Init+0x50>)
 8004420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <MX_USART1_UART_Init+0x4c>)
 8004424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800442a:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <MX_USART1_UART_Init+0x4c>)
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004430:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <MX_USART1_UART_Init+0x4c>)
 8004432:	2200      	movs	r2, #0
 8004434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <MX_USART1_UART_Init+0x4c>)
 8004438:	2200      	movs	r2, #0
 800443a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800443c:	4b09      	ldr	r3, [pc, #36]	; (8004464 <MX_USART1_UART_Init+0x4c>)
 800443e:	220c      	movs	r2, #12
 8004440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <MX_USART1_UART_Init+0x4c>)
 8004444:	2200      	movs	r2, #0
 8004446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <MX_USART1_UART_Init+0x4c>)
 800444a:	2200      	movs	r2, #0
 800444c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800444e:	4805      	ldr	r0, [pc, #20]	; (8004464 <MX_USART1_UART_Init+0x4c>)
 8004450:	f004 f95a 	bl	8008708 <HAL_UART_Init>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800445a:	f000 f85b 	bl	8004514 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800445e:	bf00      	nop
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	200006d0 	.word	0x200006d0
 8004468:	40013800 	.word	0x40013800

0800446c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004472:	f107 0308 	add.w	r3, r7, #8
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	605a      	str	r2, [r3, #4]
 800447c:	609a      	str	r2, [r3, #8]
 800447e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004480:	4b21      	ldr	r3, [pc, #132]	; (8004508 <MX_GPIO_Init+0x9c>)
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	4a20      	ldr	r2, [pc, #128]	; (8004508 <MX_GPIO_Init+0x9c>)
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	6193      	str	r3, [r2, #24]
 800448c:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <MX_GPIO_Init+0x9c>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004498:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <MX_GPIO_Init+0x9c>)
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	4a1a      	ldr	r2, [pc, #104]	; (8004508 <MX_GPIO_Init+0x9c>)
 800449e:	f043 0308 	orr.w	r3, r3, #8
 80044a2:	6193      	str	r3, [r2, #24]
 80044a4:	4b18      	ldr	r3, [pc, #96]	; (8004508 <MX_GPIO_Init+0x9c>)
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CH4_VDD_Pin|NH3_VDD_Pin, GPIO_PIN_RESET);
 80044b0:	2200      	movs	r2, #0
 80044b2:	21a0      	movs	r1, #160	; 0xa0
 80044b4:	4815      	ldr	r0, [pc, #84]	; (800450c <MX_GPIO_Init+0xa0>)
 80044b6:	f002 fa1f 	bl	80068f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US_TRIGGER_Pin|US_VDD_Pin|GSM_PWRKEY_Pin|GSM_VDD_Pin, GPIO_PIN_RESET);
 80044ba:	2200      	movs	r2, #0
 80044bc:	f240 412a 	movw	r1, #1066	; 0x42a
 80044c0:	4813      	ldr	r0, [pc, #76]	; (8004510 <MX_GPIO_Init+0xa4>)
 80044c2:	f002 fa19 	bl	80068f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CH4_VDD_Pin NH3_VDD_Pin */
  GPIO_InitStruct.Pin = CH4_VDD_Pin|NH3_VDD_Pin;
 80044c6:	23a0      	movs	r3, #160	; 0xa0
 80044c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ca:	2301      	movs	r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d2:	2302      	movs	r3, #2
 80044d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d6:	f107 0308 	add.w	r3, r7, #8
 80044da:	4619      	mov	r1, r3
 80044dc:	480b      	ldr	r0, [pc, #44]	; (800450c <MX_GPIO_Init+0xa0>)
 80044de:	f002 f887 	bl	80065f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : US_TRIGGER_Pin US_VDD_Pin GSM_PWRKEY_Pin GSM_VDD_Pin */
  GPIO_InitStruct.Pin = US_TRIGGER_Pin|US_VDD_Pin|GSM_PWRKEY_Pin|GSM_VDD_Pin;
 80044e2:	f240 432a 	movw	r3, #1066	; 0x42a
 80044e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e8:	2301      	movs	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f0:	2302      	movs	r3, #2
 80044f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f4:	f107 0308 	add.w	r3, r7, #8
 80044f8:	4619      	mov	r1, r3
 80044fa:	4805      	ldr	r0, [pc, #20]	; (8004510 <MX_GPIO_Init+0xa4>)
 80044fc:	f002 f878 	bl	80065f0 <HAL_GPIO_Init>

}
 8004500:	bf00      	nop
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000
 800450c:	40010800 	.word	0x40010800
 8004510:	40010c00 	.word	0x40010c00

08004514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004518:	b672      	cpsid	i
}
 800451a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800451c:	e7fe      	b.n	800451c <Error_Handler+0x8>
	...

08004520 <nh3Sensor_init>:




void nh3Sensor_init(ADC_HandleTypeDef *hadc)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
	//ADC
	nh3Hadc = hadc;
 8004528:	4a08      	ldr	r2, [pc, #32]	; (800454c <nh3Sensor_init+0x2c>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&nh3Sensor_state, __nh3Sensor_idle);
 800452e:	2100      	movs	r1, #0
 8004530:	4807      	ldr	r0, [pc, #28]	; (8004550 <nh3Sensor_init+0x30>)
 8004532:	f7fd fb15 	bl	8001b60 <fsmManager_init>

	//Flags
	flags_nh3Sensor.dword = 0;
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <nh3Sensor_init+0x34>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
	flags_nh3SensorError.dword = 0;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <nh3Sensor_init+0x38>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000548 	.word	0x20000548
 8004550:	20000550 	.word	0x20000550
 8004554:	2000055c 	.word	0x2000055c
 8004558:	20000560 	.word	0x20000560

0800455c <nh3Sensor_handler>:

void nh3Sensor_handler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&nh3Sensor_state)) {
 8004560:	4833      	ldr	r0, [pc, #204]	; (8004630 <nh3Sensor_handler+0xd4>)
 8004562:	f7fd fb2a 	bl	8001bba <fsmManager_getState>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <nh3Sensor_handler+0x16>
 800456c:	2b01      	cmp	r3, #1
 800456e:	d028      	beq.n	80045c2 <nh3Sensor_handler+0x66>

				flags_nh3Sensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 8004570:	e05c      	b.n	800462c <nh3Sensor_handler+0xd0>
			if(fsmManager_isStateIn(&nh3Sensor_state)) {
 8004572:	482f      	ldr	r0, [pc, #188]	; (8004630 <nh3Sensor_handler+0xd4>)
 8004574:	f7fd fb2c 	bl	8001bd0 <fsmManager_isStateIn>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <nh3Sensor_handler+0x32>
				fsmManager_stateIn(&nh3Sensor_state);
 800457e:	482c      	ldr	r0, [pc, #176]	; (8004630 <nh3Sensor_handler+0xd4>)
 8004580:	f7fd fb3c 	bl	8001bfc <fsmManager_stateIn>
				flags_nh3Sensor.bits.isMeasuring = 0;
 8004584:	4a2b      	ldr	r2, [pc, #172]	; (8004634 <nh3Sensor_handler+0xd8>)
 8004586:	7853      	ldrb	r3, [r2, #1]
 8004588:	f36f 03c3 	bfc	r3, #3, #1
 800458c:	7053      	strb	r3, [r2, #1]
			if(flags_nh3Sensor.bits.requestMeasure) {
 800458e:	4b29      	ldr	r3, [pc, #164]	; (8004634 <nh3Sensor_handler+0xd8>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <nh3Sensor_handler+0x52>
				flags_nh3Sensor.bits.isMeasuring = 1;
 800459c:	4a25      	ldr	r2, [pc, #148]	; (8004634 <nh3Sensor_handler+0xd8>)
 800459e:	7853      	ldrb	r3, [r2, #1]
 80045a0:	f043 0308 	orr.w	r3, r3, #8
 80045a4:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&nh3Sensor_state,__nh3Sensor_getAmmoniac);
 80045a6:	2101      	movs	r1, #1
 80045a8:	4821      	ldr	r0, [pc, #132]	; (8004630 <nh3Sensor_handler+0xd4>)
 80045aa:	f7fd faef 	bl	8001b8c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&nh3Sensor_state)) {
 80045ae:	4820      	ldr	r0, [pc, #128]	; (8004630 <nh3Sensor_handler+0xd4>)
 80045b0:	f7fd fb19 	bl	8001be6 <fsmManager_isStateOut>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d035      	beq.n	8004626 <nh3Sensor_handler+0xca>
				fsmManager_stateOut(&nh3Sensor_state);
 80045ba:	481d      	ldr	r0, [pc, #116]	; (8004630 <nh3Sensor_handler+0xd4>)
 80045bc:	f7fd fb2d 	bl	8001c1a <fsmManager_stateOut>
			break;
 80045c0:	e031      	b.n	8004626 <nh3Sensor_handler+0xca>
			if(fsmManager_isStateIn(&nh3Sensor_state)) {
 80045c2:	481b      	ldr	r0, [pc, #108]	; (8004630 <nh3Sensor_handler+0xd4>)
 80045c4:	f7fd fb04 	bl	8001bd0 <fsmManager_isStateIn>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <nh3Sensor_handler+0x7c>
				fsmManager_stateIn(&nh3Sensor_state);
 80045ce:	4818      	ldr	r0, [pc, #96]	; (8004630 <nh3Sensor_handler+0xd4>)
 80045d0:	f7fd fb14 	bl	8001bfc <fsmManager_stateIn>
				nh3_adcStart();
 80045d4:	f000 f87e 	bl	80046d4 <nh3_adcStart>
			nh3Ppm = (float)nh3_adcGetValue();
 80045d8:	f000 f890 	bl	80046fc <nh3_adcGetValue>
 80045dc:	4603      	mov	r3, r0
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fc fa8a 	bl	8000af8 <__aeabi_ui2f>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4a14      	ldr	r2, [pc, #80]	; (8004638 <nh3Sensor_handler+0xdc>)
 80045e8:	6013      	str	r3, [r2, #0]
			if(nh3SensorCallback != NULL) {
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <nh3Sensor_handler+0xe0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d004      	beq.n	80045fc <nh3Sensor_handler+0xa0>
				nh3SensorCallback(__nh3SensorEvent_okMeasuring, (float *) &nh3Ppm);
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <nh3Sensor_handler+0xe0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4910      	ldr	r1, [pc, #64]	; (8004638 <nh3Sensor_handler+0xdc>)
 80045f8:	2000      	movs	r0, #0
 80045fa:	4798      	blx	r3
			fsmManager_gotoState(&nh3Sensor_state,__nh3Sensor_idle);
 80045fc:	2100      	movs	r1, #0
 80045fe:	480c      	ldr	r0, [pc, #48]	; (8004630 <nh3Sensor_handler+0xd4>)
 8004600:	f7fd fac4 	bl	8001b8c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&nh3Sensor_state)) {
 8004604:	480a      	ldr	r0, [pc, #40]	; (8004630 <nh3Sensor_handler+0xd4>)
 8004606:	f7fd faee 	bl	8001be6 <fsmManager_isStateOut>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00c      	beq.n	800462a <nh3Sensor_handler+0xce>
				fsmManager_stateOut(&nh3Sensor_state);
 8004610:	4807      	ldr	r0, [pc, #28]	; (8004630 <nh3Sensor_handler+0xd4>)
 8004612:	f7fd fb02 	bl	8001c1a <fsmManager_stateOut>
				nh3_adcStop();
 8004616:	f000 f87d 	bl	8004714 <nh3_adcStop>
				flags_nh3Sensor.bits.requestMeasure = 0;
 800461a:	4a06      	ldr	r2, [pc, #24]	; (8004634 <nh3Sensor_handler+0xd8>)
 800461c:	7813      	ldrb	r3, [r2, #0]
 800461e:	f36f 0300 	bfc	r3, #0, #1
 8004622:	7013      	strb	r3, [r2, #0]
			break;
 8004624:	e001      	b.n	800462a <nh3Sensor_handler+0xce>
			break;
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <nh3Sensor_handler+0xd0>
			break;
 800462a:	bf00      	nop
}
 800462c:	bf00      	nop
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000550 	.word	0x20000550
 8004634:	2000055c 	.word	0x2000055c
 8004638:	2000054c 	.word	0x2000054c
 800463c:	20000564 	.word	0x20000564

08004640 <nh3Sensor_measure>:

void nh3Sensor_measure(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
	flags_nh3Sensor.bits.requestMeasure = 1;
 8004644:	4a04      	ldr	r2, [pc, #16]	; (8004658 <nh3Sensor_measure+0x18>)
 8004646:	7813      	ldrb	r3, [r2, #0]
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	7013      	strb	r3, [r2, #0]
}
 800464e:	bf00      	nop
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	2000055c 	.word	0x2000055c

0800465c <nh3Sensor_setCallback>:
{
	return flags_nh3Sensor.bits.isMeasuring;
}

void nh3Sensor_setCallback(void (*cb)(_nh3Sensor_event, void*))
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	nh3SensorCallback = cb;
 8004664:	4a03      	ldr	r2, [pc, #12]	; (8004674 <nh3Sensor_setCallback+0x18>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6013      	str	r3, [r2, #0]
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	20000564 	.word	0x20000564

08004678 <nh3Sensor_powerOn>:

void nh3Sensor_powerOn(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
	pinNh3Vdd_write(1);
 800467c:	2001      	movs	r0, #1
 800467e:	f000 f855 	bl	800472c <pinNh3Vdd_write>
}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}

08004686 <nh3Sensor_powerOff>:

void nh3Sensor_powerOff(void)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	af00      	add	r7, sp, #0
	pinNh3Vdd_write(0);
 800468a:	2000      	movs	r0, #0
 800468c:	f000 f84e 	bl	800472c <pinNh3Vdd_write>
}
 8004690:	bf00      	nop
 8004692:	bd80      	pop	{r7, pc}

08004694 <ADC_Select_CHNh3>:



static void ADC_Select_CHNh3(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800469a:	1d3b      	adds	r3, r7, #4
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_6;
 80046a4:	2306      	movs	r3, #6
 80046a6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 80046a8:	2301      	movs	r3, #1
 80046aa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80046ac:	2301      	movs	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(nh3Hadc, &sConfig) != HAL_OK) {
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <ADC_Select_CHNh3+0x3c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	1d3a      	adds	r2, r7, #4
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 fc47 	bl	8005f4c <HAL_ADC_ConfigChannel>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <ADC_Select_CHNh3+0x34>
		Error_Handler();
 80046c4:	f7ff ff26 	bl	8004514 <Error_Handler>
	}
}
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000548 	.word	0x20000548

080046d4 <nh3_adcStart>:

static void nh3_adcStart(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
	ADC_Select_CHNh3();
 80046d8:	f7ff ffdc 	bl	8004694 <ADC_Select_CHNh3>
	HAL_ADC_Start(nh3Hadc);
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <nh3_adcStart+0x24>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f001 fa47 	bl	8005b74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(nh3Hadc, 100);
 80046e6:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <nh3_adcStart+0x24>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2164      	movs	r1, #100	; 0x64
 80046ec:	4618      	mov	r0, r3
 80046ee:	f001 fb1b 	bl	8005d28 <HAL_ADC_PollForConversion>
}
 80046f2:	bf00      	nop
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000548 	.word	0x20000548

080046fc <nh3_adcGetValue>:

static uint32_t nh3_adcGetValue(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(nh3Hadc);
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <nh3_adcGetValue+0x14>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f001 fc15 	bl	8005f34 <HAL_ADC_GetValue>
 800470a:	4603      	mov	r3, r0
}
 800470c:	4618      	mov	r0, r3
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000548 	.word	0x20000548

08004714 <nh3_adcStop>:

static void nh3_adcStop(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(nh3Hadc);
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <nh3_adcStop+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f001 fad7 	bl	8005cd0 <HAL_ADC_Stop>
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000548 	.word	0x20000548

0800472c <pinNh3Vdd_write>:

static void pinNh3Vdd_write(uint8_t state)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(, , state);
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <nvm_init>:




void nvm_init(RTC_HandleTypeDef *hrtc)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	//RTC
	nvmHrtc = hrtc;
 8004748:	4a03      	ldr	r2, [pc, #12]	; (8004758 <nvm_init+0x18>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6013      	str	r3, [r2, #0]
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr
 8004758:	20000568 	.word	0x20000568

0800475c <nvm_readWord>:

uint32_t nvm_readWord(uint32_t nReg)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	return RTC_Read_BackupRegister(nReg);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f813 	bl	8004790 <RTC_Read_BackupRegister>
 800476a:	4603      	mov	r3, r0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <nvm_writeWord>:

	return (wData & (1 << pos)) >> pos;
}

void nvm_writeWord(uint32_t nReg, uint32_t wData)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
	RTC_WriteWord_BackupRegister(nReg, wData);
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f817 	bl	80047b4 <RTC_WriteWord_BackupRegister>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <RTC_Read_BackupRegister>:




static uint32_t RTC_Read_BackupRegister(uint32_t backupRegister)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
    return HAL_RTCEx_BKUPRead(nvmHrtc, backupRegister);
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <RTC_Read_BackupRegister+0x20>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4618      	mov	r0, r3
 80047a0:	f002 ff9c 	bl	80076dc <HAL_RTCEx_BKUPRead>
 80047a4:	4603      	mov	r3, r0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000568 	.word	0x20000568

080047b4 <RTC_WriteWord_BackupRegister>:

static void RTC_WriteWord_BackupRegister(uint32_t backupRegister, uint32_t wData)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
    HAL_PWR_EnableBkUpAccess();
 80047be:	f002 f8b3 	bl	8006928 <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(nvmHrtc, backupRegister, (uint16_t) wData);
 80047c2:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <RTC_WriteWord_BackupRegister+0x2c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	b292      	uxth	r2, r2
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f002 ff6b 	bl	80076a8 <HAL_RTCEx_BKUPWrite>
    HAL_PWR_DisableBkUpAccess();
 80047d2:	f002 f8b5 	bl	8006940 <HAL_PWR_DisableBkUpAccess>
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000568 	.word	0x20000568

080047e4 <softTimer_init>:




void softTimer_init(TIM_HandleTypeDef *htim)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	timerHtim = htim;
 80047ec:	4a04      	ldr	r2, [pc, #16]	; (8004800 <softTimer_init+0x1c>)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f002 ffde 	bl	80077b4 <HAL_TIM_Base_Start_IT>
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	2000056c 	.word	0x2000056c

08004804 <softTimer_start>:

void softTimer_start(SoftTimer_t* timer, uint32_t interval)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
	timer->state = state_running;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	721a      	strb	r2, [r3, #8]
	timer->start = softTimer_getTicks();
 8004814:	f000 f858 	bl	80048c8 <softTimer_getTicks>
 8004818:	4602      	mov	r2, r0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	601a      	str	r2, [r3, #0]
	timer->interval = interval;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	605a      	str	r2, [r3, #4]
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <softTimer_expired>:

uint8_t softTimer_expired(SoftTimer_t* timer)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	73fb      	strb	r3, [r7, #15]

	if(timer->state == state_running) {
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7a1b      	ldrb	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d121      	bne.n	8004884 <softTimer_expired+0x58>
		if(systemTicks >= timer->start)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b12      	ldr	r3, [pc, #72]	; (8004890 <softTimer_expired+0x64>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d80d      	bhi.n	8004868 <softTimer_expired+0x3c>
			ret = ((systemTicks - timer->start) > timer->interval) ? 1 : 0;
 800484c:	4b10      	ldr	r3, [pc, #64]	; (8004890 <softTimer_expired+0x64>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	1ad2      	subs	r2, r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf8c      	ite	hi
 800485e:	2301      	movhi	r3, #1
 8004860:	2300      	movls	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	73fb      	strb	r3, [r7, #15]
 8004866:	e00d      	b.n	8004884 <softTimer_expired+0x58>
		else
			ret = (((0xFFFFFFFF - timer->start)+systemTicks) > timer->interval) ? 1 : 0;
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <softTimer_expired+0x64>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	1e5a      	subs	r2, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	429a      	cmp	r2, r3
 800487a:	bf8c      	ite	hi
 800487c:	2301      	movhi	r3, #1
 800487e:	2300      	movls	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	20000570 	.word	0x20000570

08004894 <softTimer_stop>:

void softTimer_stop(SoftTimer_t* timer)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	timer->state = state_stopped;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	721a      	strb	r2, [r3, #8]
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <softTimer_handler>:

void softTimer_handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
	systemTicks++;
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <softTimer_handler+0x18>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3301      	adds	r3, #1
 80048b6:	4a03      	ldr	r2, [pc, #12]	; (80048c4 <softTimer_handler+0x18>)
 80048b8:	6013      	str	r3, [r2, #0]
}
 80048ba:	bf00      	nop
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000570 	.word	0x20000570

080048c8 <softTimer_getTicks>:

uint32_t softTimer_getTicks(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
	return systemTicks;
 80048cc:	4b02      	ldr	r3, [pc, #8]	; (80048d8 <softTimer_getTicks+0x10>)
 80048ce:	681b      	ldr	r3, [r3, #0]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr
 80048d8:	20000570 	.word	0x20000570

080048dc <softTimer_periodElapsedCallback>:




void softTimer_periodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == timerHtim->Instance) {
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <softTimer_periodElapsedCallback+0x24>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d101      	bne.n	80048f6 <softTimer_periodElapsedCallback+0x1a>
		softTimer_handler();
 80048f2:	f7ff ffdb 	bl	80048ac <softTimer_handler>
	}
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	2000056c 	.word	0x2000056c

08004904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800490a:	4b15      	ldr	r3, [pc, #84]	; (8004960 <HAL_MspInit+0x5c>)
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	4a14      	ldr	r2, [pc, #80]	; (8004960 <HAL_MspInit+0x5c>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6193      	str	r3, [r2, #24]
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_MspInit+0x5c>)
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <HAL_MspInit+0x5c>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <HAL_MspInit+0x5c>)
 8004928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492c:	61d3      	str	r3, [r2, #28]
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <HAL_MspInit+0x5c>)
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <HAL_MspInit+0x60>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	4a04      	ldr	r2, [pc, #16]	; (8004964 <HAL_MspInit+0x60>)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004956:	bf00      	nop
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr
 8004960:	40021000 	.word	0x40021000
 8004964:	40010000 	.word	0x40010000

08004968 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004970:	f107 0310 	add.w	r3, r7, #16
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <HAL_ADC_MspInit+0x6c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d121      	bne.n	80049cc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_ADC_MspInit+0x70>)
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	4a12      	ldr	r2, [pc, #72]	; (80049d8 <HAL_ADC_MspInit+0x70>)
 800498e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004992:	6193      	str	r3, [r2, #24]
 8004994:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <HAL_ADC_MspInit+0x70>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <HAL_ADC_MspInit+0x70>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	4a0c      	ldr	r2, [pc, #48]	; (80049d8 <HAL_ADC_MspInit+0x70>)
 80049a6:	f043 0304 	orr.w	r3, r3, #4
 80049aa:	6193      	str	r3, [r2, #24]
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <HAL_ADC_MspInit+0x70>)
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = CH4_ADC_Pin|NH3_ADC_Pin;
 80049b8:	2350      	movs	r3, #80	; 0x50
 80049ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049bc:	2303      	movs	r3, #3
 80049be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c0:	f107 0310 	add.w	r3, r7, #16
 80049c4:	4619      	mov	r1, r3
 80049c6:	4805      	ldr	r0, [pc, #20]	; (80049dc <HAL_ADC_MspInit+0x74>)
 80049c8:	f001 fe12 	bl	80065f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80049cc:	bf00      	nop
 80049ce:	3720      	adds	r7, #32
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40012400 	.word	0x40012400
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40010800 	.word	0x40010800

080049e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a0b      	ldr	r2, [pc, #44]	; (8004a1c <HAL_RTC_MspInit+0x3c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d110      	bne.n	8004a14 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80049f2:	f001 ff99 	bl	8006928 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <HAL_RTC_MspInit+0x40>)
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <HAL_RTC_MspInit+0x40>)
 80049fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a00:	61d3      	str	r3, [r2, #28]
 8004a02:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <HAL_RTC_MspInit+0x40>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RTC_MspInit+0x44>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40002800 	.word	0x40002800
 8004a20:	40021000 	.word	0x40021000
 8004a24:	4242043c 	.word	0x4242043c

08004a28 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a30:	f107 0310 	add.w	r3, r7, #16
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	605a      	str	r2, [r3, #4]
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a19      	ldr	r2, [pc, #100]	; (8004aa8 <HAL_TIM_IC_MspInit+0x80>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d12b      	bne.n	8004aa0 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a48:	4b18      	ldr	r3, [pc, #96]	; (8004aac <HAL_TIM_IC_MspInit+0x84>)
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	4a17      	ldr	r2, [pc, #92]	; (8004aac <HAL_TIM_IC_MspInit+0x84>)
 8004a4e:	f043 0302 	orr.w	r3, r3, #2
 8004a52:	61d3      	str	r3, [r2, #28]
 8004a54:	4b15      	ldr	r3, [pc, #84]	; (8004aac <HAL_TIM_IC_MspInit+0x84>)
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a60:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_TIM_IC_MspInit+0x84>)
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	4a11      	ldr	r2, [pc, #68]	; (8004aac <HAL_TIM_IC_MspInit+0x84>)
 8004a66:	f043 0308 	orr.w	r3, r3, #8
 8004a6a:	6193      	str	r3, [r2, #24]
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <HAL_TIM_IC_MspInit+0x84>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = US_ECHO_Pin;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 8004a84:	f107 0310 	add.w	r3, r7, #16
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4809      	ldr	r0, [pc, #36]	; (8004ab0 <HAL_TIM_IC_MspInit+0x88>)
 8004a8c:	f001 fdb0 	bl	80065f0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004a90:	2200      	movs	r2, #0
 8004a92:	2100      	movs	r1, #0
 8004a94:	201d      	movs	r0, #29
 8004a96:	f001 fcc4 	bl	8006422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a9a:	201d      	movs	r0, #29
 8004a9c:	f001 fcdd 	bl	800645a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004aa0:	bf00      	nop
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	40010c00 	.word	0x40010c00

08004ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a0d      	ldr	r2, [pc, #52]	; (8004af8 <HAL_TIM_Base_MspInit+0x44>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d113      	bne.n	8004aee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <HAL_TIM_Base_MspInit+0x48>)
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	4a0c      	ldr	r2, [pc, #48]	; (8004afc <HAL_TIM_Base_MspInit+0x48>)
 8004acc:	f043 0304 	orr.w	r3, r3, #4
 8004ad0:	61d3      	str	r3, [r2, #28]
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <HAL_TIM_Base_MspInit+0x48>)
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	201e      	movs	r0, #30
 8004ae4:	f001 fc9d 	bl	8006422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ae8:	201e      	movs	r0, #30
 8004aea:	f001 fcb6 	bl	800645a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40000800 	.word	0x40000800
 8004afc:	40021000 	.word	0x40021000

08004b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b08:	f107 0310 	add.w	r3, r7, #16
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a20      	ldr	r2, [pc, #128]	; (8004b9c <HAL_UART_MspInit+0x9c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d139      	bne.n	8004b94 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b20:	4b1f      	ldr	r3, [pc, #124]	; (8004ba0 <HAL_UART_MspInit+0xa0>)
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <HAL_UART_MspInit+0xa0>)
 8004b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b2a:	6193      	str	r3, [r2, #24]
 8004b2c:	4b1c      	ldr	r3, [pc, #112]	; (8004ba0 <HAL_UART_MspInit+0xa0>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b38:	4b19      	ldr	r3, [pc, #100]	; (8004ba0 <HAL_UART_MspInit+0xa0>)
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <HAL_UART_MspInit+0xa0>)
 8004b3e:	f043 0304 	orr.w	r3, r3, #4
 8004b42:	6193      	str	r3, [r2, #24]
 8004b44:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <HAL_UART_MspInit+0xa0>)
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GSM_RX_Pin;
 8004b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b56:	2302      	movs	r3, #2
 8004b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 8004b5e:	f107 0310 	add.w	r3, r7, #16
 8004b62:	4619      	mov	r1, r3
 8004b64:	480f      	ldr	r0, [pc, #60]	; (8004ba4 <HAL_UART_MspInit+0xa4>)
 8004b66:	f001 fd43 	bl	80065f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_TX_Pin;
 8004b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 8004b78:	f107 0310 	add.w	r3, r7, #16
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4809      	ldr	r0, [pc, #36]	; (8004ba4 <HAL_UART_MspInit+0xa4>)
 8004b80:	f001 fd36 	bl	80065f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004b84:	2200      	movs	r2, #0
 8004b86:	2100      	movs	r1, #0
 8004b88:	2025      	movs	r0, #37	; 0x25
 8004b8a:	f001 fc4a 	bl	8006422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b8e:	2025      	movs	r0, #37	; 0x25
 8004b90:	f001 fc63 	bl	800645a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004b94:	bf00      	nop
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40013800 	.word	0x40013800
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	40010800 	.word	0x40010800

08004ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bac:	e7fe      	b.n	8004bac <NMI_Handler+0x4>

08004bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bb2:	e7fe      	b.n	8004bb2 <HardFault_Handler+0x4>

08004bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bb8:	e7fe      	b.n	8004bb8 <MemManage_Handler+0x4>

08004bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bbe:	e7fe      	b.n	8004bbe <BusFault_Handler+0x4>

08004bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bc4:	e7fe      	b.n	8004bc4 <UsageFault_Handler+0x4>

08004bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bca:	bf00      	nop
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr

08004bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr

08004bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bee:	f000 fecd 	bl	800598c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004bfc:	4802      	ldr	r0, [pc, #8]	; (8004c08 <TIM3_IRQHandler+0x10>)
 8004bfe:	f003 f829 	bl	8007c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000658 	.word	0x20000658

08004c0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004c10:	4802      	ldr	r0, [pc, #8]	; (8004c1c <TIM4_IRQHandler+0x10>)
 8004c12:	f003 f81f 	bl	8007c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000610 	.word	0x20000610

08004c20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c24:	4802      	ldr	r0, [pc, #8]	; (8004c30 <USART1_IRQHandler+0x10>)
 8004c26:	f003 fe31 	bl	800888c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c2a:	bf00      	nop
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	200006d0 	.word	0x200006d0

08004c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c38:	bf00      	nop
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr

08004c40 <tempSensor_init>:




void tempSensor_init(ADC_HandleTypeDef *hadc)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	//ADC
	tempHadc = hadc;
 8004c48:	4a08      	ldr	r2, [pc, #32]	; (8004c6c <tempSensor_init+0x2c>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&tempSensor_state, __tempSensor_idle);
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4807      	ldr	r0, [pc, #28]	; (8004c70 <tempSensor_init+0x30>)
 8004c52:	f7fc ff85 	bl	8001b60 <fsmManager_init>

	//Flags
	flags_tempSensor.dword = 0;
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <tempSensor_init+0x34>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
	flags_tempSensorError.dword = 0;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <tempSensor_init+0x38>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000574 	.word	0x20000574
 8004c70:	2000057c 	.word	0x2000057c
 8004c74:	20000588 	.word	0x20000588
 8004c78:	2000058c 	.word	0x2000058c
 8004c7c:	00000000 	.word	0x00000000

08004c80 <tempSensor_handler>:

void tempSensor_handler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&tempSensor_state)) {
 8004c84:	4856      	ldr	r0, [pc, #344]	; (8004de0 <tempSensor_handler+0x160>)
 8004c86:	f7fc ff98 	bl	8001bba <fsmManager_getState>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <tempSensor_handler+0x16>
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d028      	beq.n	8004ce6 <tempSensor_handler+0x66>

				flags_tempSensor.bits.requestMeasure = 0;
			}
			break;
	}
}
 8004c94:	e08f      	b.n	8004db6 <tempSensor_handler+0x136>
			if(fsmManager_isStateIn(&tempSensor_state)) {
 8004c96:	4852      	ldr	r0, [pc, #328]	; (8004de0 <tempSensor_handler+0x160>)
 8004c98:	f7fc ff9a 	bl	8001bd0 <fsmManager_isStateIn>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <tempSensor_handler+0x32>
				fsmManager_stateIn(&tempSensor_state);
 8004ca2:	484f      	ldr	r0, [pc, #316]	; (8004de0 <tempSensor_handler+0x160>)
 8004ca4:	f7fc ffaa 	bl	8001bfc <fsmManager_stateIn>
				flags_tempSensor.bits.isMeasuring = 0;
 8004ca8:	4a4e      	ldr	r2, [pc, #312]	; (8004de4 <tempSensor_handler+0x164>)
 8004caa:	7853      	ldrb	r3, [r2, #1]
 8004cac:	f36f 03c3 	bfc	r3, #3, #1
 8004cb0:	7053      	strb	r3, [r2, #1]
			if(flags_tempSensor.bits.requestMeasure) {
 8004cb2:	4b4c      	ldr	r3, [pc, #304]	; (8004de4 <tempSensor_handler+0x164>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <tempSensor_handler+0x52>
				flags_tempSensor.bits.isMeasuring = 1;
 8004cc0:	4a48      	ldr	r2, [pc, #288]	; (8004de4 <tempSensor_handler+0x164>)
 8004cc2:	7853      	ldrb	r3, [r2, #1]
 8004cc4:	f043 0308 	orr.w	r3, r3, #8
 8004cc8:	7053      	strb	r3, [r2, #1]
				fsmManager_gotoState(&tempSensor_state,__tempSensor_getTemperature);
 8004cca:	2101      	movs	r1, #1
 8004ccc:	4844      	ldr	r0, [pc, #272]	; (8004de0 <tempSensor_handler+0x160>)
 8004cce:	f7fc ff5d 	bl	8001b8c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&tempSensor_state)) {
 8004cd2:	4843      	ldr	r0, [pc, #268]	; (8004de0 <tempSensor_handler+0x160>)
 8004cd4:	f7fc ff87 	bl	8001be6 <fsmManager_isStateOut>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d068      	beq.n	8004db0 <tempSensor_handler+0x130>
				fsmManager_stateOut(&tempSensor_state);
 8004cde:	4840      	ldr	r0, [pc, #256]	; (8004de0 <tempSensor_handler+0x160>)
 8004ce0:	f7fc ff9b 	bl	8001c1a <fsmManager_stateOut>
			break;
 8004ce4:	e064      	b.n	8004db0 <tempSensor_handler+0x130>
			if(fsmManager_isStateIn(&tempSensor_state)) {
 8004ce6:	483e      	ldr	r0, [pc, #248]	; (8004de0 <tempSensor_handler+0x160>)
 8004ce8:	f7fc ff72 	bl	8001bd0 <fsmManager_isStateIn>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d004      	beq.n	8004cfc <tempSensor_handler+0x7c>
				fsmManager_stateIn(&tempSensor_state);
 8004cf2:	483b      	ldr	r0, [pc, #236]	; (8004de0 <tempSensor_handler+0x160>)
 8004cf4:	f7fc ff82 	bl	8001bfc <fsmManager_stateIn>
				temp_adcStart();
 8004cf8:	f000 f8b8 	bl	8004e6c <temp_adcStart>
			tCelcius = (3.3*((float)temp_adcGetValue())/4095 - V_25)/AVG_SLOPE + 25;
 8004cfc:	f000 f8ca 	bl	8004e94 <temp_adcGetValue>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fb fef8 	bl	8000af8 <__aeabi_ui2f>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb fb84 	bl	8000418 <__aeabi_f2d>
 8004d10:	a32b      	add	r3, pc, #172	; (adr r3, 8004dc0 <tempSensor_handler+0x140>)
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f7fb fbd7 	bl	80004c8 <__aeabi_dmul>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	a329      	add	r3, pc, #164	; (adr r3, 8004dc8 <tempSensor_handler+0x148>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f7fb fcf8 	bl	800071c <__aeabi_ddiv>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4610      	mov	r0, r2
 8004d32:	4619      	mov	r1, r3
 8004d34:	a326      	add	r3, pc, #152	; (adr r3, 8004dd0 <tempSensor_handler+0x150>)
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	f7fb fa0d 	bl	8000158 <__aeabi_dsub>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4610      	mov	r0, r2
 8004d44:	4619      	mov	r1, r3
 8004d46:	a324      	add	r3, pc, #144	; (adr r3, 8004dd8 <tempSensor_handler+0x158>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f7fb fce6 	bl	800071c <__aeabi_ddiv>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <tempSensor_handler+0x168>)
 8004d5e:	f7fb f9fd 	bl	800015c <__adddf3>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4610      	mov	r0, r2
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7fb fdbf 	bl	80008ec <__aeabi_d2f>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <tempSensor_handler+0x16c>)
 8004d72:	6013      	str	r3, [r2, #0]
			if(tempSensorCallback != NULL) {
 8004d74:	4b1e      	ldr	r3, [pc, #120]	; (8004df0 <tempSensor_handler+0x170>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d004      	beq.n	8004d86 <tempSensor_handler+0x106>
				tempSensorCallback(__tempSensorEvent_okMeasuring, (float *) &tCelcius);
 8004d7c:	4b1c      	ldr	r3, [pc, #112]	; (8004df0 <tempSensor_handler+0x170>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	491a      	ldr	r1, [pc, #104]	; (8004dec <tempSensor_handler+0x16c>)
 8004d82:	2000      	movs	r0, #0
 8004d84:	4798      	blx	r3
			fsmManager_gotoState(&tempSensor_state,__tempSensor_idle);
 8004d86:	2100      	movs	r1, #0
 8004d88:	4815      	ldr	r0, [pc, #84]	; (8004de0 <tempSensor_handler+0x160>)
 8004d8a:	f7fc feff 	bl	8001b8c <fsmManager_gotoState>
			if(fsmManager_isStateOut(&tempSensor_state)) {
 8004d8e:	4814      	ldr	r0, [pc, #80]	; (8004de0 <tempSensor_handler+0x160>)
 8004d90:	f7fc ff29 	bl	8001be6 <fsmManager_isStateOut>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <tempSensor_handler+0x134>
				fsmManager_stateOut(&tempSensor_state);
 8004d9a:	4811      	ldr	r0, [pc, #68]	; (8004de0 <tempSensor_handler+0x160>)
 8004d9c:	f7fc ff3d 	bl	8001c1a <fsmManager_stateOut>
				temp_adcStop();
 8004da0:	f000 f884 	bl	8004eac <temp_adcStop>
				flags_tempSensor.bits.requestMeasure = 0;
 8004da4:	4a0f      	ldr	r2, [pc, #60]	; (8004de4 <tempSensor_handler+0x164>)
 8004da6:	7813      	ldrb	r3, [r2, #0]
 8004da8:	f36f 0300 	bfc	r3, #0, #1
 8004dac:	7013      	strb	r3, [r2, #0]
			break;
 8004dae:	e001      	b.n	8004db4 <tempSensor_handler+0x134>
			break;
 8004db0:	bf00      	nop
 8004db2:	e000      	b.n	8004db6 <tempSensor_handler+0x136>
			break;
 8004db4:	bf00      	nop
}
 8004db6:	bf00      	nop
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	f3af 8000 	nop.w
 8004dc0:	66666666 	.word	0x66666666
 8004dc4:	400a6666 	.word	0x400a6666
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	40affe00 	.word	0x40affe00
 8004dd0:	851eb852 	.word	0x851eb852
 8004dd4:	3fe851eb 	.word	0x3fe851eb
 8004dd8:	9999999a 	.word	0x9999999a
 8004ddc:	3f999999 	.word	0x3f999999
 8004de0:	2000057c 	.word	0x2000057c
 8004de4:	20000588 	.word	0x20000588
 8004de8:	40390000 	.word	0x40390000
 8004dec:	20000578 	.word	0x20000578
 8004df0:	20000590 	.word	0x20000590

08004df4 <tempSensor_measure>:

void tempSensor_measure(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
	flags_tempSensor.bits.requestMeasure = 1;
 8004df8:	4a04      	ldr	r2, [pc, #16]	; (8004e0c <tempSensor_measure+0x18>)
 8004dfa:	7813      	ldrb	r3, [r2, #0]
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	7013      	strb	r3, [r2, #0]
}
 8004e02:	bf00      	nop
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000588 	.word	0x20000588

08004e10 <tempSensor_setCallback>:
{
	return flags_tempSensor.bits.isMeasuring;
}

void tempSensor_setCallback(void (*cb)(_tempSensor_event, void*))
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	tempSensorCallback = cb;
 8004e18:	4a03      	ldr	r2, [pc, #12]	; (8004e28 <tempSensor_setCallback+0x18>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6013      	str	r3, [r2, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr
 8004e28:	20000590 	.word	0x20000590

08004e2c <ADC_Select_CHTemp>:




static void ADC_Select_CHTemp(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8004e32:	1d3b      	adds	r3, r7, #4
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8004e40:	2301      	movs	r3, #1
 8004e42:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8004e44:	2304      	movs	r3, #4
 8004e46:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(tempHadc, &sConfig) != HAL_OK) {
 8004e48:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <ADC_Select_CHTemp+0x3c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	1d3a      	adds	r2, r7, #4
 8004e4e:	4611      	mov	r1, r2
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 f87b 	bl	8005f4c <HAL_ADC_ConfigChannel>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <ADC_Select_CHTemp+0x34>
		Error_Handler();
 8004e5c:	f7ff fb5a 	bl	8004514 <Error_Handler>
	}
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000574 	.word	0x20000574

08004e6c <temp_adcStart>:

static void temp_adcStart(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
	ADC_Select_CHTemp();
 8004e70:	f7ff ffdc 	bl	8004e2c <ADC_Select_CHTemp>
	HAL_ADC_Start(tempHadc);
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <temp_adcStart+0x24>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fe7b 	bl	8005b74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(tempHadc, 100);
 8004e7e:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <temp_adcStart+0x24>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2164      	movs	r1, #100	; 0x64
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 ff4f 	bl	8005d28 <HAL_ADC_PollForConversion>
}
 8004e8a:	bf00      	nop
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000574 	.word	0x20000574

08004e94 <temp_adcGetValue>:

static uint32_t temp_adcGetValue(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(tempHadc);
 8004e98:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <temp_adcGetValue+0x14>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 f849 	bl	8005f34 <HAL_ADC_GetValue>
 8004ea2:	4603      	mov	r3, r0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20000574 	.word	0x20000574

08004eac <temp_adcStop>:

static void temp_adcStop(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(tempHadc);
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <temp_adcStop+0x14>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 ff0b 	bl	8005cd0 <HAL_ADC_Stop>
}
 8004eba:	bf00      	nop
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000574 	.word	0x20000574

08004ec4 <usSensor_init>:




void usSensor_init(TIM_HandleTypeDef *htim)
{
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	//Timer
	usHtim = htim;
 8004ecc:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <usSensor_init+0x84>)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6013      	str	r3, [r2, #0]

	//FSM
	fsmManager_init(&usSensor_state, __usSensor_idle);
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	481d      	ldr	r0, [pc, #116]	; (8004f4c <usSensor_init+0x88>)
 8004ed6:	f7fc fe43 	bl	8001b60 <fsmManager_init>

	//Pin
	pinUsVdd_write(0);
 8004eda:	2000      	movs	r0, #0
 8004edc:	f000 fa32 	bl	8005344 <pinUsVdd_write>
	pinUsTrigger_write(0);
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	f000 fa39 	bl	8005358 <pinUsTrigger_write>
	pinUsEcho_inputCaptureStop();
 8004ee6:	f000 fa55 	bl	8005394 <pinUsEcho_inputCaptureStop>

	//Flags
	flags_usSensor.dword = 0;
 8004eea:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <usSensor_init+0x8c>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
	flags_usSensorError.dword = 0;
 8004ef0:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <usSensor_init+0x90>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]

	//Variables
	echoTime = 0;
 8004ef6:	4b18      	ldr	r3, [pc, #96]	; (8004f58 <usSensor_init+0x94>)
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
	usDistance = 0;
 8004efe:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <usSensor_init+0x98>)
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
	soundSpeed = numberFloat_getLinearValue(US_SENSOR_DEFAULT_TEMPERATURE, tableTempVsSpeed, sizeof(tableTempVsSpeed)/(sizeof(float)*2));		//Default 25 celcius
 8004f06:	220f      	movs	r2, #15
 8004f08:	4915      	ldr	r1, [pc, #84]	; (8004f60 <usSensor_init+0x9c>)
 8004f0a:	4816      	ldr	r0, [pc, #88]	; (8004f64 <usSensor_init+0xa0>)
 8004f0c:	f000 fbdc 	bl	80056c8 <numberFloat_getLinearValue>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <usSensor_init+0xa4>)
 8004f14:	6013      	str	r3, [r2, #0]

	//Callback
	usSensorCallback = NULL;
 8004f16:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <usSensor_init+0xa8>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

	//Reference clock for Input Capture
	mFactor = 1000000*(usHtim->Init.Prescaler+1)/HAL_RCC_GetSysClockFreq();
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <usSensor_init+0x84>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a12      	ldr	r2, [pc, #72]	; (8004f70 <usSensor_init+0xac>)
 8004f26:	fb02 f403 	mul.w	r4, r2, r3
 8004f2a:	f002 f87f 	bl	800702c <HAL_RCC_GetSysClockFreq>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fb fddf 	bl	8000af8 <__aeabi_ui2f>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4a0d      	ldr	r2, [pc, #52]	; (8004f74 <usSensor_init+0xb0>)
 8004f3e:	6013      	str	r3, [r2, #0]
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd90      	pop	{r4, r7, pc}
 8004f48:	20000598 	.word	0x20000598
 8004f4c:	200005b4 	.word	0x200005b4
 8004f50:	200005c0 	.word	0x200005c0
 8004f54:	200005c4 	.word	0x200005c4
 8004f58:	200005d8 	.word	0x200005d8
 8004f5c:	200005dc 	.word	0x200005dc
 8004f60:	20000008 	.word	0x20000008
 8004f64:	41a00000 	.word	0x41a00000
 8004f68:	200005e0 	.word	0x200005e0
 8004f6c:	200005e4 	.word	0x200005e4
 8004f70:	000f4240 	.word	0x000f4240
 8004f74:	200005d4 	.word	0x200005d4

08004f78 <usSensor_handler>:

void usSensor_handler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
	switch(fsmManager_getState(&usSensor_state)) {
 8004f7c:	48ba      	ldr	r0, [pc, #744]	; (8005268 <usSensor_handler+0x2f0>)
 8004f7e:	f7fc fe1c 	bl	8001bba <fsmManager_getState>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b06      	cmp	r3, #6
 8004f86:	f200 8155 	bhi.w	8005234 <usSensor_handler+0x2bc>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <usSensor_handler+0x18>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fad 	.word	0x08004fad
 8004f94:	0800501f 	.word	0x0800501f
 8004f98:	08005079 	.word	0x08005079
 8004f9c:	080050e9 	.word	0x080050e9
 8004fa0:	08005173 	.word	0x08005173
 8004fa4:	080051bd 	.word	0x080051bd
 8004fa8:	08005207 	.word	0x08005207
		case __usSensor_idle:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8004fac:	48ae      	ldr	r0, [pc, #696]	; (8005268 <usSensor_handler+0x2f0>)
 8004fae:	f7fc fe0f 	bl	8001bd0 <fsmManager_isStateIn>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d012      	beq.n	8004fde <usSensor_handler+0x66>
				fsmManager_stateIn(&usSensor_state);
 8004fb8:	48ab      	ldr	r0, [pc, #684]	; (8005268 <usSensor_handler+0x2f0>)
 8004fba:	f7fc fe1f 	bl	8001bfc <fsmManager_stateIn>

				//Clear signals
				pinUsTrigger_write(0);
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f000 f9ca 	bl	8005358 <pinUsTrigger_write>

				//Clear variables
				echoTime = 0;
 8004fc4:	4ba9      	ldr	r3, [pc, #676]	; (800526c <usSensor_handler+0x2f4>)
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
				usDistance = 0;
 8004fcc:	4ba8      	ldr	r3, [pc, #672]	; (8005270 <usSensor_handler+0x2f8>)
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
				flags_usSensor.bits.isMeasuring = 0;
 8004fd4:	4aa7      	ldr	r2, [pc, #668]	; (8005274 <usSensor_handler+0x2fc>)
 8004fd6:	7853      	ldrb	r3, [r2, #1]
 8004fd8:	f36f 03c3 	bfc	r3, #3, #1
 8004fdc:	7053      	strb	r3, [r2, #1]
			}

			if(flags_usSensor.bits.requestMeasure) {
 8004fde:	4ba5      	ldr	r3, [pc, #660]	; (8005274 <usSensor_handler+0x2fc>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <usSensor_handler+0x90>
				flags_usSensor.bits.requestMeasure = 0;
 8004fec:	4aa1      	ldr	r2, [pc, #644]	; (8005274 <usSensor_handler+0x2fc>)
 8004fee:	7813      	ldrb	r3, [r2, #0]
 8004ff0:	f36f 0300 	bfc	r3, #0, #1
 8004ff4:	7013      	strb	r3, [r2, #0]
				flags_usSensor.bits.isMeasuring = 1;
 8004ff6:	4a9f      	ldr	r2, [pc, #636]	; (8005274 <usSensor_handler+0x2fc>)
 8004ff8:	7853      	ldrb	r3, [r2, #1]
 8004ffa:	f043 0308 	orr.w	r3, r3, #8
 8004ffe:	7053      	strb	r3, [r2, #1]

				fsmManager_gotoState(&usSensor_state,__usSensor_pinUsTrigger_write);
 8005000:	2101      	movs	r1, #1
 8005002:	4899      	ldr	r0, [pc, #612]	; (8005268 <usSensor_handler+0x2f0>)
 8005004:	f7fc fdc2 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005008:	4897      	ldr	r0, [pc, #604]	; (8005268 <usSensor_handler+0x2f0>)
 800500a:	f7fc fdec 	bl	8001be6 <fsmManager_isStateOut>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 8126 	beq.w	8005262 <usSensor_handler+0x2ea>
				fsmManager_stateOut(&usSensor_state);
 8005016:	4894      	ldr	r0, [pc, #592]	; (8005268 <usSensor_handler+0x2f0>)
 8005018:	f7fc fdff 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 800501c:	e121      	b.n	8005262 <usSensor_handler+0x2ea>



		case __usSensor_pinUsTrigger_write:
			if(fsmManager_isStateIn(&usSensor_state)) {
 800501e:	4892      	ldr	r0, [pc, #584]	; (8005268 <usSensor_handler+0x2f0>)
 8005020:	f7fc fdd6 	bl	8001bd0 <fsmManager_isStateIn>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <usSensor_handler+0xc6>
				fsmManager_stateIn(&usSensor_state);
 800502a:	488f      	ldr	r0, [pc, #572]	; (8005268 <usSensor_handler+0x2f0>)
 800502c:	f7fc fde6 	bl	8001bfc <fsmManager_stateIn>

				//Set trigger during 1 mseg
				pinUsTrigger_write(1);
 8005030:	2001      	movs	r0, #1
 8005032:	f000 f991 	bl	8005358 <pinUsTrigger_write>
				softTimer_start(&timer, 1);
 8005036:	2101      	movs	r1, #1
 8005038:	488f      	ldr	r0, [pc, #572]	; (8005278 <usSensor_handler+0x300>)
 800503a:	f7ff fbe3 	bl	8004804 <softTimer_start>
			}

			if(softTimer_expired(&timer)) {
 800503e:	488e      	ldr	r0, [pc, #568]	; (8005278 <usSensor_handler+0x300>)
 8005040:	f7ff fbf4 	bl	800482c <softTimer_expired>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <usSensor_handler+0xea>
				softTimer_stop(&timer);
 800504a:	488b      	ldr	r0, [pc, #556]	; (8005278 <usSensor_handler+0x300>)
 800504c:	f7ff fc22 	bl	8004894 <softTimer_stop>

				//Finished setting trigger
				pinUsTrigger_write(0);
 8005050:	2000      	movs	r0, #0
 8005052:	f000 f981 	bl	8005358 <pinUsTrigger_write>

				//Enable input capture for echo
				pinUsEcho_inputCaptureStart();
 8005056:	f000 f991 	bl	800537c <pinUsEcho_inputCaptureStart>

				fsmManager_gotoState(&usSensor_state,__usSensor_waitEcho);
 800505a:	2102      	movs	r1, #2
 800505c:	4882      	ldr	r0, [pc, #520]	; (8005268 <usSensor_handler+0x2f0>)
 800505e:	f7fc fd95 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005062:	4881      	ldr	r0, [pc, #516]	; (8005268 <usSensor_handler+0x2f0>)
 8005064:	f7fc fdbf 	bl	8001be6 <fsmManager_isStateOut>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8112 	beq.w	8005294 <usSensor_handler+0x31c>
				fsmManager_stateOut(&usSensor_state);
 8005070:	487d      	ldr	r0, [pc, #500]	; (8005268 <usSensor_handler+0x2f0>)
 8005072:	f7fc fdd2 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8005076:	e10d      	b.n	8005294 <usSensor_handler+0x31c>



		case __usSensor_waitEcho:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005078:	487b      	ldr	r0, [pc, #492]	; (8005268 <usSensor_handler+0x2f0>)
 800507a:	f7fc fda9 	bl	8001bd0 <fsmManager_isStateIn>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d006      	beq.n	8005092 <usSensor_handler+0x11a>
				fsmManager_stateIn(&usSensor_state);
 8005084:	4878      	ldr	r0, [pc, #480]	; (8005268 <usSensor_handler+0x2f0>)
 8005086:	f7fc fdb9 	bl	8001bfc <fsmManager_stateIn>

				//Set 100mseg timeout
				softTimer_start(&timeout, 100);
 800508a:	2164      	movs	r1, #100	; 0x64
 800508c:	487b      	ldr	r0, [pc, #492]	; (800527c <usSensor_handler+0x304>)
 800508e:	f7ff fbb9 	bl	8004804 <softTimer_start>
			}

			//Echo received
			if(flags_usSensor.bits.receivedEcho == 1) {
 8005092:	4b78      	ldr	r3, [pc, #480]	; (8005274 <usSensor_handler+0x2fc>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d009      	beq.n	80050b4 <usSensor_handler+0x13c>
				flags_usSensor.bits.receivedEcho = 0;
 80050a0:	4a74      	ldr	r2, [pc, #464]	; (8005274 <usSensor_handler+0x2fc>)
 80050a2:	7813      	ldrb	r3, [r2, #0]
 80050a4:	f36f 1386 	bfc	r3, #6, #1
 80050a8:	7013      	strb	r3, [r2, #0]

				fsmManager_gotoState(&usSensor_state,__usSensor_getDistance);
 80050aa:	2103      	movs	r1, #3
 80050ac:	486e      	ldr	r0, [pc, #440]	; (8005268 <usSensor_handler+0x2f0>)
 80050ae:	f7fc fd6d 	bl	8001b8c <fsmManager_gotoState>
 80050b2:	e00c      	b.n	80050ce <usSensor_handler+0x156>
			} else if(softTimer_expired(&timeout)) {
 80050b4:	4871      	ldr	r0, [pc, #452]	; (800527c <usSensor_handler+0x304>)
 80050b6:	f7ff fbb9 	bl	800482c <softTimer_expired>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <usSensor_handler+0x156>
				softTimer_stop(&timeout);
 80050c0:	486e      	ldr	r0, [pc, #440]	; (800527c <usSensor_handler+0x304>)
 80050c2:	f7ff fbe7 	bl	8004894 <softTimer_stop>

				fsmManager_gotoState(&usSensor_state,__usSensor_errorWaitEcho);
 80050c6:	2104      	movs	r1, #4
 80050c8:	4867      	ldr	r0, [pc, #412]	; (8005268 <usSensor_handler+0x2f0>)
 80050ca:	f7fc fd5f 	bl	8001b8c <fsmManager_gotoState>
			}

			if(fsmManager_isStateOut(&usSensor_state)) {
 80050ce:	4866      	ldr	r0, [pc, #408]	; (8005268 <usSensor_handler+0x2f0>)
 80050d0:	f7fc fd89 	bl	8001be6 <fsmManager_isStateOut>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80de 	beq.w	8005298 <usSensor_handler+0x320>
				fsmManager_stateOut(&usSensor_state);
 80050dc:	4862      	ldr	r0, [pc, #392]	; (8005268 <usSensor_handler+0x2f0>)
 80050de:	f7fc fd9c 	bl	8001c1a <fsmManager_stateOut>

				pinUsEcho_inputCaptureStop();
 80050e2:	f000 f957 	bl	8005394 <pinUsEcho_inputCaptureStop>
			}
			break;
 80050e6:	e0d7      	b.n	8005298 <usSensor_handler+0x320>



		case __usSensor_getDistance:
			if(fsmManager_isStateIn(&usSensor_state)) {
 80050e8:	485f      	ldr	r0, [pc, #380]	; (8005268 <usSensor_handler+0x2f0>)
 80050ea:	f7fc fd71 	bl	8001bd0 <fsmManager_isStateIn>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <usSensor_handler+0x182>
				fsmManager_stateIn(&usSensor_state);
 80050f4:	485c      	ldr	r0, [pc, #368]	; (8005268 <usSensor_handler+0x2f0>)
 80050f6:	f7fc fd81 	bl	8001bfc <fsmManager_stateIn>
			}

			//Get speed of sound based on temperature
			soundSpeed = getSoundSpeed();
 80050fa:	f000 f8fd 	bl	80052f8 <getSoundSpeed>
 80050fe:	4603      	mov	r3, r0
 8005100:	4a5f      	ldr	r2, [pc, #380]	; (8005280 <usSensor_handler+0x308>)
 8005102:	6013      	str	r3, [r2, #0]

			//Calculate usDistance
			usDistance = (echoTime*soundSpeed/2000); //[mm]
 8005104:	4b59      	ldr	r3, [pc, #356]	; (800526c <usSensor_handler+0x2f4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a5d      	ldr	r2, [pc, #372]	; (8005280 <usSensor_handler+0x308>)
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	4611      	mov	r1, r2
 800510e:	4618      	mov	r0, r3
 8005110:	f7fb fd4a 	bl	8000ba8 <__aeabi_fmul>
 8005114:	4603      	mov	r3, r0
 8005116:	495b      	ldr	r1, [pc, #364]	; (8005284 <usSensor_handler+0x30c>)
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb fdf9 	bl	8000d10 <__aeabi_fdiv>
 800511e:	4603      	mov	r3, r0
 8005120:	461a      	mov	r2, r3
 8005122:	4b53      	ldr	r3, [pc, #332]	; (8005270 <usSensor_handler+0x2f8>)
 8005124:	601a      	str	r2, [r3, #0]

			if(usDistance > US_SENSOR_DISTANCE_MAX_MILIMETER) {
 8005126:	4b52      	ldr	r3, [pc, #328]	; (8005270 <usSensor_handler+0x2f8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4957      	ldr	r1, [pc, #348]	; (8005288 <usSensor_handler+0x310>)
 800512c:	4618      	mov	r0, r3
 800512e:	f7fb fef7 	bl	8000f20 <__aeabi_fcmpgt>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <usSensor_handler+0x1ca>
				fsmManager_gotoState(&usSensor_state,__usSensor_errorEchoOverflow);
 8005138:	2105      	movs	r1, #5
 800513a:	484b      	ldr	r0, [pc, #300]	; (8005268 <usSensor_handler+0x2f0>)
 800513c:	f7fc fd26 	bl	8001b8c <fsmManager_gotoState>
 8005140:	e00c      	b.n	800515c <usSensor_handler+0x1e4>
			} else {
				//Informs to higher layer
				if(usSensorCallback != NULL) {
 8005142:	4b52      	ldr	r3, [pc, #328]	; (800528c <usSensor_handler+0x314>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <usSensor_handler+0x1dc>
					usSensorCallback(__usSensorEvent_okMeasuring, (float *) &usDistance);
 800514a:	4b50      	ldr	r3, [pc, #320]	; (800528c <usSensor_handler+0x314>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4948      	ldr	r1, [pc, #288]	; (8005270 <usSensor_handler+0x2f8>)
 8005150:	2000      	movs	r0, #0
 8005152:	4798      	blx	r3
				}

				fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 8005154:	2100      	movs	r1, #0
 8005156:	4844      	ldr	r0, [pc, #272]	; (8005268 <usSensor_handler+0x2f0>)
 8005158:	f7fc fd18 	bl	8001b8c <fsmManager_gotoState>
			}


			if(fsmManager_isStateOut(&usSensor_state)) {
 800515c:	4842      	ldr	r0, [pc, #264]	; (8005268 <usSensor_handler+0x2f0>)
 800515e:	f7fc fd42 	bl	8001be6 <fsmManager_isStateOut>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8099 	beq.w	800529c <usSensor_handler+0x324>
				fsmManager_stateOut(&usSensor_state);
 800516a:	483f      	ldr	r0, [pc, #252]	; (8005268 <usSensor_handler+0x2f0>)
 800516c:	f7fc fd55 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8005170:	e094      	b.n	800529c <usSensor_handler+0x324>



		case __usSensor_errorWaitEcho:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005172:	483d      	ldr	r0, [pc, #244]	; (8005268 <usSensor_handler+0x2f0>)
 8005174:	f7fc fd2c 	bl	8001bd0 <fsmManager_isStateIn>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <usSensor_handler+0x20c>
				fsmManager_stateIn(&usSensor_state);
 800517e:	483a      	ldr	r0, [pc, #232]	; (8005268 <usSensor_handler+0x2f0>)
 8005180:	f7fc fd3c 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_usSensorError.bits.echo = 1;
 8005184:	4a42      	ldr	r2, [pc, #264]	; (8005290 <usSensor_handler+0x318>)
 8005186:	7813      	ldrb	r3, [r2, #0]
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	7013      	strb	r3, [r2, #0]

			//Informs to higher layer
			if(usSensorCallback != NULL) {
 800518e:	4b3f      	ldr	r3, [pc, #252]	; (800528c <usSensor_handler+0x314>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <usSensor_handler+0x228>
				usSensorCallback(__usSensorEvent_errorEcho, NULL);
 8005196:	4b3d      	ldr	r3, [pc, #244]	; (800528c <usSensor_handler+0x314>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2100      	movs	r1, #0
 800519c:	2001      	movs	r0, #1
 800519e:	4798      	blx	r3
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_error);
 80051a0:	2106      	movs	r1, #6
 80051a2:	4831      	ldr	r0, [pc, #196]	; (8005268 <usSensor_handler+0x2f0>)
 80051a4:	f7fc fcf2 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 80051a8:	482f      	ldr	r0, [pc, #188]	; (8005268 <usSensor_handler+0x2f0>)
 80051aa:	f7fc fd1c 	bl	8001be6 <fsmManager_isStateOut>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d075      	beq.n	80052a0 <usSensor_handler+0x328>
				fsmManager_stateOut(&usSensor_state);
 80051b4:	482c      	ldr	r0, [pc, #176]	; (8005268 <usSensor_handler+0x2f0>)
 80051b6:	f7fc fd30 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 80051ba:	e071      	b.n	80052a0 <usSensor_handler+0x328>



		case __usSensor_errorEchoOverflow:
			if(fsmManager_isStateIn(&usSensor_state)) {
 80051bc:	482a      	ldr	r0, [pc, #168]	; (8005268 <usSensor_handler+0x2f0>)
 80051be:	f7fc fd07 	bl	8001bd0 <fsmManager_isStateIn>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <usSensor_handler+0x256>
				fsmManager_stateIn(&usSensor_state);
 80051c8:	4827      	ldr	r0, [pc, #156]	; (8005268 <usSensor_handler+0x2f0>)
 80051ca:	f7fc fd17 	bl	8001bfc <fsmManager_stateIn>
			}

			flags_usSensorError.bits.echo = 1;
 80051ce:	4a30      	ldr	r2, [pc, #192]	; (8005290 <usSensor_handler+0x318>)
 80051d0:	7813      	ldrb	r3, [r2, #0]
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	7013      	strb	r3, [r2, #0]

			//Informs to higher layer
			if(usSensorCallback != NULL) {
 80051d8:	4b2c      	ldr	r3, [pc, #176]	; (800528c <usSensor_handler+0x314>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <usSensor_handler+0x272>
				usSensorCallback(__usSensorEvent_errorEcho, NULL);
 80051e0:	4b2a      	ldr	r3, [pc, #168]	; (800528c <usSensor_handler+0x314>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2100      	movs	r1, #0
 80051e6:	2001      	movs	r0, #1
 80051e8:	4798      	blx	r3
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_error);
 80051ea:	2106      	movs	r1, #6
 80051ec:	481e      	ldr	r0, [pc, #120]	; (8005268 <usSensor_handler+0x2f0>)
 80051ee:	f7fc fccd 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 80051f2:	481d      	ldr	r0, [pc, #116]	; (8005268 <usSensor_handler+0x2f0>)
 80051f4:	f7fc fcf7 	bl	8001be6 <fsmManager_isStateOut>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d052      	beq.n	80052a4 <usSensor_handler+0x32c>
				fsmManager_stateOut(&usSensor_state);
 80051fe:	481a      	ldr	r0, [pc, #104]	; (8005268 <usSensor_handler+0x2f0>)
 8005200:	f7fc fd0b 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8005204:	e04e      	b.n	80052a4 <usSensor_handler+0x32c>



		case __usSensor_error:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005206:	4818      	ldr	r0, [pc, #96]	; (8005268 <usSensor_handler+0x2f0>)
 8005208:	f7fc fce2 	bl	8001bd0 <fsmManager_isStateIn>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <usSensor_handler+0x2a0>
				fsmManager_stateIn(&usSensor_state);
 8005212:	4815      	ldr	r0, [pc, #84]	; (8005268 <usSensor_handler+0x2f0>)
 8005214:	f7fc fcf2 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 8005218:	2100      	movs	r1, #0
 800521a:	4813      	ldr	r0, [pc, #76]	; (8005268 <usSensor_handler+0x2f0>)
 800521c:	f7fc fcb6 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 8005220:	4811      	ldr	r0, [pc, #68]	; (8005268 <usSensor_handler+0x2f0>)
 8005222:	f7fc fce0 	bl	8001be6 <fsmManager_isStateOut>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d03d      	beq.n	80052a8 <usSensor_handler+0x330>
				fsmManager_stateOut(&usSensor_state);
 800522c:	480e      	ldr	r0, [pc, #56]	; (8005268 <usSensor_handler+0x2f0>)
 800522e:	f7fc fcf4 	bl	8001c1a <fsmManager_stateOut>
			}
			break;
 8005232:	e039      	b.n	80052a8 <usSensor_handler+0x330>



		default:
			if(fsmManager_isStateIn(&usSensor_state)) {
 8005234:	480c      	ldr	r0, [pc, #48]	; (8005268 <usSensor_handler+0x2f0>)
 8005236:	f7fc fccb 	bl	8001bd0 <fsmManager_isStateIn>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <usSensor_handler+0x2ce>
				fsmManager_stateIn(&usSensor_state);
 8005240:	4809      	ldr	r0, [pc, #36]	; (8005268 <usSensor_handler+0x2f0>)
 8005242:	f7fc fcdb 	bl	8001bfc <fsmManager_stateIn>
			}

			fsmManager_gotoState(&usSensor_state,__usSensor_idle);
 8005246:	2100      	movs	r1, #0
 8005248:	4807      	ldr	r0, [pc, #28]	; (8005268 <usSensor_handler+0x2f0>)
 800524a:	f7fc fc9f 	bl	8001b8c <fsmManager_gotoState>

			if(fsmManager_isStateOut(&usSensor_state)) {
 800524e:	4806      	ldr	r0, [pc, #24]	; (8005268 <usSensor_handler+0x2f0>)
 8005250:	f7fc fcc9 	bl	8001be6 <fsmManager_isStateOut>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d027      	beq.n	80052aa <usSensor_handler+0x332>
				fsmManager_stateOut(&usSensor_state);
 800525a:	4803      	ldr	r0, [pc, #12]	; (8005268 <usSensor_handler+0x2f0>)
 800525c:	f7fc fcdd 	bl	8001c1a <fsmManager_stateOut>
			}
	}
}
 8005260:	e023      	b.n	80052aa <usSensor_handler+0x332>
			break;
 8005262:	bf00      	nop
 8005264:	e021      	b.n	80052aa <usSensor_handler+0x332>
 8005266:	bf00      	nop
 8005268:	200005b4 	.word	0x200005b4
 800526c:	200005d8 	.word	0x200005d8
 8005270:	200005dc 	.word	0x200005dc
 8005274:	200005c0 	.word	0x200005c0
 8005278:	2000059c 	.word	0x2000059c
 800527c:	200005a8 	.word	0x200005a8
 8005280:	200005e0 	.word	0x200005e0
 8005284:	44fa0000 	.word	0x44fa0000
 8005288:	45bb8000 	.word	0x45bb8000
 800528c:	200005e4 	.word	0x200005e4
 8005290:	200005c4 	.word	0x200005c4
			break;
 8005294:	bf00      	nop
 8005296:	e008      	b.n	80052aa <usSensor_handler+0x332>
			break;
 8005298:	bf00      	nop
 800529a:	e006      	b.n	80052aa <usSensor_handler+0x332>
			break;
 800529c:	bf00      	nop
 800529e:	e004      	b.n	80052aa <usSensor_handler+0x332>
			break;
 80052a0:	bf00      	nop
 80052a2:	e002      	b.n	80052aa <usSensor_handler+0x332>
			break;
 80052a4:	bf00      	nop
 80052a6:	e000      	b.n	80052aa <usSensor_handler+0x332>
			break;
 80052a8:	bf00      	nop
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop

080052b0 <usSensor_powerOn>:

void usSensor_powerOn(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
	pinUsVdd_write(1);
 80052b4:	2001      	movs	r0, #1
 80052b6:	f000 f845 	bl	8005344 <pinUsVdd_write>
}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}

080052be <usSensor_powerOff>:

void usSensor_powerOff(void)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	af00      	add	r7, sp, #0
	pinUsVdd_write(0);
 80052c2:	2000      	movs	r0, #0
 80052c4:	f000 f83e 	bl	8005344 <pinUsVdd_write>
}
 80052c8:	bf00      	nop
 80052ca:	bd80      	pop	{r7, pc}

080052cc <usSensor_measure>:

void usSensor_measure(float temp)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	temperature = temp;
 80052d4:	4a06      	ldr	r2, [pc, #24]	; (80052f0 <usSensor_measure+0x24>)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6013      	str	r3, [r2, #0]

	flags_usSensor.bits.requestMeasure = 1;
 80052da:	4a06      	ldr	r2, [pc, #24]	; (80052f4 <usSensor_measure+0x28>)
 80052dc:	7813      	ldrb	r3, [r2, #0]
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	7013      	strb	r3, [r2, #0]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000594 	.word	0x20000594
 80052f4:	200005c0 	.word	0x200005c0

080052f8 <getSoundSpeed>:




static float getSoundSpeed(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
	float speed = 0;
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	607b      	str	r3, [r7, #4]

	speed = numberFloat_getLinearValue(temperature, tableTempVsSpeed, sizeof(tableTempVsSpeed)/(sizeof(float)*2));
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <getSoundSpeed+0x28>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	220f      	movs	r2, #15
 800530a:	4906      	ldr	r1, [pc, #24]	; (8005324 <getSoundSpeed+0x2c>)
 800530c:	4618      	mov	r0, r3
 800530e:	f000 f9db 	bl	80056c8 <numberFloat_getLinearValue>
 8005312:	6078      	str	r0, [r7, #4]

	return speed;
 8005314:	687b      	ldr	r3, [r7, #4]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000594 	.word	0x20000594
 8005324:	20000008 	.word	0x20000008

08005328 <usSensor_setCallback>:

void usSensor_setCallback(void (*cb)(_usSensor_event, void*))
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	usSensorCallback = cb;
 8005330:	4a03      	ldr	r2, [pc, #12]	; (8005340 <usSensor_setCallback+0x18>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6013      	str	r3, [r2, #0]
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	200005e4 	.word	0x200005e4

08005344 <pinUsVdd_write>:
	US_TRIGGER		input			gpio
	US_ECHO			output			input capture
*/

static void pinUsVdd_write(uint8_t state)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(, , state);
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr

08005358 <pinUsTrigger_write>:

static void pinUsTrigger_write(uint8_t state)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(US_SENSOR_TRIGGER_PORT, US_SENSOR_TRIGGER_PIN, state);
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	461a      	mov	r2, r3
 8005366:	2102      	movs	r1, #2
 8005368:	4803      	ldr	r0, [pc, #12]	; (8005378 <pinUsTrigger_write+0x20>)
 800536a:	f001 fac5 	bl	80068f8 <HAL_GPIO_WritePin>
}
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40010c00 	.word	0x40010c00

0800537c <pinUsEcho_inputCaptureStart>:

static void pinUsEcho_inputCaptureStart(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005380:	4b03      	ldr	r3, [pc, #12]	; (8005390 <pinUsEcho_inputCaptureStart+0x14>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2100      	movs	r1, #0
 8005386:	4618      	mov	r0, r3
 8005388:	f002 fab6 	bl	80078f8 <HAL_TIM_IC_Start_IT>
}
 800538c:	bf00      	nop
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20000598 	.word	0x20000598

08005394 <pinUsEcho_inputCaptureStop>:

static void pinUsEcho_inputCaptureStop(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Stop_IT(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005398:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <pinUsEcho_inputCaptureStop+0x14>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f002 fbb0 	bl	8007b04 <HAL_TIM_IC_Stop_IT>
}
 80053a4:	bf00      	nop
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20000598 	.word	0x20000598

080053ac <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == usHtim->Instance && htim->Channel == usHtim->Channel) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b34      	ldr	r3, [pc, #208]	; (800548c <HAL_TIM_IC_CaptureCallback+0xe0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d15f      	bne.n	8005482 <HAL_TIM_IC_CaptureCallback+0xd6>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	7f1a      	ldrb	r2, [r3, #28]
 80053c6:	4b31      	ldr	r3, [pc, #196]	; (800548c <HAL_TIM_IC_CaptureCallback+0xe0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	7f1b      	ldrb	r3, [r3, #28]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d158      	bne.n	8005482 <HAL_TIM_IC_CaptureCallback+0xd6>
		if(flags_usSensor.bits.isFirstCaptured == 0) {
 80053d0:	4b2f      	ldr	r3, [pc, #188]	; (8005490 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80053d2:	785b      	ldrb	r3, [r3, #1]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10e      	bne.n	80053fc <HAL_TIM_IC_CaptureCallback+0x50>
			flags_usSensor.bits.isFirstCaptured = 1;
 80053de:	4a2c      	ldr	r2, [pc, #176]	; (8005490 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80053e0:	7853      	ldrb	r3, [r2, #1]
 80053e2:	f043 0304 	orr.w	r3, r3, #4
 80053e6:	7053      	strb	r3, [r2, #1]

			icVal1 = HAL_TIM_ReadCapturedValue(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 80053e8:	4b28      	ldr	r3, [pc, #160]	; (800548c <HAL_TIM_IC_CaptureCallback+0xe0>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f002 fe90 	bl	8008114 <HAL_TIM_ReadCapturedValue>
 80053f4:	4603      	mov	r3, r0
 80053f6:	4a27      	ldr	r2, [pc, #156]	; (8005494 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80053f8:	6013      	str	r3, [r2, #0]
			echoTime = icDif*mFactor;

			flags_usSensor.bits.receivedEcho = 1;
		}
	}
}
 80053fa:	e042      	b.n	8005482 <HAL_TIM_IC_CaptureCallback+0xd6>
			flags_usSensor.bits.isFirstCaptured = 0;
 80053fc:	4a24      	ldr	r2, [pc, #144]	; (8005490 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80053fe:	7853      	ldrb	r3, [r2, #1]
 8005400:	f36f 0382 	bfc	r3, #2, #1
 8005404:	7053      	strb	r3, [r2, #1]
			icVal2 = HAL_TIM_ReadCapturedValue(usHtim, US_SENSOR_ECHO_TIM_CHANNEL);
 8005406:	4b21      	ldr	r3, [pc, #132]	; (800548c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2100      	movs	r1, #0
 800540c:	4618      	mov	r0, r3
 800540e:	f002 fe81 	bl	8008114 <HAL_TIM_ReadCapturedValue>
 8005412:	4603      	mov	r3, r0
 8005414:	4a20      	ldr	r2, [pc, #128]	; (8005498 <HAL_TIM_IC_CaptureCallback+0xec>)
 8005416:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(usHtim, 0);
 8005418:	4b1c      	ldr	r3, [pc, #112]	; (800548c <HAL_TIM_IC_CaptureCallback+0xe0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2200      	movs	r2, #0
 8005420:	625a      	str	r2, [r3, #36]	; 0x24
			if(icVal2 > icVal1) icDif = icVal2-icVal1;
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <HAL_TIM_IC_CaptureCallback+0xec>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d906      	bls.n	800543c <HAL_TIM_IC_CaptureCallback+0x90>
 800542e:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <HAL_TIM_IC_CaptureCallback+0xec>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b18      	ldr	r3, [pc, #96]	; (8005494 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	4a18      	ldr	r2, [pc, #96]	; (800549c <HAL_TIM_IC_CaptureCallback+0xf0>)
 800543a:	6013      	str	r3, [r2, #0]
			if(icVal1 > icVal2) icDif = (0xffffffff-icVal1)+icVal2;
 800543c:	4b15      	ldr	r3, [pc, #84]	; (8005494 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	4b15      	ldr	r3, [pc, #84]	; (8005498 <HAL_TIM_IC_CaptureCallback+0xec>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d907      	bls.n	8005458 <HAL_TIM_IC_CaptureCallback+0xac>
 8005448:	4b13      	ldr	r3, [pc, #76]	; (8005498 <HAL_TIM_IC_CaptureCallback+0xec>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	4b11      	ldr	r3, [pc, #68]	; (8005494 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	4a11      	ldr	r2, [pc, #68]	; (800549c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8005456:	6013      	str	r3, [r2, #0]
			echoTime = icDif*mFactor;
 8005458:	4b10      	ldr	r3, [pc, #64]	; (800549c <HAL_TIM_IC_CaptureCallback+0xf0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f7fb fb4b 	bl	8000af8 <__aeabi_ui2f>
 8005462:	4602      	mov	r2, r0
 8005464:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f7fb fb9c 	bl	8000ba8 <__aeabi_fmul>
 8005470:	4603      	mov	r3, r0
 8005472:	461a      	mov	r2, r3
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8005476:	601a      	str	r2, [r3, #0]
			flags_usSensor.bits.receivedEcho = 1;
 8005478:	4a05      	ldr	r2, [pc, #20]	; (8005490 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800547a:	7813      	ldrb	r3, [r2, #0]
 800547c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005480:	7013      	strb	r3, [r2, #0]
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000598 	.word	0x20000598
 8005490:	200005c0 	.word	0x200005c0
 8005494:	200005c8 	.word	0x200005c8
 8005498:	200005cc 	.word	0x200005cc
 800549c:	200005d0 	.word	0x200005d0
 80054a0:	200005d4 	.word	0x200005d4
 80054a4:	200005d8 	.word	0x200005d8

080054a8 <string_length>:

    return i;
}

uint32_t string_length(uint8_t *str)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]

    if(str != NULL) {
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <string_length+0x26>
        while(str[len] != '\0') {
 80054ba:	e002      	b.n	80054c2 <string_length+0x1a>
            len++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
        while(str[len] != '\0') {
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f6      	bne.n	80054bc <string_length+0x14>
        }
    }

    return len;
 80054ce:	68fb      	ldr	r3, [r7, #12]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <string_containsWithinLength>:

    return contains;
}

uint8_t string_containsWithinLength(uint8_t *str, uint8_t *subStr, uint32_t lenStr)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b088      	sub	sp, #32
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
	uint32_t pos = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
	uint32_t i = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
    uint8_t contains = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]
    uint32_t lenSubStr;
    
    if(subStr != NULL && lenStr != 0) {
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d038      	beq.n	800556a <string_containsWithinLength+0x90>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d035      	beq.n	800556a <string_containsWithinLength+0x90>
        lenSubStr = string_length(subStr);
 80054fe:	68b8      	ldr	r0, [r7, #8]
 8005500:	f7ff ffd2 	bl	80054a8 <string_length>
 8005504:	6138      	str	r0, [r7, #16]

        if(lenSubStr <= lenStr) {
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d82d      	bhi.n	800556a <string_containsWithinLength+0x90>
            while(pos < lenStr && contains == 0) {
 800550e:	e025      	b.n	800555c <string_containsWithinLength+0x82>
                i = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]

                while((pos + i) < lenStr) {
 8005514:	e019      	b.n	800554a <string_containsWithinLength+0x70>
                    if(str[pos + i] != subStr[i]) {
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	4413      	add	r3, r2
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	440b      	add	r3, r1
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d002      	beq.n	8005534 <string_containsWithinLength+0x5a>
                        contains = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	75fb      	strb	r3, [r7, #23]
                        break;
 8005532:	e010      	b.n	8005556 <string_containsWithinLength+0x7c>
                    }
                    else if ((lenSubStr - 1) == i) {
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	3b01      	subs	r3, #1
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	429a      	cmp	r2, r3
 800553c:	d102      	bne.n	8005544 <string_containsWithinLength+0x6a>
                        contains = 1;
 800553e:	2301      	movs	r3, #1
 8005540:	75fb      	strb	r3, [r7, #23]
                        break;
 8005542:	e008      	b.n	8005556 <string_containsWithinLength+0x7c>
                    }

                    i++;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	3301      	adds	r3, #1
 8005548:	61bb      	str	r3, [r7, #24]
                while((pos + i) < lenStr) {
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	4413      	add	r3, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	429a      	cmp	r2, r3
 8005554:	d8df      	bhi.n	8005516 <string_containsWithinLength+0x3c>
                }

                pos++;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	3301      	adds	r3, #1
 800555a:	61fb      	str	r3, [r7, #28]
            while(pos < lenStr && contains == 0) {
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	429a      	cmp	r2, r3
 8005562:	d202      	bcs.n	800556a <string_containsWithinLength+0x90>
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0d2      	beq.n	8005510 <string_containsWithinLength+0x36>
    		}
        }
    }

    return contains;
 800556a:	7dfb      	ldrb	r3, [r7, #23]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3720      	adds	r7, #32
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <string_appendChar>:

    return i;
}

uint32_t string_appendChar(uint8_t *str, uint8_t c)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
    uint32_t i = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
    uint32_t len;
    
    if(str != NULL) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d012      	beq.n	80055b0 <string_appendChar+0x3c>
        len = string_length(str);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ff8c 	bl	80054a8 <string_length>
 8005590:	60b8      	str	r0, [r7, #8]

        str[len] = c;
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4413      	add	r3, r2
 8005598:	78fa      	ldrb	r2, [r7, #3]
 800559a:	701a      	strb	r2, [r3, #0]
        str[len+1] = '\0';
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	3301      	adds	r3, #1
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	4413      	add	r3, r2
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]

        i = len++;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	60ba      	str	r2, [r7, #8]
 80055ae:	60fb      	str	r3, [r7, #12]
    }

    return i;
 80055b0:	68fb      	ldr	r3, [r7, #12]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <string_appendString>:

uint32_t string_appendString(uint8_t *str1, uint8_t *str2)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
    uint32_t lenStr1;
    uint32_t lenStr2;
    
    if(str1 != NULL && str2 != NULL) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01c      	beq.n	8005608 <string_appendString+0x4e>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d019      	beq.n	8005608 <string_appendString+0x4e>
        lenStr1 = string_length(str1);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff ff67 	bl	80054a8 <string_length>
 80055da:	6138      	str	r0, [r7, #16]
        lenStr2 = string_length(str2);
 80055dc:	6838      	ldr	r0, [r7, #0]
 80055de:	f7ff ff63 	bl	80054a8 <string_length>
 80055e2:	60f8      	str	r0, [r7, #12]

        while(i < lenStr2) {
 80055e4:	e00c      	b.n	8005600 <string_appendString+0x46>
            str1[lenStr1 + i] = str2[i];
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	441a      	add	r2, r3
 80055ec:	6939      	ldr	r1, [r7, #16]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	440b      	add	r3, r1
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	440b      	add	r3, r1
 80055f6:	7812      	ldrb	r2, [r2, #0]
 80055f8:	701a      	strb	r2, [r3, #0]

            i++;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	3301      	adds	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
        while(i < lenStr2) {
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	429a      	cmp	r2, r3
 8005606:	d3ee      	bcc.n	80055e6 <string_appendString+0x2c>
        }
    }

    return i;
 8005608:	697b      	ldr	r3, [r7, #20]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <ascii_convertNum>:

    return pos;
}

uint32_t ascii_convertNum(uint8_t *strAscii, uint32_t num)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
    uint32_t digits = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]
    digits = number_getDigits(num);
 8005626:	6838      	ldr	r0, [r7, #0]
 8005628:	f000 f834 	bl	8005694 <number_getDigits>
 800562c:	60b8      	str	r0, [r7, #8]

    if(strAscii != NULL) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d028      	beq.n	8005686 <ascii_convertNum+0x72>
        for(i = 0; i < digits; i++) {
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e01c      	b.n	8005674 <ascii_convertNum+0x60>
            strAscii[digits - 1 - i] = num % 10 + '0';
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	4b14      	ldr	r3, [pc, #80]	; (8005690 <ascii_convertNum+0x7c>)
 800563e:	fba3 2301 	umull	r2, r3, r3, r1
 8005642:	08da      	lsrs	r2, r3, #3
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	1aca      	subs	r2, r1, r3
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1acb      	subs	r3, r1, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	440b      	add	r3, r1
 800565c:	3230      	adds	r2, #48	; 0x30
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]
            num /= 10;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <ascii_convertNum+0x7c>)
 8005666:	fba2 2303 	umull	r2, r3, r2, r3
 800566a:	08db      	lsrs	r3, r3, #3
 800566c:	603b      	str	r3, [r7, #0]
        for(i = 0; i < digits; i++) {
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	429a      	cmp	r2, r3
 800567a:	d3de      	bcc.n	800563a <ascii_convertNum+0x26>
        }

        strAscii[digits] = '\0';
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4413      	add	r3, r2
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
    }

    return i;
 8005686:	68fb      	ldr	r3, [r7, #12]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	cccccccd 	.word	0xcccccccd

08005694 <number_getDigits>:




uint32_t number_getDigits(uint32_t num)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
    uint32_t digits = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]

	do {
		num /= 10;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <number_getDigits+0x30>)
 80056a4:	fba2 2303 	umull	r2, r3, r2, r3
 80056a8:	08db      	lsrs	r3, r3, #3
 80056aa:	607b      	str	r3, [r7, #4]
		digits++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]
	} while(num != 0);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1f3      	bne.n	80056a0 <number_getDigits+0xc>

	return digits;
 80056b8:	68fb      	ldr	r3, [r7, #12]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr
 80056c4:	cccccccd 	.word	0xcccccccd

080056c8 <numberFloat_getLinearValue>:

    return pos;
}

float numberFloat_getLinearValue(float x, float table[][2], uint32_t size)
{
 80056c8:	b590      	push	{r4, r7, lr}
 80056ca:	b089      	sub	sp, #36	; 0x24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
    float y = 0;
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
    float m = 0;
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
    uint32_t nSegment = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61fb      	str	r3, [r7, #28]

    while(x > table[nSegment][0] && nSegment < size) {
 80056e4:	e002      	b.n	80056ec <numberFloat_getLinearValue+0x24>
        nSegment++;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3301      	adds	r3, #1
 80056ea:	61fb      	str	r3, [r7, #28]
    while(x > table[nSegment][0] && nSegment < size) {
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	4413      	add	r3, r2
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4619      	mov	r1, r3
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7fb fc11 	bl	8000f20 <__aeabi_fcmpgt>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <numberFloat_getLinearValue+0x44>
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	429a      	cmp	r2, r3
 800570a:	d3ec      	bcc.n	80056e6 <numberFloat_getLinearValue+0x1e>
    }

    if(nSegment == 0) {
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <numberFloat_getLinearValue+0x50>
        nSegment = 1;
 8005712:	2301      	movs	r3, #1
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	e006      	b.n	8005726 <numberFloat_getLinearValue+0x5e>
    }
    else if(nSegment == size) {
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	429a      	cmp	r2, r3
 800571e:	d102      	bne.n	8005726 <numberFloat_getLinearValue+0x5e>
        nSegment = size - 1;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3b01      	subs	r3, #1
 8005724:	61fb      	str	r3, [r7, #28]
    }

    m = (table[nSegment][1]-table[nSegment-1][1]) / (table[nSegment][0]-table[nSegment-1][0]);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	4413      	add	r3, r2
 800572e:	6858      	ldr	r0, [r3, #4]
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005736:	3b01      	subs	r3, #1
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4413      	add	r3, r2
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4619      	mov	r1, r3
 8005742:	f7fb f927 	bl	8000994 <__aeabi_fsub>
 8005746:	4603      	mov	r3, r0
 8005748:	461c      	mov	r4, r3
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	4413      	add	r3, r2
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800575a:	3b01      	subs	r3, #1
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	4413      	add	r3, r2
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4619      	mov	r1, r3
 8005766:	f7fb f915 	bl	8000994 <__aeabi_fsub>
 800576a:	4603      	mov	r3, r0
 800576c:	4619      	mov	r1, r3
 800576e:	4620      	mov	r0, r4
 8005770:	f7fb face 	bl	8000d10 <__aeabi_fdiv>
 8005774:	4603      	mov	r3, r0
 8005776:	617b      	str	r3, [r7, #20]
    y = m * (x - table[nSegment-1][0]) + table[nSegment-1][1];
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800577e:	3b01      	subs	r3, #1
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	4413      	add	r3, r2
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4619      	mov	r1, r3
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7fb f902 	bl	8000994 <__aeabi_fsub>
 8005790:	4603      	mov	r3, r0
 8005792:	6979      	ldr	r1, [r7, #20]
 8005794:	4618      	mov	r0, r3
 8005796:	f7fb fa07 	bl	8000ba8 <__aeabi_fmul>
 800579a:	4603      	mov	r3, r0
 800579c:	4618      	mov	r0, r3
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80057a4:	3b01      	subs	r3, #1
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	4413      	add	r3, r2
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	4619      	mov	r1, r3
 80057b0:	f7fb f8f2 	bl	8000998 <__addsf3>
 80057b4:	4603      	mov	r3, r0
 80057b6:	61bb      	str	r3, [r7, #24]

    return y;
 80057b8:	69bb      	ldr	r3, [r7, #24]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3724      	adds	r7, #36	; 0x24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd90      	pop	{r4, r7, pc}

080057c2 <ringBufferOfUint8_indexOf>:
	}
}


uint32_t ringBufferOfUint8_indexOf(uint8_t *rb, uint32_t ptrStart, uint32_t ptrEnd, uint8_t c, uint32_t rbLen)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b087      	sub	sp, #28
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
 80057ce:	70fb      	strb	r3, [r7, #3]
    uint32_t i = ptrStart;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	617b      	str	r3, [r7, #20]
    uint8_t matched = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	74fb      	strb	r3, [r7, #19]

	while( i != ptrEnd) {
 80057d8:	e015      	b.n	8005806 <ringBufferOfUint8_indexOf+0x44>

		if(rb[i] == c) {
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	4413      	add	r3, r2
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	78fa      	ldrb	r2, [r7, #3]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d102      	bne.n	80057ee <ringBufferOfUint8_indexOf+0x2c>
            matched = 1;
 80057e8:	2301      	movs	r3, #1
 80057ea:	74fb      	strb	r3, [r7, #19]
			break;
 80057ec:	e00f      	b.n	800580e <ringBufferOfUint8_indexOf+0x4c>
		}

		i++;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	3301      	adds	r3, #1
 80057f2:	617b      	str	r3, [r7, #20]
        i%=rbLen;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	6a3a      	ldr	r2, [r7, #32]
 80057f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80057fc:	6a39      	ldr	r1, [r7, #32]
 80057fe:	fb01 f202 	mul.w	r2, r1, r2
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	617b      	str	r3, [r7, #20]
	while( i != ptrEnd) {
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d1e5      	bne.n	80057da <ringBufferOfUint8_indexOf+0x18>
	}

	i = (matched == 1) ? i+1 : 0;
 800580e:	7cfb      	ldrb	r3, [r7, #19]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d102      	bne.n	800581a <ringBufferOfUint8_indexOf+0x58>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	3301      	adds	r3, #1
 8005818:	e000      	b.n	800581c <ringBufferOfUint8_indexOf+0x5a>
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]

	return i;
 800581e:	697b      	ldr	r3, [r7, #20]
}
 8005820:	4618      	mov	r0, r3
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr

0800582a <ringBufferOfUint8_popChunk>:

uint32_t ringBufferOfUint8_popChunk(uint8_t *rb, uint32_t ptrStart, uint32_t ptrEnd, uint8_t c, uint32_t rbLen, uint8_t *chunk)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b08a      	sub	sp, #40	; 0x28
 800582e:	af02      	add	r7, sp, #8
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
 8005836:	70fb      	strb	r3, [r7, #3]
    uint32_t pos = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
    uint32_t chunkPos = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	61fb      	str	r3, [r7, #28]

	pos = ringBufferOfUint8_indexOf(rb, ptrStart, ptrEnd, c, rbLen);
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	4613      	mov	r3, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff ffb8 	bl	80057c2 <ringBufferOfUint8_indexOf>
 8005852:	6178      	str	r0, [r7, #20]

	if(pos > 0) {
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d026      	beq.n	80058a8 <ringBufferOfUint8_popChunk+0x7e>
		pos -= 1;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	3b01      	subs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]

		for(uint32_t i = ptrStart; i != pos + 1; i++, chunkPos++) {
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	61bb      	str	r3, [r7, #24]
 8005864:	e016      	b.n	8005894 <ringBufferOfUint8_popChunk+0x6a>
			i%=rbLen;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800586a:	fbb3 f2f2 	udiv	r2, r3, r2
 800586e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005870:	fb01 f202 	mul.w	r2, r1, r2
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
			chunk[chunkPos] = rb[i];
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	441a      	add	r2, r3
 800587e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	440b      	add	r3, r1
 8005884:	7812      	ldrb	r2, [r2, #0]
 8005886:	701a      	strb	r2, [r3, #0]
		for(uint32_t i = ptrStart; i != pos + 1; i++, chunkPos++) {
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	3301      	adds	r3, #1
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3301      	adds	r3, #1
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	3301      	adds	r3, #1
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	429a      	cmp	r2, r3
 800589c:	d1e3      	bne.n	8005866 <ringBufferOfUint8_popChunk+0x3c>
		}
		chunk[chunkPos] = '\0';
 800589e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
	}

	return chunkPos;
 80058a8:	69fb      	ldr	r3, [r7, #28]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058b4:	480c      	ldr	r0, [pc, #48]	; (80058e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80058b6:	490d      	ldr	r1, [pc, #52]	; (80058ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80058b8:	4a0d      	ldr	r2, [pc, #52]	; (80058f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80058ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058bc:	e002      	b.n	80058c4 <LoopCopyDataInit>

080058be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058c2:	3304      	adds	r3, #4

080058c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058c8:	d3f9      	bcc.n	80058be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058ca:	4a0a      	ldr	r2, [pc, #40]	; (80058f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058cc:	4c0a      	ldr	r4, [pc, #40]	; (80058f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80058ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058d0:	e001      	b.n	80058d6 <LoopFillZerobss>

080058d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058d4:	3204      	adds	r2, #4

080058d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058d8:	d3fb      	bcc.n	80058d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058da:	f7ff f9ab 	bl	8004c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058de:	f003 fbab 	bl	8009038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80058e2:	f7fe fc11 	bl	8004108 <main>
  bx lr
 80058e6:	4770      	bx	lr
  ldr r0, =_sdata
 80058e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058ec:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80058f0:	080093c8 	.word	0x080093c8
  ldr r2, =_sbss
 80058f4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80058f8:	2000072c 	.word	0x2000072c

080058fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80058fc:	e7fe      	b.n	80058fc <ADC1_2_IRQHandler>
	...

08005900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005904:	4b08      	ldr	r3, [pc, #32]	; (8005928 <HAL_Init+0x28>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a07      	ldr	r2, [pc, #28]	; (8005928 <HAL_Init+0x28>)
 800590a:	f043 0310 	orr.w	r3, r3, #16
 800590e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005910:	2003      	movs	r0, #3
 8005912:	f000 fd7b 	bl	800640c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005916:	200f      	movs	r0, #15
 8005918:	f000 f808 	bl	800592c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800591c:	f7fe fff2 	bl	8004904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40022000 	.word	0x40022000

0800592c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005934:	4b12      	ldr	r3, [pc, #72]	; (8005980 <HAL_InitTick+0x54>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4b12      	ldr	r3, [pc, #72]	; (8005984 <HAL_InitTick+0x58>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	4619      	mov	r1, r3
 800593e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005942:	fbb3 f3f1 	udiv	r3, r3, r1
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fd93 	bl	8006476 <HAL_SYSTICK_Config>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e00e      	b.n	8005978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b0f      	cmp	r3, #15
 800595e:	d80a      	bhi.n	8005976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005960:	2200      	movs	r2, #0
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	f000 fd5b 	bl	8006422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800596c:	4a06      	ldr	r2, [pc, #24]	; (8005988 <HAL_InitTick+0x5c>)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	e000      	b.n	8005978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000004 	.word	0x20000004
 8005984:	20000084 	.word	0x20000084
 8005988:	20000080 	.word	0x20000080

0800598c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <HAL_IncTick+0x1c>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_IncTick+0x20>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4413      	add	r3, r2
 800599c:	4a03      	ldr	r2, [pc, #12]	; (80059ac <HAL_IncTick+0x20>)
 800599e:	6013      	str	r3, [r2, #0]
}
 80059a0:	bf00      	nop
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr
 80059a8:	20000084 	.word	0x20000084
 80059ac:	20000728 	.word	0x20000728

080059b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  return uwTick;
 80059b4:	4b02      	ldr	r3, [pc, #8]	; (80059c0 <HAL_GetTick+0x10>)
 80059b6:	681b      	ldr	r3, [r3, #0]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr
 80059c0:	20000728 	.word	0x20000728

080059c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0be      	b.n	8005b64 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fe ffb0 	bl	8004968 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fbf1 	bl	80061f0 <ADC_ConversionStop_Disable>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f040 8099 	bne.w	8005b52 <HAL_ADC_Init+0x18e>
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f040 8095 	bne.w	8005b52 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a30:	f023 0302 	bic.w	r3, r3, #2
 8005a34:	f043 0202 	orr.w	r2, r3, #2
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005a44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	7b1b      	ldrb	r3, [r3, #12]
 8005a4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005a4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5c:	d003      	beq.n	8005a66 <HAL_ADC_Init+0xa2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d102      	bne.n	8005a6c <HAL_ADC_Init+0xa8>
 8005a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a6a:	e000      	b.n	8005a6e <HAL_ADC_Init+0xaa>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	7d1b      	ldrb	r3, [r3, #20]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d119      	bne.n	8005ab0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	7b1b      	ldrb	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	035a      	lsls	r2, r3, #13
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	e00b      	b.n	8005ab0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	f043 0220 	orr.w	r2, r3, #32
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	f043 0201 	orr.w	r2, r3, #1
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	4b28      	ldr	r3, [pc, #160]	; (8005b6c <HAL_ADC_Init+0x1a8>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae0:	d003      	beq.n	8005aea <HAL_ADC_Init+0x126>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d104      	bne.n	8005af4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	051b      	lsls	r3, r3, #20
 8005af2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <HAL_ADC_Init+0x1ac>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d10b      	bne.n	8005b30 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	f043 0201 	orr.w	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005b2e:	e018      	b.n	8005b62 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f023 0312 	bic.w	r3, r3, #18
 8005b38:	f043 0210 	orr.w	r2, r3, #16
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	f043 0201 	orr.w	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005b50:	e007      	b.n	8005b62 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	f043 0210 	orr.w	r2, r3, #16
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	ffe1f7fd 	.word	0xffe1f7fd
 8005b70:	ff1f0efe 	.word	0xff1f0efe

08005b74 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_ADC_Start+0x1a>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e098      	b.n	8005cc0 <HAL_ADC_Start+0x14c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fad0 	bl	800613c <ADC_Enable>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f040 8087 	bne.w	8005cb6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb0:	f023 0301 	bic.w	r3, r3, #1
 8005bb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a41      	ldr	r2, [pc, #260]	; (8005cc8 <HAL_ADC_Start+0x154>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d105      	bne.n	8005bd2 <HAL_ADC_Start+0x5e>
 8005bc6:	4b41      	ldr	r3, [pc, #260]	; (8005ccc <HAL_ADC_Start+0x158>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d115      	bne.n	8005bfe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d026      	beq.n	8005c3a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005bf4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005bfc:	e01d      	b.n	8005c3a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a2f      	ldr	r2, [pc, #188]	; (8005ccc <HAL_ADC_Start+0x158>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d004      	beq.n	8005c1e <HAL_ADC_Start+0xaa>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a2b      	ldr	r2, [pc, #172]	; (8005cc8 <HAL_ADC_Start+0x154>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d10d      	bne.n	8005c3a <HAL_ADC_Start+0xc6>
 8005c1e:	4b2b      	ldr	r3, [pc, #172]	; (8005ccc <HAL_ADC_Start+0x158>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005c32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	f023 0206 	bic.w	r2, r3, #6
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c52:	e002      	b.n	8005c5a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f06f 0202 	mvn.w	r2, #2
 8005c6a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005c76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005c7a:	d113      	bne.n	8005ca4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005c80:	4a11      	ldr	r2, [pc, #68]	; (8005cc8 <HAL_ADC_Start+0x154>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d105      	bne.n	8005c92 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005c86:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <HAL_ADC_Start+0x158>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d108      	bne.n	8005ca4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005ca0:	609a      	str	r2, [r3, #8]
 8005ca2:	e00c      	b.n	8005cbe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005cb2:	609a      	str	r2, [r3, #8]
 8005cb4:	e003      	b.n	8005cbe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40012800 	.word	0x40012800
 8005ccc:	40012400 	.word	0x40012400

08005cd0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_ADC_Stop+0x1a>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e01a      	b.n	8005d20 <HAL_ADC_Stop+0x50>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa7c 	bl	80061f0 <ADC_ConversionStop_Disable>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	f043 0201 	orr.w	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005d3e:	f7ff fe37 	bl	80059b0 <HAL_GetTick>
 8005d42:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00b      	beq.n	8005d6a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	f043 0220 	orr.w	r2, r3, #32
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e0d3      	b.n	8005f12 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d131      	bne.n	8005ddc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d12a      	bne.n	8005ddc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005d86:	e021      	b.n	8005dcc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d01d      	beq.n	8005dcc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <HAL_ADC_PollForConversion+0x7e>
 8005d96:	f7ff fe0b 	bl	80059b0 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d212      	bcs.n	8005dcc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10b      	bne.n	8005dcc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db8:	f043 0204 	orr.w	r2, r3, #4
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e0a2      	b.n	8005f12 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0d6      	beq.n	8005d88 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005dda:	e070      	b.n	8005ebe <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005ddc:	4b4f      	ldr	r3, [pc, #316]	; (8005f1c <HAL_ADC_PollForConversion+0x1f4>)
 8005dde:	681c      	ldr	r4, [r3, #0]
 8005de0:	2002      	movs	r0, #2
 8005de2:	f001 fa89 	bl	80072f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005de6:	4603      	mov	r3, r0
 8005de8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6919      	ldr	r1, [r3, #16]
 8005df2:	4b4b      	ldr	r3, [pc, #300]	; (8005f20 <HAL_ADC_PollForConversion+0x1f8>)
 8005df4:	400b      	ands	r3, r1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d118      	bne.n	8005e2c <HAL_ADC_PollForConversion+0x104>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68d9      	ldr	r1, [r3, #12]
 8005e00:	4b48      	ldr	r3, [pc, #288]	; (8005f24 <HAL_ADC_PollForConversion+0x1fc>)
 8005e02:	400b      	ands	r3, r1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d111      	bne.n	8005e2c <HAL_ADC_PollForConversion+0x104>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6919      	ldr	r1, [r3, #16]
 8005e0e:	4b46      	ldr	r3, [pc, #280]	; (8005f28 <HAL_ADC_PollForConversion+0x200>)
 8005e10:	400b      	ands	r3, r1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <HAL_ADC_PollForConversion+0x100>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68d9      	ldr	r1, [r3, #12]
 8005e1c:	4b43      	ldr	r3, [pc, #268]	; (8005f2c <HAL_ADC_PollForConversion+0x204>)
 8005e1e:	400b      	ands	r3, r1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_ADC_PollForConversion+0x100>
 8005e24:	2314      	movs	r3, #20
 8005e26:	e020      	b.n	8005e6a <HAL_ADC_PollForConversion+0x142>
 8005e28:	2329      	movs	r3, #41	; 0x29
 8005e2a:	e01e      	b.n	8005e6a <HAL_ADC_PollForConversion+0x142>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6919      	ldr	r1, [r3, #16]
 8005e32:	4b3d      	ldr	r3, [pc, #244]	; (8005f28 <HAL_ADC_PollForConversion+0x200>)
 8005e34:	400b      	ands	r3, r1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_ADC_PollForConversion+0x120>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68d9      	ldr	r1, [r3, #12]
 8005e40:	4b3a      	ldr	r3, [pc, #232]	; (8005f2c <HAL_ADC_PollForConversion+0x204>)
 8005e42:	400b      	ands	r3, r1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00d      	beq.n	8005e64 <HAL_ADC_PollForConversion+0x13c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6919      	ldr	r1, [r3, #16]
 8005e4e:	4b38      	ldr	r3, [pc, #224]	; (8005f30 <HAL_ADC_PollForConversion+0x208>)
 8005e50:	400b      	ands	r3, r1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d108      	bne.n	8005e68 <HAL_ADC_PollForConversion+0x140>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68d9      	ldr	r1, [r3, #12]
 8005e5c:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <HAL_ADC_PollForConversion+0x208>)
 8005e5e:	400b      	ands	r3, r1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <HAL_ADC_PollForConversion+0x140>
 8005e64:	2354      	movs	r3, #84	; 0x54
 8005e66:	e000      	b.n	8005e6a <HAL_ADC_PollForConversion+0x142>
 8005e68:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005e6a:	fb02 f303 	mul.w	r3, r2, r3
 8005e6e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005e70:	e021      	b.n	8005eb6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d01a      	beq.n	8005eb0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <HAL_ADC_PollForConversion+0x168>
 8005e80:	f7ff fd96 	bl	80059b0 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d20f      	bcs.n	8005eb0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d90b      	bls.n	8005eb0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	f043 0204 	orr.w	r2, r3, #4
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e030      	b.n	8005f12 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d8d9      	bhi.n	8005e72 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f06f 0212 	mvn.w	r2, #18
 8005ec6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005ede:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005ee2:	d115      	bne.n	8005f10 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d111      	bne.n	8005f10 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	f043 0201 	orr.w	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd90      	pop	{r4, r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000004 	.word	0x20000004
 8005f20:	24924924 	.word	0x24924924
 8005f24:	00924924 	.word	0x00924924
 8005f28:	12492492 	.word	0x12492492
 8005f2c:	00492492 	.word	0x00492492
 8005f30:	00249249 	.word	0x00249249

08005f34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_ADC_ConfigChannel+0x20>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e0dc      	b.n	8006126 <HAL_ADC_ConfigChannel+0x1da>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b06      	cmp	r3, #6
 8005f7a:	d81c      	bhi.n	8005fb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3b05      	subs	r3, #5
 8005f8e:	221f      	movs	r2, #31
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	4019      	ands	r1, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3b05      	subs	r3, #5
 8005fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	635a      	str	r2, [r3, #52]	; 0x34
 8005fb4:	e03c      	b.n	8006030 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b0c      	cmp	r3, #12
 8005fbc:	d81c      	bhi.n	8005ff8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	3b23      	subs	r3, #35	; 0x23
 8005fd0:	221f      	movs	r2, #31
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	4019      	ands	r1, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3b23      	subs	r3, #35	; 0x23
 8005fea:	fa00 f203 	lsl.w	r2, r0, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff6:	e01b      	b.n	8006030 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	3b41      	subs	r3, #65	; 0x41
 800600a:	221f      	movs	r2, #31
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	43db      	mvns	r3, r3
 8006012:	4019      	ands	r1, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	3b41      	subs	r3, #65	; 0x41
 8006024:	fa00 f203 	lsl.w	r2, r0, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b09      	cmp	r3, #9
 8006036:	d91c      	bls.n	8006072 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68d9      	ldr	r1, [r3, #12]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4613      	mov	r3, r2
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	4413      	add	r3, r2
 8006048:	3b1e      	subs	r3, #30
 800604a:	2207      	movs	r2, #7
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	43db      	mvns	r3, r3
 8006052:	4019      	ands	r1, r3
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	6898      	ldr	r0, [r3, #8]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	4413      	add	r3, r2
 8006062:	3b1e      	subs	r3, #30
 8006064:	fa00 f203 	lsl.w	r2, r0, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	60da      	str	r2, [r3, #12]
 8006070:	e019      	b.n	80060a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6919      	ldr	r1, [r3, #16]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	4613      	mov	r3, r2
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	4413      	add	r3, r2
 8006082:	2207      	movs	r2, #7
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	4019      	ands	r1, r3
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	6898      	ldr	r0, [r3, #8]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	4413      	add	r3, r2
 800609a:	fa00 f203 	lsl.w	r2, r0, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b10      	cmp	r3, #16
 80060ac:	d003      	beq.n	80060b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80060b2:	2b11      	cmp	r3, #17
 80060b4:	d132      	bne.n	800611c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1d      	ldr	r2, [pc, #116]	; (8006130 <HAL_ADC_ConfigChannel+0x1e4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d125      	bne.n	800610c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d126      	bne.n	800611c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80060dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b10      	cmp	r3, #16
 80060e4:	d11a      	bne.n	800611c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80060e6:	4b13      	ldr	r3, [pc, #76]	; (8006134 <HAL_ADC_ConfigChannel+0x1e8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a13      	ldr	r2, [pc, #76]	; (8006138 <HAL_ADC_ConfigChannel+0x1ec>)
 80060ec:	fba2 2303 	umull	r2, r3, r2, r3
 80060f0:	0c9a      	lsrs	r2, r3, #18
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80060fc:	e002      	b.n	8006104 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	3b01      	subs	r3, #1
 8006102:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f9      	bne.n	80060fe <HAL_ADC_ConfigChannel+0x1b2>
 800610a:	e007      	b.n	800611c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	f043 0220 	orr.w	r2, r3, #32
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr
 8006130:	40012400 	.word	0x40012400
 8006134:	20000004 	.word	0x20000004
 8006138:	431bde83 	.word	0x431bde83

0800613c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b01      	cmp	r3, #1
 8006158:	d040      	beq.n	80061dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0201 	orr.w	r2, r2, #1
 8006168:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800616a:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <ADC_Enable+0xac>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1f      	ldr	r2, [pc, #124]	; (80061ec <ADC_Enable+0xb0>)
 8006170:	fba2 2303 	umull	r2, r3, r2, r3
 8006174:	0c9b      	lsrs	r3, r3, #18
 8006176:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006178:	e002      	b.n	8006180 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	3b01      	subs	r3, #1
 800617e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f9      	bne.n	800617a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006186:	f7ff fc13 	bl	80059b0 <HAL_GetTick>
 800618a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800618c:	e01f      	b.n	80061ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800618e:	f7ff fc0f 	bl	80059b0 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d918      	bls.n	80061ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d011      	beq.n	80061ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	f043 0210 	orr.w	r2, r3, #16
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	f043 0201 	orr.w	r2, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e007      	b.n	80061de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d1d8      	bne.n	800618e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000004 	.word	0x20000004
 80061ec:	431bde83 	.word	0x431bde83

080061f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b01      	cmp	r3, #1
 8006208:	d12e      	bne.n	8006268 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0201 	bic.w	r2, r2, #1
 8006218:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800621a:	f7ff fbc9 	bl	80059b0 <HAL_GetTick>
 800621e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006220:	e01b      	b.n	800625a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006222:	f7ff fbc5 	bl	80059b0 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d914      	bls.n	800625a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b01      	cmp	r3, #1
 800623c:	d10d      	bne.n	800625a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	f043 0210 	orr.w	r2, r3, #16
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	f043 0201 	orr.w	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e007      	b.n	800626a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b01      	cmp	r3, #1
 8006266:	d0dc      	beq.n	8006222 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006284:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006290:	4013      	ands	r3, r2
 8006292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800629c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062a6:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <__NVIC_SetPriorityGrouping+0x44>)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	60d3      	str	r3, [r2, #12]
}
 80062ac:	bf00      	nop
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	e000ed00 	.word	0xe000ed00

080062bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062c0:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <__NVIC_GetPriorityGrouping+0x18>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	0a1b      	lsrs	r3, r3, #8
 80062c6:	f003 0307 	and.w	r3, r3, #7
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	e000ed00 	.word	0xe000ed00

080062d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	db0b      	blt.n	8006302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	f003 021f 	and.w	r2, r3, #31
 80062f0:	4906      	ldr	r1, [pc, #24]	; (800630c <__NVIC_EnableIRQ+0x34>)
 80062f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	2001      	movs	r0, #1
 80062fa:	fa00 f202 	lsl.w	r2, r0, r2
 80062fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr
 800630c:	e000e100 	.word	0xe000e100

08006310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	6039      	str	r1, [r7, #0]
 800631a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800631c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006320:	2b00      	cmp	r3, #0
 8006322:	db0a      	blt.n	800633a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	b2da      	uxtb	r2, r3
 8006328:	490c      	ldr	r1, [pc, #48]	; (800635c <__NVIC_SetPriority+0x4c>)
 800632a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632e:	0112      	lsls	r2, r2, #4
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	440b      	add	r3, r1
 8006334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006338:	e00a      	b.n	8006350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	4908      	ldr	r1, [pc, #32]	; (8006360 <__NVIC_SetPriority+0x50>)
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	3b04      	subs	r3, #4
 8006348:	0112      	lsls	r2, r2, #4
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	440b      	add	r3, r1
 800634e:	761a      	strb	r2, [r3, #24]
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	e000e100 	.word	0xe000e100
 8006360:	e000ed00 	.word	0xe000ed00

08006364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006364:	b480      	push	{r7}
 8006366:	b089      	sub	sp, #36	; 0x24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	f1c3 0307 	rsb	r3, r3, #7
 800637e:	2b04      	cmp	r3, #4
 8006380:	bf28      	it	cs
 8006382:	2304      	movcs	r3, #4
 8006384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	3304      	adds	r3, #4
 800638a:	2b06      	cmp	r3, #6
 800638c:	d902      	bls.n	8006394 <NVIC_EncodePriority+0x30>
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	3b03      	subs	r3, #3
 8006392:	e000      	b.n	8006396 <NVIC_EncodePriority+0x32>
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006398:	f04f 32ff 	mov.w	r2, #4294967295
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	43da      	mvns	r2, r3
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	401a      	ands	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063ac:	f04f 31ff 	mov.w	r1, #4294967295
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	fa01 f303 	lsl.w	r3, r1, r3
 80063b6:	43d9      	mvns	r1, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063bc:	4313      	orrs	r3, r2
         );
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3724      	adds	r7, #36	; 0x24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr

080063c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063d8:	d301      	bcc.n	80063de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063da:	2301      	movs	r3, #1
 80063dc:	e00f      	b.n	80063fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063de:	4a0a      	ldr	r2, [pc, #40]	; (8006408 <SysTick_Config+0x40>)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063e6:	210f      	movs	r1, #15
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	f7ff ff90 	bl	8006310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <SysTick_Config+0x40>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063f6:	4b04      	ldr	r3, [pc, #16]	; (8006408 <SysTick_Config+0x40>)
 80063f8:	2207      	movs	r2, #7
 80063fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	e000e010 	.word	0xe000e010

0800640c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff ff2d 	bl	8006274 <__NVIC_SetPriorityGrouping>
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006422:	b580      	push	{r7, lr}
 8006424:	b086      	sub	sp, #24
 8006426:	af00      	add	r7, sp, #0
 8006428:	4603      	mov	r3, r0
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
 800642e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006434:	f7ff ff42 	bl	80062bc <__NVIC_GetPriorityGrouping>
 8006438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	6978      	ldr	r0, [r7, #20]
 8006440:	f7ff ff90 	bl	8006364 <NVIC_EncodePriority>
 8006444:	4602      	mov	r2, r0
 8006446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800644a:	4611      	mov	r1, r2
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff ff5f 	bl	8006310 <__NVIC_SetPriority>
}
 8006452:	bf00      	nop
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	4603      	mov	r3, r0
 8006462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff ff35 	bl	80062d8 <__NVIC_EnableIRQ>
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff ffa2 	bl	80063c8 <SysTick_Config>
 8006484:	4603      	mov	r3, r0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800648e:	b480      	push	{r7}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d008      	beq.n	80064b6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2204      	movs	r2, #4
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e020      	b.n	80064f8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 020e 	bic.w	r2, r2, #14
 80064c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	2101      	movs	r1, #1
 80064e0:	fa01 f202 	lsl.w	r2, r1, r2
 80064e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
	...

08006504 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006516:	2b02      	cmp	r3, #2
 8006518:	d005      	beq.n	8006526 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2204      	movs	r2, #4
 800651e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	e051      	b.n	80065ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 020e 	bic.w	r2, r2, #14
 8006534:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0201 	bic.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a22      	ldr	r2, [pc, #136]	; (80065d4 <HAL_DMA_Abort_IT+0xd0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d029      	beq.n	80065a4 <HAL_DMA_Abort_IT+0xa0>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a20      	ldr	r2, [pc, #128]	; (80065d8 <HAL_DMA_Abort_IT+0xd4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d022      	beq.n	80065a0 <HAL_DMA_Abort_IT+0x9c>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1f      	ldr	r2, [pc, #124]	; (80065dc <HAL_DMA_Abort_IT+0xd8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d01a      	beq.n	800659a <HAL_DMA_Abort_IT+0x96>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1d      	ldr	r2, [pc, #116]	; (80065e0 <HAL_DMA_Abort_IT+0xdc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d012      	beq.n	8006594 <HAL_DMA_Abort_IT+0x90>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1c      	ldr	r2, [pc, #112]	; (80065e4 <HAL_DMA_Abort_IT+0xe0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00a      	beq.n	800658e <HAL_DMA_Abort_IT+0x8a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1a      	ldr	r2, [pc, #104]	; (80065e8 <HAL_DMA_Abort_IT+0xe4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d102      	bne.n	8006588 <HAL_DMA_Abort_IT+0x84>
 8006582:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006586:	e00e      	b.n	80065a6 <HAL_DMA_Abort_IT+0xa2>
 8006588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800658c:	e00b      	b.n	80065a6 <HAL_DMA_Abort_IT+0xa2>
 800658e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006592:	e008      	b.n	80065a6 <HAL_DMA_Abort_IT+0xa2>
 8006594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006598:	e005      	b.n	80065a6 <HAL_DMA_Abort_IT+0xa2>
 800659a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800659e:	e002      	b.n	80065a6 <HAL_DMA_Abort_IT+0xa2>
 80065a0:	2310      	movs	r3, #16
 80065a2:	e000      	b.n	80065a6 <HAL_DMA_Abort_IT+0xa2>
 80065a4:	2301      	movs	r3, #1
 80065a6:	4a11      	ldr	r2, [pc, #68]	; (80065ec <HAL_DMA_Abort_IT+0xe8>)
 80065a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
    } 
  }
  return status;
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	40020008 	.word	0x40020008
 80065d8:	4002001c 	.word	0x4002001c
 80065dc:	40020030 	.word	0x40020030
 80065e0:	40020044 	.word	0x40020044
 80065e4:	40020058 	.word	0x40020058
 80065e8:	4002006c 	.word	0x4002006c
 80065ec:	40020000 	.word	0x40020000

080065f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b08b      	sub	sp, #44	; 0x2c
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065fa:	2300      	movs	r3, #0
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80065fe:	2300      	movs	r3, #0
 8006600:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006602:	e169      	b.n	80068d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006604:	2201      	movs	r2, #1
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	4013      	ands	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	429a      	cmp	r2, r3
 800661e:	f040 8158 	bne.w	80068d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	4a9a      	ldr	r2, [pc, #616]	; (8006890 <HAL_GPIO_Init+0x2a0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d05e      	beq.n	80066ea <HAL_GPIO_Init+0xfa>
 800662c:	4a98      	ldr	r2, [pc, #608]	; (8006890 <HAL_GPIO_Init+0x2a0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d875      	bhi.n	800671e <HAL_GPIO_Init+0x12e>
 8006632:	4a98      	ldr	r2, [pc, #608]	; (8006894 <HAL_GPIO_Init+0x2a4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d058      	beq.n	80066ea <HAL_GPIO_Init+0xfa>
 8006638:	4a96      	ldr	r2, [pc, #600]	; (8006894 <HAL_GPIO_Init+0x2a4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d86f      	bhi.n	800671e <HAL_GPIO_Init+0x12e>
 800663e:	4a96      	ldr	r2, [pc, #600]	; (8006898 <HAL_GPIO_Init+0x2a8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d052      	beq.n	80066ea <HAL_GPIO_Init+0xfa>
 8006644:	4a94      	ldr	r2, [pc, #592]	; (8006898 <HAL_GPIO_Init+0x2a8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d869      	bhi.n	800671e <HAL_GPIO_Init+0x12e>
 800664a:	4a94      	ldr	r2, [pc, #592]	; (800689c <HAL_GPIO_Init+0x2ac>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d04c      	beq.n	80066ea <HAL_GPIO_Init+0xfa>
 8006650:	4a92      	ldr	r2, [pc, #584]	; (800689c <HAL_GPIO_Init+0x2ac>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d863      	bhi.n	800671e <HAL_GPIO_Init+0x12e>
 8006656:	4a92      	ldr	r2, [pc, #584]	; (80068a0 <HAL_GPIO_Init+0x2b0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d046      	beq.n	80066ea <HAL_GPIO_Init+0xfa>
 800665c:	4a90      	ldr	r2, [pc, #576]	; (80068a0 <HAL_GPIO_Init+0x2b0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d85d      	bhi.n	800671e <HAL_GPIO_Init+0x12e>
 8006662:	2b12      	cmp	r3, #18
 8006664:	d82a      	bhi.n	80066bc <HAL_GPIO_Init+0xcc>
 8006666:	2b12      	cmp	r3, #18
 8006668:	d859      	bhi.n	800671e <HAL_GPIO_Init+0x12e>
 800666a:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <HAL_GPIO_Init+0x80>)
 800666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006670:	080066eb 	.word	0x080066eb
 8006674:	080066c5 	.word	0x080066c5
 8006678:	080066d7 	.word	0x080066d7
 800667c:	08006719 	.word	0x08006719
 8006680:	0800671f 	.word	0x0800671f
 8006684:	0800671f 	.word	0x0800671f
 8006688:	0800671f 	.word	0x0800671f
 800668c:	0800671f 	.word	0x0800671f
 8006690:	0800671f 	.word	0x0800671f
 8006694:	0800671f 	.word	0x0800671f
 8006698:	0800671f 	.word	0x0800671f
 800669c:	0800671f 	.word	0x0800671f
 80066a0:	0800671f 	.word	0x0800671f
 80066a4:	0800671f 	.word	0x0800671f
 80066a8:	0800671f 	.word	0x0800671f
 80066ac:	0800671f 	.word	0x0800671f
 80066b0:	0800671f 	.word	0x0800671f
 80066b4:	080066cd 	.word	0x080066cd
 80066b8:	080066e1 	.word	0x080066e1
 80066bc:	4a79      	ldr	r2, [pc, #484]	; (80068a4 <HAL_GPIO_Init+0x2b4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d013      	beq.n	80066ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80066c2:	e02c      	b.n	800671e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	623b      	str	r3, [r7, #32]
          break;
 80066ca:	e029      	b.n	8006720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	3304      	adds	r3, #4
 80066d2:	623b      	str	r3, [r7, #32]
          break;
 80066d4:	e024      	b.n	8006720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	3308      	adds	r3, #8
 80066dc:	623b      	str	r3, [r7, #32]
          break;
 80066de:	e01f      	b.n	8006720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	330c      	adds	r3, #12
 80066e6:	623b      	str	r3, [r7, #32]
          break;
 80066e8:	e01a      	b.n	8006720 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d102      	bne.n	80066f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80066f2:	2304      	movs	r3, #4
 80066f4:	623b      	str	r3, [r7, #32]
          break;
 80066f6:	e013      	b.n	8006720 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d105      	bne.n	800670c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006700:	2308      	movs	r3, #8
 8006702:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	611a      	str	r2, [r3, #16]
          break;
 800670a:	e009      	b.n	8006720 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800670c:	2308      	movs	r3, #8
 800670e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	615a      	str	r2, [r3, #20]
          break;
 8006716:	e003      	b.n	8006720 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006718:	2300      	movs	r3, #0
 800671a:	623b      	str	r3, [r7, #32]
          break;
 800671c:	e000      	b.n	8006720 <HAL_GPIO_Init+0x130>
          break;
 800671e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2bff      	cmp	r3, #255	; 0xff
 8006724:	d801      	bhi.n	800672a <HAL_GPIO_Init+0x13a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	e001      	b.n	800672e <HAL_GPIO_Init+0x13e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3304      	adds	r3, #4
 800672e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2bff      	cmp	r3, #255	; 0xff
 8006734:	d802      	bhi.n	800673c <HAL_GPIO_Init+0x14c>
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	e002      	b.n	8006742 <HAL_GPIO_Init+0x152>
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	3b08      	subs	r3, #8
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	210f      	movs	r1, #15
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	fa01 f303 	lsl.w	r3, r1, r3
 8006750:	43db      	mvns	r3, r3
 8006752:	401a      	ands	r2, r3
 8006754:	6a39      	ldr	r1, [r7, #32]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	fa01 f303 	lsl.w	r3, r1, r3
 800675c:	431a      	orrs	r2, r3
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80b1 	beq.w	80068d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006770:	4b4d      	ldr	r3, [pc, #308]	; (80068a8 <HAL_GPIO_Init+0x2b8>)
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	4a4c      	ldr	r2, [pc, #304]	; (80068a8 <HAL_GPIO_Init+0x2b8>)
 8006776:	f043 0301 	orr.w	r3, r3, #1
 800677a:	6193      	str	r3, [r2, #24]
 800677c:	4b4a      	ldr	r3, [pc, #296]	; (80068a8 <HAL_GPIO_Init+0x2b8>)
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006788:	4a48      	ldr	r2, [pc, #288]	; (80068ac <HAL_GPIO_Init+0x2bc>)
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	089b      	lsrs	r3, r3, #2
 800678e:	3302      	adds	r3, #2
 8006790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006794:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	220f      	movs	r2, #15
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	43db      	mvns	r3, r3
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4013      	ands	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a40      	ldr	r2, [pc, #256]	; (80068b0 <HAL_GPIO_Init+0x2c0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d013      	beq.n	80067dc <HAL_GPIO_Init+0x1ec>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a3f      	ldr	r2, [pc, #252]	; (80068b4 <HAL_GPIO_Init+0x2c4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00d      	beq.n	80067d8 <HAL_GPIO_Init+0x1e8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a3e      	ldr	r2, [pc, #248]	; (80068b8 <HAL_GPIO_Init+0x2c8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d007      	beq.n	80067d4 <HAL_GPIO_Init+0x1e4>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a3d      	ldr	r2, [pc, #244]	; (80068bc <HAL_GPIO_Init+0x2cc>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d101      	bne.n	80067d0 <HAL_GPIO_Init+0x1e0>
 80067cc:	2303      	movs	r3, #3
 80067ce:	e006      	b.n	80067de <HAL_GPIO_Init+0x1ee>
 80067d0:	2304      	movs	r3, #4
 80067d2:	e004      	b.n	80067de <HAL_GPIO_Init+0x1ee>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e002      	b.n	80067de <HAL_GPIO_Init+0x1ee>
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <HAL_GPIO_Init+0x1ee>
 80067dc:	2300      	movs	r3, #0
 80067de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e0:	f002 0203 	and.w	r2, r2, #3
 80067e4:	0092      	lsls	r2, r2, #2
 80067e6:	4093      	lsls	r3, r2
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80067ee:	492f      	ldr	r1, [pc, #188]	; (80068ac <HAL_GPIO_Init+0x2bc>)
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	089b      	lsrs	r3, r3, #2
 80067f4:	3302      	adds	r3, #2
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d006      	beq.n	8006816 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006808:	4b2d      	ldr	r3, [pc, #180]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	492c      	ldr	r1, [pc, #176]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	4313      	orrs	r3, r2
 8006812:	600b      	str	r3, [r1, #0]
 8006814:	e006      	b.n	8006824 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006816:	4b2a      	ldr	r3, [pc, #168]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	43db      	mvns	r3, r3
 800681e:	4928      	ldr	r1, [pc, #160]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 8006820:	4013      	ands	r3, r2
 8006822:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d006      	beq.n	800683e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006830:	4b23      	ldr	r3, [pc, #140]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	4922      	ldr	r1, [pc, #136]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	4313      	orrs	r3, r2
 800683a:	604b      	str	r3, [r1, #4]
 800683c:	e006      	b.n	800684c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800683e:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	43db      	mvns	r3, r3
 8006846:	491e      	ldr	r1, [pc, #120]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 8006848:	4013      	ands	r3, r2
 800684a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d006      	beq.n	8006866 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006858:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	4918      	ldr	r1, [pc, #96]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	4313      	orrs	r3, r2
 8006862:	608b      	str	r3, [r1, #8]
 8006864:	e006      	b.n	8006874 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006866:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	43db      	mvns	r3, r3
 800686e:	4914      	ldr	r1, [pc, #80]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 8006870:	4013      	ands	r3, r2
 8006872:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d021      	beq.n	80068c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006880:	4b0f      	ldr	r3, [pc, #60]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	490e      	ldr	r1, [pc, #56]	; (80068c0 <HAL_GPIO_Init+0x2d0>)
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	4313      	orrs	r3, r2
 800688a:	60cb      	str	r3, [r1, #12]
 800688c:	e021      	b.n	80068d2 <HAL_GPIO_Init+0x2e2>
 800688e:	bf00      	nop
 8006890:	10320000 	.word	0x10320000
 8006894:	10310000 	.word	0x10310000
 8006898:	10220000 	.word	0x10220000
 800689c:	10210000 	.word	0x10210000
 80068a0:	10120000 	.word	0x10120000
 80068a4:	10110000 	.word	0x10110000
 80068a8:	40021000 	.word	0x40021000
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40010800 	.word	0x40010800
 80068b4:	40010c00 	.word	0x40010c00
 80068b8:	40011000 	.word	0x40011000
 80068bc:	40011400 	.word	0x40011400
 80068c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80068c4:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_GPIO_Init+0x304>)
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	43db      	mvns	r3, r3
 80068cc:	4909      	ldr	r1, [pc, #36]	; (80068f4 <HAL_GPIO_Init+0x304>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	3301      	adds	r3, #1
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	fa22 f303 	lsr.w	r3, r2, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f47f ae8e 	bne.w	8006604 <HAL_GPIO_Init+0x14>
  }
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	372c      	adds	r7, #44	; 0x2c
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr
 80068f4:	40010400 	.word	0x40010400

080068f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	807b      	strh	r3, [r7, #2]
 8006904:	4613      	mov	r3, r2
 8006906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006908:	787b      	ldrb	r3, [r7, #1]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800690e:	887a      	ldrh	r2, [r7, #2]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006914:	e003      	b.n	800691e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006916:	887b      	ldrh	r3, [r7, #2]
 8006918:	041a      	lsls	r2, r3, #16
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	611a      	str	r2, [r3, #16]
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800692c:	4b03      	ldr	r3, [pc, #12]	; (800693c <HAL_PWR_EnableBkUpAccess+0x14>)
 800692e:	2201      	movs	r2, #1
 8006930:	601a      	str	r2, [r3, #0]
}
 8006932:	bf00      	nop
 8006934:	46bd      	mov	sp, r7
 8006936:	bc80      	pop	{r7}
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	420e0020 	.word	0x420e0020

08006940 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006944:	4b03      	ldr	r3, [pc, #12]	; (8006954 <HAL_PWR_DisableBkUpAccess+0x14>)
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
}
 800694a:	bf00      	nop
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	420e0020 	.word	0x420e0020

08006958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e26c      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 8087 	beq.w	8006a86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006978:	4b92      	ldr	r3, [pc, #584]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f003 030c 	and.w	r3, r3, #12
 8006980:	2b04      	cmp	r3, #4
 8006982:	d00c      	beq.n	800699e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006984:	4b8f      	ldr	r3, [pc, #572]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f003 030c 	and.w	r3, r3, #12
 800698c:	2b08      	cmp	r3, #8
 800698e:	d112      	bne.n	80069b6 <HAL_RCC_OscConfig+0x5e>
 8006990:	4b8c      	ldr	r3, [pc, #560]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699c:	d10b      	bne.n	80069b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800699e:	4b89      	ldr	r3, [pc, #548]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d06c      	beq.n	8006a84 <HAL_RCC_OscConfig+0x12c>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d168      	bne.n	8006a84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e246      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069be:	d106      	bne.n	80069ce <HAL_RCC_OscConfig+0x76>
 80069c0:	4b80      	ldr	r3, [pc, #512]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a7f      	ldr	r2, [pc, #508]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 80069c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	e02e      	b.n	8006a2c <HAL_RCC_OscConfig+0xd4>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10c      	bne.n	80069f0 <HAL_RCC_OscConfig+0x98>
 80069d6:	4b7b      	ldr	r3, [pc, #492]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a7a      	ldr	r2, [pc, #488]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 80069dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	4b78      	ldr	r3, [pc, #480]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a77      	ldr	r2, [pc, #476]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 80069e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e01d      	b.n	8006a2c <HAL_RCC_OscConfig+0xd4>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069f8:	d10c      	bne.n	8006a14 <HAL_RCC_OscConfig+0xbc>
 80069fa:	4b72      	ldr	r3, [pc, #456]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a71      	ldr	r2, [pc, #452]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	4b6f      	ldr	r3, [pc, #444]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a6e      	ldr	r2, [pc, #440]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	e00b      	b.n	8006a2c <HAL_RCC_OscConfig+0xd4>
 8006a14:	4b6b      	ldr	r3, [pc, #428]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a6a      	ldr	r2, [pc, #424]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	4b68      	ldr	r3, [pc, #416]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a67      	ldr	r2, [pc, #412]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d013      	beq.n	8006a5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a34:	f7fe ffbc 	bl	80059b0 <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a3c:	f7fe ffb8 	bl	80059b0 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b64      	cmp	r3, #100	; 0x64
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e1fa      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a4e:	4b5d      	ldr	r3, [pc, #372]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d0f0      	beq.n	8006a3c <HAL_RCC_OscConfig+0xe4>
 8006a5a:	e014      	b.n	8006a86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5c:	f7fe ffa8 	bl	80059b0 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a64:	f7fe ffa4 	bl	80059b0 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b64      	cmp	r3, #100	; 0x64
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e1e6      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a76:	4b53      	ldr	r3, [pc, #332]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1f0      	bne.n	8006a64 <HAL_RCC_OscConfig+0x10c>
 8006a82:	e000      	b.n	8006a86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d063      	beq.n	8006b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a92:	4b4c      	ldr	r3, [pc, #304]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f003 030c 	and.w	r3, r3, #12
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00b      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a9e:	4b49      	ldr	r3, [pc, #292]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d11c      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x18c>
 8006aaa:	4b46      	ldr	r3, [pc, #280]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d116      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ab6:	4b43      	ldr	r3, [pc, #268]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <HAL_RCC_OscConfig+0x176>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d001      	beq.n	8006ace <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e1ba      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ace:	4b3d      	ldr	r3, [pc, #244]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	4939      	ldr	r1, [pc, #228]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ae2:	e03a      	b.n	8006b5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d020      	beq.n	8006b2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aec:	4b36      	ldr	r3, [pc, #216]	; (8006bc8 <HAL_RCC_OscConfig+0x270>)
 8006aee:	2201      	movs	r2, #1
 8006af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af2:	f7fe ff5d 	bl	80059b0 <HAL_GetTick>
 8006af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af8:	e008      	b.n	8006b0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006afa:	f7fe ff59 	bl	80059b0 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d901      	bls.n	8006b0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e19b      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b0c:	4b2d      	ldr	r3, [pc, #180]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0f0      	beq.n	8006afa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b18:	4b2a      	ldr	r3, [pc, #168]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	4927      	ldr	r1, [pc, #156]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	600b      	str	r3, [r1, #0]
 8006b2c:	e015      	b.n	8006b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b2e:	4b26      	ldr	r3, [pc, #152]	; (8006bc8 <HAL_RCC_OscConfig+0x270>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7fe ff3c 	bl	80059b0 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b3c:	f7fe ff38 	bl	80059b0 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e17a      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b4e:	4b1d      	ldr	r3, [pc, #116]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f0      	bne.n	8006b3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d03a      	beq.n	8006bdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d019      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b6e:	4b17      	ldr	r3, [pc, #92]	; (8006bcc <HAL_RCC_OscConfig+0x274>)
 8006b70:	2201      	movs	r2, #1
 8006b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b74:	f7fe ff1c 	bl	80059b0 <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b7c:	f7fe ff18 	bl	80059b0 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e15a      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <HAL_RCC_OscConfig+0x26c>)
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f0      	beq.n	8006b7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	f000 fad8 	bl	8007150 <RCC_Delay>
 8006ba0:	e01c      	b.n	8006bdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <HAL_RCC_OscConfig+0x274>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ba8:	f7fe ff02 	bl	80059b0 <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bae:	e00f      	b.n	8006bd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bb0:	f7fe fefe 	bl	80059b0 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d908      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e140      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
 8006bc2:	bf00      	nop
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	42420000 	.word	0x42420000
 8006bcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd0:	4b9e      	ldr	r3, [pc, #632]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e9      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80a6 	beq.w	8006d36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bea:	2300      	movs	r3, #0
 8006bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bee:	4b97      	ldr	r3, [pc, #604]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10d      	bne.n	8006c16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bfa:	4b94      	ldr	r3, [pc, #592]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	4a93      	ldr	r2, [pc, #588]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c04:	61d3      	str	r3, [r2, #28]
 8006c06:	4b91      	ldr	r3, [pc, #580]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0e:	60bb      	str	r3, [r7, #8]
 8006c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c12:	2301      	movs	r3, #1
 8006c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c16:	4b8e      	ldr	r3, [pc, #568]	; (8006e50 <HAL_RCC_OscConfig+0x4f8>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d118      	bne.n	8006c54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c22:	4b8b      	ldr	r3, [pc, #556]	; (8006e50 <HAL_RCC_OscConfig+0x4f8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a8a      	ldr	r2, [pc, #552]	; (8006e50 <HAL_RCC_OscConfig+0x4f8>)
 8006c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c2e:	f7fe febf 	bl	80059b0 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c36:	f7fe febb 	bl	80059b0 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b64      	cmp	r3, #100	; 0x64
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e0fd      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c48:	4b81      	ldr	r3, [pc, #516]	; (8006e50 <HAL_RCC_OscConfig+0x4f8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0f0      	beq.n	8006c36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d106      	bne.n	8006c6a <HAL_RCC_OscConfig+0x312>
 8006c5c:	4b7b      	ldr	r3, [pc, #492]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	4a7a      	ldr	r2, [pc, #488]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	6213      	str	r3, [r2, #32]
 8006c68:	e02d      	b.n	8006cc6 <HAL_RCC_OscConfig+0x36e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10c      	bne.n	8006c8c <HAL_RCC_OscConfig+0x334>
 8006c72:	4b76      	ldr	r3, [pc, #472]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	4a75      	ldr	r2, [pc, #468]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	6213      	str	r3, [r2, #32]
 8006c7e:	4b73      	ldr	r3, [pc, #460]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	4a72      	ldr	r2, [pc, #456]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006c84:	f023 0304 	bic.w	r3, r3, #4
 8006c88:	6213      	str	r3, [r2, #32]
 8006c8a:	e01c      	b.n	8006cc6 <HAL_RCC_OscConfig+0x36e>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	2b05      	cmp	r3, #5
 8006c92:	d10c      	bne.n	8006cae <HAL_RCC_OscConfig+0x356>
 8006c94:	4b6d      	ldr	r3, [pc, #436]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	4a6c      	ldr	r2, [pc, #432]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006c9a:	f043 0304 	orr.w	r3, r3, #4
 8006c9e:	6213      	str	r3, [r2, #32]
 8006ca0:	4b6a      	ldr	r3, [pc, #424]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	4a69      	ldr	r2, [pc, #420]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	6213      	str	r3, [r2, #32]
 8006cac:	e00b      	b.n	8006cc6 <HAL_RCC_OscConfig+0x36e>
 8006cae:	4b67      	ldr	r3, [pc, #412]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	4a66      	ldr	r2, [pc, #408]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	6213      	str	r3, [r2, #32]
 8006cba:	4b64      	ldr	r3, [pc, #400]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	4a63      	ldr	r2, [pc, #396]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006cc0:	f023 0304 	bic.w	r3, r3, #4
 8006cc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d015      	beq.n	8006cfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cce:	f7fe fe6f 	bl	80059b0 <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd4:	e00a      	b.n	8006cec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd6:	f7fe fe6b 	bl	80059b0 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e0ab      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cec:	4b57      	ldr	r3, [pc, #348]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0ee      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x37e>
 8006cf8:	e014      	b.n	8006d24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cfa:	f7fe fe59 	bl	80059b0 <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d00:	e00a      	b.n	8006d18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d02:	f7fe fe55 	bl	80059b0 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e095      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d18:	4b4c      	ldr	r3, [pc, #304]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1ee      	bne.n	8006d02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d105      	bne.n	8006d36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d2a:	4b48      	ldr	r3, [pc, #288]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	4a47      	ldr	r2, [pc, #284]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 8081 	beq.w	8006e42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d40:	4b42      	ldr	r3, [pc, #264]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d061      	beq.n	8006e10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d146      	bne.n	8006de2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d54:	4b3f      	ldr	r3, [pc, #252]	; (8006e54 <HAL_RCC_OscConfig+0x4fc>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5a:	f7fe fe29 	bl	80059b0 <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d60:	e008      	b.n	8006d74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d62:	f7fe fe25 	bl	80059b0 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d901      	bls.n	8006d74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e067      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d74:	4b35      	ldr	r3, [pc, #212]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1f0      	bne.n	8006d62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d88:	d108      	bne.n	8006d9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d8a:	4b30      	ldr	r3, [pc, #192]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	492d      	ldr	r1, [pc, #180]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d9c:	4b2b      	ldr	r3, [pc, #172]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a19      	ldr	r1, [r3, #32]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	430b      	orrs	r3, r1
 8006dae:	4927      	ldr	r1, [pc, #156]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006db4:	4b27      	ldr	r3, [pc, #156]	; (8006e54 <HAL_RCC_OscConfig+0x4fc>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dba:	f7fe fdf9 	bl	80059b0 <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dc2:	f7fe fdf5 	bl	80059b0 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e037      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dd4:	4b1d      	ldr	r3, [pc, #116]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0f0      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x46a>
 8006de0:	e02f      	b.n	8006e42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de2:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <HAL_RCC_OscConfig+0x4fc>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de8:	f7fe fde2 	bl	80059b0 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df0:	f7fe fdde 	bl	80059b0 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e020      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e02:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f0      	bne.n	8006df0 <HAL_RCC_OscConfig+0x498>
 8006e0e:	e018      	b.n	8006e42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e013      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <HAL_RCC_OscConfig+0x4f4>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d106      	bne.n	8006e3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d001      	beq.n	8006e42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	40007000 	.word	0x40007000
 8006e54:	42420060 	.word	0x42420060

08006e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e0d0      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e6c:	4b6a      	ldr	r3, [pc, #424]	; (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d910      	bls.n	8006e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e7a:	4b67      	ldr	r3, [pc, #412]	; (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f023 0207 	bic.w	r2, r3, #7
 8006e82:	4965      	ldr	r1, [pc, #404]	; (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8a:	4b63      	ldr	r3, [pc, #396]	; (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d001      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0b8      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d020      	beq.n	8006eea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006eb4:	4b59      	ldr	r3, [pc, #356]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	4a58      	ldr	r2, [pc, #352]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ebe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ecc:	4b53      	ldr	r3, [pc, #332]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4a52      	ldr	r2, [pc, #328]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006ed2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006ed6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ed8:	4b50      	ldr	r3, [pc, #320]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	494d      	ldr	r1, [pc, #308]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d040      	beq.n	8006f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d107      	bne.n	8006f0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efe:	4b47      	ldr	r3, [pc, #284]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d115      	bne.n	8006f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e07f      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d107      	bne.n	8006f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f16:	4b41      	ldr	r3, [pc, #260]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d109      	bne.n	8006f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e073      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f26:	4b3d      	ldr	r3, [pc, #244]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e06b      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f36:	4b39      	ldr	r3, [pc, #228]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f023 0203 	bic.w	r2, r3, #3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	4936      	ldr	r1, [pc, #216]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f48:	f7fe fd32 	bl	80059b0 <HAL_GetTick>
 8006f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f4e:	e00a      	b.n	8006f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f50:	f7fe fd2e 	bl	80059b0 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e053      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f66:	4b2d      	ldr	r3, [pc, #180]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f003 020c 	and.w	r2, r3, #12
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d1eb      	bne.n	8006f50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f78:	4b27      	ldr	r3, [pc, #156]	; (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d210      	bcs.n	8006fa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f86:	4b24      	ldr	r3, [pc, #144]	; (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f023 0207 	bic.w	r2, r3, #7
 8006f8e:	4922      	ldr	r1, [pc, #136]	; (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f96:	4b20      	ldr	r3, [pc, #128]	; (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e032      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb4:	4b19      	ldr	r3, [pc, #100]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4916      	ldr	r1, [pc, #88]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d009      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	490e      	ldr	r1, [pc, #56]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fe6:	f000 f821 	bl	800702c <HAL_RCC_GetSysClockFreq>
 8006fea:	4602      	mov	r2, r0
 8006fec:	4b0b      	ldr	r3, [pc, #44]	; (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	490a      	ldr	r1, [pc, #40]	; (8007020 <HAL_RCC_ClockConfig+0x1c8>)
 8006ff8:	5ccb      	ldrb	r3, [r1, r3]
 8006ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffe:	4a09      	ldr	r2, [pc, #36]	; (8007024 <HAL_RCC_ClockConfig+0x1cc>)
 8007000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <HAL_RCC_ClockConfig+0x1d0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fc90 	bl	800592c <HAL_InitTick>

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	40022000 	.word	0x40022000
 800701c:	40021000 	.word	0x40021000
 8007020:	080093a8 	.word	0x080093a8
 8007024:	20000004 	.word	0x20000004
 8007028:	20000080 	.word	0x20000080

0800702c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800702c:	b490      	push	{r4, r7}
 800702e:	b08a      	sub	sp, #40	; 0x28
 8007030:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007032:	4b2a      	ldr	r3, [pc, #168]	; (80070dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8007034:	1d3c      	adds	r4, r7, #4
 8007036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800703c:	f240 2301 	movw	r3, #513	; 0x201
 8007040:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	61fb      	str	r3, [r7, #28]
 8007046:	2300      	movs	r3, #0
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	2300      	movs	r3, #0
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007056:	4b22      	ldr	r3, [pc, #136]	; (80070e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f003 030c 	and.w	r3, r3, #12
 8007062:	2b04      	cmp	r3, #4
 8007064:	d002      	beq.n	800706c <HAL_RCC_GetSysClockFreq+0x40>
 8007066:	2b08      	cmp	r3, #8
 8007068:	d003      	beq.n	8007072 <HAL_RCC_GetSysClockFreq+0x46>
 800706a:	e02d      	b.n	80070c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800706c:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800706e:	623b      	str	r3, [r7, #32]
      break;
 8007070:	e02d      	b.n	80070ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	0c9b      	lsrs	r3, r3, #18
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800707e:	4413      	add	r3, r2
 8007080:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007084:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d013      	beq.n	80070b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007090:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	0c5b      	lsrs	r3, r3, #17
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800709e:	4413      	add	r3, r2
 80070a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80070a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	4a0e      	ldr	r2, [pc, #56]	; (80070e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070aa:	fb02 f203 	mul.w	r2, r2, r3
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
 80070b6:	e004      	b.n	80070c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4a0b      	ldr	r2, [pc, #44]	; (80070e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070bc:	fb02 f303 	mul.w	r3, r2, r3
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	623b      	str	r3, [r7, #32]
      break;
 80070c6:	e002      	b.n	80070ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070ca:	623b      	str	r3, [r7, #32]
      break;
 80070cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070ce:	6a3b      	ldr	r3, [r7, #32]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3728      	adds	r7, #40	; 0x28
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc90      	pop	{r4, r7}
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	080090f8 	.word	0x080090f8
 80070e0:	40021000 	.word	0x40021000
 80070e4:	007a1200 	.word	0x007a1200
 80070e8:	003d0900 	.word	0x003d0900

080070ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070f0:	4b02      	ldr	r3, [pc, #8]	; (80070fc <HAL_RCC_GetHCLKFreq+0x10>)
 80070f2:	681b      	ldr	r3, [r3, #0]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr
 80070fc:	20000004 	.word	0x20000004

08007100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007104:	f7ff fff2 	bl	80070ec <HAL_RCC_GetHCLKFreq>
 8007108:	4602      	mov	r2, r0
 800710a:	4b05      	ldr	r3, [pc, #20]	; (8007120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	0a1b      	lsrs	r3, r3, #8
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	4903      	ldr	r1, [pc, #12]	; (8007124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007116:	5ccb      	ldrb	r3, [r1, r3]
 8007118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800711c:	4618      	mov	r0, r3
 800711e:	bd80      	pop	{r7, pc}
 8007120:	40021000 	.word	0x40021000
 8007124:	080093b8 	.word	0x080093b8

08007128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800712c:	f7ff ffde 	bl	80070ec <HAL_RCC_GetHCLKFreq>
 8007130:	4602      	mov	r2, r0
 8007132:	4b05      	ldr	r3, [pc, #20]	; (8007148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	0adb      	lsrs	r3, r3, #11
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	4903      	ldr	r1, [pc, #12]	; (800714c <HAL_RCC_GetPCLK2Freq+0x24>)
 800713e:	5ccb      	ldrb	r3, [r1, r3]
 8007140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007144:	4618      	mov	r0, r3
 8007146:	bd80      	pop	{r7, pc}
 8007148:	40021000 	.word	0x40021000
 800714c:	080093b8 	.word	0x080093b8

08007150 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007158:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <RCC_Delay+0x34>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a0a      	ldr	r2, [pc, #40]	; (8007188 <RCC_Delay+0x38>)
 800715e:	fba2 2303 	umull	r2, r3, r2, r3
 8007162:	0a5b      	lsrs	r3, r3, #9
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	fb02 f303 	mul.w	r3, r2, r3
 800716a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800716c:	bf00      	nop
  }
  while (Delay --);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	1e5a      	subs	r2, r3, #1
 8007172:	60fa      	str	r2, [r7, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1f9      	bne.n	800716c <RCC_Delay+0x1c>
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr
 8007184:	20000004 	.word	0x20000004
 8007188:	10624dd3 	.word	0x10624dd3

0800718c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	613b      	str	r3, [r7, #16]
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d07d      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071ac:	4b4f      	ldr	r3, [pc, #316]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10d      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071b8:	4b4c      	ldr	r3, [pc, #304]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	4a4b      	ldr	r2, [pc, #300]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c2:	61d3      	str	r3, [r2, #28]
 80071c4:	4b49      	ldr	r3, [pc, #292]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071cc:	60bb      	str	r3, [r7, #8]
 80071ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d0:	2301      	movs	r3, #1
 80071d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d4:	4b46      	ldr	r3, [pc, #280]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d118      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071e0:	4b43      	ldr	r3, [pc, #268]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a42      	ldr	r2, [pc, #264]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ec:	f7fe fbe0 	bl	80059b0 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f2:	e008      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f4:	f7fe fbdc 	bl	80059b0 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b64      	cmp	r3, #100	; 0x64
 8007200:	d901      	bls.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e06d      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007206:	4b3a      	ldr	r3, [pc, #232]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0f0      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007212:	4b36      	ldr	r3, [pc, #216]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d02e      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	429a      	cmp	r2, r3
 800722e:	d027      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007230:	4b2e      	ldr	r3, [pc, #184]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007238:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800723a:	4b2e      	ldr	r3, [pc, #184]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007240:	4b2c      	ldr	r3, [pc, #176]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007246:	4a29      	ldr	r2, [pc, #164]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d014      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007256:	f7fe fbab 	bl	80059b0 <HAL_GetTick>
 800725a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800725c:	e00a      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800725e:	f7fe fba7 	bl	80059b0 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	f241 3288 	movw	r2, #5000	; 0x1388
 800726c:	4293      	cmp	r3, r2
 800726e:	d901      	bls.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e036      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007274:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0ee      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007280:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	4917      	ldr	r1, [pc, #92]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800728e:	4313      	orrs	r3, r2
 8007290:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d105      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007298:	4b14      	ldr	r3, [pc, #80]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	4a13      	ldr	r2, [pc, #76]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d008      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072b0:	4b0e      	ldr	r3, [pc, #56]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	490b      	ldr	r1, [pc, #44]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0310 	and.w	r3, r3, #16
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d008      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072ce:	4b07      	ldr	r3, [pc, #28]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	4904      	ldr	r1, [pc, #16]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40021000 	.word	0x40021000
 80072f0:	40007000 	.word	0x40007000
 80072f4:	42420440 	.word	0x42420440

080072f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072f8:	b590      	push	{r4, r7, lr}
 80072fa:	b08d      	sub	sp, #52	; 0x34
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007300:	4b5a      	ldr	r3, [pc, #360]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8007302:	f107 040c 	add.w	r4, r7, #12
 8007306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800730c:	f240 2301 	movw	r3, #513	; 0x201
 8007310:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
 8007316:	2300      	movs	r3, #0
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800731a:	2300      	movs	r3, #0
 800731c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	2300      	movs	r3, #0
 8007324:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b10      	cmp	r3, #16
 800732a:	d00a      	beq.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b10      	cmp	r3, #16
 8007330:	f200 8091 	bhi.w	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d04c      	beq.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d07c      	beq.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007340:	e089      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8007342:	4b4b      	ldr	r3, [pc, #300]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007348:	4b49      	ldr	r3, [pc, #292]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8082 	beq.w	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	0c9b      	lsrs	r3, r3, #18
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007362:	4413      	add	r3, r2
 8007364:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007368:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d018      	beq.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007374:	4b3e      	ldr	r3, [pc, #248]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	0c5b      	lsrs	r3, r3, #17
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007382:	4413      	add	r3, r2
 8007384:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00d      	beq.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007394:	4a37      	ldr	r2, [pc, #220]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	fbb2 f2f3 	udiv	r2, r2, r3
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073a4:	e004      	b.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	4a33      	ldr	r2, [pc, #204]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80073aa:	fb02 f303 	mul.w	r3, r2, r3
 80073ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80073b0:	4b2f      	ldr	r3, [pc, #188]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073bc:	d102      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80073be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80073c2:	e04a      	b.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	4a2c      	ldr	r2, [pc, #176]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80073ca:	fba2 2303 	umull	r2, r3, r2, r3
 80073ce:	085b      	lsrs	r3, r3, #1
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80073d2:	e042      	b.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80073d4:	4b26      	ldr	r3, [pc, #152]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e4:	d108      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80073f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f6:	e01f      	b.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007402:	d109      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007404:	4b1a      	ldr	r3, [pc, #104]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8007410:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007414:	62bb      	str	r3, [r7, #40]	; 0x28
 8007416:	e00f      	b.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800741e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007422:	d11c      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8007424:	4b12      	ldr	r3, [pc, #72]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d016      	beq.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8007430:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007434:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007436:	e012      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8007438:	e011      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800743a:	f7ff fe75 	bl	8007128 <HAL_RCC_GetPCLK2Freq>
 800743e:	4602      	mov	r2, r0
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	0b9b      	lsrs	r3, r3, #14
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	3301      	adds	r3, #1
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007454:	e004      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8007456:	bf00      	nop
 8007458:	e002      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800745a:	bf00      	nop
 800745c:	e000      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800745e:	bf00      	nop
    }
  }
  return (frequency);
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007462:	4618      	mov	r0, r3
 8007464:	3734      	adds	r7, #52	; 0x34
 8007466:	46bd      	mov	sp, r7
 8007468:	bd90      	pop	{r4, r7, pc}
 800746a:	bf00      	nop
 800746c:	08009108 	.word	0x08009108
 8007470:	40021000 	.word	0x40021000
 8007474:	007a1200 	.word	0x007a1200
 8007478:	003d0900 	.word	0x003d0900
 800747c:	aaaaaaab 	.word	0xaaaaaaab

08007480 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e084      	b.n	80075a0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7c5b      	ldrb	r3, [r3, #17]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d105      	bne.n	80074ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fd fa9a 	bl	80049e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f87a 	bl	80075ac <HAL_RTC_WaitForSynchro>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d004      	beq.n	80074c8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2204      	movs	r2, #4
 80074c2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e06b      	b.n	80075a0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f89c 	bl	8007606 <RTC_EnterInitMode>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d004      	beq.n	80074de <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2204      	movs	r2, #4
 80074d8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e060      	b.n	80075a0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0207 	bic.w	r2, r2, #7
 80074ec:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80074f6:	4b2c      	ldr	r3, [pc, #176]	; (80075a8 <HAL_RTC_Init+0x128>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	4a2b      	ldr	r2, [pc, #172]	; (80075a8 <HAL_RTC_Init+0x128>)
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007502:	4b29      	ldr	r3, [pc, #164]	; (80075a8 <HAL_RTC_Init+0x128>)
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	4926      	ldr	r1, [pc, #152]	; (80075a8 <HAL_RTC_Init+0x128>)
 8007510:	4313      	orrs	r3, r2
 8007512:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d003      	beq.n	8007526 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	e00e      	b.n	8007544 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007526:	2001      	movs	r0, #1
 8007528:	f7ff fee6 	bl	80072f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800752c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2204      	movs	r2, #4
 8007538:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e030      	b.n	80075a0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3b01      	subs	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f023 010f 	bic.w	r1, r3, #15
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	0c1a      	lsrs	r2, r3, #16
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	0c1b      	lsrs	r3, r3, #16
 8007562:	041b      	lsls	r3, r3, #16
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	b291      	uxth	r1, r2
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6812      	ldr	r2, [r2, #0]
 800756c:	430b      	orrs	r3, r1
 800756e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f870 	bl	8007656 <RTC_ExitInitMode>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2204      	movs	r2, #4
 8007580:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e00c      	b.n	80075a0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800759e:	2300      	movs	r3, #0
  }
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40006c00 	.word	0x40006c00

080075ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e01d      	b.n	80075fe <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0208 	bic.w	r2, r2, #8
 80075d0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80075d2:	f7fe f9ed 	bl	80059b0 <HAL_GetTick>
 80075d6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80075d8:	e009      	b.n	80075ee <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80075da:	f7fe f9e9 	bl	80059b0 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075e8:	d901      	bls.n	80075ee <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e007      	b.n	80075fe <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0ee      	beq.n	80075da <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007612:	f7fe f9cd 	bl	80059b0 <HAL_GetTick>
 8007616:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007618:	e009      	b.n	800762e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800761a:	f7fe f9c9 	bl	80059b0 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007628:	d901      	bls.n	800762e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e00f      	b.n	800764e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0ee      	beq.n	800761a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0210 	orr.w	r2, r2, #16
 800764a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0210 	bic.w	r2, r2, #16
 8007670:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007672:	f7fe f99d 	bl	80059b0 <HAL_GetTick>
 8007676:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007678:	e009      	b.n	800768e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800767a:	f7fe f999 	bl	80059b0 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007688:	d901      	bls.n	800768e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e007      	b.n	800769e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f003 0320 	and.w	r3, r3, #32
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0ee      	beq.n	800767a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 80076b8:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <HAL_RTCEx_BKUPWrite+0x30>)
 80076ba:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	4413      	add	r3, r2
 80076c4:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	b292      	uxth	r2, r2
 80076cc:	601a      	str	r2, [r3, #0]
}
 80076ce:	bf00      	nop
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bc80      	pop	{r7}
 80076d6:	4770      	bx	lr
 80076d8:	40006c00 	.word	0x40006c00

080076dc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80076ee:	4b08      	ldr	r3, [pc, #32]	; (8007710 <HAL_RTCEx_BKUPRead+0x34>)
 80076f0:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4413      	add	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8007704:	68bb      	ldr	r3, [r7, #8]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr
 8007710:	40006c00 	.word	0x40006c00

08007714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e041      	b.n	80077aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7fd f9ba 	bl	8004ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3304      	adds	r3, #4
 8007750:	4619      	mov	r1, r3
 8007752:	4610      	mov	r0, r2
 8007754:	f000 fd3e 	bl	80081d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d001      	beq.n	80077cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e03a      	b.n	8007842 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0201 	orr.w	r2, r2, #1
 80077e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a18      	ldr	r2, [pc, #96]	; (800784c <HAL_TIM_Base_Start_IT+0x98>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00e      	beq.n	800780c <HAL_TIM_Base_Start_IT+0x58>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f6:	d009      	beq.n	800780c <HAL_TIM_Base_Start_IT+0x58>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a14      	ldr	r2, [pc, #80]	; (8007850 <HAL_TIM_Base_Start_IT+0x9c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <HAL_TIM_Base_Start_IT+0x58>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a13      	ldr	r2, [pc, #76]	; (8007854 <HAL_TIM_Base_Start_IT+0xa0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d111      	bne.n	8007830 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b06      	cmp	r3, #6
 800781c:	d010      	beq.n	8007840 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f042 0201 	orr.w	r2, r2, #1
 800782c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800782e:	e007      	b.n	8007840 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 0201 	orr.w	r2, r2, #1
 800783e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr
 800784c:	40012c00 	.word	0x40012c00
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800

08007858 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e041      	b.n	80078ee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fd f8d2 	bl	8004a28 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f000 fc9c 	bl	80081d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d104      	bne.n	8007912 <HAL_TIM_IC_Start_IT+0x1a>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800790e:	b2db      	uxtb	r3, r3
 8007910:	e013      	b.n	800793a <HAL_TIM_IC_Start_IT+0x42>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b04      	cmp	r3, #4
 8007916:	d104      	bne.n	8007922 <HAL_TIM_IC_Start_IT+0x2a>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800791e:	b2db      	uxtb	r3, r3
 8007920:	e00b      	b.n	800793a <HAL_TIM_IC_Start_IT+0x42>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b08      	cmp	r3, #8
 8007926:	d104      	bne.n	8007932 <HAL_TIM_IC_Start_IT+0x3a>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800792e:	b2db      	uxtb	r3, r3
 8007930:	e003      	b.n	800793a <HAL_TIM_IC_Start_IT+0x42>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007938:	b2db      	uxtb	r3, r3
 800793a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d104      	bne.n	800794c <HAL_TIM_IC_Start_IT+0x54>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007948:	b2db      	uxtb	r3, r3
 800794a:	e013      	b.n	8007974 <HAL_TIM_IC_Start_IT+0x7c>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b04      	cmp	r3, #4
 8007950:	d104      	bne.n	800795c <HAL_TIM_IC_Start_IT+0x64>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007958:	b2db      	uxtb	r3, r3
 800795a:	e00b      	b.n	8007974 <HAL_TIM_IC_Start_IT+0x7c>
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b08      	cmp	r3, #8
 8007960:	d104      	bne.n	800796c <HAL_TIM_IC_Start_IT+0x74>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007968:	b2db      	uxtb	r3, r3
 800796a:	e003      	b.n	8007974 <HAL_TIM_IC_Start_IT+0x7c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007972:	b2db      	uxtb	r3, r3
 8007974:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d102      	bne.n	8007982 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d001      	beq.n	8007986 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e0b3      	b.n	8007aee <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d104      	bne.n	8007996 <HAL_TIM_IC_Start_IT+0x9e>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007994:	e013      	b.n	80079be <HAL_TIM_IC_Start_IT+0xc6>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b04      	cmp	r3, #4
 800799a:	d104      	bne.n	80079a6 <HAL_TIM_IC_Start_IT+0xae>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079a4:	e00b      	b.n	80079be <HAL_TIM_IC_Start_IT+0xc6>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d104      	bne.n	80079b6 <HAL_TIM_IC_Start_IT+0xbe>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079b4:	e003      	b.n	80079be <HAL_TIM_IC_Start_IT+0xc6>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d104      	bne.n	80079ce <HAL_TIM_IC_Start_IT+0xd6>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079cc:	e013      	b.n	80079f6 <HAL_TIM_IC_Start_IT+0xfe>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d104      	bne.n	80079de <HAL_TIM_IC_Start_IT+0xe6>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079dc:	e00b      	b.n	80079f6 <HAL_TIM_IC_Start_IT+0xfe>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d104      	bne.n	80079ee <HAL_TIM_IC_Start_IT+0xf6>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ec:	e003      	b.n	80079f6 <HAL_TIM_IC_Start_IT+0xfe>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2202      	movs	r2, #2
 80079f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b0c      	cmp	r3, #12
 80079fa:	d841      	bhi.n	8007a80 <HAL_TIM_IC_Start_IT+0x188>
 80079fc:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <HAL_TIM_IC_Start_IT+0x10c>)
 80079fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a02:	bf00      	nop
 8007a04:	08007a39 	.word	0x08007a39
 8007a08:	08007a81 	.word	0x08007a81
 8007a0c:	08007a81 	.word	0x08007a81
 8007a10:	08007a81 	.word	0x08007a81
 8007a14:	08007a4b 	.word	0x08007a4b
 8007a18:	08007a81 	.word	0x08007a81
 8007a1c:	08007a81 	.word	0x08007a81
 8007a20:	08007a81 	.word	0x08007a81
 8007a24:	08007a5d 	.word	0x08007a5d
 8007a28:	08007a81 	.word	0x08007a81
 8007a2c:	08007a81 	.word	0x08007a81
 8007a30:	08007a81 	.word	0x08007a81
 8007a34:	08007a6f 	.word	0x08007a6f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0202 	orr.w	r2, r2, #2
 8007a46:	60da      	str	r2, [r3, #12]
      break;
 8007a48:	e01b      	b.n	8007a82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0204 	orr.w	r2, r2, #4
 8007a58:	60da      	str	r2, [r3, #12]
      break;
 8007a5a:	e012      	b.n	8007a82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0208 	orr.w	r2, r2, #8
 8007a6a:	60da      	str	r2, [r3, #12]
      break;
 8007a6c:	e009      	b.n	8007a82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 0210 	orr.w	r2, r2, #16
 8007a7c:	60da      	str	r2, [r3, #12]
      break;
 8007a7e:	e000      	b.n	8007a82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8007a80:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2201      	movs	r2, #1
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 fda7 	bl	80085de <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a18      	ldr	r2, [pc, #96]	; (8007af8 <HAL_TIM_IC_Start_IT+0x200>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d00e      	beq.n	8007ab8 <HAL_TIM_IC_Start_IT+0x1c0>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa2:	d009      	beq.n	8007ab8 <HAL_TIM_IC_Start_IT+0x1c0>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a14      	ldr	r2, [pc, #80]	; (8007afc <HAL_TIM_IC_Start_IT+0x204>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d004      	beq.n	8007ab8 <HAL_TIM_IC_Start_IT+0x1c0>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a13      	ldr	r2, [pc, #76]	; (8007b00 <HAL_TIM_IC_Start_IT+0x208>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d111      	bne.n	8007adc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 0307 	and.w	r3, r3, #7
 8007ac2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b06      	cmp	r3, #6
 8007ac8:	d010      	beq.n	8007aec <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f042 0201 	orr.w	r2, r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ada:	e007      	b.n	8007aec <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0201 	orr.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	40012c00 	.word	0x40012c00
 8007afc:	40000400 	.word	0x40000400
 8007b00:	40000800 	.word	0x40000800

08007b04 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b0c      	cmp	r3, #12
 8007b12:	d841      	bhi.n	8007b98 <HAL_TIM_IC_Stop_IT+0x94>
 8007b14:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <HAL_TIM_IC_Stop_IT+0x18>)
 8007b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1a:	bf00      	nop
 8007b1c:	08007b51 	.word	0x08007b51
 8007b20:	08007b99 	.word	0x08007b99
 8007b24:	08007b99 	.word	0x08007b99
 8007b28:	08007b99 	.word	0x08007b99
 8007b2c:	08007b63 	.word	0x08007b63
 8007b30:	08007b99 	.word	0x08007b99
 8007b34:	08007b99 	.word	0x08007b99
 8007b38:	08007b99 	.word	0x08007b99
 8007b3c:	08007b75 	.word	0x08007b75
 8007b40:	08007b99 	.word	0x08007b99
 8007b44:	08007b99 	.word	0x08007b99
 8007b48:	08007b99 	.word	0x08007b99
 8007b4c:	08007b87 	.word	0x08007b87
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0202 	bic.w	r2, r2, #2
 8007b5e:	60da      	str	r2, [r3, #12]
      break;
 8007b60:	e01b      	b.n	8007b9a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0204 	bic.w	r2, r2, #4
 8007b70:	60da      	str	r2, [r3, #12]
      break;
 8007b72:	e012      	b.n	8007b9a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0208 	bic.w	r2, r2, #8
 8007b82:	60da      	str	r2, [r3, #12]
      break;
 8007b84:	e009      	b.n	8007b9a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f022 0210 	bic.w	r2, r2, #16
 8007b94:	60da      	str	r2, [r3, #12]
      break;
 8007b96:	e000      	b.n	8007b9a <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8007b98:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fd1b 	bl	80085de <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6a1a      	ldr	r2, [r3, #32]
 8007bae:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10f      	bne.n	8007bd8 <HAL_TIM_IC_Stop_IT+0xd4>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	f240 4344 	movw	r3, #1092	; 0x444
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d107      	bne.n	8007bd8 <HAL_TIM_IC_Stop_IT+0xd4>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0201 	bic.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d104      	bne.n	8007be8 <HAL_TIM_IC_Stop_IT+0xe4>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007be6:	e013      	b.n	8007c10 <HAL_TIM_IC_Stop_IT+0x10c>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	d104      	bne.n	8007bf8 <HAL_TIM_IC_Stop_IT+0xf4>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bf6:	e00b      	b.n	8007c10 <HAL_TIM_IC_Stop_IT+0x10c>
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2b08      	cmp	r3, #8
 8007bfc:	d104      	bne.n	8007c08 <HAL_TIM_IC_Stop_IT+0x104>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c06:	e003      	b.n	8007c10 <HAL_TIM_IC_Stop_IT+0x10c>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d104      	bne.n	8007c20 <HAL_TIM_IC_Stop_IT+0x11c>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c1e:	e013      	b.n	8007c48 <HAL_TIM_IC_Stop_IT+0x144>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d104      	bne.n	8007c30 <HAL_TIM_IC_Stop_IT+0x12c>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c2e:	e00b      	b.n	8007c48 <HAL_TIM_IC_Stop_IT+0x144>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	d104      	bne.n	8007c40 <HAL_TIM_IC_Stop_IT+0x13c>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c3e:	e003      	b.n	8007c48 <HAL_TIM_IC_Stop_IT+0x144>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop

08007c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d122      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d11b      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f06f 0202 	mvn.w	r2, #2
 8007c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7fd fb88 	bl	80053ac <HAL_TIM_IC_CaptureCallback>
 8007c9c:	e005      	b.n	8007caa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa7c 	bl	800819c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fa82 	bl	80081ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f003 0304 	and.w	r3, r3, #4
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d122      	bne.n	8007d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f003 0304 	and.w	r3, r3, #4
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d11b      	bne.n	8007d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f06f 0204 	mvn.w	r2, #4
 8007cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7fd fb5e 	bl	80053ac <HAL_TIM_IC_CaptureCallback>
 8007cf0:	e005      	b.n	8007cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fa52 	bl	800819c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fa58 	bl	80081ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0308 	and.w	r3, r3, #8
 8007d0e:	2b08      	cmp	r3, #8
 8007d10:	d122      	bne.n	8007d58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d11b      	bne.n	8007d58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0208 	mvn.w	r2, #8
 8007d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fd fb34 	bl	80053ac <HAL_TIM_IC_CaptureCallback>
 8007d44:	e005      	b.n	8007d52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fa28 	bl	800819c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fa2e 	bl	80081ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0310 	and.w	r3, r3, #16
 8007d62:	2b10      	cmp	r3, #16
 8007d64:	d122      	bne.n	8007dac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f003 0310 	and.w	r3, r3, #16
 8007d70:	2b10      	cmp	r3, #16
 8007d72:	d11b      	bne.n	8007dac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0210 	mvn.w	r2, #16
 8007d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2208      	movs	r2, #8
 8007d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fd fb0a 	bl	80053ac <HAL_TIM_IC_CaptureCallback>
 8007d98:	e005      	b.n	8007da6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f9fe 	bl	800819c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fa04 	bl	80081ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d10e      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d107      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0201 	mvn.w	r2, #1
 8007dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7fc f98d 	bl	80040f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de2:	2b80      	cmp	r3, #128	; 0x80
 8007de4:	d10e      	bne.n	8007e04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df0:	2b80      	cmp	r3, #128	; 0x80
 8007df2:	d107      	bne.n	8007e04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fc79 	bl	80086f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	d10e      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1c:	2b40      	cmp	r3, #64	; 0x40
 8007e1e:	d107      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f9c8 	bl	80081c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	d10e      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d107      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0220 	mvn.w	r2, #32
 8007e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fc44 	bl	80086e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d101      	bne.n	8007e7e <HAL_TIM_IC_ConfigChannel+0x1a>
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e082      	b.n	8007f84 <HAL_TIM_IC_ConfigChannel+0x120>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d11b      	bne.n	8007ec4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6818      	ldr	r0, [r3, #0]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	6819      	ldr	r1, [r3, #0]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f000 f9fc 	bl	8008298 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699a      	ldr	r2, [r3, #24]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 020c 	bic.w	r2, r2, #12
 8007eae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6999      	ldr	r1, [r3, #24]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	619a      	str	r2, [r3, #24]
 8007ec2:	e05a      	b.n	8007f7a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d11c      	bne.n	8007f04 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6819      	ldr	r1, [r3, #0]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f000 fa65 	bl	80083a8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007eec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6999      	ldr	r1, [r3, #24]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	021a      	lsls	r2, r3, #8
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	619a      	str	r2, [r3, #24]
 8007f02:	e03a      	b.n	8007f7a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	d11b      	bne.n	8007f42 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	6819      	ldr	r1, [r3, #0]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f000 fab0 	bl	800847e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69da      	ldr	r2, [r3, #28]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 020c 	bic.w	r2, r2, #12
 8007f2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69d9      	ldr	r1, [r3, #28]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	61da      	str	r2, [r3, #28]
 8007f40:	e01b      	b.n	8007f7a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	6819      	ldr	r1, [r3, #0]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f000 facf 	bl	80084f4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69da      	ldr	r2, [r3, #28]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007f64:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69d9      	ldr	r1, [r3, #28]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	021a      	lsls	r2, r3, #8
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_TIM_ConfigClockSource+0x18>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e0b3      	b.n	800810c <HAL_TIM_ConfigClockSource+0x180>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fdc:	d03e      	beq.n	800805c <HAL_TIM_ConfigClockSource+0xd0>
 8007fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe2:	f200 8087 	bhi.w	80080f4 <HAL_TIM_ConfigClockSource+0x168>
 8007fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fea:	f000 8085 	beq.w	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff2:	d87f      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x168>
 8007ff4:	2b70      	cmp	r3, #112	; 0x70
 8007ff6:	d01a      	beq.n	800802e <HAL_TIM_ConfigClockSource+0xa2>
 8007ff8:	2b70      	cmp	r3, #112	; 0x70
 8007ffa:	d87b      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x168>
 8007ffc:	2b60      	cmp	r3, #96	; 0x60
 8007ffe:	d050      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0x116>
 8008000:	2b60      	cmp	r3, #96	; 0x60
 8008002:	d877      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x168>
 8008004:	2b50      	cmp	r3, #80	; 0x50
 8008006:	d03c      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0xf6>
 8008008:	2b50      	cmp	r3, #80	; 0x50
 800800a:	d873      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x168>
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	d058      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0x136>
 8008010:	2b40      	cmp	r3, #64	; 0x40
 8008012:	d86f      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x168>
 8008014:	2b30      	cmp	r3, #48	; 0x30
 8008016:	d064      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x156>
 8008018:	2b30      	cmp	r3, #48	; 0x30
 800801a:	d86b      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x168>
 800801c:	2b20      	cmp	r3, #32
 800801e:	d060      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x156>
 8008020:	2b20      	cmp	r3, #32
 8008022:	d867      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x168>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d05c      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x156>
 8008028:	2b10      	cmp	r3, #16
 800802a:	d05a      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800802c:	e062      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6899      	ldr	r1, [r3, #8]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f000 faaf 	bl	80085a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008050:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	609a      	str	r2, [r3, #8]
      break;
 800805a:	e04e      	b.n	80080fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6899      	ldr	r1, [r3, #8]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f000 fa98 	bl	80085a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800807e:	609a      	str	r2, [r3, #8]
      break;
 8008080:	e03b      	b.n	80080fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	6859      	ldr	r1, [r3, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	461a      	mov	r2, r3
 8008090:	f000 f95c 	bl	800834c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2150      	movs	r1, #80	; 0x50
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fa66 	bl	800856c <TIM_ITRx_SetConfig>
      break;
 80080a0:	e02b      	b.n	80080fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6859      	ldr	r1, [r3, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f000 f9b6 	bl	8008420 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2160      	movs	r1, #96	; 0x60
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fa56 	bl	800856c <TIM_ITRx_SetConfig>
      break;
 80080c0:	e01b      	b.n	80080fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6818      	ldr	r0, [r3, #0]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6859      	ldr	r1, [r3, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f000 f93c 	bl	800834c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2140      	movs	r1, #64	; 0x40
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fa46 	bl	800856c <TIM_ITRx_SetConfig>
      break;
 80080e0:	e00b      	b.n	80080fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f000 fa3d 	bl	800856c <TIM_ITRx_SetConfig>
        break;
 80080f2:	e002      	b.n	80080fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80080f4:	bf00      	nop
 80080f6:	e000      	b.n	80080fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80080f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b0c      	cmp	r3, #12
 8008126:	d831      	bhi.n	800818c <HAL_TIM_ReadCapturedValue+0x78>
 8008128:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <HAL_TIM_ReadCapturedValue+0x1c>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008165 	.word	0x08008165
 8008134:	0800818d 	.word	0x0800818d
 8008138:	0800818d 	.word	0x0800818d
 800813c:	0800818d 	.word	0x0800818d
 8008140:	0800816f 	.word	0x0800816f
 8008144:	0800818d 	.word	0x0800818d
 8008148:	0800818d 	.word	0x0800818d
 800814c:	0800818d 	.word	0x0800818d
 8008150:	08008179 	.word	0x08008179
 8008154:	0800818d 	.word	0x0800818d
 8008158:	0800818d 	.word	0x0800818d
 800815c:	0800818d 	.word	0x0800818d
 8008160:	08008183 	.word	0x08008183
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816a:	60fb      	str	r3, [r7, #12]

      break;
 800816c:	e00f      	b.n	800818e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008174:	60fb      	str	r3, [r7, #12]

      break;
 8008176:	e00a      	b.n	800818e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817e:	60fb      	str	r3, [r7, #12]

      break;
 8008180:	e005      	b.n	800818e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	60fb      	str	r3, [r7, #12]

      break;
 800818a:	e000      	b.n	800818e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800818c:	bf00      	nop
  }

  return tmpreg;
 800818e:	68fb      	ldr	r3, [r7, #12]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	bc80      	pop	{r7}
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop

0800819c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bc80      	pop	{r7}
 80081ac:	4770      	bx	lr

080081ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bc80      	pop	{r7}
 80081be:	4770      	bx	lr

080081c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr
	...

080081d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a29      	ldr	r2, [pc, #164]	; (800828c <TIM_Base_SetConfig+0xb8>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d00b      	beq.n	8008204 <TIM_Base_SetConfig+0x30>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f2:	d007      	beq.n	8008204 <TIM_Base_SetConfig+0x30>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a26      	ldr	r2, [pc, #152]	; (8008290 <TIM_Base_SetConfig+0xbc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d003      	beq.n	8008204 <TIM_Base_SetConfig+0x30>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a25      	ldr	r2, [pc, #148]	; (8008294 <TIM_Base_SetConfig+0xc0>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d108      	bne.n	8008216 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a1c      	ldr	r2, [pc, #112]	; (800828c <TIM_Base_SetConfig+0xb8>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d00b      	beq.n	8008236 <TIM_Base_SetConfig+0x62>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008224:	d007      	beq.n	8008236 <TIM_Base_SetConfig+0x62>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a19      	ldr	r2, [pc, #100]	; (8008290 <TIM_Base_SetConfig+0xbc>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d003      	beq.n	8008236 <TIM_Base_SetConfig+0x62>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a18      	ldr	r2, [pc, #96]	; (8008294 <TIM_Base_SetConfig+0xc0>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d108      	bne.n	8008248 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800823c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	4313      	orrs	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a07      	ldr	r2, [pc, #28]	; (800828c <TIM_Base_SetConfig+0xb8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d103      	bne.n	800827c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	615a      	str	r2, [r3, #20]
}
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	bc80      	pop	{r7}
 800828a:	4770      	bx	lr
 800828c:	40012c00 	.word	0x40012c00
 8008290:	40000400 	.word	0x40000400
 8008294:	40000800 	.word	0x40000800

08008298 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f023 0201 	bic.w	r2, r3, #1
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4a1f      	ldr	r2, [pc, #124]	; (8008340 <TIM_TI1_SetConfig+0xa8>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00b      	beq.n	80082de <TIM_TI1_SetConfig+0x46>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082cc:	d007      	beq.n	80082de <TIM_TI1_SetConfig+0x46>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4a1c      	ldr	r2, [pc, #112]	; (8008344 <TIM_TI1_SetConfig+0xac>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d003      	beq.n	80082de <TIM_TI1_SetConfig+0x46>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4a1b      	ldr	r2, [pc, #108]	; (8008348 <TIM_TI1_SetConfig+0xb0>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d101      	bne.n	80082e2 <TIM_TI1_SetConfig+0x4a>
 80082de:	2301      	movs	r3, #1
 80082e0:	e000      	b.n	80082e4 <TIM_TI1_SetConfig+0x4c>
 80082e2:	2300      	movs	r3, #0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d008      	beq.n	80082fa <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f023 0303 	bic.w	r3, r3, #3
 80082ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	e003      	b.n	8008302 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f043 0301 	orr.w	r3, r3, #1
 8008300:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	b2db      	uxtb	r3, r3
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	4313      	orrs	r3, r2
 8008314:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f023 030a 	bic.w	r3, r3, #10
 800831c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f003 030a 	and.w	r3, r3, #10
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	621a      	str	r2, [r3, #32]
}
 8008336:	bf00      	nop
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	bc80      	pop	{r7}
 800833e:	4770      	bx	lr
 8008340:	40012c00 	.word	0x40012c00
 8008344:	40000400 	.word	0x40000400
 8008348:	40000800 	.word	0x40000800

0800834c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	f023 0201 	bic.w	r2, r3, #1
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	011b      	lsls	r3, r3, #4
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f023 030a 	bic.w	r3, r3, #10
 8008388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4313      	orrs	r3, r2
 8008390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr

080083a8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	f023 0210 	bic.w	r2, r3, #16
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	021b      	lsls	r3, r3, #8
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	4313      	orrs	r3, r2
 80083de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	031b      	lsls	r3, r3, #12
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	4313      	orrs	r3, r2
 8008408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	621a      	str	r2, [r3, #32]
}
 8008416:	bf00      	nop
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	bc80      	pop	{r7}
 800841e:	4770      	bx	lr

08008420 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	f023 0210 	bic.w	r2, r3, #16
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800844a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	031b      	lsls	r3, r3, #12
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	4313      	orrs	r3, r2
 8008454:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800845c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	011b      	lsls	r3, r3, #4
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	4313      	orrs	r3, r2
 8008466:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	621a      	str	r2, [r3, #32]
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	bc80      	pop	{r7}
 800847c:	4770      	bx	lr

0800847e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800847e:	b480      	push	{r7}
 8008480:	b087      	sub	sp, #28
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
 800848a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f023 0303 	bic.w	r3, r3, #3
 80084aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	021b      	lsls	r3, r3, #8
 80084d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4313      	orrs	r3, r2
 80084dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	621a      	str	r2, [r3, #32]
}
 80084ea:	bf00      	nop
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr

080084f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008520:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	021b      	lsls	r3, r3, #8
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	4313      	orrs	r3, r2
 800852a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008532:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	031b      	lsls	r3, r3, #12
 8008538:	b29b      	uxth	r3, r3
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008546:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	031b      	lsls	r3, r3, #12
 800854c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	4313      	orrs	r3, r2
 8008554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	621a      	str	r2, [r3, #32]
}
 8008562:	bf00      	nop
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	bc80      	pop	{r7}
 800856a:	4770      	bx	lr

0800856c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008582:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4313      	orrs	r3, r2
 800858a:	f043 0307 	orr.w	r3, r3, #7
 800858e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	609a      	str	r2, [r3, #8]
}
 8008596:	bf00      	nop
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	021a      	lsls	r2, r3, #8
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	431a      	orrs	r2, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	609a      	str	r2, [r3, #8]
}
 80085d4:	bf00      	nop
 80085d6:	371c      	adds	r7, #28
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr

080085de <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085de:	b480      	push	{r7}
 80085e0:	b087      	sub	sp, #28
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f003 031f 	and.w	r3, r3, #31
 80085f0:	2201      	movs	r2, #1
 80085f2:	fa02 f303 	lsl.w	r3, r2, r3
 80085f6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a1a      	ldr	r2, [r3, #32]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	43db      	mvns	r3, r3
 8008600:	401a      	ands	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a1a      	ldr	r2, [r3, #32]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f003 031f 	and.w	r3, r3, #31
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	fa01 f303 	lsl.w	r3, r1, r3
 8008616:	431a      	orrs	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	621a      	str	r2, [r3, #32]
}
 800861c:	bf00      	nop
 800861e:	371c      	adds	r7, #28
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr
	...

08008628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008638:	2b01      	cmp	r3, #1
 800863a:	d101      	bne.n	8008640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800863c:	2302      	movs	r3, #2
 800863e:	e046      	b.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a16      	ldr	r2, [pc, #88]	; (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d00e      	beq.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868c:	d009      	beq.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a12      	ldr	r2, [pc, #72]	; (80086dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d004      	beq.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a10      	ldr	r2, [pc, #64]	; (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d10c      	bne.n	80086bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bc80      	pop	{r7}
 80086d6:	4770      	bx	lr
 80086d8:	40012c00 	.word	0x40012c00
 80086dc:	40000400 	.word	0x40000400
 80086e0:	40000800 	.word	0x40000800

080086e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr

080086f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr

08008708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e03f      	b.n	800879a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d106      	bne.n	8008734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7fc f9e6 	bl	8004b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2224      	movs	r2, #36	; 0x24
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800874a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fbe5 	bl	8008f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	691a      	ldr	r2, [r3, #16]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	695a      	ldr	r2, [r3, #20]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b085      	sub	sp, #20
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	4613      	mov	r3, r2
 80087ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	d130      	bne.n	800881e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <HAL_UART_Transmit_IT+0x26>
 80087c2:	88fb      	ldrh	r3, [r7, #6]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e029      	b.n	8008820 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d101      	bne.n	80087da <HAL_UART_Transmit_IT+0x38>
 80087d6:	2302      	movs	r3, #2
 80087d8:	e022      	b.n	8008820 <HAL_UART_Transmit_IT+0x7e>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	88fa      	ldrh	r2, [r7, #6]
 80087ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	88fa      	ldrh	r2, [r7, #6]
 80087f2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2221      	movs	r2, #33	; 0x21
 80087fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008818:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	e000      	b.n	8008820 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800881e:	2302      	movs	r3, #2
  }
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	bc80      	pop	{r7}
 8008828:	4770      	bx	lr

0800882a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	4613      	mov	r3, r2
 8008836:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b20      	cmp	r3, #32
 8008842:	d11d      	bne.n	8008880 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d002      	beq.n	8008850 <HAL_UART_Receive_IT+0x26>
 800884a:	88fb      	ldrh	r3, [r7, #6]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e016      	b.n	8008882 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800885a:	2b01      	cmp	r3, #1
 800885c:	d101      	bne.n	8008862 <HAL_UART_Receive_IT+0x38>
 800885e:	2302      	movs	r3, #2
 8008860:	e00f      	b.n	8008882 <HAL_UART_Receive_IT+0x58>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008870:	88fb      	ldrh	r3, [r7, #6]
 8008872:	461a      	mov	r2, r3
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 f9c6 	bl	8008c08 <UART_Start_Receive_IT>
 800887c:	4603      	mov	r3, r0
 800887e:	e000      	b.n	8008882 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008880:	2302      	movs	r3, #2
  }
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08a      	sub	sp, #40	; 0x28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10d      	bne.n	80088de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d008      	beq.n	80088de <HAL_UART_IRQHandler+0x52>
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fa76 	bl	8008dc8 <UART_Receive_IT>
      return;
 80088dc:	e17b      	b.n	8008bd6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 80b1 	beq.w	8008a48 <HAL_UART_IRQHandler+0x1bc>
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d105      	bne.n	80088fc <HAL_UART_IRQHandler+0x70>
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 80a6 	beq.w	8008a48 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <HAL_UART_IRQHandler+0x90>
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	f043 0201 	orr.w	r2, r3, #1
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <HAL_UART_IRQHandler+0xb0>
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008934:	f043 0202 	orr.w	r2, r3, #2
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <HAL_UART_IRQHandler+0xd0>
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008954:	f043 0204 	orr.w	r2, r3, #4
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	f003 0308 	and.w	r3, r3, #8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00f      	beq.n	8008986 <HAL_UART_IRQHandler+0xfa>
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	f003 0320 	and.w	r3, r3, #32
 800896c:	2b00      	cmp	r3, #0
 800896e:	d104      	bne.n	800897a <HAL_UART_IRQHandler+0xee>
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d005      	beq.n	8008986 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897e:	f043 0208 	orr.w	r2, r3, #8
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 811e 	beq.w	8008bcc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	f003 0320 	and.w	r3, r3, #32
 8008996:	2b00      	cmp	r3, #0
 8008998:	d007      	beq.n	80089aa <HAL_UART_IRQHandler+0x11e>
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	f003 0320 	and.w	r3, r3, #32
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fa0f 	bl	8008dc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bf14      	ite	ne
 80089b8:	2301      	movne	r3, #1
 80089ba:	2300      	moveq	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c4:	f003 0308 	and.w	r3, r3, #8
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d102      	bne.n	80089d2 <HAL_UART_IRQHandler+0x146>
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d031      	beq.n	8008a36 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f951 	bl	8008c7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d023      	beq.n	8008a2e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	695a      	ldr	r2, [r3, #20]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d013      	beq.n	8008a26 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a02:	4a76      	ldr	r2, [pc, #472]	; (8008bdc <HAL_UART_IRQHandler+0x350>)
 8008a04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd fd7a 	bl	8006504 <HAL_DMA_Abort_IT>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d016      	beq.n	8008a44 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a24:	e00e      	b.n	8008a44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f8da 	bl	8008be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2c:	e00a      	b.n	8008a44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f8d6 	bl	8008be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a34:	e006      	b.n	8008a44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f8d2 	bl	8008be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008a42:	e0c3      	b.n	8008bcc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a44:	bf00      	nop
    return;
 8008a46:	e0c1      	b.n	8008bcc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	f040 80a1 	bne.w	8008b94 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 809b 	beq.w	8008b94 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	f003 0310 	and.w	r3, r3, #16
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 8095 	beq.w	8008b94 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	60fb      	str	r3, [r7, #12]
 8008a7e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d04e      	beq.n	8008b2c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008a98:	8a3b      	ldrh	r3, [r7, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 8098 	beq.w	8008bd0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008aa4:	8a3a      	ldrh	r2, [r7, #16]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	f080 8092 	bcs.w	8008bd0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	8a3a      	ldrh	r2, [r7, #16]
 8008ab0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	2b20      	cmp	r3, #32
 8008aba:	d02b      	beq.n	8008b14 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008aca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695a      	ldr	r2, [r3, #20]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 0201 	bic.w	r2, r2, #1
 8008ada:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695a      	ldr	r2, [r3, #20]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68da      	ldr	r2, [r3, #12]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f022 0210 	bic.w	r2, r2, #16
 8008b08:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fd fcbd 	bl	800648e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f864 	bl	8008bf2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008b2a:	e051      	b.n	8008bd0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d047      	beq.n	8008bd4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008b44:	8a7b      	ldrh	r3, [r7, #18]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d044      	beq.n	8008bd4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68da      	ldr	r2, [r3, #12]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b58:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	695a      	ldr	r2, [r3, #20]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 0201 	bic.w	r2, r2, #1
 8008b68:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f022 0210 	bic.w	r2, r2, #16
 8008b86:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b88:	8a7b      	ldrh	r3, [r7, #18]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f830 	bl	8008bf2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008b92:	e01f      	b.n	8008bd4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d008      	beq.n	8008bb0 <HAL_UART_IRQHandler+0x324>
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f8a6 	bl	8008cfa <UART_Transmit_IT>
    return;
 8008bae:	e012      	b.n	8008bd6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00d      	beq.n	8008bd6 <HAL_UART_IRQHandler+0x34a>
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d008      	beq.n	8008bd6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f8e7 	bl	8008d98 <UART_EndTransmit_IT>
    return;
 8008bca:	e004      	b.n	8008bd6 <HAL_UART_IRQHandler+0x34a>
    return;
 8008bcc:	bf00      	nop
 8008bce:	e002      	b.n	8008bd6 <HAL_UART_IRQHandler+0x34a>
      return;
 8008bd0:	bf00      	nop
 8008bd2:	e000      	b.n	8008bd6 <HAL_UART_IRQHandler+0x34a>
      return;
 8008bd4:	bf00      	nop
  }
}
 8008bd6:	3728      	adds	r7, #40	; 0x28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	08008cd3 	.word	0x08008cd3

08008be0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bc80      	pop	{r7}
 8008bf0:	4770      	bx	lr

08008bf2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b083      	sub	sp, #12
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bfe:	bf00      	nop
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bc80      	pop	{r7}
 8008c06:	4770      	bx	lr

08008c08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	4613      	mov	r3, r2
 8008c14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	88fa      	ldrh	r2, [r7, #6]
 8008c20:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	88fa      	ldrh	r2, [r7, #6]
 8008c26:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2222      	movs	r2, #34	; 0x22
 8008c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c4c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	695a      	ldr	r2, [r3, #20]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0201 	orr.w	r2, r2, #1
 8008c5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f042 0220 	orr.w	r2, r2, #32
 8008c6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bc80      	pop	{r7}
 8008c78:	4770      	bx	lr

08008c7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c90:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	695a      	ldr	r2, [r3, #20]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f022 0201 	bic.w	r2, r2, #1
 8008ca0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d107      	bne.n	8008cba <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68da      	ldr	r2, [r3, #12]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0210 	bic.w	r2, r2, #16
 8008cb8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bc80      	pop	{r7}
 8008cd0:	4770      	bx	lr

08008cd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f7ff ff77 	bl	8008be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cf2:	bf00      	nop
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b21      	cmp	r3, #33	; 0x21
 8008d0c:	d13e      	bne.n	8008d8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d16:	d114      	bne.n	8008d42 <UART_Transmit_IT+0x48>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d110      	bne.n	8008d42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	1c9a      	adds	r2, r3, #2
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	621a      	str	r2, [r3, #32]
 8008d40:	e008      	b.n	8008d54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	1c59      	adds	r1, r3, #1
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6211      	str	r1, [r2, #32]
 8008d4c:	781a      	ldrb	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	4619      	mov	r1, r3
 8008d62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10f      	bne.n	8008d88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	e000      	b.n	8008d8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d8c:	2302      	movs	r3, #2
  }
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bc80      	pop	{r7}
 8008d96:	4770      	bx	lr

08008d98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2220      	movs	r2, #32
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7fb f991 	bl	80040e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b22      	cmp	r3, #34	; 0x22
 8008dda:	f040 8099 	bne.w	8008f10 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de6:	d117      	bne.n	8008e18 <UART_Receive_IT+0x50>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d113      	bne.n	8008e18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	1c9a      	adds	r2, r3, #2
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	629a      	str	r2, [r3, #40]	; 0x28
 8008e16:	e026      	b.n	8008e66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e2a:	d007      	beq.n	8008e3c <UART_Receive_IT+0x74>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <UART_Receive_IT+0x82>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d106      	bne.n	8008e4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	e008      	b.n	8008e5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	4619      	mov	r1, r3
 8008e74:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d148      	bne.n	8008f0c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68da      	ldr	r2, [r3, #12]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 0220 	bic.w	r2, r2, #32
 8008e88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68da      	ldr	r2, [r3, #12]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	695a      	ldr	r2, [r3, #20]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0201 	bic.w	r2, r2, #1
 8008ea8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d123      	bne.n	8008f02 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0210 	bic.w	r2, r2, #16
 8008ece:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0310 	and.w	r3, r3, #16
 8008eda:	2b10      	cmp	r3, #16
 8008edc:	d10a      	bne.n	8008ef4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff fe79 	bl	8008bf2 <HAL_UARTEx_RxEventCallback>
 8008f00:	e002      	b.n	8008f08 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7fb f8d8 	bl	80040b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e002      	b.n	8008f12 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e000      	b.n	8008f12 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008f10:	2302      	movs	r3, #2
  }
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3718      	adds	r7, #24
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68da      	ldr	r2, [r3, #12]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008f56:	f023 030c 	bic.w	r3, r3, #12
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6812      	ldr	r2, [r2, #0]
 8008f5e:	68b9      	ldr	r1, [r7, #8]
 8008f60:	430b      	orrs	r3, r1
 8008f62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699a      	ldr	r2, [r3, #24]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a2c      	ldr	r2, [pc, #176]	; (8009030 <UART_SetConfig+0x114>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d103      	bne.n	8008f8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008f84:	f7fe f8d0 	bl	8007128 <HAL_RCC_GetPCLK2Freq>
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	e002      	b.n	8008f92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008f8c:	f7fe f8b8 	bl	8007100 <HAL_RCC_GetPCLK1Freq>
 8008f90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009a      	lsls	r2, r3, #2
 8008f9c:	441a      	add	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa8:	4a22      	ldr	r2, [pc, #136]	; (8009034 <UART_SetConfig+0x118>)
 8008faa:	fba2 2303 	umull	r2, r3, r2, r3
 8008fae:	095b      	lsrs	r3, r3, #5
 8008fb0:	0119      	lsls	r1, r3, #4
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	009a      	lsls	r2, r3, #2
 8008fbc:	441a      	add	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fc8:	4b1a      	ldr	r3, [pc, #104]	; (8009034 <UART_SetConfig+0x118>)
 8008fca:	fba3 0302 	umull	r0, r3, r3, r2
 8008fce:	095b      	lsrs	r3, r3, #5
 8008fd0:	2064      	movs	r0, #100	; 0x64
 8008fd2:	fb00 f303 	mul.w	r3, r0, r3
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	011b      	lsls	r3, r3, #4
 8008fda:	3332      	adds	r3, #50	; 0x32
 8008fdc:	4a15      	ldr	r2, [pc, #84]	; (8009034 <UART_SetConfig+0x118>)
 8008fde:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe2:	095b      	lsrs	r3, r3, #5
 8008fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fe8:	4419      	add	r1, r3
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4613      	mov	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009a      	lsls	r2, r3, #2
 8008ff4:	441a      	add	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009000:	4b0c      	ldr	r3, [pc, #48]	; (8009034 <UART_SetConfig+0x118>)
 8009002:	fba3 0302 	umull	r0, r3, r3, r2
 8009006:	095b      	lsrs	r3, r3, #5
 8009008:	2064      	movs	r0, #100	; 0x64
 800900a:	fb00 f303 	mul.w	r3, r0, r3
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	3332      	adds	r3, #50	; 0x32
 8009014:	4a07      	ldr	r2, [pc, #28]	; (8009034 <UART_SetConfig+0x118>)
 8009016:	fba2 2303 	umull	r2, r3, r2, r3
 800901a:	095b      	lsrs	r3, r3, #5
 800901c:	f003 020f 	and.w	r2, r3, #15
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	440a      	add	r2, r1
 8009026:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009028:	bf00      	nop
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	40013800 	.word	0x40013800
 8009034:	51eb851f 	.word	0x51eb851f

08009038 <__libc_init_array>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	2600      	movs	r6, #0
 800903c:	4d0c      	ldr	r5, [pc, #48]	; (8009070 <__libc_init_array+0x38>)
 800903e:	4c0d      	ldr	r4, [pc, #52]	; (8009074 <__libc_init_array+0x3c>)
 8009040:	1b64      	subs	r4, r4, r5
 8009042:	10a4      	asrs	r4, r4, #2
 8009044:	42a6      	cmp	r6, r4
 8009046:	d109      	bne.n	800905c <__libc_init_array+0x24>
 8009048:	f000 f822 	bl	8009090 <_init>
 800904c:	2600      	movs	r6, #0
 800904e:	4d0a      	ldr	r5, [pc, #40]	; (8009078 <__libc_init_array+0x40>)
 8009050:	4c0a      	ldr	r4, [pc, #40]	; (800907c <__libc_init_array+0x44>)
 8009052:	1b64      	subs	r4, r4, r5
 8009054:	10a4      	asrs	r4, r4, #2
 8009056:	42a6      	cmp	r6, r4
 8009058:	d105      	bne.n	8009066 <__libc_init_array+0x2e>
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009060:	4798      	blx	r3
 8009062:	3601      	adds	r6, #1
 8009064:	e7ee      	b.n	8009044 <__libc_init_array+0xc>
 8009066:	f855 3b04 	ldr.w	r3, [r5], #4
 800906a:	4798      	blx	r3
 800906c:	3601      	adds	r6, #1
 800906e:	e7f2      	b.n	8009056 <__libc_init_array+0x1e>
 8009070:	080093c0 	.word	0x080093c0
 8009074:	080093c0 	.word	0x080093c0
 8009078:	080093c0 	.word	0x080093c0
 800907c:	080093c4 	.word	0x080093c4

08009080 <memset>:
 8009080:	4603      	mov	r3, r0
 8009082:	4402      	add	r2, r0
 8009084:	4293      	cmp	r3, r2
 8009086:	d100      	bne.n	800908a <memset+0xa>
 8009088:	4770      	bx	lr
 800908a:	f803 1b01 	strb.w	r1, [r3], #1
 800908e:	e7f9      	b.n	8009084 <memset+0x4>

08009090 <_init>:
 8009090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009092:	bf00      	nop
 8009094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009096:	bc08      	pop	{r3}
 8009098:	469e      	mov	lr, r3
 800909a:	4770      	bx	lr

0800909c <_fini>:
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909e:	bf00      	nop
 80090a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090a2:	bc08      	pop	{r3}
 80090a4:	469e      	mov	lr, r3
 80090a6:	4770      	bx	lr
